!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_JP_AUTHOR	HIGASHI Hirohito	/Twitter: @h_east/
!_TAG_PROGRAM_JP_URL	http://hp.vector.co.jp/authors/VA025040/	//
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6b1J2	//
ABSOVERRIDE	scala/reflect/generic/Flags.scala	/^  final val ABSOVERRIDE   = 0x00040000    \/\/ combination of abstract & override$/;"	l
ABSTRACT	scala/reflect/generic/Flags.scala	/^  final val ABSTRACT      = 0x00000008    \/\/ abstract class, or used in conjunction with abstract override.$/;"	l
ACCESSOR	scala/reflect/generic/Flags.scala	/^  final val ACCESSOR      = 0x08000000    \/\/ a value or variable accessor (getter or setter)$/;"	l
ACK	scala/actors/threadpool/SynchronousQueue.java	/^        private static final int ACK    =  1;$/;"	f	class:SynchronousQueue.Node	file:
ALIASsym	scala/reflect/generic/PickleFormat.scala	/^  final val ALIASsym = 5$/;"	l
ALL	scala/annotation/elidable.scala	/^  final val ALL     = Int.MinValue  \/\/ Level.ALL.intValue()$/;"	l
ALTERNATIVEtree	scala/reflect/generic/PickleFormat.scala	/^    final val ALTERNATIVEtree = 16$/;"	l
ANNOTARGARRAY	scala/reflect/generic/PickleFormat.scala	/^  final val ANNOTARGARRAY = 44$/;"	l
ANNOTATEDtpe	scala/reflect/generic/PickleFormat.scala	/^  final val ANNOTATEDtpe = 42$/;"	l
ANNOTATEDtree	scala/reflect/generic/PickleFormat.scala	/^    final val ANNOTATEDtree = 39$/;"	l
ANNOTINFO	scala/reflect/generic/PickleFormat.scala	/^  final val ANNOTINFO = 43$/;"	l
ANON_CLASS_NAME	scala/reflect/generic/StdNames.scala	/^    val ANON_CLASS_NAME: NameType    = "$anon"$/;"	l
ANON_FUN_NAME	scala/reflect/generic/StdNames.scala	/^    val ANON_FUN_NAME: NameType      = "$anonfun"$/;"	l
ANY	scala/xml/dtd/ContentModel.scala	/^case object ANY extends ContentModel {$/;"	c
APPLIEDTYPEtree	scala/reflect/generic/PickleFormat.scala	/^    final val APPLIEDTYPEtree = 43$/;"	l
APPLYDYNAMICtree	scala/reflect/generic/PickleFormat.scala	/^    final val APPLYDYNAMICtree = 32$/;"	l
APPLYtree	scala/reflect/generic/PickleFormat.scala	/^    final val APPLYtree = 31$/;"	l
ARRAYVALUEtree	scala/reflect/generic/PickleFormat.scala	/^    final val ARRAYVALUEtree = 20$/;"	l
ASSERTION	scala/annotation/elidable.scala	/^  final val ASSERTION = 2000    \/\/ we should make this more granular$/;"	l
ASSIGNtree	scala/reflect/generic/PickleFormat.scala	/^    final val ASSIGNtree = 22$/;"	l
AbortPolicy	scala/actors/threadpool/ThreadPoolExecutor.java	/^        public AbortPolicy() { }$/;"	m	class:ThreadPoolExecutor.AbortPolicy
AbortPolicy	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public static class AbortPolicy implements RejectedExecutionHandler {$/;"	c	class:ThreadPoolExecutor
AbsDefinitions	scala/reflect/generic/StandardDefinitions.scala	/^  abstract class AbsDefinitions {$/;"	c
AbsLazyType	scala/reflect/generic/Types.scala	/^  trait AbsLazyType extends AbsType {$/;"	t
AbsScope	scala/reflect/generic/Scopes.scala	/^  abstract class AbsScope extends Iterable[Symbol] {$/;"	c
AbsSymbol	scala/reflect/generic/Symbols.scala	/^  abstract class AbsSymbol extends HasFlags {$/;"	c
AbsTreePrinter	scala/reflect/generic/Trees.scala	/^  abstract class AbsTreePrinter(out: PrintWriter) {$/;"	c
AbsType	scala/reflect/generic/Types.scala	/^  abstract class AbsType {$/;"	c
AbsTypeTree	scala/reflect/generic/Trees.scala	/^  abstract class AbsTypeTree extends TypTree {$/;"	c
AbstractActor	scala/actors/AbstractActor.scala	/^trait AbstractActor extends OutputChannel[Any] with CanReply[Any, Any] {$/;"	t
AbstractCollection	scala/actors/threadpool/AbstractCollection.java	/^    protected AbstractCollection() { super(); }$/;"	m	class:AbstractCollection
AbstractCollection	scala/actors/threadpool/AbstractCollection.java	/^public abstract class AbstractCollection extends java.util.AbstractCollection {$/;"	c
AbstractExecutorService	scala/actors/threadpool/AbstractExecutorService.java	/^public abstract class AbstractExecutorService implements ExecutorService {$/;"	c
AbstractFunction0	scala/runtime/AbstractFunction0.scala	/^abstract class AbstractFunction0[@specialized +R] extends Function0[R] {$/;"	c
AbstractFunction1	scala/runtime/AbstractFunction1.scala	/^abstract class AbstractFunction1[@specialized(scala.Int, scala.Long, scala.Float, scala.Double) -T1, @specialized(scala.Unit, scala.Boolean, scala.Int, scala.Float, scala.Long, scala.Double) +R] extends Function1[T1, R] {$/;"	c
AbstractFunction10	scala/runtime/AbstractFunction10.scala	/^abstract class AbstractFunction10[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, +R] extends Function10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R] {$/;"	c
AbstractFunction11	scala/runtime/AbstractFunction11.scala	/^abstract class AbstractFunction11[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, +R] extends Function11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R] {$/;"	c
AbstractFunction12	scala/runtime/AbstractFunction12.scala	/^abstract class AbstractFunction12[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, +R] extends Function12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R] {$/;"	c
AbstractFunction13	scala/runtime/AbstractFunction13.scala	/^abstract class AbstractFunction13[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, +R] extends Function13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R] {$/;"	c
AbstractFunction14	scala/runtime/AbstractFunction14.scala	/^abstract class AbstractFunction14[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, +R] extends Function14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R] {$/;"	c
AbstractFunction15	scala/runtime/AbstractFunction15.scala	/^abstract class AbstractFunction15[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, +R] extends Function15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R] {$/;"	c
AbstractFunction16	scala/runtime/AbstractFunction16.scala	/^abstract class AbstractFunction16[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, +R] extends Function16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R] {$/;"	c
AbstractFunction17	scala/runtime/AbstractFunction17.scala	/^abstract class AbstractFunction17[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, +R] extends Function17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, R] {$/;"	c
AbstractFunction18	scala/runtime/AbstractFunction18.scala	/^abstract class AbstractFunction18[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, +R] extends Function18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, R] {$/;"	c
AbstractFunction19	scala/runtime/AbstractFunction19.scala	/^abstract class AbstractFunction19[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, -T19, +R] extends Function19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, R] {$/;"	c
AbstractFunction2	scala/runtime/AbstractFunction2.scala	/^abstract class AbstractFunction2[@specialized(scala.Int, scala.Long, scala.Double) -T1, @specialized(scala.Int, scala.Long, scala.Double) -T2, @specialized(scala.Unit, scala.Boolean, scala.Int, scala.Float, scala.Long, scala.Double) +R] extends Function2[T1, T2, R] {$/;"	c
AbstractFunction20	scala/runtime/AbstractFunction20.scala	/^abstract class AbstractFunction20[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, -T19, -T20, +R] extends Function20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, R] {$/;"	c
AbstractFunction21	scala/runtime/AbstractFunction21.scala	/^abstract class AbstractFunction21[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, -T19, -T20, -T21, +R] extends Function21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, R] {$/;"	c
AbstractFunction22	scala/runtime/AbstractFunction22.scala	/^abstract class AbstractFunction22[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, -T19, -T20, -T21, -T22, +R] extends Function22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, R] {$/;"	c
AbstractFunction3	scala/runtime/AbstractFunction3.scala	/^abstract class AbstractFunction3[-T1, -T2, -T3, +R] extends Function3[T1, T2, T3, R] {$/;"	c
AbstractFunction4	scala/runtime/AbstractFunction4.scala	/^abstract class AbstractFunction4[-T1, -T2, -T3, -T4, +R] extends Function4[T1, T2, T3, T4, R] {$/;"	c
AbstractFunction5	scala/runtime/AbstractFunction5.scala	/^abstract class AbstractFunction5[-T1, -T2, -T3, -T4, -T5, +R] extends Function5[T1, T2, T3, T4, T5, R] {$/;"	c
AbstractFunction6	scala/runtime/AbstractFunction6.scala	/^abstract class AbstractFunction6[-T1, -T2, -T3, -T4, -T5, -T6, +R] extends Function6[T1, T2, T3, T4, T5, T6, R] {$/;"	c
AbstractFunction7	scala/runtime/AbstractFunction7.scala	/^abstract class AbstractFunction7[-T1, -T2, -T3, -T4, -T5, -T6, -T7, +R] extends Function7[T1, T2, T3, T4, T5, T6, T7, R] {$/;"	c
AbstractFunction8	scala/runtime/AbstractFunction8.scala	/^abstract class AbstractFunction8[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, +R] extends Function8[T1, T2, T3, T4, T5, T6, T7, T8, R] {$/;"	c
AbstractFunction9	scala/runtime/AbstractFunction9.scala	/^abstract class AbstractFunction9[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, +R] extends Function9[T1, T2, T3, T4, T5, T6, T7, T8, T9, R] {$/;"	c
AbstractMethodError	scala/package.scala	/^  type AbstractMethodError             = java.lang.AbstractMethodError$/;"	T
AbstractQueue	scala/actors/threadpool/AbstractQueue.java	/^    protected AbstractQueue() {$/;"	m	class:AbstractQueue
AbstractQueue	scala/actors/threadpool/AbstractQueue.java	/^public abstract class AbstractQueue$/;"	c
AbstractSyntax	scala/util/parsing/ast/AbstractSyntax.scala	/^trait AbstractSyntax {$/;"	t
AccessBoundaryType	scala/reflect/generic/HasFlags.scala	/^  type AccessBoundaryType$/;"	T
AccessBoundaryType	scala/reflect/generic/Symbols.scala	/^    type AccessBoundaryType = Symbol$/;"	T
AccessBoundaryType	scala/reflect/generic/Trees.scala	/^    type AccessBoundaryType = Name$/;"	T
Accessor	scala/collection/parallel/ParIterableLike.scala	/^  protected trait Accessor[R, Tp]$/;"	t
Accessor	scala/collection/parallel/ParSeqLike.scala	/^  protected trait Accessor[R, Tp] extends super.Accessor[R, Tp] {$/;"	t
Actor	scala/actors/Actor.scala	/^object Actor extends Combinators {$/;"	c
Actor	scala/actors/Actor.scala	/^trait Actor extends AbstractActor with ReplyReactor with ActorCanReply with InputChannel[Any] with Serializable {$/;"	t
ActorGC	scala/actors/package.scala	/^  val ActorGC = scala.actors.Scheduler.impl match {$/;"	l
ActorGC	scala/actors/scheduler/ActorGC.scala	/^trait ActorGC extends TerminationMonitor {$/;"	t
AdaptiveWorkStealingForkJoinTasks	scala/collection/parallel/Tasks.scala	/^trait AdaptiveWorkStealingForkJoinTasks extends ForkJoinTasks with AdaptiveWorkStealingTasks {$/;"	t
AdaptiveWorkStealingTasks	scala/collection/parallel/Tasks.scala	/^trait AdaptiveWorkStealingTasks extends Tasks {$/;"	t
AdaptiveWorkStealingThreadPoolTasks	scala/collection/parallel/Tasks.scala	/^trait AdaptiveWorkStealingThreadPoolTasks extends ThreadPoolTasks with AdaptiveWorkStealingTasks {$/;"	t
Addable	scala/collection/generic/Addable.scala	/^trait Addable[A, +Repr <: Addable[A, Repr]] { self => $/;"	t
AddingBuilder	scala/collection/mutable/AddingBuilder.scala	/^class AddingBuilder[Elem, To <: Addable[Elem, To] with collection.Iterable[Elem] with collection.IterableLike[Elem, To]](empty: To)$/;"	c
AddingFlatHashTable	scala/collection/parallel/mutable/ParHashSet.scala	/^  class AddingFlatHashTable(numelems: Int, lf: Int) extends FlatHashTable[T] {$/;"	c
Alt	scala/util/regexp/Base.scala	/^  class Alt private (val rs: _regexpT*) extends RegExp {$/;"	c
Alt	scala/util/regexp/Base.scala	/^  object Alt {$/;"	c
Alternative	scala/reflect/generic/Trees.scala	/^  case class Alternative(trees: List[Tree])$/;"	c
Annotated	scala/reflect/generic/Trees.scala	/^  case class Annotated(annot: Tree, arg: Tree) extends Tree $/;"	c
AnnotatedType	scala/reflect/generic/Types.scala	/^  type AnnotatedType <: Type$/;"	T
AnnotatedType	scala/reflect/generic/Types.scala	/^  val AnnotatedType: AnnotatedTypeExtractor$/;"	l
AnnotatedTypeExtractor	scala/reflect/generic/Types.scala	/^  abstract class AnnotatedTypeExtractor {$/;"	c
Annotation	scala/annotation/Annotation.scala	/^abstract class Annotation {}$/;"	c
Annotation	scala/package.scala	/^  type Annotation = scala.annotation.Annotation$/;"	T
AnnotationInfo	scala/reflect/generic/AnnotationInfos.scala	/^  type AnnotationInfo <: AnyRef$/;"	T
AnnotationInfo	scala/reflect/generic/AnnotationInfos.scala	/^  val AnnotationInfo: AnnotationInfoExtractor$/;"	l
AnnotationInfoExtractor	scala/reflect/generic/AnnotationInfos.scala	/^  abstract class AnnotationInfoExtractor {$/;"	c
AnnotationType	scala/reflect/generic/HasFlags.scala	/^  type AnnotationType$/;"	T
AnnotationType	scala/reflect/generic/Symbols.scala	/^    type AnnotationType     = AnnotationInfo$/;"	T
AnnotationType	scala/reflect/generic/Trees.scala	/^    type AnnotationType     = Tree$/;"	T
Any	scala/reflect/ClassManifest.scala	/^  val Any     = Manifest.Any$/;"	l
Any	scala/reflect/Manifest.scala	/^  val Any: Manifest[Any] = new ClassTypeManifest[scala.Any](None, ObjectClass, Nil) {$/;"	l
AnyClass	scala/reflect/generic/StandardDefinitions.scala	/^    def AnyClass   : Symbol$/;"	m
AnyHedgeRHS	scala/util/grammar/HedgeRHS.scala	/^case object AnyHedgeRHS extends HedgeRHS$/;"	c
AnyRef	scala/Predef.scala	/^  val AnyRef      = new SpecializableCompanion {}   \/\/ a dummy used by the specialization annotation$/;"	l
AnyRefClass	scala/reflect/generic/StandardDefinitions.scala	/^    def AnyRefClass: Symbol$/;"	m
AnyTreeRHS	scala/util/grammar/TreeRHS.scala	/^case object AnyTreeRHS extends TreeRHS$/;"	c
AnyVal	scala/AnyVal.scala	/^sealed trait AnyVal$/;"	t
AnyVal	scala/reflect/ClassManifest.scala	/^  val AnyVal  = Manifest.AnyVal$/;"	l
AnyVal	scala/reflect/Manifest.scala	/^  val AnyVal: Manifest[AnyVal] = new ClassTypeManifest[scala.AnyVal](None, ObjectClass, Nil) {$/;"	l
AnyValClass	scala/reflect/generic/StandardDefinitions.scala	/^    def AnyValClass: Symbol$/;"	m
AnyValManifest	scala/reflect/Manifest.scala	/^trait AnyValManifest[T] extends Manifest[T] with Equals {$/;"	t
App	scala/App.scala	/^trait App extends DelayedInit {$/;"	t
Appended	scala/collection/GenIterableViewLike.scala	/^  trait Appended[B >: A] extends super.Appended[B] with Transformed[B] {$/;"	t
Appended	scala/collection/GenSeqViewLike.scala	/^  trait Appended[B >: A] extends super.Appended[B] with Transformed[B] {$/;"	t
Appended	scala/collection/GenTraversableViewLike.scala	/^  trait Appended[B >: A] extends Transformed[B] {$/;"	t
Appended	scala/collection/IterableViewLike.scala	/^  trait Appended[B >: A] extends super[TraversableViewLike].Appended[B] with super[GenIterableViewLike].Appended[B] with Transformed[B]$/;"	t
Appended	scala/collection/SeqViewLike.scala	/^  trait Appended[B >: A] extends super[IterableViewLike].Appended[B] with super[GenSeqViewLike].Appended[B] with Transformed[B]$/;"	t
Appended	scala/collection/TraversableViewLike.scala	/^  trait Appended[B >: A] extends Transformed[B] with super.Appended[B]$/;"	t
Appended	scala/collection/immutable/StreamViewLike.scala	/^  trait Appended[B >: A] extends super.Appended[B] with Transformed[B]$/;"	t
Appended	scala/collection/parallel/ParIterableViewLike.scala	/^  trait Appended[U >: T] extends super.Appended[U] with Transformed[U] {$/;"	t
Appended	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Appended[U >: T] extends super[GenSeqViewLike].Appended[U] with super[ParIterableViewLike].Appended[U] with Transformed[U] {$/;"	t
Appended	scala/collection/parallel/RemainsIterator.scala	/^  class Appended[U >: T, PI <: IterableSplitter[U]](protected val that: PI) extends IterableSplitter[U] {$/;"	c
Appended	scala/collection/parallel/RemainsIterator.scala	/^  class Appended[U >: T, PI <: SeqSplitter[U]](it: PI) extends super.Appended[U, PI](it) with SeqSplitter[U] {$/;"	c
Application	scala/Application.scala	/^trait Application {$/;"	t
AppliedType	scala/reflect/Type.scala	/^case class AppliedType(tpe: Type, args: List[Type]) extends Type$/;"	c
AppliedTypeTree	scala/reflect/generic/Trees.scala	/^  case class AppliedTypeTree(tpt: Tree, args: List[Tree])$/;"	c
Apply	scala/reflect/Tree.scala	/^case class Apply(fun: Tree, args: List[Tree]) extends Tree$/;"	c
Apply	scala/reflect/generic/Trees.scala	/^  case class Apply(fun: Tree, args: List[Tree])$/;"	c
ApplyDynamic	scala/reflect/generic/Trees.scala	/^  case class ApplyDynamic(qual: Tree, args: List[Tree]) $/;"	c
Array	scala/Array.scala	/^final class Array[T](_length: Int) extends java.io.Serializable with java.lang.Cloneable {$/;"	c
Array	scala/Array.scala	/^object Array extends FallbackArrayBuilding {$/;"	c
ArrayAnnotArg	scala/reflect/generic/AnnotationInfos.scala	/^  type ArrayAnnotArg <: ClassfileAnnotArg$/;"	T
ArrayAnnotArg	scala/reflect/generic/AnnotationInfos.scala	/^  val ArrayAnnotArg: ArrayAnnotArgExtractor$/;"	l
ArrayAnnotArgExtractor	scala/reflect/generic/AnnotationInfos.scala	/^  abstract class ArrayAnnotArgExtractor {$/;"	c
ArrayBuffer	scala/collection/mutable/ArrayBuffer.scala	/^class ArrayBuffer[A](override protected val initialSize: Int) $/;"	c
ArrayBuffer	scala/collection/mutable/ArrayBuffer.scala	/^object ArrayBuffer extends SeqFactory[ArrayBuffer] {$/;"	c
ArrayBuilder	scala/collection/mutable/ArrayBuilder.scala	/^abstract class ArrayBuilder[T] extends Builder[T, Array[T]] with Serializable$/;"	c
ArrayBuilder	scala/collection/mutable/ArrayBuilder.scala	/^object ArrayBuilder {$/;"	c
ArrayIndexOutOfBoundsException	scala/package.scala	/^  type ArrayIndexOutOfBoundsException  = java.lang.ArrayIndexOutOfBoundsException$/;"	T
ArrayLike	scala/collection/mutable/ArrayLike.scala	/^trait ArrayLike[A, +Repr] extends IndexedSeqOptimized[A, Repr] { self =>$/;"	t
ArrayOps	scala/collection/mutable/ArrayOps.scala	/^abstract class ArrayOps[T] extends ArrayLike[T, Array[T]] with CustomParallelizable[T, ParArray[T]] {$/;"	c
ArrayOps	scala/collection/mutable/ArrayOps.scala	/^object ArrayOps {$/;"	c
ArrayRuntime	scala/runtime/ArrayRuntime.java	/^class ArrayRuntime {$/;"	c
ArraySeq	scala/collection/mutable/ArraySeq.scala	/^class ArraySeq[A](override val length: Int)$/;"	c
ArraySeq	scala/collection/mutable/ArraySeq.scala	/^object ArraySeq extends SeqFactory[ArraySeq] {$/;"	c
ArrayStack	scala/collection/mutable/ArrayStack.scala	/^class ArrayStack[T] private(private var table : Array[AnyRef],$/;"	c
ArrayStack	scala/collection/mutable/ArrayStack.scala	/^object ArrayStack extends SeqFactory[ArrayStack] {$/;"	c
ArrayValue	scala/reflect/generic/Trees.scala	/^  case class ArrayValue(elemtpt: Tree, elems: List[Tree])$/;"	c
Arrays	scala/actors/threadpool/Arrays.java	/^    private Arrays() {}$/;"	m	class:Arrays	file:
Arrays	scala/actors/threadpool/Arrays.java	/^public class Arrays {$/;"	c
ArrowAssoc	scala/Predef.scala	/^  final class ArrowAssoc[A](val x: A) {$/;"	c
AsJava	scala/collection/JavaConverters.scala	/^  class AsJava[C](op: => C) {$/;"	c
AsJavaCollection	scala/collection/JavaConverters.scala	/^  class AsJavaCollection[A](i: Iterable[A]) {$/;"	c
AsJavaDictionary	scala/collection/JavaConverters.scala	/^  class AsJavaDictionary[A, B](m : mutable.Map[A, B]) {$/;"	c
AsJavaEnumeration	scala/collection/JavaConverters.scala	/^  class AsJavaEnumeration[A](i: Iterator[A]) {$/;"	c
AsScala	scala/collection/JavaConverters.scala	/^  class AsScala[C](op: => C) {$/;"	c
Assert	scala/testing/SUnit.scala	/^  trait Assert {$/;"	t
AssertFailed	scala/testing/SUnit.scala	/^  case class AssertFailed(msg: String, stackTrace: Boolean) extends RuntimeException {$/;"	c
Assign	scala/reflect/Tree.scala	/^case class Assign(destination: Tree, source: Tree) extends Tree$/;"	c
Assign	scala/reflect/generic/Trees.scala	/^  case class Assign(lhs: Tree, rhs: Tree)$/;"	c
Atom	scala/xml/Atom.scala	/^class Atom[+A](val data: A) extends SpecialNode with Serializable$/;"	c
AtomicIndexFlag	scala/collection/generic/Signalling.scala	/^trait AtomicIndexFlag extends Signalling {$/;"	t
AtomicInteger	scala/actors/threadpool/AtomicInteger.java	/^    public AtomicInteger() {$/;"	m	class:AtomicInteger
AtomicInteger	scala/actors/threadpool/AtomicInteger.java	/^    public AtomicInteger(int initialValue) {$/;"	m	class:AtomicInteger
AtomicInteger	scala/actors/threadpool/AtomicInteger.java	/^public class AtomicInteger extends Number implements java.io.Serializable {$/;"	c
AttListDecl	scala/xml/dtd/Decl.scala	/^case class AttListDecl(name: String, attrs:List[AttrDecl])$/;"	c
AttrDecl	scala/xml/dtd/Decl.scala	/^case class AttrDecl(name: String, tpe: String, default: DefaultDecl) {$/;"	c
Attribute	scala/xml/Attribute.scala	/^abstract trait Attribute extends MetaData {$/;"	t
Attribute	scala/xml/Attribute.scala	/^object Attribute {$/;"	c
AttributesType	scala/xml/parsing/MarkupParser.scala	/^  type AttributesType = (MetaData, NamespaceBinding)$/;"	T
AttributesType	scala/xml/parsing/MarkupParserCommon.scala	/^  type AttributesType   \/\/ (MetaData, NamespaceBinding), mutable.Map[String, Tree]$/;"	T
BINDtree	scala/reflect/generic/PickleFormat.scala	/^    final val BINDtree = 18$/;"	l
BLACK	scala/Console.scala	/^  final val BLACK      = "\\033[30m"$/;"	l
BLACK_B	scala/Console.scala	/^  final val BLACK_B    = "\\033[40m"$/;"	l
BLINK	scala/Console.scala	/^  final val BLINK      = "\\033[5m"$/;"	l
BLOCKtree	scala/reflect/generic/PickleFormat.scala	/^    final val BLOCKtree = 13$/;"	l
BLUE	scala/Console.scala	/^  final val BLUE       = "\\033[34m"$/;"	l
BLUE_B	scala/Console.scala	/^  final val BLUE_B     = "\\033[44m"$/;"	l
BOLD	scala/Console.scala	/^  final val BOLD       = "\\033[1m"$/;"	l
BRIDGE	scala/reflect/generic/Flags.scala	/^  final val BRIDGE        = 0x04000000    \/\/ function is a bridge method. Set by Erasure$/;"	l
BYNAMEPARAM	scala/reflect/generic/Flags.scala	/^  final val BYNAMEPARAM   = 0x00010000    \/\/ parameter is by name$/;"	l
BYTE	scala/runtime/BoxesRunTime.java	/^    private static final int CHAR = 0, BYTE = 1, SHORT = 2, INT = 3, LONG = 4, FLOAT = 5, DOUBLE = 6, OTHER = 7;$/;"	f	class:BoxesRunTime	file:
BackQuotedIdent	scala/reflect/generic/Trees.scala	/^  class BackQuotedIdent(name: Name) extends Ident(name)$/;"	c
Base	scala/util/regexp/Base.scala	/^abstract class Base$/;"	c
BaseBerrySethi	scala/util/automata/BaseBerrySethi.scala	/^abstract class BaseBerrySethi {$/;"	c
BasicIO	scala/sys/process/BasicIO.scala	/^object BasicIO {$/;"	c
BasicTransformer	scala/xml/transform/BasicTransformer.scala	/^abstract class BasicTransformer extends Function1[Node,Node]$/;"	c
BeanDescription	scala/reflect/BeanDescription.scala	/^class BeanDescription(val description: String) extends annotation.Annotation$/;"	c
BeanDisplayName	scala/reflect/BeanDisplayName.scala	/^class BeanDisplayName(val name: String) extends annotation.Annotation$/;"	c
BeanInfo	scala/reflect/BeanInfo.scala	/^class BeanInfo extends annotation.Annotation$/;"	c
BeanInfoSkip	scala/reflect/BeanInfoSkip.scala	/^class BeanInfoSkip extends annotation.Annotation$/;"	c
BeanProperty	scala/reflect/BeanProperty.scala	/^class BeanProperty extends annotation.StaticAnnotation$/;"	c
Benchmark	scala/testing/Benchmark.scala	/^trait Benchmark {$/;"	t
BigDecimal	scala/collection/immutable/Range.scala	/^  object BigDecimal {$/;"	c
BigDecimal	scala/math/BigDecimal.scala	/^class BigDecimal($/;"	c
BigDecimal	scala/math/BigDecimal.scala	/^object BigDecimal {$/;"	c
BigDecimal	scala/math/Ordering.scala	/^  implicit object BigDecimal extends BigDecimalOrdering$/;"	c
BigDecimal	scala/package.scala	/^  type BigDecimal = scala.math.BigDecimal$/;"	T
BigDecimal	scala/package.scala	/^  val BigDecimal = scala.math.BigDecimal$/;"	l
BigDecimalAsIfIntegral	scala/math/Numeric.scala	/^  object BigDecimalAsIfIntegral extends BigDecimalAsIfIntegral with Ordering.BigDecimalOrdering$/;"	c
BigDecimalAsIfIntegral	scala/math/Numeric.scala	/^  trait BigDecimalAsIfIntegral extends BigDecimalIsConflicted with Integral[BigDecimal] {$/;"	t
BigDecimalIsConflicted	scala/math/Numeric.scala	/^  trait BigDecimalIsConflicted extends Numeric[BigDecimal] {$/;"	t
BigDecimalIsFractional	scala/math/Numeric.scala	/^  implicit object BigDecimalIsFractional extends BigDecimalIsFractional with Ordering.BigDecimalOrdering  $/;"	c
BigDecimalIsFractional	scala/math/Numeric.scala	/^  trait BigDecimalIsFractional extends BigDecimalIsConflicted with Fractional[BigDecimal] {$/;"	t
BigDecimalOrdering	scala/math/Ordering.scala	/^  trait BigDecimalOrdering extends Ordering[BigDecimal] {$/;"	t
BigInt	scala/collection/immutable/Range.scala	/^  object BigInt {$/;"	c
BigInt	scala/math/BigInt.scala	/^class BigInt(val bigInteger: BigInteger) extends ScalaNumber with ScalaNumericConversions with Serializable$/;"	c
BigInt	scala/math/BigInt.scala	/^object BigInt {$/;"	c
BigInt	scala/math/Ordering.scala	/^  implicit object BigInt extends BigIntOrdering$/;"	c
BigInt	scala/package.scala	/^  type BigInt = scala.math.BigInt$/;"	T
BigInt	scala/package.scala	/^  val BigInt = scala.math.BigInt$/;"	l
BigIntIsIntegral	scala/math/Numeric.scala	/^  implicit object BigIntIsIntegral extends BigIntIsIntegral with Ordering.BigIntOrdering$/;"	c
BigIntIsIntegral	scala/math/Numeric.scala	/^  trait BigIntIsIntegral extends Integral[BigInt] {$/;"	t
BigIntOrdering	scala/math/Ordering.scala	/^  trait BigIntOrdering extends Ordering[BigInt] {$/;"	t
Bind	scala/reflect/generic/Trees.scala	/^  case class Bind(name: Name, body: Tree)$/;"	c
Binder	scala/xml/factory/Binder.scala	/^abstract class Binder(val preserveWS: Boolean) extends ValidatingMarkupHandler {$/;"	c
BinderEnv	scala/util/parsing/ast/Binders.scala	/^  abstract class BinderEnv {$/;"	c
Binders	scala/util/parsing/ast/Binders.scala	/^trait Binders extends AbstractSyntax with Mappable {$/;"	t
BindingSensitive	scala/util/parsing/ast/Binders.scala	/^  trait BindingSensitive {$/;"	t
BitSet	scala/collection/BitSet.scala	/^object BitSet extends BitSetFactory[BitSet] {$/;"	c
BitSet	scala/collection/BitSet.scala	/^trait BitSet extends Set[Int] $/;"	t
BitSet	scala/collection/immutable/BitSet.scala	/^abstract class BitSet extends Set[Int]  $/;"	c
BitSet	scala/collection/immutable/BitSet.scala	/^object BitSet extends BitSetFactory[BitSet] {$/;"	c
BitSet	scala/collection/mutable/BitSet.scala	/^class BitSet(protected var elems: Array[Long]) extends Set[Int] $/;"	c
BitSet	scala/collection/mutable/BitSet.scala	/^object BitSet extends BitSetFactory[BitSet] {$/;"	c
BitSet1	scala/collection/immutable/BitSet.scala	/^  class BitSet1(val elems: Long) extends BitSet {$/;"	c
BitSet2	scala/collection/immutable/BitSet.scala	/^  class BitSet2(val elems0: Long, elems1: Long) extends BitSet {$/;"	c
BitSetFactory	scala/collection/generic/BitSetFactory.scala	/^trait BitSetFactory[Coll <: BitSet with BitSetLike[Coll]] { $/;"	t
BitSetLike	scala/collection/BitSetLike.scala	/^object BitSetLike {$/;"	c
BitSetLike	scala/collection/BitSetLike.scala	/^trait BitSetLike[+This <: BitSetLike[This] with Set[Int]] extends SetLike[Int, This] { self =>$/;"	t
BitSetN	scala/collection/immutable/BitSet.scala	/^  class BitSetN(val elems: Array[Long]) extends BitSet {$/;"	c
BlackTree	scala/collection/immutable/RedBlack.scala	/^  case class BlackTree[+B](override val key: A,$/;"	c
Block	scala/reflect/Tree.scala	/^case class Block(stats: List[Tree], expr: Tree) extends Tree$/;"	c
Block	scala/reflect/generic/Trees.scala	/^  case class Block(stats: List[Tree], expr: Tree)$/;"	c
BlockingQueue	scala/actors/threadpool/BlockingQueue.java	/^public interface BlockingQueue<E> extends java.util.Queue<E> {$/;"	i
Boolean	scala/Boolean.scala	/^final class Boolean extends AnyVal {$/;"	c
Boolean	scala/Boolean.scala	/^object Boolean extends AnyValCompanion {$/;"	c
Boolean	scala/math/Ordering.scala	/^  implicit object Boolean extends BooleanOrdering$/;"	c
Boolean	scala/reflect/ClassManifest.scala	/^  val Boolean = Manifest.Boolean$/;"	l
Boolean	scala/reflect/Manifest.scala	/^  val Boolean: AnyValManifest[Boolean] = new AnyValManifest[scala.Boolean] {$/;"	l
Boolean2boolean	scala/Predef.scala	/^  implicit def Boolean2boolean(x: java.lang.Boolean): Boolean = x.booleanValue$/;"	m
Boolean2booleanNullConflict	scala/LowPriorityImplicits.scala	/^  implicit def Boolean2booleanNullConflict(x: Null): Boolean = sys.error("value error")$/;"	m
BooleanBeanProperty	scala/reflect/BooleanBeanProperty.scala	/^class BooleanBeanProperty extends annotation.StaticAnnotation$/;"	c
BooleanClass	scala/reflect/generic/StandardDefinitions.scala	/^    def BooleanClass: Symbol$/;"	m
BooleanOrdering	scala/math/Ordering.scala	/^  trait BooleanOrdering extends Ordering[Boolean] {$/;"	t
BooleanProp	scala/sys/BooleanProp.scala	/^object BooleanProp {$/;"	c
BooleanProp	scala/sys/BooleanProp.scala	/^trait BooleanProp extends Prop[Boolean] {$/;"	t
BooleanPropImpl	scala/sys/BooleanProp.scala	/^  class BooleanPropImpl(key: String, valueFn: String => Boolean) extends PropImpl(key, valueFn) with BooleanProp {$/;"	c
BooleanRef	scala/runtime/BooleanRef.java	/^    public BooleanRef(boolean elem) { this.elem = elem; }$/;"	m	class:BooleanRef
BooleanRef	scala/runtime/BooleanRef.java	/^public class BooleanRef implements java.io.Serializable {$/;"	c
BooleanTag	scala/reflect/generic/Constants.scala	/^  final val BooleanTag = 2$/;"	l
BoundElement	scala/util/parsing/ast/Binders.scala	/^  case class BoundElement[boundElement <: NameElement](el: boundElement, scope: Scope[boundElement]) extends NameElement with Proxy with BindingSensitive { $/;"	c
Box	scala/xml/PrettyPrinter.scala	/^  case class Box(col: Int, s: String) extends Item$/;"	c
Boxed	scala/runtime/Boxed.scala	/^trait Boxed {$/;"	t
BoxedUnit	scala/runtime/BoxedUnit.java	/^    private BoxedUnit() { }$/;"	m	class:BoxedUnit	file:
BoxedUnit	scala/runtime/BoxedUnit.java	/^public final class BoxedUnit implements java.io.Serializable {$/;"	c
BoxesRunTime	scala/runtime/BoxesRunTime.java	/^public final class BoxesRunTime$/;"	c
Break	scala/xml/PrettyPrinter.scala	/^  case object Break extends Item {$/;"	c
BreakControl	scala/util/control/Breaks.scala	/^private class BreakControl extends ControlThrowable$/;"	c
Breaks	scala/util/control/Breaks.scala	/^class Breaks {$/;"	c
Breaks	scala/util/control/Breaks.scala	/^object Breaks extends Breaks$/;"	c
BrokenException	scala/xml/PrettyPrinter.scala	/^  class BrokenException() extends java.lang.Exception$/;"	c
BufSize	scala/actors/remote/TcpService.scala	/^  var BufSize: Int = 65536$/;"	l
Buffer	scala/collection/mutable/Buffer.scala	/^object Buffer extends SeqFactory[Buffer] {$/;"	c
Buffer	scala/collection/mutable/Buffer.scala	/^trait Buffer[A] extends Seq[A] $/;"	t
BufferLike	scala/collection/mutable/BufferLike.scala	/^trait BufferLike[A, +This <: BufferLike[A, This] with Buffer[A]] $/;"	t
BufferProxy	scala/collection/mutable/BufferProxy.scala	/^trait BufferProxy[A] extends Buffer[A] with Proxy {$/;"	t
BufferSize	scala/sys/process/BasicIO.scala	/^  final val BufferSize = 8192$/;"	l
BufferedIterator	scala/collection/BufferedIterator.scala	/^trait BufferedIterator[+A] extends Iterator[A] {$/;"	t
BufferedIterator	scala/package.scala	/^  type BufferedIterator[+A] = scala.collection.BufferedIterator[A]$/;"	T
BufferedLineIterator	scala/io/BufferedSource.scala	/^  class BufferedLineIterator extends Iterator[String] {$/;"	c
BufferedSource	scala/io/BufferedSource.scala	/^class BufferedSource(inputStream: InputStream, bufferSize: Int)(implicit val codec: Codec) extends Source {  $/;"	c
Builder	scala/collection/mutable/Builder.scala	/^trait Builder[-Elem, +To] extends Growable[Elem] {$/;"	t
BuilderOps	scala/collection/parallel/ParIterableLike.scala	/^  trait BuilderOps[Elem, To] {$/;"	t
By	scala/util/control/Exception.scala	/^  class By[T,R](f: T => R) {$/;"	c
ByOne	scala/collection/immutable/Range.scala	/^  trait ByOne extends Range {$/;"	t
Byte	scala/Byte.scala	/^final class Byte extends AnyVal {$/;"	c
Byte	scala/Byte.scala	/^object Byte extends AnyValCompanion {$/;"	c
Byte	scala/math/Ordering.scala	/^  implicit object Byte extends ByteOrdering$/;"	c
Byte	scala/reflect/ClassManifest.scala	/^  val Byte    = Manifest.Byte$/;"	l
Byte	scala/reflect/Manifest.scala	/^  val Byte: AnyValManifest[Byte] = new AnyValManifest[scala.Byte] {$/;"	l
Byte2byte	scala/Predef.scala	/^  implicit def Byte2byte(x: java.lang.Byte): Byte             = x.byteValue$/;"	m
Byte2byteNullConflict	scala/LowPriorityImplicits.scala	/^  implicit def Byte2byteNullConflict(x: Null): Byte          = sys.error("value error")$/;"	m
ByteClass	scala/reflect/generic/StandardDefinitions.scala	/^    def ByteClass   : Symbol$/;"	m
ByteCodecs	scala/reflect/generic/ByteCodecs.scala	/^object ByteCodecs { $/;"	c
ByteIsIntegral	scala/math/Numeric.scala	/^  implicit object ByteIsIntegral extends ByteIsIntegral with Ordering.ByteOrdering$/;"	c
ByteIsIntegral	scala/math/Numeric.scala	/^  trait ByteIsIntegral extends Integral[Byte] {$/;"	t
ByteOrdering	scala/math/Ordering.scala	/^  trait ByteOrdering extends Ordering[Byte] {$/;"	t
BytePickle	scala/io/BytePickle.scala	/^object BytePickle {$/;"	c
ByteRef	scala/runtime/ByteRef.java	/^    public ByteRef(byte elem) { this.elem = elem; }$/;"	m	class:ByteRef
ByteRef	scala/runtime/ByteRef.java	/^public class ByteRef implements java.io.Serializable {$/;"	c
ByteTag	scala/reflect/generic/Constants.scala	/^  final val ByteTag    = 3$/;"	l
C	scala/actors/Channel.scala	/^    val C = this.asInstanceOf[Channel[Any]]$/;"	l
C	scala/actors/ReactChannel.scala	/^    val C = this$/;"	l
C0	scala/actors/threadpool/TimeUnit.java	/^    static final long C0 = 1;$/;"	f	class:TimeUnit
C1	scala/actors/threadpool/TimeUnit.java	/^    static final long C1 = C0 * 1000;$/;"	f	class:TimeUnit
C2	scala/actors/threadpool/TimeUnit.java	/^    static final long C2 = C1 * 1000;$/;"	f	class:TimeUnit
C3	scala/actors/threadpool/TimeUnit.java	/^    static final long C3 = C2 * 1000;$/;"	f	class:TimeUnit
C4	scala/actors/threadpool/TimeUnit.java	/^    static final long C4 = C3 * 60;$/;"	f	class:TimeUnit
C5	scala/actors/threadpool/TimeUnit.java	/^    static final long C5 = C4 * 60;$/;"	f	class:TimeUnit
C6	scala/actors/threadpool/TimeUnit.java	/^    static final long C6 = C5 * 24;$/;"	f	class:TimeUnit
CACHE	scala/xml/factory/LoggedNodeFactory.scala	/^  final val CACHE = 1$/;"	l
CANCEL	scala/actors/threadpool/SynchronousQueue.java	/^        private static final int CANCEL = -1;$/;"	f	class:SynchronousQueue.Node	file:
CANCELLED	scala/actors/threadpool/FutureTask.java	/^    private static final int CANCELLED = 4;$/;"	f	class:FutureTask	file:
CAPACITY	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private static final int CAPACITY   = (1 << COUNT_BITS) - 1;$/;"	f	class:ThreadPoolExecutor	file:
CAPTURED	scala/reflect/generic/Flags.scala	/^  final val CAPTURED      = 0x00010000    \/\/ variable is accessed from nested function.  Set by LambdaLift.$/;"	l
CASE	scala/reflect/generic/Flags.scala	/^  final val CASE          = 0x00000800$/;"	l
CASEACCESSOR	scala/reflect/generic/Flags.scala	/^  final val CASEACCESSOR  = 0x01000000    \/\/ symbol is a case parameter (or its accessor)$/;"	l
CASEtree	scala/reflect/generic/PickleFormat.scala	/^    final val CASEtree = 14$/;"	l
CHAR	scala/runtime/BoxesRunTime.java	/^    private static final int CHAR = 0, BYTE = 1, SHORT = 2, INT = 3, LONG = 4, FLOAT = 5, DOUBLE = 6, OTHER = 7;$/;"	f	class:BoxesRunTime	file:
CHECK_RATE	scala/collection/parallel/package.scala	/^  val CHECK_RATE = 512$/;"	l
CHILDREN	scala/reflect/generic/PickleFormat.scala	/^  final val CHILDREN = 41$/;"	l
CHOICE	scala/xml/dtd/Tokens.scala	/^  final val CHOICE       = 9$/;"	l
CLASSINFOtpe	scala/reflect/generic/PickleFormat.scala	/^  final val CLASSINFOtpe = 19$/;"	l
CLASSsym	scala/reflect/generic/PickleFormat.scala	/^  final val CLASSsym = 6$/;"	l
CLASStree	scala/reflect/generic/PickleFormat.scala	/^    final val CLASStree = 3$/;"	l
COLUMN_BITS	scala/io/Position.scala	/^  final val COLUMN_BITS = 31 - LINE_BITS \/\/ no negatives => 31$/;"	l
COLUMN_MASK	scala/io/Position.scala	/^  final val COLUMN_MASK = (1 << COLUMN_BITS) - 1$/;"	l
COMMA	scala/xml/dtd/Tokens.scala	/^  final val COMMA        = 5$/;"	l
COMPOUNDTYPEtree	scala/reflect/generic/PickleFormat.scala	/^    final val COMPOUNDTYPEtree = 42$/;"	l
CONFIG	scala/annotation/elidable.scala	/^  final val CONFIG  = 700           \/\/ Level.CONFIG.intValue()$/;"	l
CONSTANTtpe	scala/reflect/generic/PickleFormat.scala	/^  final val CONSTANTtpe = 15$/;"	l
CONTRAVARIANT	scala/reflect/generic/Flags.scala	/^  final val CONTRAVARIANT = 0x00020000    \/\/ symbol is a contravariant type variable$/;"	l
COUNT_BITS	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private static final int COUNT_BITS = 29; \/\/ Integer.SIZE - 3;$/;"	f	class:ThreadPoolExecutor	file:
COVARIANT	scala/reflect/generic/Flags.scala	/^  final val COVARIANT     = 0x00010000    \/\/ symbol is a covariant type variable$/;"	l
CYAN	scala/Console.scala	/^  final val CYAN       = "\\033[36m"$/;"	l
CYAN_B	scala/Console.scala	/^  final val CYAN_B     = "\\033[46m"$/;"	l
CachedFileStorage	scala/xml/persistent/CachedFileStorage.scala	/^abstract class CachedFileStorage(private val file1: File) extends Thread with Logged {$/;"	c
Call	scala/util/control/TailCalls.scala	/^  protected case class Call[A](rest: () => TailRec[A]) extends TailRec[A]$/;"	c
Callable	scala/actors/threadpool/Callable.java	/^public interface Callable {$/;"	i
CallerRunsPolicy	scala/actors/threadpool/ThreadPoolExecutor.java	/^        public CallerRunsPolicy() { }$/;"	m	class:ThreadPoolExecutor.CallerRunsPolicy
CallerRunsPolicy	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public static class CallerRunsPolicy implements RejectedExecutionHandler {$/;"	c	class:ThreadPoolExecutor
CanBuild	scala/collection/generic/package.scala	/^  type CanBuild[-Elem, +To] = CanBuildFrom[Nothing, Elem, To]$/;"	T
CanBuildFrom	scala/collection/generic/CanBuildFrom.scala	/^trait CanBuildFrom[-From, -Elem, +To] {$/;"	t
CanCombineFrom	scala/collection/generic/CanCombineFrom.scala	/^trait CanCombineFrom[-From, -Elem, +To] extends CanBuildFrom[From, Elem, To] with Parallel {$/;"	t
CanCombineFromMap	scala/collection/generic/ParMapFactory.scala	/^  class CanCombineFromMap[K, V] extends CanCombineFrom[CC[_, _], (K, V), CC[K, V]] {$/;"	c
CanReply	scala/actors/CanReply.scala	/^trait CanReply[-T, +R] {$/;"	t
CancellationException	scala/actors/threadpool/CancellationException.java	/^    public CancellationException() {}$/;"	m	class:CancellationException
CancellationException	scala/actors/threadpool/CancellationException.java	/^    public CancellationException(String message) {$/;"	m	class:CancellationException
CancellationException	scala/actors/threadpool/CancellationException.java	/^public class CancellationException extends IllegalStateException {$/;"	c
CaseDef	scala/reflect/generic/Trees.scala	/^  case class CaseDef(pat: Tree, guard: Tree, body: Tree)$/;"	c
Catch	scala/runtime/ScalaRunTime.scala	/^    def Catch[B >: A](handler: PartialFunction[Throwable, B]): B =$/;"	m
Catch	scala/runtime/ScalaRunTime.scala	/^    def Catch[B >: A](handler: PartialFunction[Throwable, B]): B$/;"	m
Catch	scala/util/control/Exception.scala	/^  class Catch[+T]($/;"	c
Catcher	scala/util/control/Exception.scala	/^  type Catcher[+T] = PartialFunction[Throwable, T]$/;"	T
Cell	scala/Cell.scala	/^case class Cell[+T](elem: T)$/;"	c
Chan	scala/concurrent/pilib.scala	/^  class Chan[A] extends UChan with Function1[A, Product[A]] {$/;"	c
Channel	scala/actors/Channel.scala	/^class Channel[Msg](val receiver: Actor) extends InputChannel[Msg] with OutputChannel[Msg] with CanReply[Msg, Any] {$/;"	c
Channel	scala/concurrent/Channel.scala	/^class Channel[A] {$/;"	c
Char	scala/Char.scala	/^final class Char extends AnyVal {$/;"	c
Char	scala/Char.scala	/^object Char extends AnyValCompanion {$/;"	c
Char	scala/math/Ordering.scala	/^  implicit object Char extends CharOrdering$/;"	c
Char	scala/reflect/ClassManifest.scala	/^  val Char    = Manifest.Char$/;"	l
Char	scala/reflect/Manifest.scala	/^  val Char: AnyValManifest[Char] = new AnyValManifest[scala.Char] {$/;"	l
CharArrayReader	scala/util/parsing/input/CharArrayReader.scala	/^class CharArrayReader(chars: Array[Char], index: Int) $/;"	c
CharArrayReader	scala/util/parsing/input/CharArrayReader.scala	/^object CharArrayReader {$/;"	c
CharClass	scala/reflect/generic/StandardDefinitions.scala	/^    def CharClass   : Symbol$/;"	m
CharIsIntegral	scala/math/Numeric.scala	/^  implicit object CharIsIntegral extends CharIsIntegral with Ordering.CharOrdering$/;"	c
CharIsIntegral	scala/math/Numeric.scala	/^  trait CharIsIntegral extends Integral[Char] {$/;"	t
CharOrdering	scala/math/Ordering.scala	/^  trait CharOrdering extends Ordering[Char] {$/;"	t
CharRef	scala/runtime/CharRef.java	/^    public CharRef(char elem) { this.elem = elem; }$/;"	m	class:CharRef
CharRef	scala/runtime/CharRef.java	/^public class CharRef implements java.io.Serializable {$/;"	c
CharSequenceReader	scala/util/parsing/input/CharSequenceReader.scala	/^class CharSequenceReader(override val source: java.lang.CharSequence, $/;"	c
CharSequenceReader	scala/util/parsing/input/CharSequenceReader.scala	/^object CharSequenceReader {$/;"	c
CharTag	scala/reflect/generic/Constants.scala	/^  final val CharTag    = 5$/;"	l
Character	scala/package.scala	/^  type Character = java.lang.Character$/;"	T
Character2char	scala/Predef.scala	/^  implicit def Character2char(x: java.lang.Character): Char   = x.charValue$/;"	m
Character2charNullConflict	scala/LowPriorityImplicits.scala	/^  implicit def Character2charNullConflict(x: Null): Char     = sys.error("value error")$/;"	m
CircularIncludeException	scala/xml/include/CircularIncludeException.scala	/^class CircularIncludeException(message: String) extends XIncludeException {$/;"	c
Class	scala/Predef.scala	/^  type Class[T]      = java.lang.Class[T]$/;"	T
Class	scala/reflect/Symbol.scala	/^case class Class(override val fullname: String) extends GlobalSymbol(fullname) {$/;"	c
ClassCastException	scala/package.scala	/^  type ClassCastException              = java.lang.ClassCastException$/;"	T
ClassClass	scala/reflect/generic/StandardDefinitions.scala	/^    def ClassClass  : Symbol$/;"	m
ClassDef	scala/reflect/Tree.scala	/^case class ClassDef(sym: Symbol, tpe: Type, impl: Template) extends Tree$/;"	c
ClassDef	scala/reflect/generic/Trees.scala	/^  case class ClassDef(mods: Modifiers, name: TypeName, tparams: List[TypeDef], impl: Template)$/;"	c
ClassInfoType	scala/reflect/generic/Types.scala	/^  type ClassInfoType <: CompoundType$/;"	T
ClassInfoType	scala/reflect/generic/Types.scala	/^  val ClassInfoType: ClassInfoTypeExtractor$/;"	l
ClassInfoTypeExtractor	scala/reflect/generic/Types.scala	/^  abstract class ClassInfoTypeExtractor {$/;"	c
ClassManifest	scala/Predef.scala	/^  type ClassManifest[T] = scala.reflect.ClassManifest[T]$/;"	T
ClassManifest	scala/Predef.scala	/^  val ClassManifest     = scala.reflect.ClassManifest$/;"	l
ClassManifest	scala/reflect/ClassManifest.scala	/^object ClassManifest {$/;"	c
ClassManifest	scala/reflect/ClassManifest.scala	/^trait ClassManifest[T] extends OptManifest[T] with Equals with Serializable {$/;"	t
ClassManifestTraversableFactory	scala/collection/generic/ClassManifestTraversableFactory.scala	/^abstract class ClassManifestTraversableFactory[CC[X] <: Traversable[X] with GenericClassManifestTraversableTemplate[X, CC]]$/;"	c
ClassTag	scala/reflect/generic/Constants.scala	/^  final val ClassTag   = 12$/;"	l
ClassType	scala/reflect/generic/StandardDefinitions.scala	/^    def ClassType(arg: Type): Type$/;"	m
ClassTypeManifest	scala/reflect/ClassManifest.scala	/^private class ClassTypeManifest[T <: AnyRef]($/;"	c
ClassTypeManifest	scala/reflect/Manifest.scala	/^  private class ClassTypeManifest[T](prefix: Option[Manifest[_]], $/;"	c
ClassfileAnnotArg	scala/reflect/generic/AnnotationInfos.scala	/^  type ClassfileAnnotArg <: AnyRef$/;"	T
ClassfileAnnotation	scala/annotation/ClassfileAnnotation.scala	/^trait ClassfileAnnotation extends StaticAnnotation$/;"	t
ClassfileAnnotation	scala/package.scala	/^  type ClassfileAnnotation = scala.annotation.ClassfileAnnotation$/;"	T
Cloneable	scala/collection/mutable/Cloneable.scala	/^trait Cloneable[+A <: AnyRef] {$/;"	t
Closeable	scala/sys/process/package.scala	/^      type Closeable       = java.io.Closeable$/;"	T
Code	scala/reflect/Code.scala	/^class Code[T](val tree: Tree)$/;"	c
Code	scala/reflect/Code.scala	/^object Code {$/;"	c
Codec	scala/io/Codec.scala	/^class Codec(val charSet: Charset) {$/;"	c
Codec	scala/io/Codec.scala	/^object Codec extends LowPriorityCodecImplicits {$/;"	c
Coll	scala/collection/IterableView.scala	/^  type Coll = TraversableView[_, C] forSome {type C <: Traversable[_]}$/;"	T
Coll	scala/collection/SeqView.scala	/^  type Coll = TraversableView[_, C] forSome {type C <: Traversable[_]}$/;"	T
Coll	scala/collection/TraversableView.scala	/^  type Coll = TraversableView[_, C] forSome {type C <: Traversable[_]}$/;"	T
Coll	scala/collection/generic/GenMapFactory.scala	/^  type Coll = CC[_, _]$/;"	T
Coll	scala/collection/generic/GenericClassManifestCompanion.scala	/^  type Coll = CC[_]$/;"	T
Coll	scala/collection/generic/GenericCompanion.scala	/^  type Coll = CC[_]  $/;"	T
Coll	scala/collection/generic/GenericOrderedCompanion.scala	/^  type Coll = CC[_]$/;"	T
Coll	scala/collection/generic/SortedMapFactory.scala	/^  type Coll = CC[_, _]$/;"	T
Coll	scala/collection/generic/SortedSetFactory.scala	/^  type Coll = CC[_]$/;"	T
Coll	scala/collection/mutable/IndexedSeqView.scala	/^  type Coll = TraversableView[_, C] forSome {type C <: Traversable[_]}$/;"	T
Coll	scala/collection/parallel/ParIterableView.scala	/^  type Coll = ParIterableView[_, C, _] forSome { type C <: ParIterable[_] }$/;"	T
Coll	scala/collection/parallel/ParSeqView.scala	/^  type Coll = ParSeqView[_, C, _] forSome { type C <: ParSeq[_] }$/;"	T
Coll	scala/xml/NodeSeq.scala	/^  type Coll = NodeSeq$/;"	T
Collection	scala/package.scala	/^  type Collection[+A] = Iterable[A]$/;"	T
Collection	scala/package.scala	/^  val Collection = Iterable$/;"	l
CombinationsItr	scala/collection/SeqLike.scala	/^  private class CombinationsItr(n: Int) extends Iterator[Repr] {$/;"	c
Combiner	scala/collection/parallel/Combiner.scala	/^trait Combiner[-Elem, +To] extends Builder[Elem, To] with Sizing with Parallel {$/;"	t
Comment	scala/xml/Comment.scala	/^case class Comment(commentText: String) extends SpecialNode$/;"	c
CompletionService	scala/actors/threadpool/CompletionService.java	/^public interface CompletionService {$/;"	i
CompositeThrowable	scala/collection/parallel/package.scala	/^  final class CompositeThrowable(val throwables: Set[Throwable])$/;"	c
CompoundType	scala/reflect/generic/Types.scala	/^  type CompoundType <: Type$/;"	T
CompoundTypeTree	scala/reflect/generic/Trees.scala	/^  case class CompoundTypeTree(templ: Template)$/;"	c
ConcurrentMap	scala/collection/mutable/ConcurrentMap.scala	/^trait ConcurrentMap[A, B] extends Map[A, B] {$/;"	t
ConcurrentMapWrapper	scala/collection/JavaConversions.scala	/^  class ConcurrentMapWrapper[A, B](override val underlying: mutable.ConcurrentMap[A, B])$/;"	c
ConcurrentModificationException	scala/compat/Platform.scala	/^  type ConcurrentModificationException = java.util.ConcurrentModificationException$/;"	T
CondVar	scala/actors/threadpool/locks/CondVar.java	/^    CondVar(ExclusiveLock lock) {$/;"	m	class:CondVar
CondVar	scala/actors/threadpool/locks/CondVar.java	/^class CondVar implements Condition, java.io.Serializable {$/;"	c
Condition	scala/actors/threadpool/locks/Condition.java	/^public interface Condition {$/;"	i
Configure	scala/io/Codec.scala	/^  type Configure[T] = (T => T, Boolean)$/;"	T
Cons	scala/collection/immutable/Stream.scala	/^  final class Cons[+A](hd: A, tl: => Stream[A]) extends Stream[A] with Serializable {$/;"	c
ConsRHS	scala/util/grammar/HedgeRHS.scala	/^case class ConsRHS(tnt: Int, hnt: Int) extends HedgeRHS$/;"	c
ConsWrapper	scala/collection/immutable/Stream.scala	/^  class ConsWrapper[A](tl: => Stream[A]) {$/;"	c
Console	scala/Console.scala	/^object Console {$/;"	c
ConsoleErrorHandler	scala/xml/parsing/FactoryAdapter.scala	/^trait ConsoleErrorHandler extends DefaultHandler {$/;"	t
ConsoleLogger	scala/util/logging/ConsoleLogger.scala	/^trait ConsoleLogger extends Logged {$/;"	t
Constant	scala/annotation/switch.scala	/^  val Constant = 'Q'$/;"	l
Constant	scala/reflect/generic/Constants.scala	/^  case class Constant(value: Any) {$/;"	c
ConstantImpl	scala/sys/BooleanProp.scala	/^  class ConstantImpl(val key: String, val value: Boolean) extends BooleanProp {$/;"	c
ConstantType	scala/reflect/generic/Types.scala	/^  type ConstantType <: Type$/;"	T
ConstantType	scala/reflect/generic/Types.scala	/^  val ConstantType: ConstantTypeExtractor$/;"	l
ConstantTypeExtractor	scala/reflect/generic/Types.scala	/^  abstract class ConstantTypeExtractor {$/;"	c
ConstructingHandler	scala/xml/parsing/ConstructingHandler.scala	/^abstract class ConstructingHandler extends MarkupHandler$/;"	c
ConstructingParser	scala/xml/parsing/ConstructingParser.scala	/^class ConstructingParser(val input: Source, val preserveWS: Boolean)$/;"	c
ConstructingParser	scala/xml/parsing/ConstructingParser.scala	/^object ConstructingParser {$/;"	c
ContentModel	scala/xml/dtd/ContentModel.scala	/^object ContentModel extends WordExp {$/;"	c
ContentModel	scala/xml/dtd/ContentModel.scala	/^sealed abstract class ContentModel$/;"	c
ContentModelParser	scala/xml/dtd/ContentModelParser.scala	/^object ContentModelParser extends Scanner { \/\/ a bit too permissive concerning #PCDATA$/;"	c
Contents	scala/collection/mutable/FlatHashTable.scala	/^  class Contents[A]($/;"	c
Contents	scala/collection/mutable/HashTable.scala	/^  class Contents[A, Entry >: Null <: HashEntry[A, Entry]]($/;"	c
ControlContext	scala/util/continuations/ControlContext.scala	/^final class ControlContext[+A,-B,+C](val fun: (A => B, Exception => B) => C, val x: A) extends Serializable {$/;"	c
ControlThrowable	scala/util/control/ControlThrowable.scala	/^trait ControlThrowable extends Throwable with NoStackTrace$/;"	t
Copy	scala/collection/parallel/ParIterableLike.scala	/^  protected class Copy[U >: T, That](cfactory: () => Combiner[U, That], protected[this] val pit: IterableSplitter[T])$/;"	c
CopyChainToArray	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^  class CopyChainToArray(array: Array[Any], offset: Int, howmany: Int) extends Task[Unit, CopyChainToArray] {$/;"	c
CopyUnrolledToArray	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^  class CopyUnrolledToArray(array: Array[Any], offset: Int, howmany: Int)$/;"	c
CountedIterator	scala/CountedIterator.scala	/^trait CountedIterator[+A] extends Iterator[A] {$/;"	t
CreateGroupedTrie	scala/collection/parallel/immutable/ParHashMap.scala	/^  class CreateGroupedTrie[Repr](cbf: () => Combiner[V, Repr], bucks: Array[Unrolled[(K, V)]], root: Array[HashMap[K, AnyRef]], offset: Int, howmany: Int)$/;"	c
CreateTrie	scala/collection/parallel/immutable/ParHashMap.scala	/^  class CreateTrie(bucks: Array[Unrolled[(K, V)]], root: Array[HashMap[K, V]], offset: Int, howmany: Int)$/;"	c
CreateTrie	scala/collection/parallel/immutable/ParHashSet.scala	/^  class CreateTrie(bucks: Array[Unrolled[Any]], root: Array[HashSet[T]], offset: Int, howmany: Int)$/;"	c
Creator	scala/sys/Prop.scala	/^  trait Creator[+T] {$/;"	t
CustomParallelizable	scala/collection/CustomParallelizable.scala	/^trait CustomParallelizable[+A, +ParRepr <: Parallel] extends Parallelizable[A, ParRepr] {$/;"	t
DAYS	scala/actors/threadpool/TimeUnit.java	/^    public static final TimeUnit DAYS = new TimeUnit(6, "DAYS") {$/;"	f	class:TimeUnit
DEBRUIJNINDEXtpe	scala/reflect/generic/PickleFormat.scala	/^  final val DEBRUIJNINDEXtpe = 47$/;"	l
DEF	scala/io/BytePickle.scala	/^  val DEF = 1$/;"	l
DEFAULT	scala/xml/dtd/Decl.scala	/^case class DEFAULT(fixed: Boolean, attValue: String) extends DefaultDecl {$/;"	c
DEFAULTINIT	scala/reflect/generic/Flags.scala	/^  final val DEFAULTINIT   = 0x20000000000L\/\/ symbol is initialized to the default value: used by -Xcheckinit$/;"	l
DEFAULTPARAM	scala/reflect/generic/Flags.scala	/^  final val DEFAULTPARAM  = 0x02000000    \/\/ the parameter has a default value$/;"	l
DEFDEFtree	scala/reflect/generic/PickleFormat.scala	/^    final val DEFDEFtree = 6$/;"	l
DEFERRED	scala/reflect/generic/Flags.scala	/^  final val DEFERRED      = 0x00000010    \/\/ was `abstract' for members | trait is virtual$/;"	l
DFAContentModel	scala/xml/dtd/ContentModel.scala	/^sealed abstract class DFAContentModel extends ContentModel {$/;"	c
DOCDEFtree	scala/reflect/generic/PickleFormat.scala	/^    final val DOCDEFtree = 11$/;"	l
DOUBLE	scala/runtime/BoxesRunTime.java	/^    private static final int CHAR = 0, BYTE = 1, SHORT = 2, INT = 3, LONG = 4, FLOAT = 5, DOUBLE = 6, OTHER = 7;$/;"	f	class:BoxesRunTime	file:
DTD	scala/xml/dtd/DTD.scala	/^abstract class DTD {$/;"	c
DaemonActor	scala/actors/DaemonActor.scala	/^trait DaemonActor extends Actor { $/;"	t
DaemonScheduler	scala/actors/scheduler/DaemonScheduler.scala	/^object DaemonScheduler extends DelegatingScheduler {$/;"	c
DaemonThreadFactory	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^  private class DaemonThreadFactory extends ThreadFactory {$/;"	c
Debug	scala/actors/Debug.scala	/^class Debug(tag: String) extends Logger(tag) {}$/;"	c
Debug	scala/actors/Debug.scala	/^object Debug extends Logger("") {}$/;"	c
Decl	scala/xml/dtd/Decl.scala	/^abstract class Decl$/;"	c
Def	scala/io/BytePickle.scala	/^  case class Def() extends RefDef$/;"	c
DefDef	scala/reflect/Tree.scala	/^case class DefDef(sym: Symbol, vparamss: List[List[Tree]], ret: Type, rhs: Tree) extends Tree$/;"	c
DefDef	scala/reflect/generic/Trees.scala	/^  case class DefDef(mods: Modifiers, name: TermName, tparams: List[TypeDef],$/;"	c
DefTree	scala/reflect/generic/Trees.scala	/^  abstract class DefTree extends SymTree {$/;"	c
DefaultBufSize	scala/io/Source.scala	/^  val DefaultBufSize = 2048$/;"	l
DefaultDecl	scala/xml/dtd/Decl.scala	/^abstract class DefaultDecl {$/;"	c
DefaultEntry	scala/collection/mutable/DefaultEntry.scala	/^final class DefaultEntry[A, B](val key: A, var value: B)$/;"	c
DefaultKeySet	scala/collection/MapLike.scala	/^  protected class DefaultKeySet extends Set[A] {$/;"	c
DefaultKeySortedSet	scala/collection/SortedMapLike.scala	/^  protected class DefaultKeySortedSet extends super.DefaultKeySet with SortedSet[A] {$/;"	c
DefaultKeySortedSet	scala/collection/immutable/SortedMap.scala	/^  protected class DefaultKeySortedSet extends super.DefaultKeySortedSet with immutable.SortedSet[A] {$/;"	c
DefaultMap	scala/collection/DefaultMap.scala	/^trait DefaultMap[A, +B] extends Map[A, B] { self =>$/;"	t
DefaultMap	scala/collection/immutable/DefaultMap.scala	/^trait DefaultMap[A, +B] extends Map[A, B] { self =>$/;"	t
DefaultMapModel	scala/collection/mutable/DefaultMapModel.scala	/^trait DefaultMapModel[A, B] extends Map[A, B] {$/;"	t
DefaultMarkupHandler	scala/xml/parsing/DefaultMarkupHandler.scala	/^abstract class DefaultMarkupHandler extends MarkupHandler {$/;"	c
DefaultSignalling	scala/collection/generic/Signalling.scala	/^class DefaultSignalling extends Signalling with VolatileAbort {$/;"	c
DefaultThreadFactory	scala/actors/threadpool/Executors.java	/^        DefaultThreadFactory() {$/;"	m	class:Executors.DefaultThreadFactory
DefaultThreadFactory	scala/actors/threadpool/Executors.java	/^    static class DefaultThreadFactory implements ThreadFactory {$/;"	c	class:Executors
DefaultValuesIterable	scala/collection/MapLike.scala	/^  protected class DefaultValuesIterable extends Iterable[B] {$/;"	c
DelayedInit	scala/DelayedInit.scala	/^trait DelayedInit {$/;"	t
DelayedLazyVal	scala/concurrent/DelayedLazyVal.scala	/^class DelayedLazyVal[T](f: () => T, body: => Unit) {$/;"	c
DelegatedContext	scala/collection/generic/Signalling.scala	/^class DelegatedContext(var signalDelegate: Signalling) extends DelegatedSignalling$/;"	c
DelegatedExecutorService	scala/actors/threadpool/Executors.java	/^        DelegatedExecutorService(ExecutorService executor) { e = executor; }$/;"	m	class:Executors.DelegatedExecutorService
DelegatedExecutorService	scala/actors/threadpool/Executors.java	/^    static class DelegatedExecutorService extends AbstractExecutorService {$/;"	c	class:Executors
DelegatedSignalling	scala/collection/generic/Signalling.scala	/^trait DelegatedSignalling extends Signalling {$/;"	t
Described	scala/util/control/Exception.scala	/^  trait Described { $/;"	t
DetWordAutom	scala/util/automata/DetWordAutom.scala	/^abstract class DetWordAutom[T <: AnyRef] {$/;"	c
DictionaryWrapper	scala/collection/JavaConversions.scala	/^  case class DictionaryWrapper[A, B](underlying: mutable.Map[A, B])$/;"	c
DiscardOldestPolicy	scala/actors/threadpool/ThreadPoolExecutor.java	/^        public DiscardOldestPolicy() { }$/;"	m	class:ThreadPoolExecutor.DiscardOldestPolicy
DiscardOldestPolicy	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public static class DiscardOldestPolicy implements RejectedExecutionHandler {$/;"	c	class:ThreadPoolExecutor
DiscardPolicy	scala/actors/threadpool/ThreadPoolExecutor.java	/^        public DiscardPolicy() { }$/;"	m	class:ThreadPoolExecutor.DiscardPolicy
DiscardPolicy	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public static class DiscardPolicy implements RejectedExecutionHandler {$/;"	c	class:ThreadPoolExecutor
DocBreak	scala/text/Document.scala	/^case object DocBreak extends Document$/;"	c
DocCons	scala/text/Document.scala	/^case class DocCons(hd: Document, tl: Document) extends Document$/;"	c
DocGroup	scala/text/Document.scala	/^case class DocGroup(doc: Document) extends Document$/;"	c
DocNest	scala/text/Document.scala	/^case class DocNest(indent: Int, doc: Document) extends Document$/;"	c
DocNil	scala/text/Document.scala	/^case object DocNil extends Document$/;"	c
DocText	scala/text/Document.scala	/^case class DocText(txt: String) extends Document$/;"	c
DocType	scala/xml/dtd/DocType.scala	/^case class DocType(name: String, extID: ExternalID, intSubset: Seq[dtd.Decl])$/;"	c
Document	scala/text/Document.scala	/^abstract class Document {$/;"	c
Document	scala/text/Document.scala	/^object Document {$/;"	c
Document	scala/xml/Document.scala	/^class Document extends NodeSeq with pull.XMLEvent with Serializable {$/;"	c
Done	scala/util/control/TailCalls.scala	/^  protected case class Done[A](override val result: A) extends TailRec[A]$/;"	c
Double	scala/Double.scala	/^final class Double extends AnyVal {$/;"	c
Double	scala/Double.scala	/^object Double extends AnyValCompanion {$/;"	c
Double	scala/collection/immutable/Range.scala	/^  object Double {$/;"	c
Double	scala/math/Ordering.scala	/^  implicit object Double extends DoubleOrdering$/;"	c
Double	scala/reflect/ClassManifest.scala	/^  val Double  = Manifest.Double$/;"	l
Double	scala/reflect/Manifest.scala	/^  val Double: AnyValManifest[Double] = new AnyValManifest[scala.Double] {$/;"	l
Double2double	scala/Predef.scala	/^  implicit def Double2double(x: java.lang.Double): Double     = x.doubleValue$/;"	m
Double2doubleNullConflict	scala/LowPriorityImplicits.scala	/^  implicit def Double2doubleNullConflict(x: Null): Double    = sys.error("value error")$/;"	m
DoubleAsIfIntegral	scala/math/Numeric.scala	/^  object DoubleAsIfIntegral extends DoubleAsIfIntegral with Ordering.DoubleOrdering$/;"	c
DoubleAsIfIntegral	scala/math/Numeric.scala	/^  trait DoubleAsIfIntegral extends DoubleIsConflicted with Integral[Double] {$/;"	t
DoubleClass	scala/reflect/generic/StandardDefinitions.scala	/^    def DoubleClass : Symbol$/;"	m
DoubleIsConflicted	scala/math/Numeric.scala	/^  trait DoubleIsConflicted extends Numeric[Double] {$/;"	t
DoubleIsFractional	scala/math/Numeric.scala	/^  implicit object DoubleIsFractional extends DoubleIsFractional with Ordering.DoubleOrdering$/;"	c
DoubleIsFractional	scala/math/Numeric.scala	/^  trait DoubleIsFractional extends DoubleIsConflicted with Fractional[Double] {$/;"	t
DoubleLinkedList	scala/collection/mutable/DoubleLinkedList.scala	/^class DoubleLinkedList[A]() extends LinearSeq[A]$/;"	c
DoubleLinkedList	scala/collection/mutable/DoubleLinkedList.scala	/^object DoubleLinkedList extends SeqFactory[DoubleLinkedList] {$/;"	c
DoubleLinkedListLike	scala/collection/mutable/DoubleLinkedListLike.scala	/^trait DoubleLinkedListLike[A, This <: Seq[A] with DoubleLinkedListLike[A, This]] extends SeqLike[A, This] with LinkedListLike[A, This] { self =>$/;"	t
DoubleOrdering	scala/math/Ordering.scala	/^  trait DoubleOrdering extends Ordering[Double] {$/;"	t
DoubleProp	scala/sys/Prop.scala	/^  implicit object DoubleProp extends CreatorImpl[Double](_.toDouble)$/;"	c
DoubleRef	scala/runtime/DoubleRef.java	/^    public DoubleRef(double elem) { this.elem = elem; }$/;"	m	class:DoubleRef
DoubleRef	scala/runtime/DoubleRef.java	/^public class DoubleRef implements java.io.Serializable {$/;"	c
DoubleTag	scala/reflect/generic/Constants.scala	/^  final val DoubleTag  = 9$/;"	l
DrainableForkJoinPool	scala/actors/scheduler/DrainableForkJoinPool.scala	/^private class DrainableForkJoinPool extends ForkJoinPool {$/;"	c
DroppedWhile	scala/collection/GenIterableViewLike.scala	/^  trait DroppedWhile extends super.DroppedWhile with Transformed[A] {$/;"	t
DroppedWhile	scala/collection/GenSeqViewLike.scala	/^  trait DroppedWhile extends super.DroppedWhile with Transformed[A] {$/;"	t
DroppedWhile	scala/collection/GenTraversableViewLike.scala	/^  trait DroppedWhile extends Transformed[A] {$/;"	t
DroppedWhile	scala/collection/IterableViewLike.scala	/^  trait DroppedWhile extends super[TraversableViewLike].DroppedWhile with super[GenIterableViewLike].DroppedWhile with Transformed[A]$/;"	t
DroppedWhile	scala/collection/SeqViewLike.scala	/^  trait DroppedWhile extends super[IterableViewLike].DroppedWhile with super[GenSeqViewLike].DroppedWhile with Transformed[A]$/;"	t
DroppedWhile	scala/collection/TraversableViewLike.scala	/^  trait DroppedWhile extends Transformed[A] with super.DroppedWhile$/;"	t
DroppedWhile	scala/collection/immutable/StreamViewLike.scala	/^  trait DroppedWhile extends super.DroppedWhile with Transformed[A]$/;"	t
DroppedWhile	scala/collection/mutable/IndexedSeqView.scala	/^  trait DroppedWhile extends super.DroppedWhile with Transformed[A] {$/;"	t
DummyImplicit	scala/Predef.scala	/^  class DummyImplicit$/;"	c
DummyImplicit	scala/Predef.scala	/^  object DummyImplicit {$/;"	c
DupIterator	scala/collection/immutable/TrieIterator.scala	/^  final class DupIterator(xs: Array[Iterable[T]]) extends {$/;"	c
Dynamic	scala/Dynamic.scala	/^trait Dynamic$/;"	t
DynamicVariable	scala/util/DynamicVariable.scala	/^class DynamicVariable[T](init: T) {$/;"	c
E	scala/MathCommon.scala	/^  val E = java.lang.Math.E$/;"	l
EFCons	scala/util/parsing/combinator/Parsers.scala	/^  case class EFCons(hd: Elem => ElemFun, tl: ElemFun) extends ElemFun$/;"	c
EFNil	scala/util/parsing/combinator/Parsers.scala	/^  case class EFNil(res: Boolean) extends ElemFun*\/$/;"	c
ELEMENTS	scala/xml/dtd/ContentModel.scala	/^case class ELEMENTS(r: ContentModel.RegExp) extends DFAContentModel {$/;"	c
EMPTY	scala/reflect/generic/StdNames.scala	/^    val EMPTY: NameType              = ""$/;"	l
EMPTY	scala/xml/dtd/ContentModel.scala	/^case object EMPTY extends ContentModel {$/;"	c
EMPTY_PACKAGE_NAME	scala/reflect/generic/StdNames.scala	/^    val EMPTY_PACKAGE_NAME: NameType = "<empty>"$/;"	l
EMPTYtree	scala/reflect/generic/PickleFormat.scala	/^    final val EMPTYtree = 1$/;"	l
END	scala/xml/dtd/Tokens.scala	/^  final val END          = 10$/;"	l
ENDCH	scala/xml/dtd/Scanner.scala	/^  final val ENDCH = '\\u0000'$/;"	l
EOF	scala/util/parsing/combinator/token/Tokens.scala	/^  case object EOF extends Token {$/;"	c
EOL	scala/compat/Platform.scala	/^  val EOL = util.Properties.lineSeparator$/;"	l
EPS_DOUBLE	scala/Math.scala	/^  val EPS_DOUBLE = java.lang.Double.MIN_VALUE$/;"	l
EPS_FLOAT	scala/Math.scala	/^  val EPS_FLOAT  = java.lang.Float.MIN_VALUE$/;"	l
EXISTENTIAL	scala/reflect/generic/Flags.scala	/^  final val EXISTENTIAL   = 0x800000000L  \/\/ type is an existential parameter or skolem$/;"	l
EXISTENTIALTYPEtree	scala/reflect/generic/PickleFormat.scala	/^    final val EXISTENTIALTYPEtree = 45$/;"	l
EXISTENTIALtpe	scala/reflect/generic/PickleFormat.scala	/^  final val EXISTENTIALtpe = 48$/;"	l
EXPANDEDNAME	scala/reflect/generic/Flags.scala	/^  final val EXPANDEDNAME  = 0x1000000000L \/\/ name has been expanded with class suffix$/;"	l
EXPAND_SEPARATOR_STRING	scala/reflect/generic/StdNames.scala	/^    val EXPAND_SEPARATOR_STRING = "$$"$/;"	l
EXTMODCLASSref	scala/reflect/generic/PickleFormat.scala	/^  final val EXTMODCLASSref = 10$/;"	l
EXTref	scala/reflect/generic/PickleFormat.scala	/^  final val EXTref = 9$/;"	l
Either	scala/Either.scala	/^object Either {$/;"	c
Either	scala/Either.scala	/^sealed abstract class Either[+A, +B] {$/;"	c
Elem	scala/util/parsing/combinator/Parsers.scala	/^  type Elem$/;"	T
Elem	scala/util/parsing/combinator/RegexParsers.scala	/^  type Elem = Char$/;"	T
Elem	scala/util/parsing/combinator/lexical/Scanners.scala	/^  type Elem = Char$/;"	T
Elem	scala/util/parsing/combinator/syntactical/TokenParsers.scala	/^  type Elem = lexical.Token$/;"	T
Elem	scala/xml/Elem.scala	/^class Elem($/;"	c
Elem	scala/xml/Elem.scala	/^object Elem {$/;"	c
ElemDecl	scala/xml/dtd/Decl.scala	/^case class ElemDecl(name: String, contentModel: ContentModel)$/;"	c
ElemName	scala/xml/dtd/ContentModel.scala	/^  case class ElemName(name: String) extends Label {$/;"	c
Element	scala/util/parsing/ast/AbstractSyntax.scala	/^  trait Element extends Positional$/;"	t
ElementType	scala/xml/parsing/MarkupParser.scala	/^  type ElementType  = NodeSeq$/;"	T
ElementType	scala/xml/parsing/MarkupParserCommon.scala	/^  type ElementType      \/\/ NodeSeq, Tree$/;"	T
ElementValidator	scala/xml/dtd/ElementValidator.scala	/^class ElementValidator() extends Function1[Node,Boolean] {$/;"	c
Elements	scala/collection/IndexedSeqLike.scala	/^  protected class Elements(start: Int, end: Int) extends BufferedIterator[A] with Serializable {$/;"	c
Empty	scala/collection/immutable/Queue.scala	/^  val Empty: Queue[Nothing] = Queue()$/;"	l
Empty	scala/collection/immutable/RedBlack.scala	/^  case object Empty extends Tree[Nothing] {$/;"	c
Empty	scala/collection/immutable/Stack.scala	/^  val Empty: Stack[Nothing] = Stack()$/;"	l
Empty	scala/collection/immutable/Stream.scala	/^  object Empty extends Stream[Nothing] { $/;"	c
Empty	scala/xml/NodeSeq.scala	/^  final val Empty = fromSeq(Nil)$/;"	l
EmptyBinderEnv	scala/util/parsing/ast/Binders.scala	/^  object EmptyBinderEnv extends BinderEnv {$/;"	c
EmptyHashMap	scala/collection/immutable/HashMap.scala	/^  private object EmptyHashMap extends HashMap[Any,Nothing] {$/;"	c
EmptyHashSet	scala/collection/immutable/HashSet.scala	/^  private object EmptyHashSet extends HashSet[Any] { }$/;"	c
EmptyHedgeRHS	scala/util/grammar/HedgeRHS.scala	/^case object EmptyHedgeRHS extends HedgeRHS$/;"	c
EmptyIterator	scala/actors/threadpool/SynchronousQueue.java	/^    static class EmptyIterator implements Iterator {$/;"	c	class:SynchronousQueue
EmptyListMap	scala/collection/immutable/ListMap.scala	/^  private object EmptyListMap extends ListMap[Any, Nothing] { }$/;"	c
EmptyListSet	scala/collection/immutable/ListSet.scala	/^  private object EmptyListSet extends ListSet[Any] { }$/;"	c
EmptyMap	scala/collection/immutable/Map.scala	/^  class EmptyMap[A,B] extends Map[A,B] with Serializable {$/;"	c
EmptyMap	scala/collection/immutable/Map.scala	/^  private object EmptyMap extends Map[Any, Nothing] with Serializable {$/;"	c
EmptyMethodCache	scala/runtime/MethodCache.scala	/^final class EmptyMethodCache extends MethodCache {$/;"	c
EmptyNamespace	scala/xml/Node.scala	/^  val EmptyNamespace = ""$/;"	l
EmptyPackage	scala/reflect/generic/StandardDefinitions.scala	/^    def EmptyPackage: Symbol$/;"	m
EmptyPackageClass	scala/reflect/generic/StandardDefinitions.scala	/^    def EmptyPackageClass: Symbol$/;"	m
EmptyQueue	scala/collection/immutable/Queue.scala	/^  private object EmptyQueue extends Queue[Nothing](Nil, Nil) { }$/;"	c
EmptySet	scala/collection/immutable/Set.scala	/^  class EmptySet[A] extends Set[A] with Serializable {$/;"	c
EmptySet	scala/collection/immutable/Set.scala	/^  private object EmptySet extends Set[Any] with Serializable {$/;"	c
EmptyTree	scala/reflect/generic/Trees.scala	/^  case object EmptyTree extends TermTree {$/;"	c
EmptyView	scala/collection/GenIterableViewLike.scala	/^  trait EmptyView extends Transformed[Nothing] with super.EmptyView {$/;"	t
EmptyView	scala/collection/GenSeqViewLike.scala	/^  trait EmptyView extends Transformed[Nothing] with super.EmptyView {$/;"	t
EmptyView	scala/collection/GenTraversableViewLike.scala	/^  trait EmptyView extends Transformed[Nothing] {$/;"	t
EmptyView	scala/collection/IterableViewLike.scala	/^  trait EmptyView extends Transformed[Nothing] with super[TraversableViewLike].EmptyView with super[GenIterableViewLike].EmptyView$/;"	t
EmptyView	scala/collection/SeqViewLike.scala	/^  trait EmptyView extends Transformed[Nothing] with super[IterableViewLike].EmptyView with super[GenSeqViewLike].EmptyView$/;"	t
EmptyView	scala/collection/TraversableViewLike.scala	/^  trait EmptyView extends Transformed[Nothing] with super.EmptyView$/;"	t
EmptyView	scala/collection/immutable/StreamViewLike.scala	/^  trait EmptyView extends Transformed[Nothing] with super.EmptyView { }$/;"	t
EncodingHeuristics	scala/xml/include/sax/EncodingHeuristics.scala	/^object EncodingHeuristics$/;"	c
EncodingNames	scala/xml/include/sax/EncodingHeuristics.scala	/^  object EncodingNames {$/;"	c
End	scala/collection/script/Location.scala	/^case object End extends Location$/;"	c
EndOfStream	scala/xml/pull/XMLEventReader.scala	/^  val EndOfStream = POISON$/;"	l
EndOfStream	scala/xml/pull/XMLEventReader.scala	/^  val EndOfStream: T$/;"	l
Ensuring	scala/Predef.scala	/^  final class Ensuring[A](val x: A) {$/;"	c
EntityDecl	scala/xml/dtd/Decl.scala	/^abstract class EntityDecl extends MarkupDecl $/;"	c
EntityDef	scala/xml/dtd/Decl.scala	/^abstract class EntityDef {$/;"	c
EntityRef	scala/xml/EntityRef.scala	/^case class EntityRef(entityName: String) extends SpecialNode {$/;"	c
EntityResolver	scala/xml/package.scala	/^  type EntityResolver     = org.xml.sax.EntityResolver$/;"	T
Entry	scala/collection/mutable/DefaultMapModel.scala	/^  type Entry = DefaultEntry[A, B]$/;"	T
Entry	scala/collection/mutable/HashMap.scala	/^  type Entry = DefaultEntry[A, B]$/;"	T
Entry	scala/collection/mutable/LinkedHashMap.scala	/^  type Entry = LinkedEntry[A, B]$/;"	T
Entry	scala/collection/parallel/mutable/ParHashMap.scala	/^  type Entry = collection.mutable.DefaultEntry[K, V]$/;"	T
EntryIterator	scala/collection/parallel/mutable/ParHashTable.scala	/^  abstract class EntryIterator[T, +IterRepr <: IterableSplitter[T]]$/;"	c
EnumTag	scala/reflect/generic/Constants.scala	/^  final val EnumTag    = 13$/;"	l
Enumeration	scala/Enumeration.scala	/^abstract class Enumeration(initial: Int, names: String*) extends Serializable {$/;"	c
EofCh	scala/util/parsing/input/CharArrayReader.scala	/^  final val EofCh = '\\032'$/;"	l
EofCh	scala/util/parsing/input/CharSequenceReader.scala	/^  final val EofCh = '\\032'$/;"	l
EofCh	scala/util/parsing/input/PagedSeqReader.scala	/^  final val EofCh = '\\032'$/;"	l
EofCh	scala/util/parsing/input/StreamReader.scala	/^  final val EofCh = '\\032'$/;"	l
Eps	scala/util/regexp/Base.scala	/^  case object Eps extends RegExp {$/;"	c
Epsilon	scala/Double.scala	/^  final val Epsilon  = MinPositiveValue$/;"	l
Epsilon	scala/Float.scala	/^  final val Epsilon  = MinPositiveValue$/;"	l
Equality	scala/xml/Equality.scala	/^object Equality {$/;"	c
Equality	scala/xml/Equality.scala	/^trait Equality extends scala.Equals {$/;"	t
Equals	scala/Equals.scala	/^trait Equals {$/;"	t
Equiv	scala/math/Equiv.scala	/^object Equiv extends LowPriorityEquiv {$/;"	c
Equiv	scala/math/Equiv.scala	/^trait Equiv[T] {$/;"	t
Equiv	scala/package.scala	/^  type Equiv[T] = scala.math.Equiv[T]$/;"	T
Equiv	scala/package.scala	/^  val Equiv = scala.math.Equiv$/;"	l
Error	scala/package.scala	/^  type Error     = java.lang.Error$/;"	T
Error	scala/util/parsing/combinator/Parsers.scala	/^  case class Error(override val msg: String, override val next: Input) extends NoSuccess(msg, next) {$/;"	c
ErrorToken	scala/util/parsing/combinator/token/Tokens.scala	/^  case class ErrorToken(msg: String) extends Token {$/;"	c
Escapes	scala/xml/Utility.scala	/^  object Escapes {$/;"	c
EvComment	scala/xml/pull/XMLEvent.scala	/^case class EvComment(text: String) extends XMLEvent$/;"	c
EvElemEnd	scala/xml/pull/XMLEvent.scala	/^case class EvElemEnd(pre: String, label: String) extends XMLEvent $/;"	c
EvElemStart	scala/xml/pull/XMLEvent.scala	/^case class EvElemStart(pre: String, label: String, attrs: MetaData, scope: NamespaceBinding) extends XMLEvent $/;"	c
EvEntityRef	scala/xml/pull/XMLEvent.scala	/^case class EvEntityRef(entity: String) extends XMLEvent$/;"	c
EvProcInstr	scala/xml/pull/XMLEvent.scala	/^case class EvProcInstr(target: String, text: String) extends XMLEvent$/;"	c
EvText	scala/xml/pull/XMLEvent.scala	/^case class EvText(text: String) extends XMLEvent$/;"	c
Eval	scala/actors/Future.scala	/^private case object Eval$/;"	c
Exception	scala/package.scala	/^  type Exception = java.lang.Exception$/;"	T
Exception	scala/util/control/Exception.scala	/^object Exception {  $/;"	c
Exclusive	scala/collection/immutable/NumericRange.scala	/^  class Exclusive[T](start: T, end: T, step: T)(implicit num: Integral[T])$/;"	c
ExclusiveLock	scala/actors/threadpool/locks/CondVar.java	/^    static interface ExclusiveLock extends Lock {$/;"	i	class:CondVar
ExecutionException	scala/actors/threadpool/ExecutionException.java	/^    protected ExecutionException() { }$/;"	m	class:ExecutionException
ExecutionException	scala/actors/threadpool/ExecutionException.java	/^    protected ExecutionException(String message) {$/;"	m	class:ExecutionException
ExecutionException	scala/actors/threadpool/ExecutionException.java	/^    public ExecutionException(String message, Throwable cause) {$/;"	m	class:ExecutionException
ExecutionException	scala/actors/threadpool/ExecutionException.java	/^    public ExecutionException(Throwable cause) {$/;"	m	class:ExecutionException
ExecutionException	scala/actors/threadpool/ExecutionException.java	/^public class ExecutionException extends Exception {$/;"	c
Executor	scala/actors/threadpool/Executor.java	/^public interface Executor {$/;"	i
ExecutorCompletionService	scala/actors/threadpool/ExecutorCompletionService.java	/^    public ExecutorCompletionService(Executor executor) {$/;"	m	class:ExecutorCompletionService
ExecutorCompletionService	scala/actors/threadpool/ExecutorCompletionService.java	/^    public ExecutorCompletionService(Executor executor,$/;"	m	class:ExecutorCompletionService
ExecutorCompletionService	scala/actors/threadpool/ExecutorCompletionService.java	/^public class ExecutorCompletionService implements CompletionService {$/;"	c
ExecutorScheduler	scala/actors/scheduler/ExecutorScheduler.scala	/^object ExecutorScheduler {$/;"	c
ExecutorScheduler	scala/actors/scheduler/ExecutorScheduler.scala	/^trait ExecutorScheduler extends Thread$/;"	t
ExecutorService	scala/actors/threadpool/ExecutorService.java	/^public interface ExecutorService extends Executor {$/;"	i
Executors	scala/actors/threadpool/Executors.java	/^    private Executors() {}$/;"	m	class:Executors	file:
Executors	scala/actors/threadpool/Executors.java	/^public class Executors {$/;"	c
ExistentialType	scala/reflect/generic/Types.scala	/^  type ExistentialType <: Type$/;"	T
ExistentialType	scala/reflect/generic/Types.scala	/^  val ExistentialType: ExistentialTypeExtractor$/;"	l
ExistentialTypeExtractor	scala/reflect/generic/Types.scala	/^  abstract class ExistentialTypeExtractor {$/;"	c
ExistentialTypeTree	scala/reflect/generic/Trees.scala	/^  case class ExistentialTypeTree(tpt: Tree, whereClauses: List[Tree])$/;"	c
Exit	scala/actors/Actor.scala	/^case class Exit(from: AbstractActor, reason: AnyRef)$/;"	c
ExitFun	scala/actors/remote/Proxy.scala	/^class ExitFun(reason: AnyRef) extends Function2[AbstractActor, Proxy, Unit] with Serializable {$/;"	c
ExtDef	scala/xml/dtd/Decl.scala	/^case class ExtDef(extID:ExternalID) extends EntityDef {$/;"	c
ExternalID	scala/xml/dtd/ExternalID.scala	/^abstract class ExternalID extends parsing.TokenTests$/;"	c
ExternalSources	scala/xml/parsing/ExternalSources.scala	/^trait ExternalSources { $/;"	t
ExtraImplicits	scala/math/Fractional.scala	/^  trait ExtraImplicits {$/;"	t
ExtraImplicits	scala/math/Integral.scala	/^  trait ExtraImplicits {$/;"	t
ExtraImplicits	scala/math/Numeric.scala	/^  trait ExtraImplicits {$/;"	t
ExtraImplicits	scala/math/Ordering.scala	/^  trait ExtraImplicits {$/;"	t
FIFOCondVar	scala/actors/threadpool/locks/FIFOCondVar.java	/^    FIFOCondVar(ExclusiveLock lock) {$/;"	m	class:FIFOCondVar
FIFOCondVar	scala/actors/threadpool/locks/FIFOCondVar.java	/^class FIFOCondVar extends CondVar implements Condition, java.io.Serializable {$/;"	c
FIFOWaitQueue	scala/actors/threadpool/helpers/FIFOWaitQueue.java	/^    public FIFOWaitQueue() {}$/;"	m	class:FIFOWaitQueue
FIFOWaitQueue	scala/actors/threadpool/helpers/FIFOWaitQueue.java	/^public class FIFOWaitQueue extends WaitQueue implements java.io.Serializable {$/;"	c
FINAL	scala/reflect/generic/Flags.scala	/^  final val FINAL         = 0x00000020$/;"	l
FINE	scala/annotation/elidable.scala	/^  final val FINE    = 500           \/\/ Level.FINE.intValue()$/;"	l
FINER	scala/annotation/elidable.scala	/^  final val FINER   = 400           \/\/ Level.FINER.intValue()$/;"	l
FINEST	scala/annotation/elidable.scala	/^  final val FINEST  = 300           \/\/ Level.FINEST.intValue()$/;"	l
FIRSTPOS	scala/io/Position.scala	/^  final val FIRSTPOS = encode(1, 1)$/;"	l
FJTaskScheduler2	scala/actors/package.scala	/^  type FJTaskScheduler2 = scala.actors.scheduler.ForkJoinScheduler$/;"	T
FLOAT	scala/runtime/BoxesRunTime.java	/^    private static final int CHAR = 0, BYTE = 1, SHORT = 2, INT = 3, LONG = 4, FLOAT = 5, DOUBLE = 6, OTHER = 7;$/;"	f	class:BoxesRunTime	file:
FULL	scala/xml/factory/LoggedNodeFactory.scala	/^  final val FULL  = 2$/;"	l
FUNCTIONtree	scala/reflect/generic/PickleFormat.scala	/^    final val FUNCTIONtree = 21$/;"	l
FactoryAdapter	scala/xml/parsing/FactoryAdapter.scala	/^abstract class FactoryAdapter extends DefaultHandler with factory.XMLLoader[Node] {$/;"	c
FactoryOps	scala/collection/parallel/package.scala	/^  trait FactoryOps[From, Elem, To] {$/;"	t
Failure	scala/util/parsing/combinator/Parsers.scala	/^  case class Failure(override val msg: String, override val next: Input) extends NoSuccess(msg, next) {$/;"	c
FairSync	scala/actors/threadpool/locks/ReentrantLock.java	/^        FairSync() {}$/;"	m	class:ReentrantLock.FairSync
FairSync	scala/actors/threadpool/locks/ReentrantLock.java	/^    final static class FairSync extends Sync implements WaitQueue.QueuedSync {$/;"	c	class:ReentrantLock
FallbackArrayBuilding	scala/Array.scala	/^class FallbackArrayBuilding {$/;"	c
FatalError	scala/xml/parsing/FatalError.scala	/^case class FatalError(msg: String) extends java.lang.RuntimeException(msg)$/;"	c
Field	scala/reflect/Symbol.scala	/^case class Field(override val fullname: String, tpe: Type) extends GlobalSymbol(fullname)$/;"	c
FifoWaitQueue	scala/actors/threadpool/SynchronousQueue.java	/^    static final class FifoWaitQueue extends WaitQueue implements java.io.Serializable {$/;"	c	class:SynchronousQueue
File	scala/sys/process/package.scala	/^      type File            = java.io.File$/;"	T
FileBuilder	scala/sys/process/ProcessBuilder.scala	/^  trait FileBuilder extends Sink with Source {$/;"	t
FileProcessLogger	scala/sys/process/ProcessLogger.scala	/^class FileProcessLogger(file: File) extends ProcessLogger with Closeable with Flushable {$/;"	c
FileProp	scala/sys/Prop.scala	/^  implicit object FileProp extends CreatorImpl[java.io.File](s => new java.io.File(s))$/;"	c
FillBlocks	scala/collection/parallel/mutable/ParHashMap.scala	/^  class FillBlocks(buckets: Array[Unrolled[DefaultEntry[K, V]]], table: AddingHashTable, offset: Int, howmany: Int)$/;"	c
FillBlocks	scala/collection/parallel/mutable/ParHashSet.scala	/^  class FillBlocks(buckets: Array[UnrolledBuffer[Any]], table: AddingFlatHashTable, val offset: Int, val howmany: Int)$/;"	c
Filter	scala/collection/mutable/Publisher.scala	/^  type Filter = Evt => Boolean$/;"	T
FilterMonadic	scala/collection/generic/FilterMonadic.scala	/^trait FilterMonadic[+A, +Repr] {$/;"	t
Filtered	scala/collection/GenIterableViewLike.scala	/^  trait Filtered extends super.Filtered with Transformed[A] {$/;"	t
Filtered	scala/collection/GenSeqViewLike.scala	/^  trait Filtered extends super.Filtered with Transformed[A] {$/;"	t
Filtered	scala/collection/GenTraversableViewLike.scala	/^  trait Filtered extends Transformed[A] {$/;"	t
Filtered	scala/collection/IterableViewLike.scala	/^  trait Filtered extends super[TraversableViewLike].Filtered with super[GenIterableViewLike].Filtered with Transformed[A]$/;"	t
Filtered	scala/collection/SeqViewLike.scala	/^  trait Filtered extends super[IterableViewLike].Filtered with super[GenSeqViewLike].Filtered with Transformed[A]$/;"	t
Filtered	scala/collection/TraversableViewLike.scala	/^  trait Filtered extends Transformed[A] with super.Filtered$/;"	t
Filtered	scala/collection/immutable/StreamViewLike.scala	/^  trait Filtered extends super.Filtered with Transformed[A]$/;"	t
Filtered	scala/collection/mutable/IndexedSeqView.scala	/^  trait Filtered extends super.Filtered with Transformed[A] {$/;"	t
FinalizableDelegatedExecutorService	scala/actors/threadpool/Executors.java	/^	FinalizableDelegatedExecutorService(ExecutorService executor) {$/;"	m	class:Executors.FinalizableDelegatedExecutorService
FinalizableDelegatedExecutorService	scala/actors/threadpool/Executors.java	/^    static class FinalizableDelegatedExecutorService$/;"	c	class:Executors
Finally	scala/runtime/ScalaRunTime.scala	/^    def Finally(fin: => Unit): A = {$/;"	m
Finally	scala/runtime/ScalaRunTime.scala	/^    def Finally(fin: => Unit): A$/;"	m
Finally	scala/util/control/Exception.scala	/^  class Finally private[Exception](body: => Unit) extends Described {$/;"	c
Flags	scala/reflect/generic/Flags.scala	/^object Flags extends Flags$/;"	c
FlagsType	scala/reflect/generic/HasFlags.scala	/^  type FlagsType$/;"	T
FlagsType	scala/reflect/generic/Symbols.scala	/^    type FlagsType          = Long$/;"	T
FlagsType	scala/reflect/generic/Trees.scala	/^    type FlagsType          = Long$/;"	T
FlatHashTable	scala/collection/mutable/FlatHashTable.scala	/^trait FlatHashTable[A] extends FlatHashTable.HashUtils[A] {$/;"	t
FlatMapped	scala/collection/GenIterableViewLike.scala	/^  trait FlatMapped[B] extends super.FlatMapped[B] with Transformed[B] {$/;"	t
FlatMapped	scala/collection/GenSeqViewLike.scala	/^  trait FlatMapped[B] extends super.FlatMapped[B] with Transformed[B] {$/;"	t
FlatMapped	scala/collection/GenTraversableViewLike.scala	/^  trait FlatMapped[B] extends Transformed[B] {$/;"	t
FlatMapped	scala/collection/IterableViewLike.scala	/^  trait FlatMapped[B] extends super[TraversableViewLike].FlatMapped[B] with super[GenIterableViewLike].FlatMapped[B] with Transformed[B]$/;"	t
FlatMapped	scala/collection/SeqViewLike.scala	/^  trait FlatMapped[B] extends super[IterableViewLike].FlatMapped[B] with super[GenSeqViewLike].FlatMapped[B] with Transformed[B]$/;"	t
FlatMapped	scala/collection/TraversableViewLike.scala	/^  trait FlatMapped[B] extends Transformed[B] with super.FlatMapped[B]$/;"	t
FlatMapped	scala/collection/immutable/StreamViewLike.scala	/^  trait FlatMapped[B] extends super.FlatMapped[B] with Transformed[B]$/;"	t
FlattenOps	scala/collection/TraversableOnce.scala	/^  class FlattenOps[A](travs: TraversableOnce[TraversableOnce[A]]) {$/;"	c
Float	scala/Float.scala	/^final class Float extends AnyVal {$/;"	c
Float	scala/Float.scala	/^object Float extends AnyValCompanion {$/;"	c
Float	scala/math/Ordering.scala	/^  implicit object Float extends FloatOrdering$/;"	c
Float	scala/reflect/ClassManifest.scala	/^  val Float   = Manifest.Float$/;"	l
Float	scala/reflect/Manifest.scala	/^  val Float: AnyValManifest[Float] = new AnyValManifest[scala.Float] {$/;"	l
Float2float	scala/Predef.scala	/^  implicit def Float2float(x: java.lang.Float): Float         = x.floatValue$/;"	m
Float2floatNullConflict	scala/LowPriorityImplicits.scala	/^  implicit def Float2floatNullConflict(x: Null): Float       = sys.error("value error")$/;"	m
FloatAsIfIntegral	scala/math/Numeric.scala	/^  object FloatAsIfIntegral extends FloatAsIfIntegral with Ordering.FloatOrdering {$/;"	c
FloatAsIfIntegral	scala/math/Numeric.scala	/^  trait FloatAsIfIntegral extends FloatIsConflicted with Integral[Float] {$/;"	t
FloatClass	scala/reflect/generic/StandardDefinitions.scala	/^    def FloatClass  : Symbol$/;"	m
FloatIsConflicted	scala/math/Numeric.scala	/^  trait FloatIsConflicted extends Numeric[Float] {$/;"	t
FloatIsFractional	scala/math/Numeric.scala	/^  implicit object FloatIsFractional extends FloatIsFractional with Ordering.FloatOrdering$/;"	c
FloatIsFractional	scala/math/Numeric.scala	/^  trait FloatIsFractional extends FloatIsConflicted with Fractional[Float] {$/;"	t
FloatOrdering	scala/math/Ordering.scala	/^  trait FloatOrdering extends Ordering[Float] {$/;"	t
FloatRef	scala/runtime/FloatRef.java	/^    public FloatRef(float elem) { this.elem = elem; }$/;"	m	class:FloatRef
FloatRef	scala/runtime/FloatRef.java	/^public class FloatRef implements java.io.Serializable {$/;"	c
FloatTag	scala/reflect/generic/Constants.scala	/^  final val FloatTag   = 8$/;"	l
FmtState	scala/text/Document.scala	/^    type FmtState = (Int, Boolean, Document)$/;"	T
Forced	scala/collection/GenIterableViewLike.scala	/^  trait Forced[B] extends super.Forced[B] with Transformed[B] {$/;"	t
Forced	scala/collection/GenSeqViewLike.scala	/^  trait Forced[B] extends super.Forced[B] with Transformed[B] {$/;"	t
Forced	scala/collection/GenTraversableViewLike.scala	/^  trait Forced[B] extends Transformed[B] {$/;"	t
Forced	scala/collection/IterableViewLike.scala	/^  trait Forced[B] extends super[TraversableViewLike].Forced[B] with super[GenIterableViewLike].Forced[B] with Transformed[B]$/;"	t
Forced	scala/collection/SeqViewLike.scala	/^  trait Forced[B] extends super[IterableViewLike].Forced[B] with super[GenSeqViewLike].Forced[B] with Transformed[B]$/;"	t
Forced	scala/collection/TraversableViewLike.scala	/^  trait Forced[B] extends Transformed[B] with super.Forced[B]$/;"	t
Forced	scala/collection/immutable/StreamViewLike.scala	/^  trait Forced[B] extends super.Forced[B] with Transformed[B] { }  $/;"	t
Forced	scala/collection/parallel/ParIterableViewLike.scala	/^  trait Forced[S] extends super.Forced[S] with Transformed[S] {$/;"	t
Forced	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Forced[S] extends super[GenSeqViewLike].Forced[S] with super[ParIterableViewLike].Forced[S] with Transformed[S] {$/;"	t
ForkJoinScheduler	scala/actors/scheduler/ForkJoinScheduler.scala	/^class ForkJoinScheduler(val initCoreSize: Int, val maxSize: Int, daemon: Boolean, fair: Boolean)$/;"	c
ForkJoinTasks	scala/collection/parallel/Tasks.scala	/^object ForkJoinTasks {$/;"	c
ForkJoinTasks	scala/collection/parallel/Tasks.scala	/^trait ForkJoinTasks extends Tasks with HavingForkJoinPool {$/;"	t
Fractional	scala/math/Fractional.scala	/^object Fractional {$/;"	c
Fractional	scala/math/Fractional.scala	/^trait Fractional[T] extends Numeric[T] {$/;"	t
Fractional	scala/package.scala	/^  type Fractional[T] = scala.math.Fractional[T]$/;"	T
FractionalOps	scala/math/Fractional.scala	/^  class FractionalOps(lhs: T) extends Ops(lhs) {$/;"	c
FractionalProxy	scala/runtime/ScalaNumberProxy.scala	/^abstract class FractionalProxy[T : Fractional] extends ScalaNumberProxy[T] with RangedProxy[T] {$/;"	c
FreshNameCreator	scala/actors/remote/FreshNameCreator.scala	/^object FreshNameCreator {$/;"	c
Function	scala/Function.scala	/^object Function {$/;"	c
Function	scala/Predef.scala	/^  type Function[-A, +B] = Function1[A, B]$/;"	T
Function	scala/reflect/Tree.scala	/^case class Function(params: List[Symbol], body: Tree) extends Tree$/;"	c
Function	scala/reflect/generic/Trees.scala	/^  case class Function(vparams: List[ValDef], body: Tree)$/;"	c
Function0	scala/Function0.scala	/^trait Function0[@specialized +R] extends AnyRef { self =>$/;"	t
Function1	scala/Function1.scala	/^trait Function1[@specialized(scala.Int, scala.Long, scala.Float, scala.Double) -T1, @specialized(scala.Unit, scala.Boolean, scala.Int, scala.Float, scala.Long, scala.Double) +R] extends AnyRef { self =>$/;"	t
Function10	scala/Function10.scala	/^trait Function10[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, +R] extends AnyRef { self =>$/;"	t
Function11	scala/Function11.scala	/^trait Function11[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, +R] extends AnyRef { self =>$/;"	t
Function12	scala/Function12.scala	/^trait Function12[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, +R] extends AnyRef { self =>$/;"	t
Function13	scala/Function13.scala	/^trait Function13[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, +R] extends AnyRef { self =>$/;"	t
Function14	scala/Function14.scala	/^trait Function14[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, +R] extends AnyRef { self =>$/;"	t
Function15	scala/Function15.scala	/^trait Function15[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, +R] extends AnyRef { self =>$/;"	t
Function16	scala/Function16.scala	/^trait Function16[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, +R] extends AnyRef { self =>$/;"	t
Function17	scala/Function17.scala	/^trait Function17[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, +R] extends AnyRef { self =>$/;"	t
Function18	scala/Function18.scala	/^trait Function18[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, +R] extends AnyRef { self =>$/;"	t
Function19	scala/Function19.scala	/^trait Function19[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, -T19, +R] extends AnyRef { self =>$/;"	t
Function2	scala/Function2.scala	/^trait Function2[@specialized(scala.Int, scala.Long, scala.Double) -T1, @specialized(scala.Int, scala.Long, scala.Double) -T2, @specialized(scala.Unit, scala.Boolean, scala.Int, scala.Float, scala.Long, scala.Double) +R] extends AnyRef { self =>$/;"	t
Function20	scala/Function20.scala	/^trait Function20[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, -T19, -T20, +R] extends AnyRef { self =>$/;"	t
Function21	scala/Function21.scala	/^trait Function21[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, -T19, -T20, -T21, +R] extends AnyRef { self =>$/;"	t
Function22	scala/Function22.scala	/^trait Function22[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, -T19, -T20, -T21, -T22, +R] extends AnyRef { self =>$/;"	t
Function3	scala/Function3.scala	/^trait Function3[-T1, -T2, -T3, +R] extends AnyRef { self =>$/;"	t
Function4	scala/Function4.scala	/^trait Function4[-T1, -T2, -T3, -T4, +R] extends AnyRef { self =>$/;"	t
Function5	scala/Function5.scala	/^trait Function5[-T1, -T2, -T3, -T4, -T5, +R] extends AnyRef { self =>$/;"	t
Function6	scala/Function6.scala	/^trait Function6[-T1, -T2, -T3, -T4, -T5, -T6, +R] extends AnyRef { self =>$/;"	t
Function7	scala/Function7.scala	/^trait Function7[-T1, -T2, -T3, -T4, -T5, -T6, -T7, +R] extends AnyRef { self =>$/;"	t
Function8	scala/Function8.scala	/^trait Function8[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, +R] extends AnyRef { self =>$/;"	t
Function9	scala/Function9.scala	/^trait Function9[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, +R] extends AnyRef { self =>$/;"	t
FutCh	scala/actors/Future.scala	/^      val FutCh = p._2.inputChannel$/;"	l
FutCh1	scala/actors/Future.scala	/^    val FutCh1 = ft1.inputChannel$/;"	l
FutCh2	scala/actors/Future.scala	/^    val FutCh2 = ft2.inputChannel$/;"	l
Future	scala/actors/AbstractActor.scala	/^  type Future[+R] <: scala.actors.Future[R]$/;"	T
Future	scala/actors/CanReply.scala	/^  type Future[+P] <: () => P$/;"	T
Future	scala/actors/Channel.scala	/^  type Future[+P] = scala.actors.Future[P]$/;"	T
Future	scala/actors/Future.scala	/^abstract class Future[+T] extends Responder[T] with Function0[T] {$/;"	c
Future	scala/actors/ReactorCanReply.scala	/^  type Future[+P] = scala.actors.Future[P]$/;"	T
Future	scala/actors/remote/Proxy.scala	/^  type Future[+P] = scala.actors.Future[P]$/;"	T
Future	scala/actors/threadpool/Future.java	/^public interface Future {$/;"	i
Future	scala/concurrent/FutureTaskRunner.scala	/^  type Future[T]$/;"	T
Future	scala/concurrent/ThreadPoolRunner.scala	/^  type Future[T] = java.util.concurrent.Future[T]$/;"	T
Future	scala/concurrent/ThreadRunner.scala	/^  type Future[T] = () => T$/;"	T
Future	scala/parallel/Future.scala	/^trait Future[@specialized +R] extends (() => R) {$/;"	t
FutureActor	scala/actors/Future.scala	/^private class FutureActor[T](fun: SyncVar[T] => Unit, channel: Channel[T]) extends Future[T] with DaemonActor {$/;"	c
FutureTask	scala/actors/threadpool/FutureTask.java	/^    public FutureTask(Callable callable) {$/;"	m	class:FutureTask
FutureTask	scala/actors/threadpool/FutureTask.java	/^    public FutureTask(Runnable runnable, Object result) {$/;"	m	class:FutureTask
FutureTask	scala/actors/threadpool/FutureTask.java	/^public class FutureTask implements RunnableFuture {$/;"	c
FutureTaskRunner	scala/concurrent/FutureTaskRunner.scala	/^trait FutureTaskRunner extends TaskRunner {$/;"	t
FutureThreadPoolTasks	scala/collection/parallel/Tasks.scala	/^object FutureThreadPoolTasks {$/;"	c
FutureThreadPoolTasks	scala/collection/parallel/Tasks.scala	/^trait FutureThreadPoolTasks extends Tasks {$/;"	t
Futures	scala/actors/Future.scala	/^object Futures {$/;"	c
GP	scala/concurrent/pilib.scala	/^  class GP[a](n: UChan, polarity: Boolean, v: Any, c: Any => a) {$/;"	c
GREEN	scala/Console.scala	/^  final val GREEN      = "\\033[32m"$/;"	l
GREEN_B	scala/Console.scala	/^  final val GREEN_B    = "\\033[42m"$/;"	l
GenIterable	scala/collection/GenIterable.scala	/^object GenIterable extends GenTraversableFactory[GenIterable] {$/;"	c
GenIterable	scala/collection/GenIterable.scala	/^trait GenIterable[+A]$/;"	t
GenIterableLike	scala/collection/GenIterableLike.scala	/^trait GenIterableLike[+A, +Repr] extends GenTraversableLike[A, Repr] {$/;"	t
GenIterableView	scala/collection/GenIterableView.scala	/^trait GenIterableView[+A, +Coll] extends GenIterableViewLike[A, Coll, GenIterableView[A, Coll]] { }$/;"	t
GenIterableViewLike	scala/collection/GenIterableViewLike.scala	/^trait GenIterableViewLike[+A, $/;"	t
GenMap	scala/collection/GenMap.scala	/^object GenMap extends GenMapFactory[GenMap] {$/;"	c
GenMap	scala/collection/GenMap.scala	/^trait GenMap[A, +B]$/;"	t
GenMapFactory	scala/collection/generic/GenMapFactory.scala	/^abstract class GenMapFactory[CC[A, B] <: GenMap[A, B] with GenMapLike[A, B, CC[A, B]]] {$/;"	c
GenMapLike	scala/collection/GenMapLike.scala	/^trait GenMapLike[A, +B, +Repr] extends GenIterableLike[(A, B), Repr] with Equals with Parallelizable[(A, B), parallel.ParMap[A, B]] {$/;"	t
GenSeq	scala/collection/GenSeq.scala	/^object GenSeq extends GenTraversableFactory[GenSeq] {$/;"	c
GenSeq	scala/collection/GenSeq.scala	/^trait GenSeq[+A]$/;"	t
GenSeqFactory	scala/collection/generic/GenSeqFactory.scala	/^abstract class GenSeqFactory[CC[X] <: GenSeq[X] with GenericTraversableTemplate[X, CC]] extends GenTraversableFactory[CC] {$/;"	c
GenSeqLike	scala/collection/GenSeqLike.scala	/^trait GenSeqLike[+A, +Repr] extends GenIterableLike[A, Repr] with Equals with Parallelizable[A, parallel.ParSeq[A]] {$/;"	t
GenSeqView	scala/collection/GenSeqView.scala	/^trait GenSeqView[+A, +Coll] extends GenSeqViewLike[A, Coll, GenSeqView[A, Coll]] { }$/;"	t
GenSeqViewLike	scala/collection/GenSeqViewLike.scala	/^trait GenSeqViewLike[+A, $/;"	t
GenSet	scala/collection/GenSet.scala	/^object GenSet extends GenTraversableFactory[GenSet] {$/;"	c
GenSet	scala/collection/GenSet.scala	/^trait GenSet[A]$/;"	t
GenSetFactory	scala/collection/generic/GenSetFactory.scala	/^abstract class GenSetFactory[CC[X] <: GenSet[X] with GenSetLike[X, CC[X]]]$/;"	c
GenSetLike	scala/collection/GenSetLike.scala	/^trait GenSetLike[A, +Repr]$/;"	t
GenTraversable	scala/collection/GenTraversable.scala	/^object GenTraversable extends GenTraversableFactory[GenTraversable] {$/;"	c
GenTraversable	scala/collection/GenTraversable.scala	/^trait GenTraversable[+A]$/;"	t
GenTraversableFactory	scala/collection/generic/GenTraversableFactory.scala	/^abstract class GenTraversableFactory[CC[X] <: GenTraversable[X] with GenericTraversableTemplate[X, CC]]$/;"	c
GenTraversableLike	scala/collection/GenTraversableLike.scala	/^trait GenTraversableLike[+A, +Repr] extends GenTraversableOnce[A] with Parallelizable[A, parallel.ParIterable[A]] {$/;"	t
GenTraversableOnce	scala/collection/GenTraversableOnce.scala	/^trait GenTraversableOnce[+A] {$/;"	t
GenTraversableView	scala/collection/GenTraversableView.scala	/^trait GenTraversableView[+A, +Coll] extends GenTraversableViewLike[A, Coll, GenTraversableView[A, Coll]] { }$/;"	t
GenTraversableViewLike	scala/collection/GenTraversableViewLike.scala	/^trait GenTraversableViewLike[+A, $/;"	t
GenericApply	scala/reflect/generic/Trees.scala	/^  abstract class GenericApply extends TermTree {$/;"	c
GenericCanBuildFrom	scala/collection/generic/ClassManifestTraversableFactory.scala	/^  class GenericCanBuildFrom[A](implicit manif: ClassManifest[A]) extends CanBuildFrom[CC[_], A, CC[A]] {$/;"	c
GenericCanBuildFrom	scala/collection/generic/GenTraversableFactory.scala	/^  class GenericCanBuildFrom[A] extends CanBuildFrom[CC[_], A, CC[A]] {$/;"	c
GenericCanBuildFrom	scala/collection/generic/OrderedTraversableFactory.scala	/^  class GenericCanBuildFrom[A](implicit ord: Ordering[A]) extends CanBuildFrom[CC[_], A, CC[A]] {$/;"	c
GenericCanCombineFrom	scala/collection/generic/ParFactory.scala	/^  class GenericCanCombineFrom[A] extends GenericCanBuildFrom[A] with CanCombineFrom[CC[_], A, CC[A]] {$/;"	c
GenericCanCombineFrom	scala/collection/generic/ParSetFactory.scala	/^  class GenericCanCombineFrom[A] extends CanCombineFrom[CC[_], A, CC[A]] {$/;"	c
GenericClassManifestCompanion	scala/collection/generic/GenericClassManifestCompanion.scala	/^abstract class GenericClassManifestCompanion[+CC[X] <: Traversable[X]] {$/;"	c
GenericClassManifestTraversableTemplate	scala/collection/generic/GenericClassManifestTraversableTemplate.scala	/^trait GenericClassManifestTraversableTemplate[+A, +CC[X] <: Traversable[X]] extends HasNewBuilder[A, CC[A] @uncheckedVariance] {$/;"	t
GenericCompanion	scala/collection/generic/GenericCompanion.scala	/^abstract class GenericCompanion[+CC[X] <: GenTraversable[X]] { $/;"	c
GenericOrderedCompanion	scala/collection/generic/GenericOrderedCompanion.scala	/^abstract class GenericOrderedCompanion[+CC[X] <: Traversable[X]] {$/;"	c
GenericOrderedTraversableTemplate	scala/collection/generic/GenericOrderedTraversableTemplate.scala	/^trait GenericOrderedTraversableTemplate[+A, +CC[X] <: Traversable[X]] extends HasNewBuilder[A, CC[A] @uncheckedVariance] {$/;"	t
GenericParCompanion	scala/collection/generic/GenericParCompanion.scala	/^trait GenericParCompanion[+CC[X] <: ParIterable[X]] {$/;"	t
GenericParMapCompanion	scala/collection/generic/GenericParCompanion.scala	/^trait GenericParMapCompanion[+CC[P, Q] <: ParMap[P, Q]] {$/;"	t
GenericParMapTemplate	scala/collection/generic/GenericParTemplate.scala	/^trait GenericParMapTemplate[K, +V, +CC[X, Y] <: ParMap[X, Y]] extends GenericParTemplate[(K, V), ParIterable]$/;"	t
GenericParTemplate	scala/collection/generic/GenericParTemplate.scala	/^trait GenericParTemplate[+A, +CC[X] <: ParIterable[X]]$/;"	t
GenericSeqCompanion	scala/collection/generic/GenericSeqCompanion.scala	/^trait GenericSeqCompanion[CC[X] <: Traversable[X]]$/;"	t
GenericSetTemplate	scala/collection/generic/GenericSetTemplate.scala	/^trait GenericSetTemplate[A, +CC[X] <: GenSet[X]] extends GenericTraversableTemplate[A, CC] { $/;"	t
GenericTraversableTemplate	scala/collection/generic/GenericTraversableTemplate.scala	/^trait GenericTraversableTemplate[+A, +CC[X] <: GenTraversable[X]] extends HasNewBuilder[A, CC[A] @uncheckedVariance] { $/;"	t
GlobalSymbol	scala/reflect/Symbol.scala	/^abstract class GlobalSymbol(val fullname: String) extends Symbol {$/;"	c
Goto	scala/reflect/Tree.scala	/^case class Goto(target: LabelSymbol) extends Tree$/;"	c
Group	scala/xml/Group.scala	/^final case class Group(val nodes: Seq[Node]) extends Node {$/;"	c
GroupedIterator	scala/collection/Iterator.scala	/^  class GroupedIterator[B >: A](self: Iterator[A], size: Int, step: Int) extends Iterator[Seq[B]] {$/;"	c
Groups	scala/util/matching/Regex.scala	/^  object Groups {$/;"	c
Growable	scala/collection/generic/Growable.scala	/^trait Growable[-A] { $/;"	t
GrowingBuilder	scala/collection/mutable/GrowingBuilder.scala	/^class GrowingBuilder[Elem, To <: Growable[Elem]](empty: To) extends Builder[Elem, To] {$/;"	c
HOURS	scala/actors/threadpool/TimeUnit.java	/^    public static final TimeUnit HOURS = new TimeUnit(5, "HOURS") {$/;"	f	class:TimeUnit
Handler	scala/io/Codec.scala	/^  type Handler      = CharacterCodingException => Int$/;"	T
HasKeyValue	scala/xml/HasKeyValue.scala	/^class HasKeyValue(key: String) {$/;"	c
HasNewBuilder	scala/collection/generic/HasNewBuilder.scala	/^trait HasNewBuilder[+A, +Repr] {$/;"	t
HasNewCombiner	scala/collection/generic/HasNewCombiner.scala	/^trait HasNewCombiner[+T, +Repr] {$/;"	t
HashEntry	scala/collection/mutable/HashEntry.scala	/^trait HashEntry [A, E] {$/;"	t
HashMap	scala/collection/immutable/HashMap.scala	/^class HashMap[A, +B] extends Map[A,B] with MapLike[A, B, HashMap[A, B]] with Serializable with CustomParallelizable[(A, B), ParHashMap[A, B]] {$/;"	c
HashMap	scala/collection/immutable/HashMap.scala	/^object HashMap extends ImmutableMapFactory[HashMap] with BitOperations.Int {$/;"	c
HashMap	scala/collection/mutable/HashMap.scala	/^class HashMap[A, B] private[collection] (contents: HashTable.Contents[A, DefaultEntry[A, B]])$/;"	c
HashMap	scala/collection/mutable/HashMap.scala	/^object HashMap extends MutableMapFactory[HashMap] {$/;"	c
HashMap1	scala/collection/immutable/HashMap.scala	/^  class HashMap1[A,+B](private[HashMap] var key: A, private[HashMap] var hash: Int, private[collection] var value: (B @uV), private[collection] var kv: (A,B @uV)) extends HashMap[A,B] {$/;"	c
HashSet	scala/collection/immutable/HashSet.scala	/^class HashSet[A] extends Set[A] $/;"	c
HashSet	scala/collection/immutable/HashSet.scala	/^object HashSet extends ImmutableSetFactory[HashSet] {$/;"	c
HashSet	scala/collection/mutable/HashSet.scala	/^class HashSet[A] private[collection] (contents: FlatHashTable.Contents[A])$/;"	c
HashSet	scala/collection/mutable/HashSet.scala	/^object HashSet extends MutableSetFactory[HashSet] {$/;"	c
HashSet1	scala/collection/immutable/HashSet.scala	/^  class HashSet1[A](private[HashSet] var key: A, private[HashSet] var hash: Int) extends HashSet[A] {$/;"	c
HashSetCombiner	scala/collection/parallel/immutable/ParHashSet.scala	/^object HashSetCombiner {$/;"	c
HashTable	scala/collection/mutable/HashTable.scala	/^trait HashTable[A, Entry >: Null <: HashEntry[A, Entry]] extends HashTable.HashUtils[A] {$/;"	t
HashTrieMap	scala/collection/immutable/HashMap.scala	/^  class HashTrieMap[A, +B]($/;"	c
HashTrieSet	scala/collection/immutable/HashSet.scala	/^  class HashTrieSet[A](private var bitmap: Int, private[collection] var elems: Array[HashSet[A]], private var size0: Int)$/;"	c
HashUtils	scala/collection/mutable/FlatHashTable.scala	/^  trait HashUtils[A] {$/;"	t
HashUtils	scala/collection/mutable/HashTable.scala	/^  trait HashUtils[KeyType] {$/;"	t
HavingForkJoinPool	scala/collection/parallel/Tasks.scala	/^trait HavingForkJoinPool {$/;"	t
Head	scala/util/parsing/combinator/PackratParsers.scala	/^  private case class Head(var headParser: Parser[_], var involvedSet: List[Parser[_]], var evalSet: List[Parser[_]]){$/;"	c
HedgeRHS	scala/util/grammar/HedgeRHS.scala	/^abstract class HedgeRHS$/;"	c
History	scala/collection/mutable/History.scala	/^class History[Evt, Pub] extends Subscriber[Evt, Pub] with Iterable[(Pub, Evt)] with Serializable$/;"	c
IDENTtree	scala/reflect/generic/PickleFormat.scala	/^    final val IDENTtree = 36$/;"	l
IEEEremainder	scala/MathCommon.scala	/^  def IEEEremainder(x: Double, y: Double): Double = java.lang.Math.IEEEremainder(x, y)$/;"	m
IFtree	scala/reflect/generic/PickleFormat.scala	/^    final val IFtree = 23$/;"	l
IMPLCLASS	scala/reflect/generic/Flags.scala	/^  final val IMPLCLASS     = 0x2000000000L \/\/ symbol is an implementation class$/;"	l
IMPLICIT	scala/reflect/generic/Flags.scala	/^  final val IMPLICIT      = 0x00000200   $/;"	l
IMPLICITMETHODtpe	scala/reflect/generic/PickleFormat.scala	/^  final val IMPLICITMETHODtpe = 22    \/\/ no longer generated$/;"	l
IMPLIED	scala/xml/dtd/Decl.scala	/^case object IMPLIED extends DefaultDecl {$/;"	c
IMPORT	scala/reflect/generic/StdNames.scala	/^    val IMPORT: NameType             = "<import>"$/;"	l
IMPORTtree	scala/reflect/generic/PickleFormat.scala	/^    final val IMPORTtree = 9$/;"	l
INCONSTRUCTOR	scala/reflect/generic/Flags.scala	/^  final val INCONSTRUCTOR = 0x00020000    \/\/ class symbol is defined in this\/superclass constructor.$/;"	l
INFO	scala/annotation/elidable.scala	/^  final val INFO    = 800           \/\/ Level.INFO.intValue()$/;"	l
INT	scala/runtime/BoxesRunTime.java	/^    private static final int CHAR = 0, BYTE = 1, SHORT = 2, INT = 3, LONG = 4, FLOAT = 5, DOUBLE = 6, OTHER = 7;$/;"	f	class:BoxesRunTime	file:
INTERFACE	scala/reflect/generic/Flags.scala	/^  final val INTERFACE     = 0x00000080    \/\/ symbol is an interface (i.e. a trait which defines only abstract methods)  $/;"	l
INVISIBLE	scala/Console.scala	/^  final val INVISIBLE  = "\\033[8m"$/;"	l
IOException	scala/sys/process/package.scala	/^      type IOException     = java.io.IOException    $/;"	T
IONE	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        static final Integer IONE = new Integer(1);$/;"	f	class:ReentrantReadWriteLock.Sync
ISO8859	scala/io/Codec.scala	/^  final val ISO8859 = Charset forName "ISO-8859-1"$/;"	l
IS_ERROR	scala/reflect/generic/Flags.scala	/^  final val IS_ERROR      = 0x100000000L  \/\/ symbol is an error symbol$/;"	l
IScheduler	scala/actors/IScheduler.scala	/^trait IScheduler {$/;"	t
Ident	scala/reflect/Tree.scala	/^case class Ident(sym: Symbol) extends Tree$/;"	c
Ident	scala/reflect/generic/Trees.scala	/^  case class Ident(name: Name) extends RefTree { }$/;"	c
Ident	scala/util/parsing/combinator/testing/RegexTest.scala	/^case class Ident(s: String)$/;"	c
Identifier	scala/util/parsing/combinator/token/StdTokens.scala	/^  case class Identifier(chars: String) extends Token {$/;"	c
IdleSignalling	scala/collection/generic/Signalling.scala	/^object IdleSignalling extends DefaultSignalling$/;"	c
If	scala/reflect/Tree.scala	/^case class If(condition: Tree, trueCase: Tree, falseCase: Tree) extends Tree$/;"	c
If	scala/reflect/generic/Trees.scala	/^  case class If(cond: Tree, thenp: Tree, elsep: Tree)$/;"	c
IllegalArgumentException	scala/package.scala	/^  type IllegalArgumentException        = java.lang.IllegalArgumentException$/;"	T
Immutable	scala/Immutable.scala	/^trait Immutable$/;"	t
ImmutableDefaultKeySet	scala/collection/immutable/MapLike.scala	/^  protected class ImmutableDefaultKeySet extends super.DefaultKeySet with immutable.Set[A] {$/;"	c
ImmutableMapAdaptor	scala/collection/mutable/ImmutableMapAdaptor.scala	/^class ImmutableMapAdaptor[A, B](protected var imap: immutable.Map[A, B])$/;"	c
ImmutableMapFactory	scala/collection/generic/ImmutableMapFactory.scala	/^abstract class ImmutableMapFactory[CC[A, +B] <: immutable.Map[A, B] with immutable.MapLike[A, B, CC[A, B]]] extends MapFactory[CC] $/;"	c
ImmutableSetAdaptor	scala/collection/mutable/ImmutableSetAdaptor.scala	/^class ImmutableSetAdaptor[A](protected var set: immutable.Set[A]) extends Set[A] with Serializable {$/;"	c
ImmutableSetFactory	scala/collection/generic/ImmutableSetFactory.scala	/^abstract class ImmutableSetFactory[CC[X] <: immutable.Set[X] with SetLike[X, CC[X]]]$/;"	c
ImmutableSortedMapFactory	scala/collection/generic/ImmutableSortedMapFactory.scala	/^abstract class ImmutableSortedMapFactory[CC[A, B] <: immutable.SortedMap[A, B] with SortedMapLike[A, B, CC[A, B]]] extends SortedMapFactory[CC] $/;"	c
ImmutableSortedSetFactory	scala/collection/generic/ImmutableSortedSetFactory.scala	/^abstract class ImmutableSortedSetFactory[CC[A] <: immutable.SortedSet[A] with SortedSetLike[A, CC[A]]] extends SortedSetFactory[CC]/;"	c
Impl	scala/collection/immutable/IndexedSeq.scala	/^  class Impl[A](buf: ArrayBuffer[A]) extends IndexedSeq[A] with Serializable {$/;"	c
ImplDef	scala/reflect/generic/Trees.scala	/^  abstract class ImplDef extends MemberDef {$/;"	c
ImplicitConversions	scala/util/parsing/combinator/ImplicitConversions.scala	/^trait ImplicitConversions { self: Parsers => $/;"	t
Implicits	scala/math/Fractional.scala	/^  object Implicits extends ExtraImplicits$/;"	c
Implicits	scala/math/Integral.scala	/^  object Implicits extends ExtraImplicits$/;"	c
Implicits	scala/math/Numeric.scala	/^  object Implicits extends ExtraImplicits { }$/;"	c
Implicits	scala/math/Ordering.scala	/^  object Implicits extends ExtraImplicits { }$/;"	c
Import	scala/reflect/generic/Trees.scala	/^  case class Import(expr: Tree, selectors: List[ImportSelector])$/;"	c
ImportSelector	scala/reflect/generic/Trees.scala	/^  case class ImportSelector(name: Name, namePos: Int, rename: Name, renamePos: Int)$/;"	c
Include	scala/collection/script/Message.scala	/^case class Include[+A](location: Location, elem: A) extends Message[A] {$/;"	c
Inclusion	scala/util/automata/Inclusion.scala	/^trait Inclusion[A <: AnyRef] {$/;"	t
Inclusive	scala/collection/immutable/NumericRange.scala	/^  class Inclusive[T](start: T, end: T, step: T)(implicit num: Integral[T])$/;"	c
Inclusive	scala/collection/immutable/Range.scala	/^  class Inclusive(start: Int, end: Int, step: Int) extends Range(start, end, step) {$/;"	c
Index	scala/collection/script/Location.scala	/^case class Index(n: Int) extends Location$/;"	c
Index	scala/xml/persistent/Index.scala	/^abstract class Index[A] extends Function1[Node,A] {}$/;"	c
IndexOutOfBoundsException	scala/package.scala	/^  type IndexOutOfBoundsException       = java.lang.IndexOutOfBoundsException$/;"	T
IndexedSeq	scala/collection/IndexedSeq.scala	/^object IndexedSeq extends SeqFactory[IndexedSeq] {$/;"	c
IndexedSeq	scala/collection/IndexedSeq.scala	/^trait IndexedSeq[+A] extends Seq[A] $/;"	t
IndexedSeq	scala/collection/immutable/IndexedSeq.scala	/^object IndexedSeq extends SeqFactory[IndexedSeq] {$/;"	c
IndexedSeq	scala/collection/immutable/IndexedSeq.scala	/^trait IndexedSeq[+A] extends Seq[A] $/;"	t
IndexedSeq	scala/collection/mutable/IndexedSeq.scala	/^object IndexedSeq extends SeqFactory[IndexedSeq] {$/;"	c
IndexedSeq	scala/collection/mutable/IndexedSeq.scala	/^trait IndexedSeq[A] extends Seq[A] $/;"	t
IndexedSeq	scala/package.scala	/^  type IndexedSeq[+A] = scala.collection.IndexedSeq[A]$/;"	T
IndexedSeq	scala/package.scala	/^  val IndexedSeq = scala.collection.IndexedSeq$/;"	l
IndexedSeqLike	scala/collection/IndexedSeqLike.scala	/^trait IndexedSeqLike[+A, +Repr] extends SeqLike[A, Repr] {$/;"	t
IndexedSeqLike	scala/collection/mutable/IndexedSeqLike.scala	/^trait IndexedSeqLike[A, +Repr] extends scala.collection.IndexedSeqLike[A, Repr] { self =>$/;"	t
IndexedSeqOptimized	scala/collection/IndexedSeqOptimized.scala	/^trait IndexedSeqOptimized[+A, +Repr] extends IndexedSeqLike[A, Repr] { self =>$/;"	t
IndexedSeqOptimized	scala/collection/mutable/IndexedSeqOptimized.scala	/^trait IndexedSeqOptimized[A, +Repr] extends IndexedSeqLike[A, Repr] with scala.collection.IndexedSeqOptimized[A, Repr] $/;"	t
IndexedSeqView	scala/collection/mutable/IndexedSeqView.scala	/^object IndexedSeqView {$/;"	c
IndexedSeqView	scala/collection/mutable/IndexedSeqView.scala	/^trait IndexedSeqView[A, +Coll] extends IndexedSeq[A]$/;"	t
Input	scala/util/parsing/combinator/Parsers.scala	/^  type Input = Reader[Elem]$/;"	T
InputChannel	scala/actors/InputChannel.scala	/^trait InputChannel[+Msg] {$/;"	t
InputSource	scala/xml/package.scala	/^  type InputSource        = org.xml.sax.InputSource$/;"	T
InputStream	scala/sys/process/package.scala	/^      type InputStream     = java.io.InputStream$/;"	T
InputType	scala/xml/parsing/MarkupParser.scala	/^  type InputType    = Source$/;"	T
InputType	scala/xml/parsing/MarkupParserCommon.scala	/^  type InputType        \/\/ Source, CharArrayReader$/;"	T
Int	scala/Int.scala	/^final class Int extends AnyVal {$/;"	c
Int	scala/Int.scala	/^object Int extends AnyValCompanion {$/;"	c
Int	scala/collection/generic/BitOperations.scala	/^    type Int = scala.Int$/;"	T
Int	scala/collection/generic/BitOperations.scala	/^  object Int extends Int$/;"	c
Int	scala/collection/generic/BitOperations.scala	/^  trait Int {$/;"	t
Int	scala/collection/immutable/Range.scala	/^  object Int {$/;"	c
Int	scala/math/Ordering.scala	/^  implicit object Int extends IntOrdering$/;"	c
Int	scala/reflect/ClassManifest.scala	/^  val Int     = Manifest.Int$/;"	l
Int	scala/reflect/Manifest.scala	/^  val Int: AnyValManifest[Int] = new AnyValManifest[scala.Int] {$/;"	l
IntClass	scala/reflect/generic/StandardDefinitions.scala	/^    def IntClass    : Symbol$/;"	m
IntDef	scala/xml/dtd/Decl.scala	/^case class IntDef(value:String) extends EntityDef {$/;"	c
IntIsIntegral	scala/math/Numeric.scala	/^  implicit object IntIsIntegral extends IntIsIntegral with Ordering.IntOrdering$/;"	c
IntIsIntegral	scala/math/Numeric.scala	/^  trait IntIsIntegral extends Integral[Int] {$/;"	t
IntMap	scala/collection/immutable/IntMap.scala	/^object IntMap {$/;"	c
IntMap	scala/collection/immutable/IntMap.scala	/^sealed abstract class IntMap[+T] extends Map[Int, T] with MapLike[Int, T, IntMap[T]] {$/;"	c
IntOrdering	scala/math/Ordering.scala	/^  trait IntOrdering extends Ordering[Int] {$/;"	t
IntProp	scala/sys/Prop.scala	/^  implicit object IntProp extends CreatorImpl[Int](_.toInt)$/;"	c
IntRef	scala/runtime/IntRef.java	/^    public IntRef(int elem) { this.elem = elem; }$/;"	m	class:IntRef
IntRef	scala/runtime/IntRef.java	/^public class IntRef implements java.io.Serializable {$/;"	c
IntTag	scala/reflect/generic/Constants.scala	/^  final val IntTag     = 6$/;"	l
Integer	scala/package.scala	/^  type Integer = java.lang.Integer$/;"	T
Integer2int	scala/Predef.scala	/^  implicit def Integer2int(x: java.lang.Integer): Int         = x.intValue$/;"	m
Integer2intNullConflict	scala/LowPriorityImplicits.scala	/^  implicit def Integer2intNullConflict(x: Null): Int         = sys.error("value error")$/;"	m
Integral	scala/math/Integral.scala	/^object Integral {$/;"	c
Integral	scala/math/Integral.scala	/^trait Integral[T] extends Numeric[T] {$/;"	t
Integral	scala/package.scala	/^  type Integral[T] = scala.math.Integral[T]$/;"	T
IntegralOps	scala/math/Integral.scala	/^  class IntegralOps(lhs: T) extends Ops(lhs) {$/;"	c
IntegralProxy	scala/runtime/ScalaNumberProxy.scala	/^abstract class IntegralProxy[T : Integral] extends ScalaWholeNumberProxy[T] with RangedProxy[T] {$/;"	c
Item	scala/xml/PrettyPrinter.scala	/^  class Item$/;"	c
Iterable	scala/collection/Iterable.scala	/^object Iterable extends TraversableFactory[Iterable] {$/;"	c
Iterable	scala/collection/Iterable.scala	/^trait Iterable[+A] extends Traversable[A] $/;"	t
Iterable	scala/collection/immutable/Iterable.scala	/^object Iterable extends TraversableFactory[Iterable] {$/;"	c
Iterable	scala/collection/immutable/Iterable.scala	/^trait Iterable[+A] extends Traversable[A] $/;"	t
Iterable	scala/collection/mutable/Iterable.scala	/^object Iterable extends TraversableFactory[Iterable] {$/;"	c
Iterable	scala/collection/mutable/Iterable.scala	/^trait Iterable[A] extends Traversable[A] $/;"	t
Iterable	scala/math/Ordering.scala	/^  implicit def Iterable[T](implicit ord: Ordering[T]): Ordering[Iterable[T]] = $/;"	m
Iterable	scala/package.scala	/^  type Iterable[+A] = scala.collection.Iterable[A]$/;"	T
Iterable	scala/package.scala	/^  val Iterable = scala.collection.Iterable$/;"	l
IterableForwarder	scala/collection/generic/IterableForwarder.scala	/^trait IterableForwarder[+A] extends Iterable[A] with TraversableForwarder[A] {$/;"	t
IterableLike	scala/collection/IterableLike.scala	/^trait IterableLike[+A, +Repr] extends Equals with TraversableLike[A, Repr] with GenIterableLike[A, Repr] { $/;"	t
IterableMethods	scala/collection/interfaces/IterableMethods.scala	/^trait IterableMethods[+A, +This <: IterableLike[A, This] with Iterable[A]] extends TraversableMethods[A, This] {$/;"	t
IterableProxy	scala/collection/IterableProxy.scala	/^trait IterableProxy[+A] extends Iterable[A] with IterableProxyLike[A, Iterable[A]] $/;"	t
IterableProxyLike	scala/collection/IterableProxyLike.scala	/^trait IterableProxyLike[+A, +Repr <: IterableLike[A, Repr] with Iterable[A]]$/;"	t
IterableSplitter	scala/collection/parallel/RemainsIterator.scala	/^trait IterableSplitter[+T]$/;"	t
IterableView	scala/collection/IterableView.scala	/^object IterableView {$/;"	c
IterableView	scala/collection/IterableView.scala	/^trait IterableView[+A, +Coll] extends IterableViewLike[A, Coll, IterableView[A, Coll]] with GenIterableView[A, Coll]$/;"	t
IterableViewLike	scala/collection/IterableViewLike.scala	/^trait IterableViewLike[+A, $/;"	t
IterableWrapper	scala/collection/JavaConversions.scala	/^  case class IterableWrapper[A](underlying : Iterable[A])$/;"	c
IterableWrapperTrait	scala/collection/JavaConversions.scala	/^  trait IterableWrapperTrait[A] extends ju.AbstractCollection[A] {$/;"	t
Iterator	scala/collection/Iterator.scala	/^object Iterator {$/;"	c
Iterator	scala/collection/Iterator.scala	/^trait Iterator[+A] extends TraversableOnce[A] {$/;"	t
Iterator	scala/package.scala	/^  type Iterator[+A] = scala.collection.Iterator[A]$/;"	T
Iterator	scala/package.scala	/^  val Iterator = scala.collection.Iterator$/;"	l
IteratorWrapper	scala/collection/JavaConversions.scala	/^  case class IteratorWrapper[A](underlying : Iterator[A]) extends ju.Iterator[A] with ju.Enumeration[A] {$/;"	c
Itr	scala/actors/threadpool/LinkedBlockingQueue.java	/^        Itr() {$/;"	m	class:LinkedBlockingQueue.Itr
Itr	scala/actors/threadpool/LinkedBlockingQueue.java	/^    private class Itr implements Iterator<E> {$/;"	c	class:LinkedBlockingQueue
JAVA	scala/reflect/generic/Flags.scala	/^  final val JAVA          = 0x00100000    \/\/ symbol was defined by a Java class$/;"	l
JCollectionWrapper	scala/collection/JavaConversions.scala	/^  case class JCollectionWrapper[A](underlying : ju.Collection[A]) extends Iterable[A] {$/;"	c
JConcurrentMapWrapper	scala/collection/JavaConversions.scala	/^  case class JConcurrentMapWrapper[A, B](val underlying: juc.ConcurrentMap[A, B])$/;"	c
JDictionaryWrapper	scala/collection/JavaConversions.scala	/^  case class JDictionaryWrapper[A, B](underlying: ju.Dictionary[A, B])$/;"	c
JEnumerationWrapper	scala/collection/JavaConversions.scala	/^  case class JEnumerationWrapper[A](underlying : ju.Enumeration[A]) extends Iterator[A] {$/;"	c
JIterableWrapper	scala/collection/JavaConversions.scala	/^  case class JIterableWrapper[A](underlying : jl.Iterable[A]) extends Iterable[A] {$/;"	c
JIteratorWrapper	scala/collection/JavaConversions.scala	/^  case class JIteratorWrapper[A](underlying : ju.Iterator[A]) extends Iterator[A] {$/;"	c
JListWrapper	scala/collection/JavaConversions.scala	/^  case class JListWrapper[A](val underlying : ju.List[A]) extends mutable.Buffer[A] {$/;"	c
JMapWrapper	scala/collection/JavaConversions.scala	/^  case class JMapWrapper[A, B](val underlying : ju.Map[A, B])$/;"	c
JMapWrapperLike	scala/collection/JavaConversions.scala	/^  trait JMapWrapperLike[A, B, +Repr <: mutable.MapLike[A, B, Repr] with mutable.Map[A, B]]$/;"	t
JProcess	scala/sys/process/package.scala	/^      type JProcess        = java.lang.Process$/;"	T
JProcessBuilder	scala/sys/process/package.scala	/^      type JProcessBuilder = java.lang.ProcessBuilder$/;"	T
JPropertiesWrapper	scala/collection/JavaConversions.scala	/^  case class JPropertiesWrapper(underlying: ju.Properties)$/;"	c
JSON	scala/util/parsing/json/JSON.scala	/^object JSON extends Parser {$/;"	c
JSONArray	scala/util/parsing/json/Parser.scala	/^case class JSONArray (list : List[Any]) extends JSONType {$/;"	c
JSONFormat	scala/util/parsing/json/Parser.scala	/^object JSONFormat {$/;"	c
JSONObject	scala/util/parsing/json/Parser.scala	/^case class JSONObject (obj : Map[String,Any]) extends JSONType {$/;"	c
JSONType	scala/util/parsing/json/Parser.scala	/^sealed abstract class JSONType {$/;"	c
JSetWrapper	scala/collection/JavaConversions.scala	/^  case class JSetWrapper[A](underlying : ju.Set[A]) extends mutable.Set[A] with mutable.SetLike[A, JSetWrapper[A]] {$/;"	c
JavaConversions	scala/collection/JavaConversions.scala	/^object JavaConversions {$/;"	c
JavaConversions	scala/concurrent/JavaConversions.scala	/^object JavaConversions {$/;"	c
JavaConverters	scala/collection/JavaConverters.scala	/^object JavaConverters {$/;"	c
JavaSerializer	scala/actors/remote/JavaSerializer.scala	/^class JavaSerializer(serv: Service, cl: ClassLoader) extends Serializer(serv) {$/;"	c
JavaTokenParsers	scala/util/parsing/combinator/JavaTokenParsers.scala	/^trait JavaTokenParsers extends RegexParsers {$/;"	t
Keyword	scala/util/parsing/combinator/token/StdTokens.scala	/^  case class Keyword(chars: String) extends Token {$/;"	c
LABEL	scala/reflect/generic/Flags.scala	/^  final val LABEL         = 0x00020000    \/\/ method symbol is a label. Set by TailCall$/;"	l
LABELtree	scala/reflect/generic/PickleFormat.scala	/^    final val LABELtree = 8$/;"	l
LAZY	scala/reflect/generic/Flags.scala	/^  final val LAZY          = 0x80000000L   \/\/ symbol is a lazy val. can't have MUTABLE unless transformed by typer  $/;"	l
LIFTED	scala/reflect/generic/Flags.scala	/^  final val LIFTED        = 0x400000000L  \/\/ class has been lifted out to package level$/;"	l
LINE_BITS	scala/io/Position.scala	/^  final val LINE_BITS   = 20$/;"	l
LINE_MASK	scala/io/Position.scala	/^  final val LINE_MASK   = (1 << LINE_BITS) - 1$/;"	l
LITERAL	scala/reflect/generic/PickleFormat.scala	/^  final val LITERAL = 23   \/\/ base line for literals$/;"	l
LITERALboolean	scala/reflect/generic/PickleFormat.scala	/^  final val LITERALboolean = 25$/;"	l
LITERALbyte	scala/reflect/generic/PickleFormat.scala	/^  final val LITERALbyte = 26$/;"	l
LITERALchar	scala/reflect/generic/PickleFormat.scala	/^  final val LITERALchar = 28$/;"	l
LITERALclass	scala/reflect/generic/PickleFormat.scala	/^  final val LITERALclass = 35$/;"	l
LITERALdouble	scala/reflect/generic/PickleFormat.scala	/^  final val LITERALdouble = 32$/;"	l
LITERALenum	scala/reflect/generic/PickleFormat.scala	/^  final val LITERALenum = 36$/;"	l
LITERALfloat	scala/reflect/generic/PickleFormat.scala	/^  final val LITERALfloat = 31$/;"	l
LITERALint	scala/reflect/generic/PickleFormat.scala	/^  final val LITERALint = 29$/;"	l
LITERALlong	scala/reflect/generic/PickleFormat.scala	/^  final val LITERALlong = 30$/;"	l
LITERALnull	scala/reflect/generic/PickleFormat.scala	/^  final val LITERALnull = 34$/;"	l
LITERALshort	scala/reflect/generic/PickleFormat.scala	/^  final val LITERALshort = 27$/;"	l
LITERALstring	scala/reflect/generic/PickleFormat.scala	/^  final val LITERALstring = 33$/;"	l
LITERALtree	scala/reflect/generic/PickleFormat.scala	/^    final val LITERALtree = 37$/;"	l
LITERALunit	scala/reflect/generic/PickleFormat.scala	/^  final val LITERALunit = 24$/;"	l
LOCAL	scala/reflect/generic/Flags.scala	/^  final val LOCAL         = 0x00080000    \/\/ symbol is local to current class (i.e. private[this] or protected[this]$/;"	l
LOCAL_SUFFIX_STRING	scala/reflect/generic/StdNames.scala	/^    val LOCAL_SUFFIX_STRING     = " "$/;"	l
LOCKED	scala/reflect/generic/Flags.scala	/^  final val LOCKED        = 0x8000000000L \/\/ temporary flag to catch cyclic dependencies$/;"	l
LONG	scala/runtime/BoxesRunTime.java	/^    private static final int CHAR = 0, BYTE = 1, SHORT = 2, INT = 3, LONG = 4, FLOAT = 5, DOUBLE = 6, OTHER = 7;$/;"	f	class:BoxesRunTime	file:
LPAREN	scala/xml/dtd/Tokens.scala	/^  final val LPAREN       = 3$/;"	l
LR	scala/util/parsing/combinator/PackratParsers.scala	/^  private case class LR(var seed: ParseResult[_], var rule: Parser[_], var head: Option[Head]){$/;"	c
Label	scala/util/regexp/WordExp.scala	/^  abstract class Label$/;"	c
LabelDef	scala/reflect/generic/Trees.scala	/^  case class LabelDef(name: TermName, params: List[Ident], rhs: Tree)$/;"	c
LabelSymbol	scala/reflect/Symbol.scala	/^case class LabelSymbol(val name: String) extends Symbol {$/;"	c
LabelledRHS	scala/util/grammar/TreeRHS.scala	/^case class LabelledRHS[A](label: A, hnt: Int) extends TreeRHS$/;"	c
LazyBuilder	scala/collection/mutable/LazyBuilder.scala	/^abstract class LazyBuilder[Elem, +To] extends Builder[Elem, To] {$/;"	c
LazyCell	scala/collection/immutable/Stream.scala	/^  class LazyCell(st: => Stream[A]) {$/;"	c
LazyCombiner	scala/collection/parallel/mutable/LazyCombiner.scala	/^trait LazyCombiner[Elem, +To, Buff <: Growable[Elem] with Sizing] extends Combiner[Elem, To]$/;"	t
LazyType	scala/reflect/generic/Types.scala	/^  type LazyType <: Type with AbsLazyType$/;"	T
Leading	scala/collection/Iterator.scala	/^    class Leading extends Iterator[A] {$/;"	c
Left	scala/Either.scala	/^final case class Left[+A, +B](a: A) extends Either[A, B] { $/;"	c
LeftProjection	scala/Either.scala	/^  final case class LeftProjection[+A, +B](e: Either[A, B]) {$/;"	c
Letter	scala/util/regexp/WordExp.scala	/^  case class Letter(a: _labelT) extends RegExp {$/;"	c
Lexer	scala/util/parsing/json/Lexer.scala	/^class Lexer extends StdLexical with ImplicitConversions {$/;"	c
Lexical	scala/util/parsing/combinator/lexical/Lexical.scala	/^abstract class Lexical extends Scanners with Tokens {$/;"	c
LibraryCommonNames	scala/reflect/generic/StdNames.scala	/^  trait LibraryCommonNames {$/;"	t
LibraryTermNames	scala/reflect/generic/StdNames.scala	/^  trait LibraryTermNames extends LibraryCommonNames {$/;"	t
LibraryTypeNames	scala/reflect/generic/StdNames.scala	/^  trait LibraryTypeNames extends LibraryCommonNames {$/;"	t
LifoWaitQueue	scala/actors/threadpool/SynchronousQueue.java	/^    static final class LifoWaitQueue extends WaitQueue implements java.io.Serializable {$/;"	c	class:SynchronousQueue
LineIterator	scala/io/Source.scala	/^  class LineIterator() extends Iterator[String] {$/;"	c
LinearSeq	scala/collection/LinearSeq.scala	/^object LinearSeq extends SeqFactory[LinearSeq] {$/;"	c
LinearSeq	scala/collection/LinearSeq.scala	/^trait LinearSeq[+A] extends Seq[A] $/;"	t
LinearSeq	scala/collection/immutable/LinearSeq.scala	/^object LinearSeq extends SeqFactory[LinearSeq] {$/;"	c
LinearSeq	scala/collection/immutable/LinearSeq.scala	/^trait LinearSeq[+A] extends Seq[A] $/;"	t
LinearSeq	scala/collection/mutable/LinearSeq.scala	/^object LinearSeq extends SeqFactory[LinearSeq] {$/;"	c
LinearSeq	scala/collection/mutable/LinearSeq.scala	/^trait LinearSeq[A] extends Seq[A] $/;"	t
LinearSeqLike	scala/collection/LinearSeqLike.scala	/^trait LinearSeqLike[+A, +Repr <: LinearSeqLike[A, Repr]] extends SeqLike[A, Repr] { self: Repr =>$/;"	t
LinearSeqOptimized	scala/collection/LinearSeqOptimized.scala	/^trait LinearSeqOptimized[+A, +Repr <: LinearSeqOptimized[A, Repr]] extends LinearSeqLike[A, Repr] { self: Repr =>$/;"	t
LinkToFun	scala/actors/remote/Proxy.scala	/^class LinkToFun extends Function2[AbstractActor, Proxy, Unit] with Serializable {$/;"	c
LinkedBlockingQueue	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public LinkedBlockingQueue() {$/;"	m	class:LinkedBlockingQueue
LinkedBlockingQueue	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public LinkedBlockingQueue(Collection<? extends E> c) {$/;"	m	class:LinkedBlockingQueue
LinkedBlockingQueue	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public LinkedBlockingQueue(int capacity) {$/;"	m	class:LinkedBlockingQueue
LinkedBlockingQueue	scala/actors/threadpool/LinkedBlockingQueue.java	/^public class LinkedBlockingQueue<E> extends java.util.AbstractQueue<E>$/;"	c
LinkedEntry	scala/collection/mutable/LinkedEntry.scala	/^final class LinkedEntry[A, B](val key: A, var value: B)$/;"	c
LinkedHashMap	scala/collection/mutable/LinkedHashMap.scala	/^class LinkedHashMap[A, B] extends Map[A, B] $/;"	c
LinkedHashMap	scala/collection/mutable/LinkedHashMap.scala	/^object LinkedHashMap extends MutableMapFactory[LinkedHashMap] {$/;"	c
LinkedHashSet	scala/collection/mutable/LinkedHashSet.scala	/^class LinkedHashSet[A] extends Set[A] $/;"	c
LinkedHashSet	scala/collection/mutable/LinkedHashSet.scala	/^object LinkedHashSet extends MutableSetFactory[LinkedHashSet] {$/;"	c
LinkedList	scala/collection/mutable/LinkedList.scala	/^class LinkedList[A]() extends LinearSeq[A] $/;"	c
LinkedList	scala/collection/mutable/LinkedList.scala	/^object LinkedList extends SeqFactory[LinkedList] {$/;"	c
LinkedList	scala/concurrent/Channel.scala	/^  class LinkedList[A] {$/;"	c
LinkedListLike	scala/collection/mutable/LinkedListLike.scala	/^trait LinkedListLike[A, This <: Seq[A] with LinkedListLike[A, This]] extends SeqLike[A, This] { self =>$/;"	t
LinkedListQueueCreator	scala/concurrent/MailBox.scala	/^trait LinkedListQueueCreator {$/;"	t
LinkedNode	scala/actors/LinkedNode.java	/^  public LinkedNode() {}$/;"	m	class:LinkedNode
LinkedNode	scala/actors/LinkedNode.java	/^  public LinkedNode(Object x) { value = x; }$/;"	m	class:LinkedNode
LinkedNode	scala/actors/LinkedNode.java	/^  public LinkedNode(Object x, LinkedNode n) { value = x; next = n; }$/;"	m	class:LinkedNode
LinkedNode	scala/actors/LinkedNode.java	/^public class LinkedNode { $/;"	c
LinkedQueue	scala/actors/LinkedQueue.java	/^  public LinkedQueue() {$/;"	m	class:LinkedQueue
LinkedQueue	scala/actors/LinkedQueue.java	/^public class LinkedQueue {$/;"	c
List	scala/collection/immutable/List.scala	/^object List extends SeqFactory[List] {$/;"	c
List	scala/collection/immutable/List.scala	/^sealed abstract class List[+A] extends LinearSeq[A] $/;"	c
List	scala/package.scala	/^  type List[+A] = scala.collection.immutable.List[A]$/;"	T
List	scala/package.scala	/^  val List = scala.collection.immutable.List$/;"	l
ListBuffer	scala/collection/mutable/ListBuffer.scala	/^final class ListBuffer[A] $/;"	c
ListBuffer	scala/collection/mutable/ListBuffer.scala	/^object ListBuffer extends SeqFactory[ListBuffer] {$/;"	c
ListIsMappable	scala/util/parsing/ast/Binders.scala	/^  implicit def ListIsMappable[t <% Mappable[t]](xs: List[t]): Mappable[List[t]] =$/;"	m
ListMap	scala/collection/immutable/ListMap.scala	/^class ListMap[A, +B] extends Map[A, B] with MapLike[A, B, ListMap[A, B]] with Serializable {$/;"	c
ListMap	scala/collection/immutable/ListMap.scala	/^object ListMap extends ImmutableMapFactory[ListMap] {$/;"	c
ListMap	scala/collection/mutable/ListMap.scala	/^class ListMap[A, B] extends Map[A, B] with MapLike[A, B, ListMap[A, B]] with Serializable {$/;"	c
ListMap	scala/collection/mutable/ListMap.scala	/^object ListMap extends MutableMapFactory[ListMap] {$/;"	c
ListQueueCreator	scala/concurrent/MailBox.scala	/^trait ListQueueCreator {$/;"	t
ListSet	scala/collection/immutable/ListSet.scala	/^class ListSet[A] extends Set[A]$/;"	c
ListSet	scala/collection/immutable/ListSet.scala	/^object ListSet extends ImmutableSetFactory[ListSet] {$/;"	c
ListSetBuilder	scala/collection/immutable/ListSet.scala	/^  class ListSetBuilder[Elem](initial: ListSet[Elem]) extends Builder[Elem, ListSet[Elem]] {$/;"	c
Literal	scala/reflect/Tree.scala	/^case class Literal(value: Any) extends Tree$/;"	c
Literal	scala/reflect/generic/Trees.scala	/^  case class Literal(value: Constant)$/;"	c
Literal	scala/reflect/generic/Trees.scala	/^  def Literal(value: Any): Literal =$/;"	m
LiteralAnnotArg	scala/reflect/generic/AnnotationInfos.scala	/^  type LiteralAnnotArg <: ClassfileAnnotArg$/;"	T
LiteralAnnotArg	scala/reflect/generic/AnnotationInfos.scala	/^  val LiteralAnnotArg: LiteralAnnotArgExtractor$/;"	l
LiteralAnnotArgExtractor	scala/reflect/generic/AnnotationInfos.scala	/^  abstract class LiteralAnnotArgExtractor {$/;"	c
LocalApply0	scala/actors/remote/NetKernel.scala	/^case class LocalApply0(rfun: Function2[AbstractActor, Proxy, Unit], a: AbstractActor)$/;"	c
LocalMethod	scala/reflect/Symbol.scala	/^case class LocalMethod(owner: Symbol, name: String, tpe: Type) extends LocalSymbol$/;"	c
LocalSymbol	scala/reflect/Symbol.scala	/^abstract class LocalSymbol extends Symbol$/;"	c
Location	scala/collection/script/Location.scala	/^sealed abstract class Location$/;"	c
Locator	scala/actors/remote/NetKernel.scala	/^case class Locator(node: Node, name: Symbol)$/;"	c
Lock	scala/actors/threadpool/locks/Lock.java	/^public interface Lock {$/;"	i
Lock	scala/concurrent/Lock.scala	/^class Lock {$/;"	c
Logged	scala/util/logging/Logged.scala	/^trait Logged {$/;"	t
LoggedNodeFactory	scala/xml/factory/LoggedNodeFactory.scala	/^trait LoggedNodeFactory[A <: Node] extends NodeFactory[A] with scala.util.logging.Logged {$/;"	t
Long	scala/Long.scala	/^final class Long extends AnyVal {$/;"	c
Long	scala/Long.scala	/^object Long extends AnyValCompanion {$/;"	c
Long	scala/collection/generic/BitOperations.scala	/^    type Long = scala.Long$/;"	T
Long	scala/collection/generic/BitOperations.scala	/^  object Long extends Long$/;"	c
Long	scala/collection/generic/BitOperations.scala	/^  trait Long {$/;"	t
Long	scala/collection/immutable/Range.scala	/^  object Long {$/;"	c
Long	scala/math/Ordering.scala	/^  implicit object Long extends LongOrdering$/;"	c
Long	scala/reflect/ClassManifest.scala	/^  val Long    = Manifest.Long$/;"	l
Long	scala/reflect/Manifest.scala	/^  val Long: AnyValManifest[Long] = new AnyValManifest[scala.Long] {$/;"	l
Long2long	scala/Predef.scala	/^  implicit def Long2long(x: java.lang.Long): Long             = x.longValue$/;"	m
Long2longNullConflict	scala/LowPriorityImplicits.scala	/^  implicit def Long2longNullConflict(x: Null): Long          = sys.error("value error")$/;"	m
LongClass	scala/reflect/generic/StandardDefinitions.scala	/^    def LongClass   : Symbol$/;"	m
LongIsIntegral	scala/math/Numeric.scala	/^  implicit object LongIsIntegral extends LongIsIntegral with Ordering.LongOrdering$/;"	c
LongIsIntegral	scala/math/Numeric.scala	/^  trait LongIsIntegral extends Integral[Long] {$/;"	t
LongMap	scala/collection/immutable/LongMap.scala	/^object LongMap {$/;"	c
LongMap	scala/collection/immutable/LongMap.scala	/^sealed abstract class LongMap[+T] extends Map[Long, T] with MapLike[Long, T, LongMap[T]] {$/;"	c
LongOrdering	scala/math/Ordering.scala	/^  trait LongOrdering extends Ordering[Long] {$/;"	t
LongRef	scala/runtime/LongRef.java	/^    public LongRef(long elem) { this.elem = elem; }$/;"	m	class:LongRef
LongRef	scala/runtime/LongRef.java	/^public class LongRef implements java.io.Serializable {$/;"	c
LongTag	scala/reflect/generic/Constants.scala	/^  final val LongTag    = 7$/;"	l
LowPriorityCodecImplicits	scala/io/Codec.scala	/^trait LowPriorityCodecImplicits {$/;"	t
LowPriorityEquiv	scala/math/Equiv.scala	/^trait LowPriorityEquiv {$/;"	t
LowPriorityImplicits	scala/LowPriorityImplicits.scala	/^class LowPriorityImplicits {$/;"	c
LowPriorityOrderingImplicits	scala/math/Ordering.scala	/^trait LowPriorityOrderingImplicits {$/;"	t
MAGENTA	scala/Console.scala	/^  final val MAGENTA    = "\\033[35m"$/;"	l
MAGENTA_B	scala/Console.scala	/^  final val MAGENTA_B  = "\\033[45m"$/;"	l
MATCHtree	scala/reflect/generic/PickleFormat.scala	/^    final val MATCHtree = 24$/;"	l
MAX	scala/actors/threadpool/TimeUnit.java	/^    static final long MAX = Long.MAX_VALUE;$/;"	f	class:TimeUnit
MAXIMUM	scala/annotation/elidable.scala	/^  final val MAXIMUM = OFF$/;"	l
MAX_BYTE	scala/Math.scala	/^  val MAX_BYTE = java.lang.Byte.MAX_VALUE$/;"	l
MAX_CHAR	scala/Math.scala	/^  val MAX_CHAR = java.lang.Character.MAX_VALUE$/;"	l
MAX_DOUBLE	scala/Math.scala	/^  val MAX_DOUBLE = java.lang.Double.MAX_VALUE$/;"	l
MAX_FLOAT	scala/Math.scala	/^  val MAX_FLOAT  = java.lang.Float.MAX_VALUE$/;"	l
MAX_INT	scala/Math.scala	/^  val MAX_INT = java.lang.Integer.MAX_VALUE$/;"	l
MAX_LONG	scala/Math.scala	/^  val MAX_LONG = java.lang.Long.MAX_VALUE$/;"	l
MAX_SHORT	scala/Math.scala	/^  val MAX_SHORT = java.lang.Short.MAX_VALUE$/;"	l
METHOD	scala/reflect/generic/Flags.scala	/^  final val METHOD        = 0x00000040    \/\/ a method$/;"	l
METHODtpe	scala/reflect/generic/PickleFormat.scala	/^  final val METHODtpe = 20$/;"	l
MICROSECONDS	scala/actors/threadpool/TimeUnit.java	/^    public static final TimeUnit MICROSECONDS = new TimeUnit(1, "MICROSECONDS") {$/;"	f	class:TimeUnit
MILLISECONDS	scala/actors/threadpool/TimeUnit.java	/^    public static final TimeUnit MILLISECONDS = new TimeUnit(2, "MILLISECONDS") {$/;"	f	class:TimeUnit
MINIMUM	scala/annotation/elidable.scala	/^  final val MINIMUM = ALL$/;"	l
MINUTES	scala/actors/threadpool/TimeUnit.java	/^    public static final TimeUnit MINUTES = new TimeUnit(4, "MINUTES") {$/;"	f	class:TimeUnit
MIN_BYTE	scala/Math.scala	/^  val MIN_BYTE = java.lang.Byte.MIN_VALUE$/;"	l
MIN_CHAR	scala/Math.scala	/^  val MIN_CHAR = java.lang.Character.MIN_VALUE$/;"	l
MIN_DOUBLE	scala/Math.scala	/^  val MIN_DOUBLE = -java.lang.Double.MAX_VALUE$/;"	l
MIN_FLOAT	scala/Math.scala	/^  val MIN_FLOAT  = -java.lang.Float.MAX_VALUE$/;"	l
MIN_FOR_COPY	scala/collection/parallel/package.scala	/^  val MIN_FOR_COPY = 512$/;"	l
MIN_INT	scala/Math.scala	/^  val MIN_INT = java.lang.Integer.MIN_VALUE$/;"	l
MIN_LONG	scala/Math.scala	/^  val MIN_LONG = java.lang.Long.MIN_VALUE$/;"	l
MIN_SHORT	scala/Math.scala	/^  val MIN_SHORT = java.lang.Short.MIN_VALUE$/;"	l
MIXED	scala/xml/dtd/ContentModel.scala	/^case class MIXED(r: ContentModel.RegExp) extends DFAContentModel {$/;"	c
MIXEDIN	scala/reflect/generic/Flags.scala	/^  final val MIXEDIN       = 0x800000000L  \/\/ term member has been mixed in$/;"	l
MODIFIERS	scala/reflect/generic/PickleFormat.scala	/^  final val MODIFIERS = 50$/;"	l
MODULE	scala/reflect/generic/Flags.scala	/^  final val MODULE        = 0x00000100    \/\/ symbol is module or class implementing a module$/;"	l
MODULEVAR	scala/reflect/generic/Flags.scala	/^  final val MODULEVAR     = 0x40000000    \/\/ for variables: is the variable caching a module value$/;"	l
MODULE_SUFFIX	scala/reflect/generic/StdNames.scala	/^    val MODULE_SUFFIX: NameType      = "$module"$/;"	l
MODULEsym	scala/reflect/generic/PickleFormat.scala	/^  final val MODULEsym = 7$/;"	l
MODULEtree	scala/reflect/generic/PickleFormat.scala	/^    final val MODULEtree = 4$/;"	l
MUTABLE	scala/reflect/generic/Flags.scala	/^  final val MUTABLE       = 0x00001000    \/\/ symbol is a mutable variable.$/;"	l
MailBox	scala/concurrent/MailBox.scala	/^class MailBox extends AnyRef with ListQueueCreator {$/;"	c
Main	scala/xml/include/sax/Main.scala	/^object Main {$/;"	c
MajorVersion	scala/reflect/generic/PickleFormat.scala	/^  val MajorVersion = 5$/;"	l
MakeValidationException	scala/xml/dtd/ValidationException.scala	/^object MakeValidationException {$/;"	c
MalformedAttributeException	scala/xml/MalformedAttributeException.scala	/^case class MalformedAttributeException(msg: String) extends RuntimeException(msg)$/;"	c
ManagedBlocker	scala/concurrent/ManagedBlocker.scala	/^trait ManagedBlocker {$/;"	t
Manifest	scala/Predef.scala	/^  type Manifest[T]      = scala.reflect.Manifest[T]$/;"	T
Manifest	scala/Predef.scala	/^  val Manifest          = scala.reflect.Manifest$/;"	l
Manifest	scala/reflect/Manifest.scala	/^object Manifest {$/;"	c
Manifest	scala/reflect/Manifest.scala	/^trait Manifest[T] extends ClassManifest[T] with Equals {$/;"	t
Map	scala/Predef.scala	/^  type Map[A, +B] = immutable.Map[A, B]$/;"	T
Map	scala/Predef.scala	/^  val Map         = immutable.Map$/;"	l
Map	scala/collection/Map.scala	/^object Map extends MapFactory[Map] {$/;"	c
Map	scala/collection/Map.scala	/^trait Map[A, +B] extends Iterable[(A, B)] with GenMap[A, B] with MapLike[A, B, Map[A, B]] {$/;"	t
Map	scala/collection/immutable/Map.scala	/^object Map extends ImmutableMapFactory[Map] {$/;"	c
Map	scala/collection/immutable/Map.scala	/^trait Map[A, +B] extends Iterable[(A, B)] $/;"	t
Map	scala/collection/mutable/Map.scala	/^object Map extends MutableMapFactory[Map] {$/;"	c
Map	scala/collection/mutable/Map.scala	/^trait Map[A, B] $/;"	t
Map	scala/collection/parallel/mutable/ParArray.scala	/^  class Map[S](f: T => S, targetarr: Array[Any], offset: Int, howmany: Int) extends Task[Unit, Map[S]] {$/;"	c
Map1	scala/collection/immutable/Map.scala	/^  class Map1[A, +B](key1: A, value1: B) extends Map[A, B] with Serializable {$/;"	c
Map2	scala/collection/immutable/Map.scala	/^  class Map2[A, +B](key1: A, value1: B, key2: A, value2: B) extends Map[A, B] with Serializable {$/;"	c
Map3	scala/collection/immutable/Map.scala	/^  class Map3[A, +B](key1: A, value1: B, key2: A, value2: B, key3: A, value3: B) extends Map[A, B] with Serializable {$/;"	c
Map4	scala/collection/immutable/Map.scala	/^  class Map4[A, +B](key1: A, value1: B, key2: A, value2: B, key3: A, value3: B, key4: A, value4: B) extends Map[A, B] with Serializable {$/;"	c
MapBuilder	scala/collection/mutable/MapBuilder.scala	/^class MapBuilder[A, B, Coll <: scala.collection.GenMap[A, B] with scala.collection.GenMapLike[A, B, Coll]](empty: Coll) $/;"	c
MapCanBuildFrom	scala/collection/generic/GenMapFactory.scala	/^  class MapCanBuildFrom[A, B] extends CanBuildFrom[Coll, (A, B), CC[A, B]] {$/;"	c
MapColl	scala/collection/generic/ParMapFactory.scala	/^  type MapColl = CC[_, _]$/;"	T
MapFactory	scala/collection/generic/MapFactory.scala	/^abstract class MapFactory[CC[A, B] <: Map[A, B] with MapLike[A, B, CC[A, B]]] extends GenMapFactory[CC] {$/;"	c
MapLike	scala/collection/MapLike.scala	/^trait MapLike[A, +B, +This <: MapLike[A, B, This] with Map[A, B]]$/;"	t
MapLike	scala/collection/immutable/MapLike.scala	/^trait MapLike[A, +B, +This <: MapLike[A, B, This] with Map[A, B]]$/;"	t
MapLike	scala/collection/mutable/MapLike.scala	/^trait MapLike[A, B, +This <: MapLike[A, B, This] with Map[A, B]]$/;"	t
MapMethods	scala/collection/interfaces/MapMethods.scala	/^trait MapMethods[A, +B, +This <: MapLike[A, B, This] with Map[A, B]]$/;"	t
MapProxy	scala/collection/MapProxy.scala	/^trait MapProxy[A, +B] extends Map[A, B] with MapProxyLike[A, B, Map[A, B]]$/;"	t
MapProxy	scala/collection/immutable/MapProxy.scala	/^trait MapProxy[A, +B] extends Map[A, B] with MapProxyLike[A, B, Map[A, B]] {  $/;"	t
MapProxy	scala/collection/mutable/MapProxy.scala	/^trait MapProxy[A, B] extends Map[A, B] with MapProxyLike[A, B, Map[A, B]] {  $/;"	t
MapProxyLike	scala/collection/MapProxyLike.scala	/^trait MapProxyLike[A, +B, +This <: MapLike[A, B, This] with Map[A, B]]$/;"	t
MapWrapper	scala/collection/JavaConversions.scala	/^  class MapWrapper[A, B](underlying: Map[A, B]) extends ju.AbstractMap[A, B] { self =>$/;"	c
Mappable	scala/util/parsing/ast/Binders.scala	/^  trait Mappable[T] {$/;"	t
Mappable	scala/util/parsing/ast/Binders.scala	/^trait Mappable {$/;"	t
Mapped	scala/collection/GenIterableViewLike.scala	/^  trait Mapped[B] extends super.Mapped[B] with Transformed[B] {$/;"	t
Mapped	scala/collection/GenSeqViewLike.scala	/^  trait Mapped[B] extends super.Mapped[B] with Transformed[B] {$/;"	t
Mapped	scala/collection/GenTraversableViewLike.scala	/^  trait Mapped[B] extends Transformed[B] {$/;"	t
Mapped	scala/collection/IterableViewLike.scala	/^  trait Mapped[B] extends super[TraversableViewLike].Mapped[B] with super[GenIterableViewLike].Mapped[B] with Transformed[B]$/;"	t
Mapped	scala/collection/SeqViewLike.scala	/^  trait Mapped[B] extends super[IterableViewLike].Mapped[B] with super[GenSeqViewLike].Mapped[B] with Transformed[B]$/;"	t
Mapped	scala/collection/TraversableViewLike.scala	/^  trait Mapped[B] extends Transformed[B] with super.Mapped[B]$/;"	t
Mapped	scala/collection/immutable/StreamViewLike.scala	/^  trait Mapped[B] extends super.Mapped[B] with Transformed[B]$/;"	t
Mapped	scala/collection/parallel/ParIterableViewLike.scala	/^  trait Mapped[S] extends super.Mapped[S] with Transformed[S]{$/;"	t
Mapped	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Mapped[S] extends super[GenSeqViewLike].Mapped[S] with super[ParIterableViewLike].Mapped[S] with Transformed[S] {$/;"	t
Mapped	scala/collection/parallel/RemainsIterator.scala	/^  class Mapped[S](f: T => S) extends IterableSplitter[S] {$/;"	c
Mapped	scala/collection/parallel/RemainsIterator.scala	/^  class Mapped[S](f: T => S) extends super.Mapped[S](f) with SeqSplitter[S] {$/;"	c
Mapper	scala/util/parsing/ast/Binders.scala	/^  trait Mapper { def apply[T <% Mappable[T]](x: T): T } \/* TODO: having type `Forall T. T => T' is too strict: $/;"	t
MarkupDecl	scala/xml/dtd/Decl.scala	/^abstract class MarkupDecl extends Decl {$/;"	c
MarkupHandler	scala/xml/parsing/MarkupHandler.scala	/^abstract class MarkupHandler extends Logged$/;"	c
MarkupParser	scala/xml/parsing/MarkupParser.scala	/^trait MarkupParser extends MarkupParserCommon with TokenTests$/;"	t
Marshal	scala/util/Marshal.scala	/^object Marshal {$/;"	c
Match	scala/reflect/generic/Trees.scala	/^  case class Match(selector: Tree, cases: List[CaseDef])$/;"	c
Match	scala/util/matching/Regex.scala	/^  class Match(val source: java.lang.CharSequence, $/;"	c
Match	scala/util/matching/Regex.scala	/^  object Match {$/;"	c
MatchData	scala/util/matching/Regex.scala	/^  trait MatchData {$/;"	t
MatchError	scala/MatchError.scala	/^final class MatchError(obj: Any) extends RuntimeException {$/;"	c
MatchIterator	scala/util/matching/Regex.scala	/^  class MatchIterator(val source: java.lang.CharSequence, val regex: Regex, val groupNames: Seq[String]) $/;"	c
Math	scala/Math.scala	/^object Math extends MathCommon {$/;"	c
MaxLong	scala/math/BigDecimal.scala	/^  val MaxLong = new BigDecimal(BigDec valueOf Long.MaxValue, defaultMathContext)$/;"	l
MaxLong	scala/math/BigInt.scala	/^  val MaxLong = BigInt(Long.MaxValue)$/;"	l
MaxQueueSize	scala/xml/pull/XMLEventReader.scala	/^  val MaxQueueSize = -1$/;"	l
MaxValue	scala/Byte.scala	/^  final val MaxValue = java.lang.Byte.MAX_VALUE$/;"	l
MaxValue	scala/Char.scala	/^  final val MaxValue = java.lang.Character.MAX_VALUE$/;"	l
MaxValue	scala/Double.scala	/^  final val MaxValue = java.lang.Double.MAX_VALUE$/;"	l
MaxValue	scala/Float.scala	/^  final val MaxValue = java.lang.Float.MAX_VALUE$/;"	l
MaxValue	scala/Int.scala	/^  final val MaxValue = java.lang.Integer.MAX_VALUE$/;"	l
MaxValue	scala/Long.scala	/^  final val MaxValue = java.lang.Long.MAX_VALUE$/;"	l
MaxValue	scala/Short.scala	/^  final val MaxValue = java.lang.Short.MAX_VALUE$/;"	l
MegaMethodCache	scala/runtime/MethodCache.scala	/^final class MegaMethodCache($/;"	c
MemberDef	scala/reflect/generic/Trees.scala	/^  abstract class MemberDef extends DefTree {$/;"	c
MemoEntry	scala/util/parsing/combinator/PackratParsers.scala	/^  private case class MemoEntry[+T](var r: Either[LR,ParseResult[_]]){$/;"	c
MergeableEither	scala/Either.scala	/^  class MergeableEither[A](x: Either[A, A]) {$/;"	c
Message	scala/collection/script/Message.scala	/^trait Message[+A]$/;"	t
Message	scala/concurrent/MailBox.scala	/^  type Message = AnyRef$/;"	T
MessageQueue	scala/actors/MessageQueue.scala	/^class MessageQueue(label: String) extends MQueue[Any](label) with Serializable$/;"	c
MessageQueueElement	scala/actors/MessageQueue.scala	/^class MessageQueueElement(msg: Any, session: OutputChannel[Any], next: MessageQueueElement) extends MQueueElement[Any](msg, session, next) with Serializable {$/;"	c
Meta	scala/util/regexp/Base.scala	/^  class Meta(r1: _regexpT) extends RegExp {$/;"	c
MetaData	scala/xml/MetaData.scala	/^abstract class MetaData extends Iterable[MetaData] with Equality with Serializable {$/;"	c
MetaData	scala/xml/MetaData.scala	/^object MetaData {$/;"	c
Method	scala/reflect/Symbol.scala	/^case class Method(override val fullname: String, tpe: Type) extends GlobalSymbol(fullname)$/;"	c
MethodCache	scala/runtime/MethodCache.scala	/^sealed abstract class MethodCache {$/;"	c
MethodType	scala/reflect/Type.scala	/^case class MethodType(formals: List[Symbol], restpe: Type) extends Type$/;"	c
MethodType	scala/reflect/generic/Types.scala	/^  type MethodType <: Type$/;"	T
MethodType	scala/reflect/generic/Types.scala	/^  val MethodType: MethodTypeExtractor$/;"	l
MethodTypeExtractor	scala/reflect/generic/Types.scala	/^  abstract class MethodTypeExtractor {$/;"	c
MillisProvider	scala/actors/threadpool/helpers/Utils.java	/^        MillisProvider() {}$/;"	m	class:Utils.MillisProvider
MillisProvider	scala/actors/threadpool/helpers/Utils.java	/^    private static final class MillisProvider implements NanoTimer {$/;"	c	class:Utils
MinLong	scala/math/BigDecimal.scala	/^  val MinLong = new BigDecimal(BigDec valueOf Long.MinValue, defaultMathContext)$/;"	l
MinLong	scala/math/BigInt.scala	/^  val MinLong = BigInt(Long.MinValue)$/;"	l
MinPositiveValue	scala/Double.scala	/^  final val MinPositiveValue = java.lang.Double.MIN_VALUE$/;"	l
MinPositiveValue	scala/Float.scala	/^  final val MinPositiveValue = java.lang.Float.MIN_VALUE$/;"	l
MinValue	scala/Byte.scala	/^  final val MinValue = java.lang.Byte.MIN_VALUE$/;"	l
MinValue	scala/Char.scala	/^  final val MinValue = java.lang.Character.MIN_VALUE$/;"	l
MinValue	scala/Double.scala	/^  final val MinValue = -java.lang.Double.MAX_VALUE$/;"	l
MinValue	scala/Float.scala	/^  final val MinValue = -java.lang.Float.MAX_VALUE$/;"	l
MinValue	scala/Int.scala	/^  final val MinValue = java.lang.Integer.MIN_VALUE$/;"	l
MinValue	scala/Long.scala	/^  final val MinValue = java.lang.Long.MIN_VALUE$/;"	l
MinValue	scala/Short.scala	/^  final val MinValue = java.lang.Short.MIN_VALUE$/;"	l
MinorVersion	scala/reflect/generic/PickleFormat.scala	/^  val MinorVersion = 0$/;"	l
ModifierFlags	scala/reflect/generic/Flags.scala	/^object ModifierFlags extends ModifierFlags$/;"	c
Modifiers	scala/reflect/generic/Trees.scala	/^  case class Modifiers(flags: Long, privateWithin: Name, annotations: List[Tree], positions: Map[Long, Position]) extends HasFlags {$/;"	c
Modifiers	scala/reflect/generic/Trees.scala	/^  def Modifiers(flags: Long): Modifiers = Modifiers(flags, tpnme.EMPTY)$/;"	m
Modifiers	scala/reflect/generic/Trees.scala	/^  def Modifiers(flags: Long, privateWithin: Name): Modifiers = Modifiers(flags, privateWithin, List(), Map.empty)$/;"	m
ModuleDef	scala/reflect/generic/Trees.scala	/^  case class ModuleDef(mods: Modifiers, name: TermName, impl: Template)$/;"	c
MonadOps	scala/collection/TraversableOnce.scala	/^  class MonadOps[+A](trav: TraversableOnce[A]) {    $/;"	c
MultiMap	scala/collection/mutable/MultiMap.scala	/^trait MultiMap[A, B] extends Map[A, Set[B]] {$/;"	t
MurmurHash	scala/util/MurmurHash.scala	/^class MurmurHash[@specialized(Int,Long,Float,Double) T](seed: Int) extends (T => Unit) {$/;"	c
MurmurHash	scala/util/MurmurHash.scala	/^object MurmurHash {$/;"	c
Mutable	scala/Mutable.scala	/^trait Mutable $/;"	t
MutableBufferWrapper	scala/collection/JavaConversions.scala	/^  case class MutableBufferWrapper[A](underlying : mutable.Buffer[A]) extends ju.AbstractList[A] with IterableWrapperTrait[A] {$/;"	c
MutableList	scala/collection/mutable/MutableList.scala	/^class MutableList[A]$/;"	c
MutableList	scala/collection/mutable/MutableList.scala	/^object MutableList extends SeqFactory[MutableList] {$/;"	c
MutableMapFactory	scala/collection/generic/MutableMapFactory.scala	/^abstract class MutableMapFactory[CC[A, B] <: mutable.Map[A, B] with mutable.MapLike[A, B, CC[A, B]]] $/;"	c
MutableMapWrapper	scala/collection/JavaConversions.scala	/^  case class MutableMapWrapper[A, B](underlying: mutable.Map[A, B])$/;"	c
MutableSeqWrapper	scala/collection/JavaConversions.scala	/^  case class MutableSeqWrapper[A](underlying : mutable.Seq[A]) extends ju.AbstractList[A] with IterableWrapperTrait[A] {$/;"	c
MutableSetFactory	scala/collection/generic/MutableSetFactory.scala	/^abstract class MutableSetFactory[CC[X] <: mutable.Set[X] with mutable.SetLike[X, CC[X]]]$/;"	c
MutableSetWrapper	scala/collection/JavaConversions.scala	/^  case class MutableSetWrapper[A](underlying : mutable.Set[A]) extends SetWrapper[A](underlying) {$/;"	c
MyClass	scala/util/logging/Logged.scala	/^  class MyClass extends Logged {$/;"	c
NAME	scala/xml/dtd/Tokens.scala	/^  final val NAME         = 1$/;"	l
NANOSECONDS	scala/actors/threadpool/TimeUnit.java	/^    public static final TimeUnit NANOSECONDS = new TimeUnit(0, "NANOSECONDS") {$/;"	f	class:TimeUnit
NEG_INF_DOUBLE	scala/Math.scala	/^  val NEG_INF_DOUBLE = java.lang.Double.NEGATIVE_INFINITY$/;"	l
NEG_INF_FLOAT	scala/Math.scala	/^  val NEG_INF_FLOAT = java.lang.Float.NEGATIVE_INFINITY$/;"	l
NEWtree	scala/reflect/generic/PickleFormat.scala	/^    final val NEWtree = 28$/;"	l
NONE	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        private static final int NONE   = 0;$/;"	f	class:ReentrantReadWriteLock.Sync	file:
NONE	scala/xml/factory/LoggedNodeFactory.scala	/^  final val NONE  = 0$/;"	l
NONEsym	scala/reflect/generic/PickleFormat.scala	/^  final val NONEsym = 3$/;"	l
NOPOS	scala/io/Position.scala	/^  final val NOPOS = 0$/;"	l
NOPREFIXtpe	scala/reflect/generic/PickleFormat.scala	/^  final val NOPREFIXtpe = 12$/;"	l
NOtpe	scala/reflect/generic/PickleFormat.scala	/^  final val NOtpe = 11$/;"	l
NaN	scala/Double.scala	/^  final val NaN              = java.lang.Double.NaN$/;"	l
NaN	scala/Float.scala	/^  final val NaN              = java.lang.Float.NaN$/;"	l
NaN_DOUBLE	scala/Math.scala	/^  val NaN_DOUBLE = java.lang.Double.NaN$/;"	l
NaN_FLOAT	scala/Math.scala	/^  val NaN_FLOAT  = java.lang.Float.NaN$/;"	l
Name	scala/reflect/generic/Names.scala	/^  type Name >: Null <: AnyRef$/;"	T
NameElement	scala/util/parsing/ast/AbstractSyntax.scala	/^  trait NameElement extends Element {$/;"	t
NameElementIsMappable	scala/util/parsing/ast/Binders.scala	/^  implicit def NameElementIsMappable(self: NameElement): Mappable[NameElement] = new Mappable[NameElement] {$/;"	m
NameTransformer	scala/reflect/NameTransformer.scala	/^object NameTransformer {$/;"	c
NameType	scala/reflect/generic/StdNames.scala	/^    type NameType <: Name$/;"	T
NamedSend	scala/actors/remote/NetKernel.scala	/^case class NamedSend(senderLoc: Locator, receiverLoc: Locator, data: Array[Byte], session: Symbol)$/;"	c
NamedType	scala/reflect/Type.scala	/^case class NamedType(fullname: String) extends Type$/;"	c
NamespaceBinding	scala/xml/NamespaceBinding.scala	/^case class NamespaceBinding(prefix: String, uri: String, parent: NamespaceBinding) extends AnyRef with Equality$/;"	c
NamespaceType	scala/xml/parsing/MarkupParser.scala	/^  type NamespaceType = NamespaceBinding$/;"	T
NamespaceType	scala/xml/parsing/MarkupParserCommon.scala	/^  type NamespaceType    \/\/ NamespaceBinding, Any$/;"	T
NanoTimer	scala/actors/threadpool/helpers/NanoTimer.java	/^public interface NanoTimer {$/;"	i
NegativeInfinity	scala/Double.scala	/^  final val NegativeInfinity = java.lang.Double.NEGATIVE_INFINITY$/;"	l
NegativeInfinity	scala/Float.scala	/^  final val NegativeInfinity = java.lang.Float.NEGATIVE_INFINITY$/;"	l
NestedAnnotArg	scala/reflect/generic/AnnotationInfos.scala	/^  type NestedAnnotArg <: ClassfileAnnotArg$/;"	T
NestedAnnotArg	scala/reflect/generic/AnnotationInfos.scala	/^  val NestedAnnotArg: NestedAnnotArgExtractor$/;"	l
NestedAnnotArgExtractor	scala/reflect/generic/AnnotationInfos.scala	/^  abstract class NestedAnnotArgExtractor {$/;"	c
New	scala/actors/Actor.scala	/^    val New,$/;"	l
New	scala/reflect/Tree.scala	/^case class New(sym: Tree) extends Tree$/;"	c
New	scala/reflect/generic/Trees.scala	/^  case class New(tpt: Tree) extends TermTree $/;"	c
Newline	scala/sys/process/BasicIO.scala	/^  final val Newline    = props("line.separator")$/;"	l
Nil	scala/collection/immutable/List.scala	/^case object Nil extends List[Nothing] {$/;"	c
Nil	scala/package.scala	/^  val Nil = scala.collection.immutable.Nil$/;"	l
NoAttributes	scala/xml/Node.scala	/^  final def NoAttributes: MetaData = Null$/;"	m
NoBindingFactoryAdapter	scala/xml/parsing/NoBindingFactoryAdapter.scala	/^class NoBindingFactoryAdapter extends FactoryAdapter with NodeFactory[Elem]$/;"	c
NoBuilder	scala/collection/TraversableView.scala	/^  class NoBuilder[A] extends Builder[A, Nothing] {$/;"	c
NoCombiner	scala/collection/parallel/ParIterableView.scala	/^  abstract class NoCombiner[T] extends Combiner[T, Nothing] {$/;"	c
NoCombiner	scala/collection/parallel/ParSeqView.scala	/^  abstract class NoCombiner[T] extends Combiner[T, Nothing] {$/;"	c
NoLo	scala/collection/script/Location.scala	/^case object NoLo extends Location$/;"	c
NoManifest	scala/Predef.scala	/^  val NoManifest        = scala.reflect.NoManifest$/;"	l
NoManifest	scala/reflect/NoManifest.scala	/^object NoManifest extends OptManifest[Nothing] with Serializable {$/;"	c
NoMods	scala/reflect/generic/Trees.scala	/^  lazy val NoMods = Modifiers(0)$/;"	l
NoPosition	scala/reflect/generic/Universe.scala	/^  val NoPosition: Position$/;"	l
NoPosition	scala/util/parsing/input/NoPosition.scala	/^object NoPosition extends Position {$/;"	c
NoPositioner	scala/io/Source.scala	/^  object NoPositioner extends Positioner(Position) {$/;"	c
NoPrefix	scala/reflect/Type.scala	/^case object NoPrefix extends Type$/;"	c
NoPrefix	scala/reflect/generic/Types.scala	/^  val NoPrefix: Type$/;"	l
NoStackTrace	scala/util/control/NoStackTrace.scala	/^object NoStackTrace {$/;"	c
NoStackTrace	scala/util/control/NoStackTrace.scala	/^trait NoStackTrace extends Throwable {$/;"	t
NoSuccess	scala/util/parsing/combinator/Parsers.scala	/^  object NoSuccess {$/;"	c
NoSuccess	scala/util/parsing/combinator/Parsers.scala	/^  sealed abstract class NoSuccess(val msg: String, override val next: Input) extends ParseResult[Nothing] { \/\/ when we don't care about the difference between Failure and Error$/;"	c
NoSuchElementException	scala/package.scala	/^  type NoSuchElementException          = java.util.NoSuchElementException$/;"	T
NoSymbol	scala/reflect/Symbol.scala	/^case object NoSymbol extends Symbol {$/;"	c
NoSymbol	scala/reflect/generic/Symbols.scala	/^  val NoSymbol: Symbol$/;"	l
NoTag	scala/reflect/generic/Constants.scala	/^  final val NoTag      = 0$/;"	l
NoType	scala/reflect/Type.scala	/^case object NoType extends Type$/;"	c
NoType	scala/reflect/generic/Types.scala	/^  val NoType: Type$/;"	l
Node	scala/actors/remote/RemoteActor.scala	/^case class Node(address: String, port: Int)$/;"	c
Node	scala/actors/threadpool/LinkedBlockingQueue.java	/^        Node(E x) { item = x; }$/;"	m	class:LinkedBlockingQueue.Node
Node	scala/actors/threadpool/LinkedBlockingQueue.java	/^    static class Node<E> {$/;"	c	class:LinkedBlockingQueue
Node	scala/actors/threadpool/SynchronousQueue.java	/^        Node(Object x) { item = x; }$/;"	m	class:SynchronousQueue.Node
Node	scala/actors/threadpool/SynchronousQueue.java	/^        Node(Object x, Node n) { item = x; next = n; }$/;"	m	class:SynchronousQueue.Node
Node	scala/actors/threadpool/SynchronousQueue.java	/^    static final class Node implements java.io.Serializable {$/;"	c	class:SynchronousQueue
Node	scala/collection/immutable/ListMap.scala	/^  protected class Node[B1 >: B](override protected val key: A, $/;"	c
Node	scala/collection/immutable/ListSet.scala	/^  protected class Node(override protected val elem: A) extends ListSet[A] with Serializable {$/;"	c
Node	scala/util/regexp/PointedHedgeExp.scala	/^  case class  Node(label: _labelT, r: _regexpT) extends RegExp {$/;"	c
Node	scala/xml/Node.scala	/^abstract class Node extends NodeSeq {$/;"	c
Node	scala/xml/Node.scala	/^object Node {$/;"	c
NodeBuffer	scala/xml/NodeBuffer.scala	/^class NodeBuffer extends scala.collection.mutable.ArrayBuffer[Node] {$/;"	c
NodeFactory	scala/xml/factory/NodeFactory.scala	/^trait NodeFactory[A <: Node] {$/;"	t
NodeSeq	scala/xml/NodeSeq.scala	/^abstract class NodeSeq extends immutable.Seq[Node] with SeqLike[Node, NodeSeq] with Equality {$/;"	c
NodeSeq	scala/xml/NodeSeq.scala	/^object NodeSeq {$/;"	c
NonEmpty	scala/collection/immutable/RedBlack.scala	/^  abstract class NonEmpty[+B] extends Tree[B] with Serializable {$/;"	c
NonLocalReturnControl	scala/runtime/NonLocalReturnControl.scala	/^class NonLocalReturnControl[T](val key: AnyRef, val value: T) extends ControlThrowable {$/;"	c
NondetWordAutom	scala/util/automata/NondetWordAutom.scala	/^abstract class NondetWordAutom[T <: AnyRef] {$/;"	c
None	scala/Option.scala	/^case object None extends Option[Nothing] {$/;"	c
NonfairSync	scala/actors/threadpool/locks/ReentrantLock.java	/^        NonfairSync() {}$/;"	m	class:ReentrantLock.NonfairSync
NonfairSync	scala/actors/threadpool/locks/ReentrantLock.java	/^    final static class NonfairSync extends Sync {$/;"	c	class:ReentrantLock
NonfairSync	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        NonfairSync() {}$/;"	m	class:ReentrantReadWriteLock.NonfairSync
NonfairSync	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    private static class NonfairSync extends Sync {$/;"	c	class:ReentrantReadWriteLock
NotDefinedError	scala/NotDefinedError.scala	/^final class NotDefinedError(msg: String) extends Error("not defined: " + msg)$/;"	c
NotNull	scala/NotNull.scala	/^trait NotNull {}$/;"	t
NotationDecl	scala/xml/dtd/Decl.scala	/^case class NotationDecl( name:String, extID:ExternalID ) extends MarkupDecl {$/;"	c
Nothing	scala/reflect/ClassManifest.scala	/^  val Nothing = Manifest.Nothing$/;"	l
Nothing	scala/reflect/Manifest.scala	/^  val Nothing: Manifest[Nothing] = new ClassTypeManifest[scala.Nothing](None, ObjectClass, Nil) {$/;"	l
Nothing	scala/runtime/Nothing$.scala	/^sealed abstract class Nothing$ extends Throwable$/;"	c
NothingClass	scala/reflect/generic/StandardDefinitions.scala	/^    def NothingClass: Symbol$/;"	m
Null	scala/reflect/ClassManifest.scala	/^  val Null    = Manifest.Null$/;"	l
Null	scala/reflect/Manifest.scala	/^  val Null: Manifest[Null] = new ClassTypeManifest[scala.Null](None, ObjectClass, Nil) {$/;"	l
Null	scala/runtime/Null$.scala	/^sealed abstract class Null\$$/;"	c
Null	scala/xml/Null.scala	/^case object Null extends MetaData {    $/;"	c
NullClass	scala/reflect/generic/StandardDefinitions.scala	/^    def NullClass   : Symbol$/;"	m
NullPointerException	scala/package.scala	/^  type NullPointerException            = java.lang.NullPointerException$/;"	T
NullTag	scala/reflect/generic/Constants.scala	/^  final val NullTag    = 11$/;"	l
NullaryMethodType	scala/reflect/Type.scala	/^case class NullaryMethodType(resultType: Type) extends Type$/;"	c
NullaryMethodType	scala/reflect/generic/Types.scala	/^  type NullaryMethodType <: Type$/;"	T
NullaryMethodType	scala/reflect/generic/Types.scala	/^  val NullaryMethodType: NullaryMethodTypeExtractor$/;"	l
NullaryMethodTypeExtractor	scala/reflect/generic/Types.scala	/^  abstract class NullaryMethodTypeExtractor {$/;"	c
Number	scala/util/parsing/combinator/testing/RegexTest.scala	/^case class Number(n: Int)$/;"	c
NumberFormatException	scala/package.scala	/^  type NumberFormatException           = java.lang.NumberFormatException$/;"	T
Numeric	scala/math/Numeric.scala	/^object Numeric {$/;"	c
Numeric	scala/math/Numeric.scala	/^trait Numeric[T] extends Ordering[T] {$/;"	t
Numeric	scala/package.scala	/^  type Numeric[T] = scala.math.Numeric[T]$/;"	T
Numeric	scala/package.scala	/^  val Numeric = scala.math.Numeric$/;"	l
NumericLit	scala/util/parsing/combinator/token/StdTokens.scala	/^  case class NumericLit(chars: String) extends Token {$/;"	c
NumericParser	scala/util/parsing/json/Parser.scala	/^  type NumericParser = String => Any$/;"	T
NumericRange	scala/collection/immutable/NumericRange.scala	/^abstract class NumericRange[T]$/;"	c
NumericRange	scala/collection/immutable/NumericRange.scala	/^object NumericRange {$/;"	c
OFF	scala/annotation/elidable.scala	/^  final val OFF     = Int.MaxValue  \/\/ Level.OFF.intValue()$/;"	l
ONLY_ONE	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private static final boolean ONLY_ONE = true;$/;"	f	class:ThreadPoolExecutor	file:
OPT	scala/xml/dtd/Tokens.scala	/^  final val OPT          = 8$/;"	l
OTHER	scala/runtime/BoxesRunTime.java	/^    private static final int CHAR = 0, BYTE = 1, SHORT = 2, INT = 3, LONG = 4, FLOAT = 5, DOUBLE = 6, OTHER = 7;$/;"	f	class:BoxesRunTime	file:
OVERLOADED	scala/reflect/generic/Flags.scala	/^  final val OVERLOADED    = 0x200000000L  \/\/ symbol is overloaded$/;"	l
OVERRIDE	scala/reflect/generic/Flags.scala	/^  final val OVERRIDE      = 0x00000002$/;"	l
Object	scala/reflect/ClassManifest.scala	/^  val Object  = Manifest.Object$/;"	l
Object	scala/reflect/Manifest.scala	/^  val Object: Manifest[Object] = new ClassTypeManifest[java.lang.Object](None, ObjectClass, Nil) {$/;"	l
ObjectClass	scala/reflect/generic/StandardDefinitions.scala	/^    def ObjectClass: Symbol$/;"	m
ObjectRef	scala/runtime/ObjectRef.java	/^    public ObjectRef(Object elem) { this.elem = elem; }$/;"	m	class:ObjectRef
ObjectRef	scala/runtime/ObjectRef.java	/^public class ObjectRef implements java.io.Serializable {$/;"	c
ObservableBuffer	scala/collection/mutable/ObservableBuffer.scala	/^trait ObservableBuffer[A] extends Buffer[A] with Publisher[Message[A] with Undoable]$/;"	t
ObservableMap	scala/collection/mutable/ObservableMap.scala	/^trait ObservableMap[A, B] extends Map[A, B] with Publisher[Message[(A, B)] with Undoable]$/;"	t
ObservableSet	scala/collection/mutable/ObservableSet.scala	/^trait ObservableSet[A] extends Set[A] with Publisher[Message[A] with Undoable]$/;"	t
OffsetPosition	scala/util/parsing/input/OffsetPosition.scala	/^case class OffsetPosition(source: java.lang.CharSequence, offset: Int) extends Position {$/;"	c
OnceCanBuildFrom	scala/collection/TraversableOnce.scala	/^  class OnceCanBuildFrom[A] extends generic.CanBuildFrom[TraversableOnce[A], A, TraversableOnce[A]] {$/;"	c
OnceParser	scala/util/parsing/combinator/Parsers.scala	/^  def OnceParser[T](f: Input => ParseResult[T]): Parser[T] with OnceParser[T] $/;"	m
OnceParser	scala/util/parsing/combinator/Parsers.scala	/^  trait OnceParser[+T] extends Parser[T] {$/;"	t
OpCodes	scala/reflect/NameTransformer.scala	/^  private class OpCodes(val op: Char, val code: String, val next: OpCodes)$/;"	c
OpenEntry	scala/collection/mutable/OpenHashMap.scala	/^  final private class OpenEntry[Key, Value](val key: Key,$/;"	c
OpenHashMap	scala/collection/mutable/OpenHashMap.scala	/^class OpenHashMap[Key, Value](initialSize : Int)$/;"	c
OpenHashMap	scala/collection/mutable/OpenHashMap.scala	/^object OpenHashMap {$/;"	c
Ops	scala/math/Numeric.scala	/^  class Ops(lhs: T) {$/;"	c
Ops	scala/math/Ordering.scala	/^  class Ops(lhs: T) {$/;"	c
OptManifest	scala/Predef.scala	/^  type OptManifest[T]   = scala.reflect.OptManifest[T]$/;"	T
OptManifest	scala/reflect/OptManifest.scala	/^trait OptManifest[+T] extends Serializable$/;"	t
Option	scala/Option.scala	/^object Option {$/;"	c
Option	scala/Option.scala	/^sealed abstract class Option[+A] extends Product with Serializable {$/;"	c
Option	scala/math/Ordering.scala	/^  implicit def Option[T](implicit ord: Ordering[T]): Ordering[Option[T]] =$/;"	m
OptionIsMappable	scala/util/parsing/ast/Binders.scala	/^  implicit def OptionIsMappable[t <% Mappable[t]](xs: Option[t]): Mappable[Option[t]] =$/;"	m
OptionOrdering	scala/math/Ordering.scala	/^  trait OptionOrdering[T] extends Ordering[Option[T]] {$/;"	t
Ordered	scala/math/Ordered.scala	/^object Ordered {  $/;"	c
Ordered	scala/math/Ordered.scala	/^trait Ordered[A] extends java.lang.Comparable[A] {$/;"	t
Ordered	scala/package.scala	/^  type Ordered[T] = scala.math.Ordered[T]$/;"	T
Ordered	scala/package.scala	/^  val Ordered = scala.math.Ordered$/;"	l
OrderedProxy	scala/runtime/ScalaNumberProxy.scala	/^trait OrderedProxy[T] extends Typed[T] with Ordered[T] {$/;"	t
OrderedTraversableFactory	scala/collection/generic/OrderedTraversableFactory.scala	/^abstract class OrderedTraversableFactory[CC[X] <: Traversable[X] with GenericOrderedTraversableTemplate[X, CC]]$/;"	c
Ordering	scala/math/Ordering.scala	/^object Ordering extends LowPriorityOrderingImplicits {$/;"	c
Ordering	scala/math/Ordering.scala	/^trait Ordering[T] extends Comparator[T] with PartialOrdering[T] with Serializable {$/;"	t
Ordering	scala/package.scala	/^  type Ordering[T] = scala.math.Ordering[T]$/;"	T
Ordering	scala/package.scala	/^  val Ordering = scala.math.Ordering$/;"	l
Otherwise	scala/collection/parallel/ParIterableLike.scala	/^    trait Otherwise[Cmb] {$/;"	t
Otherwise	scala/collection/parallel/package.scala	/^    trait Otherwise[R] {$/;"	t
OutputChannel	scala/actors/OutputChannel.scala	/^trait OutputChannel[-Msg] {$/;"	t
OutputStream	scala/sys/process/package.scala	/^      type OutputStream    = java.io.OutputStream$/;"	T
P	scala/util/automata/SubsetConstruction.scala	/^      val P = rest.pop$/;"	l
PACKAGE	scala/reflect/generic/Flags.scala	/^  final val PACKAGE       = 0x00004000    \/\/ symbol is a java package$/;"	l
PACKAGEtree	scala/reflect/generic/PickleFormat.scala	/^    final val PACKAGEtree = 2$/;"	l
PARAM	scala/reflect/generic/Flags.scala	/^  final val PARAM         = 0x00002000    \/\/ symbol is a (value or type) parameter to a method$/;"	l
PARAMACCESSOR	scala/reflect/generic/Flags.scala	/^  final val PARAMACCESSOR = 0x20000000    \/\/ for field definitions generated for primary constructor$/;"	l
PCDATA	scala/xml/dtd/ContentModel.scala	/^case object PCDATA extends ContentModel {$/;"	c
PCData	scala/xml/PCData.scala	/^case class PCData(_data: String) extends Atom[String](_data) {$/;"	c
PEReference	scala/xml/dtd/Decl.scala	/^case class PEReference(ent:String) extends MarkupDecl {$/;"	c
PLUS	scala/xml/dtd/Tokens.scala	/^  final val PLUS         = 7$/;"	l
POISON	scala/xml/pull/XMLEventReader.scala	/^  protected case object POISON extends XMLEvent$/;"	c
POLYtpe	scala/reflect/generic/PickleFormat.scala	/^  final val POLYtpe = 21$/;"	l
POS_INF_DOUBLE	scala/Math.scala	/^  val POS_INF_DOUBLE = java.lang.Double.POSITIVE_INFINITY$/;"	l
POS_INF_FLOAT	scala/Math.scala	/^  val POS_INF_FLOAT = java.lang.Float.POSITIVE_INFINITY$/;"	l
PRESUPER	scala/reflect/generic/Flags.scala	/^  final val PRESUPER      = 0x2000000000L \/\/ value is evaluated before super call$/;"	l
PRIVATE	scala/reflect/generic/Flags.scala	/^  final val PRIVATE       = 0x00000004$/;"	l
PROTECTED	scala/reflect/generic/Flags.scala	/^  final val PROTECTED     = 0x00000001$/;"	l
PU	scala/io/BytePickle.scala	/^  abstract class PU[T] {$/;"	c
PackageDef	scala/reflect/generic/Trees.scala	/^  case class PackageDef(pid: RefTree, stats: List[Tree])$/;"	c
PackratParser	scala/util/parsing/combinator/PackratParsers.scala	/^  abstract class PackratParser[+T] extends super.Parser[T]$/;"	c
PackratParsers	scala/util/parsing/combinator/PackratParsers.scala	/^trait PackratParsers extends Parsers {$/;"	t
PackratReader	scala/util/parsing/combinator/PackratParsers.scala	/^  class PackratReader[+T](underlying: Reader[T]) extends Reader[T]  { outer =>$/;"	c
Page	scala/collection/immutable/PagedSeq.scala	/^private class Page[T: ClassManifest](val num: Int) {$/;"	c
PagedSeq	scala/collection/immutable/PagedSeq.scala	/^class PagedSeq[T: ClassManifest] protected($/;"	c
PagedSeq	scala/collection/immutable/PagedSeq.scala	/^object PagedSeq {$/;"	c
PagedSeqReader	scala/util/parsing/input/PagedSeqReader.scala	/^class PagedSeqReader(seq: PagedSeq[Char], $/;"	c
PagedSeqReader	scala/util/parsing/input/PagedSeqReader.scala	/^object PagedSeqReader {$/;"	c
Pair	scala/Predef.scala	/^  object Pair {$/;"	c
Pair	scala/Predef.scala	/^  type Pair[+A, +B] = Tuple2[A, B]$/;"	T
Pair	scala/actors/Future.scala	/^            val Pair(idx, subres) = pf(msg)$/;"	l
ParArray	scala/collection/parallel/mutable/ParArray.scala	/^class ParArray[T] private[mutable] (val arrayseq: ArraySeq[T])$/;"	c
ParArray	scala/collection/parallel/mutable/ParArray.scala	/^object ParArray extends ParFactory[ParArray] {$/;"	c
ParArrayCombiner	scala/collection/parallel/mutable/package.scala	/^  type ParArrayCombiner[T] = ResizableParArrayCombiner[T]$/;"	T
ParArrayCombiner	scala/collection/parallel/mutable/package.scala	/^  val ParArrayCombiner = ResizableParArrayCombiner$/;"	l
ParArrayIterator	scala/collection/parallel/mutable/ParArray.scala	/^  class ParArrayIterator(var i: Int = 0, val until: Int = length, val arr: Array[Any] = array)$/;"	c
ParFactory	scala/collection/generic/ParFactory.scala	/^abstract class ParFactory[CC[X] <: ParIterable[X] with GenericParTemplate[X, CC]]$/;"	c
ParFlatHashTable	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^trait ParFlatHashTable[T] extends collection.mutable.FlatHashTable[T] {$/;"	t
ParFlatHashTableIterator	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^  abstract class ParFlatHashTableIterator(var idx: Int, val until: Int, val totalsize: Int)$/;"	c
ParHashMap	scala/collection/parallel/immutable/ParHashMap.scala	/^class ParHashMap[K, +V] private[immutable] (private[this] val trie: HashMap[K, V])$/;"	c
ParHashMap	scala/collection/parallel/immutable/ParHashMap.scala	/^object ParHashMap extends ParMapFactory[ParHashMap] {$/;"	c
ParHashMap	scala/collection/parallel/mutable/ParHashMap.scala	/^class ParHashMap[K, V] private[collection] (contents: HashTable.Contents[K, DefaultEntry[K, V]])$/;"	c
ParHashMap	scala/collection/parallel/mutable/ParHashMap.scala	/^object ParHashMap extends ParMapFactory[ParHashMap] {$/;"	c
ParHashMapIterator	scala/collection/parallel/immutable/ParHashMap.scala	/^  class ParHashMapIterator(var triter: Iterator[(K, V @uncheckedVariance)], val sz: Int)$/;"	c
ParHashMapIterator	scala/collection/parallel/mutable/ParHashMap.scala	/^  class ParHashMapIterator(start: Int, untilIdx: Int, totalSize: Int, e: DefaultEntry[K, V])$/;"	c
ParHashSet	scala/collection/parallel/immutable/ParHashSet.scala	/^class ParHashSet[T] private[immutable] (private[this] val trie: HashSet[T])$/;"	c
ParHashSet	scala/collection/parallel/immutable/ParHashSet.scala	/^object ParHashSet extends ParSetFactory[ParHashSet] {$/;"	c
ParHashSet	scala/collection/parallel/mutable/ParHashSet.scala	/^class ParHashSet[T] private[collection] (contents: FlatHashTable.Contents[T])$/;"	c
ParHashSet	scala/collection/parallel/mutable/ParHashSet.scala	/^object ParHashSet extends ParSetFactory[ParHashSet] {$/;"	c
ParHashSetIterator	scala/collection/parallel/immutable/ParHashSet.scala	/^  class ParHashSetIterator(var triter: Iterator[T], val sz: Int)$/;"	c
ParHashSetIterator	scala/collection/parallel/mutable/ParHashSet.scala	/^  class ParHashSetIterator(start: Int, iteratesUntil: Int, totalElements: Int)$/;"	c
ParHashTable	scala/collection/parallel/mutable/ParHashTable.scala	/^trait ParHashTable[K, Entry >: Null <: HashEntry[K, Entry]] extends collection.mutable.HashTable[K, Entry] {$/;"	t
ParIterable	scala/collection/parallel/ParIterable.scala	/^object ParIterable extends ParFactory[ParIterable] {$/;"	c
ParIterable	scala/collection/parallel/ParIterable.scala	/^trait ParIterable[+T]$/;"	t
ParIterable	scala/collection/parallel/immutable/ParIterable.scala	/^object ParIterable extends ParFactory[ParIterable] {$/;"	c
ParIterable	scala/collection/parallel/immutable/ParIterable.scala	/^trait ParIterable[+T]$/;"	t
ParIterable	scala/collection/parallel/mutable/ParIterable.scala	/^object ParIterable extends ParFactory[ParIterable] {$/;"	c
ParIterable	scala/collection/parallel/mutable/ParIterable.scala	/^trait ParIterable[T] extends collection\/*.mutable*\/.GenIterable[T]$/;"	t
ParIterableLike	scala/collection/parallel/ParIterableLike.scala	/^trait ParIterableLike[+T, +Repr <: ParIterable[T], +Sequential <: Iterable[T] with IterableLike[T, Sequential]]$/;"	t
ParIterableView	scala/collection/parallel/ParIterableView.scala	/^object ParIterableView {$/;"	c
ParIterableView	scala/collection/parallel/ParIterableView.scala	/^trait ParIterableView[+T, +Coll <: Parallel, +CollSeq]$/;"	t
ParIterableViewLike	scala/collection/parallel/ParIterableViewLike.scala	/^trait ParIterableViewLike[+T,$/;"	t
ParIterator	scala/collection/parallel/ParIterableLike.scala	/^  trait ParIterator extends IterableSplitter[T] {$/;"	t
ParIterator	scala/collection/parallel/ParSeqLike.scala	/^  trait ParIterator extends SeqSplitter[T] with super.ParIterator {$/;"	t
ParIterator	scala/collection/parallel/immutable/package.scala	/^    class ParIterator(var i: Int = 0, val until: Int = length, elem: T = self.elem) extends super.ParIterator {$/;"	c
ParMap	scala/collection/parallel/ParMap.scala	/^object ParMap extends ParMapFactory[ParMap] {$/;"	c
ParMap	scala/collection/parallel/ParMap.scala	/^trait ParMap[K, +V]$/;"	t
ParMap	scala/collection/parallel/immutable/ParMap.scala	/^object ParMap extends ParMapFactory[ParMap] {$/;"	c
ParMap	scala/collection/parallel/immutable/ParMap.scala	/^trait ParMap[K, +V]$/;"	t
ParMap	scala/collection/parallel/mutable/ParMap.scala	/^object ParMap extends ParMapFactory[ParMap] {$/;"	c
ParMap	scala/collection/parallel/mutable/ParMap.scala	/^trait ParMap[K, V]$/;"	t
ParMapFactory	scala/collection/generic/ParMapFactory.scala	/^abstract class ParMapFactory[CC[X, Y] <: ParMap[X, Y] with ParMapLike[X, Y, CC[X, Y], _]]$/;"	c
ParMapLike	scala/collection/parallel/ParMapLike.scala	/^trait ParMapLike[K,$/;"	t
ParMapLike	scala/collection/parallel/mutable/ParMapLike.scala	/^trait ParMapLike[K,$/;"	t
ParRange	scala/collection/parallel/immutable/ParRange.scala	/^class ParRange(val range: Range)$/;"	c
ParRange	scala/collection/parallel/immutable/ParRange.scala	/^object ParRange {$/;"	c
ParRangeIterator	scala/collection/parallel/immutable/ParRange.scala	/^  class ParRangeIterator(range: Range = self.range)$/;"	c
ParSeq	scala/collection/parallel/ParSeq.scala	/^object ParSeq extends ParFactory[ParSeq] {$/;"	c
ParSeq	scala/collection/parallel/ParSeq.scala	/^trait ParSeq[+T] extends GenSeq[T]$/;"	t
ParSeq	scala/collection/parallel/immutable/ParSeq.scala	/^object ParSeq extends ParFactory[ParSeq] {$/;"	c
ParSeq	scala/collection/parallel/immutable/ParSeq.scala	/^trait ParSeq[+T]$/;"	t
ParSeq	scala/collection/parallel/mutable/ParSeq.scala	/^object ParSeq extends ParFactory[ParSeq] {$/;"	c
ParSeq	scala/collection/parallel/mutable/ParSeq.scala	/^trait ParSeq[T] extends collection\/*.mutable*\/.GenSeq[T] \/\/ was: collection.mutable.Seq[T]$/;"	t
ParSeqLike	scala/collection/parallel/ParSeqLike.scala	/^trait ParSeqLike[+T, +Repr <: ParSeq[T], +Sequential <: Seq[T] with SeqLike[T, Sequential]]$/;"	t
ParSeqView	scala/collection/parallel/ParSeqView.scala	/^object ParSeqView {$/;"	c
ParSeqView	scala/collection/parallel/ParSeqView.scala	/^trait ParSeqView[+T, +Coll <: Parallel, +CollSeq]$/;"	t
ParSeqViewLike	scala/collection/parallel/ParSeqViewLike.scala	/^trait ParSeqViewLike[+T,$/;"	t
ParSet	scala/collection/parallel/ParSet.scala	/^object ParSet extends ParSetFactory[ParSet] {$/;"	c
ParSet	scala/collection/parallel/ParSet.scala	/^trait ParSet[T]$/;"	t
ParSet	scala/collection/parallel/immutable/ParSet.scala	/^object ParSet extends ParSetFactory[ParSet] {$/;"	c
ParSet	scala/collection/parallel/immutable/ParSet.scala	/^trait ParSet[T]$/;"	t
ParSet	scala/collection/parallel/mutable/ParSet.scala	/^object ParSet extends ParSetFactory[ParSet] {$/;"	c
ParSet	scala/collection/parallel/mutable/ParSet.scala	/^trait ParSet[T]$/;"	t
ParSetFactory	scala/collection/generic/ParSetFactory.scala	/^abstract class ParSetFactory[CC[X] <: ParSet[X] with ParSetLike[X, CC[X], _] with GenericParTemplate[X, CC]]$/;"	c
ParSetLike	scala/collection/parallel/ParSetLike.scala	/^trait ParSetLike[T,$/;"	t
ParSetLike	scala/collection/parallel/mutable/ParSetLike.scala	/^trait ParSetLike[T,$/;"	t
ParVector	scala/collection/parallel/immutable/ParVector.scala	/^class ParVector[+T](private[this] val vector: Vector[T])$/;"	c
ParVector	scala/collection/parallel/immutable/ParVector.scala	/^object ParVector extends ParFactory[ParVector] {$/;"	c
ParVectorIterator	scala/collection/parallel/immutable/ParVector.scala	/^  class ParVectorIterator(_start: Int, _end: Int) extends VectorIterator[T](_start, _end) with ParIterator {$/;"	c
Para	scala/xml/PrettyPrinter.scala	/^  case class Para(s: String) extends Item$/;"	c
Parallel	scala/collection/Parallel.scala	/^trait Parallel$/;"	t
Parallelizable	scala/collection/Parallelizable.scala	/^trait Parallelizable[+A, +ParRepr <: Parallel] {$/;"	t
ParameterEntityDecl	scala/xml/dtd/Decl.scala	/^case class ParameterEntityDecl(name: String, entdef: EntityDef) extends EntityDecl {$/;"	c
ParseResult	scala/util/parsing/combinator/Parsers.scala	/^  sealed abstract class ParseResult[+T] {$/;"	c
ParsedEntityDecl	scala/xml/dtd/Decl.scala	/^case class ParsedEntityDecl(name: String, entdef: EntityDef) extends EntityDecl {$/;"	c
Parser	scala/util/parsing/combinator/Parsers.scala	/^  abstract class Parser[+T] extends (Input => ParseResult[T]) {$/;"	c
Parser	scala/util/parsing/combinator/Parsers.scala	/^  def Parser[T](f: Input => ParseResult[T]): Parser[T] $/;"	m
Parser	scala/util/parsing/json/Parser.scala	/^class Parser extends StdTokenParsers with ImplicitConversions {$/;"	c
Parser	scala/xml/pull/XMLEventReader.scala	/^  private class Parser(val input: Source) extends MarkupHandler with MarkupParser with ExternalSources with Runnable {$/;"	c
Parsers	scala/util/parsing/combinator/Parsers.scala	/^trait Parsers {$/;"	t
Partial	scala/collection/immutable/Range.scala	/^  class Partial[T, U](f: T => U) {$/;"	c
PartialFunction	scala/PartialFunction.scala	/^object PartialFunction$/;"	c
PartialFunction	scala/PartialFunction.scala	/^trait PartialFunction[-A, +B] extends (A => B) {$/;"	t
PartialOrdering	scala/math/PartialOrdering.scala	/^trait PartialOrdering[T] extends Equiv[T] {$/;"	t
PartialOrdering	scala/package.scala	/^  type PartialOrdering[T] = scala.math.PartialOrdering[T]  $/;"	T
PartiallyOrdered	scala/math/PartiallyOrdered.scala	/^trait PartiallyOrdered[+A] {$/;"	t
PartiallyOrdered	scala/package.scala	/^  type PartiallyOrdered[T] = scala.math.PartiallyOrdered[T]$/;"	T
PartitionIterator	scala/collection/Iterator.scala	/^    class PartitionIterator(p: A => Boolean) extends Iterator[A] {$/;"	c
Partner	scala/collection/Iterator.scala	/^    class Partner extends Iterator[A] {$/;"	c
Patched	scala/collection/GenSeqViewLike.scala	/^  trait Patched[B >: A] extends Transformed[B] {$/;"	t
Patched	scala/collection/SeqViewLike.scala	/^  trait Patched[B >: A] extends Transformed[B] with super[GenSeqViewLike].Patched[B]$/;"	t
Patched	scala/collection/immutable/StreamViewLike.scala	/^  trait Patched[B >: A] extends super.Patched[B] with Transformed[B]$/;"	t
Patched	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Patched[U >: T] extends super.Patched[U] with Transformed[U] {$/;"	t
Patched	scala/collection/parallel/RemainsIterator.scala	/^  class Patched[U >: T](from: Int, patch: SeqSplitter[U], replaced: Int) extends SeqSplitter[U] {$/;"	c
Pdef	scala/util/automata/SubsetConstruction.scala	/^      val Pdef = nfa nextDefault P$/;"	l
Pdelta	scala/util/automata/SubsetConstruction.scala	/^      val Pdelta = new mutable.HashMap[T, BitSet]$/;"	l
Perf	scala/actors/threadpool/Perf.java	/^    private Perf() {}$/;"	m	class:Perf	file:
Perf	scala/actors/threadpool/Perf.java	/^public final class Perf {$/;"	c
PermutationsItr	scala/collection/SeqLike.scala	/^  private class PermutationsItr extends Iterator[Repr] {$/;"	c
PhantomReference	scala/ref/PhantomReference.scala	/^class PhantomReference[+T <: AnyRef](value: T, queue: ReferenceQueue[T]) extends ReferenceWrapper[T] {$/;"	c
PhantomReferenceWithWrapper	scala/ref/PhantomReference.scala	/^private class PhantomReferenceWithWrapper[T <: AnyRef](value: T, queue: ReferenceQueue[T], val wrapper: PhantomReference[T])$/;"	c
Pi	scala/MathCommon.scala	/^  val Pi = java.lang.Math.PI$/;"	l
PickledFlags	scala/reflect/generic/Flags.scala	/^  final val PickledFlags: Long  = 0xFFFFFFFFL$/;"	l
PicklerEnv	scala/io/BytePickle.scala	/^  class PicklerEnv extends HashMap[Any, Int] {$/;"	c
PicklerState	scala/io/BytePickle.scala	/^  class PicklerState(val stream: Array[Byte], val dict: PicklerEnv)$/;"	c
Platform	scala/compat/Platform.scala	/^object Platform {$/;"	c
Point	scala/util/regexp/PointedHedgeExp.scala	/^  case object Point extends RegExp {$/;"	c
PointedHedgeExp	scala/util/regexp/PointedHedgeExp.scala	/^abstract class PointedHedgeExp extends Base {$/;"	c
PolyMethodCache	scala/runtime/MethodCache.scala	/^final class PolyMethodCache($/;"	c
PolyType	scala/reflect/Type.scala	/^case class PolyType(typeParams: List[Symbol], typeBounds: List[(Type, Type)], resultType: Type) extends Type$/;"	c
PolyType	scala/reflect/generic/Types.scala	/^  type PolyType <: Type$/;"	T
PolyType	scala/reflect/generic/Types.scala	/^  val PolyType: PolyTypeExtractor$/;"	l
PolyTypeExtractor	scala/reflect/generic/Types.scala	/^  abstract class PolyTypeExtractor {$/;"	c
Position	scala/io/Position.scala	/^abstract class Position {$/;"	c
Position	scala/io/Position.scala	/^object Position extends Position {$/;"	c
Position	scala/reflect/generic/Universe.scala	/^  type Position$/;"	T
Position	scala/util/parsing/input/Position.scala	/^trait Position {$/;"	t
PositionType	scala/xml/parsing/MarkupParser.scala	/^  type PositionType = Int$/;"	T
PositionType	scala/xml/parsing/MarkupParserCommon.scala	/^  type PositionType     \/\/ Int, Position$/;"	T
Positional	scala/util/parsing/input/Positional.scala	/^trait Positional {$/;"	t
Positioner	scala/io/Source.scala	/^  class Positioner(encoder: Position) {$/;"	c
PositiveInfinity	scala/Double.scala	/^  final val PositiveInfinity = java.lang.Double.POSITIVE_INFINITY$/;"	l
PositiveInfinity	scala/Float.scala	/^  final val PositiveInfinity = java.lang.Float.POSITIVE_INFINITY$/;"	l
PreciseSplitter	scala/collection/parallel/PreciseSplitter.scala	/^trait PreciseSplitter[+T] extends Splitter[T] {$/;"	t
Predef	scala/Predef.scala	/^object Predef extends LowPriorityImplicits {$/;"	c
PredefModule	scala/reflect/generic/StandardDefinitions.scala	/^    def PredefModule: Symbol$/;"	m
PrefixedAttribute	scala/xml/PrefixedAttribute.scala	/^class PrefixedAttribute($/;"	c
PrefixedAttribute	scala/xml/PrefixedAttribute.scala	/^object PrefixedAttribute {$/;"	c
PrefixedType	scala/reflect/Type.scala	/^case class PrefixedType(pre: Type, sym: Symbol) extends Type$/;"	c
Prepended	scala/collection/GenSeqViewLike.scala	/^  trait Prepended[B >: A] extends Transformed[B] {$/;"	t
Prepended	scala/collection/SeqViewLike.scala	/^  trait Prepended[B >: A] extends Transformed[B] with super[GenSeqViewLike].Prepended[B]$/;"	t
Prepended	scala/collection/immutable/StreamViewLike.scala	/^  trait Prepended[B >: A] extends super.Prepended[B] with Transformed[B]$/;"	t
Prepended	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Prepended[U >: T] extends super.Prepended[U] with Transformed[U] {$/;"	t
PrettyPrinter	scala/xml/PrettyPrinter.scala	/^class PrettyPrinter(width: Int, step: Int) {$/;"	c
Print	scala/reflect/Print.scala	/^object Print extends Function1[Any, String] {$/;"	c
PriorityQueue	scala/collection/mutable/PriorityQueue.scala	/^class PriorityQueue[A](implicit val ord: Ordering[A]) $/;"	c
PriorityQueue	scala/collection/mutable/PriorityQueue.scala	/^object PriorityQueue extends OrderedTraversableFactory[PriorityQueue] {  $/;"	c
PriorityQueueProxy	scala/collection/mutable/PriorityQueueProxy.scala	/^abstract class PriorityQueueProxy[A](implicit ord: Ordering[A]) extends PriorityQueue[A]$/;"	c
PrivilegedCallable	scala/actors/threadpool/Executors.java	/^        PrivilegedCallable(Callable task) {$/;"	m	class:Executors.PrivilegedCallable
PrivilegedCallable	scala/actors/threadpool/Executors.java	/^    static final class PrivilegedCallable implements Callable {$/;"	c	class:Executors
PrivilegedCallableUsingCurrentClassLoader	scala/actors/threadpool/Executors.java	/^        PrivilegedCallableUsingCurrentClassLoader(Callable task) {$/;"	m	class:Executors.PrivilegedCallableUsingCurrentClassLoader
PrivilegedCallableUsingCurrentClassLoader	scala/actors/threadpool/Executors.java	/^    static final class PrivilegedCallableUsingCurrentClassLoader implements Callable {$/;"	c	class:Executors
PrivilegedThreadFactory	scala/actors/threadpool/Executors.java	/^        PrivilegedThreadFactory() {$/;"	m	class:Executors.PrivilegedThreadFactory
PrivilegedThreadFactory	scala/actors/threadpool/Executors.java	/^    static class PrivilegedThreadFactory extends DefaultThreadFactory {$/;"	c	class:Executors
ProcInstr	scala/xml/ProcInstr.scala	/^case class ProcInstr(target: String, proctext: String) extends SpecialNode$/;"	c
Process	scala/sys/process/Process.scala	/^object Process extends ProcessImpl with ProcessCreation { }$/;"	c
Process	scala/sys/process/Process.scala	/^trait Process {$/;"	t
ProcessBuilder	scala/sys/process/ProcessBuilder.scala	/^object ProcessBuilder extends ProcessBuilderImpl {$/;"	c
ProcessBuilder	scala/sys/process/ProcessBuilder.scala	/^trait ProcessBuilder extends Source with Sink {$/;"	t
ProcessCreation	scala/sys/process/Process.scala	/^trait ProcessCreation {  $/;"	t
ProcessIO	scala/sys/process/ProcessIO.scala	/^final class ProcessIO($/;"	c
ProcessImplicits	scala/sys/process/Process.scala	/^trait ProcessImplicits {$/;"	t
ProcessLogger	scala/sys/process/ProcessLogger.scala	/^object ProcessLogger {  $/;"	c
ProcessLogger	scala/sys/process/ProcessLogger.scala	/^trait ProcessLogger {$/;"	t
ProducerConsumerIterator	scala/xml/pull/XMLEventReader.scala	/^trait ProducerConsumerIterator[T >: Null] extends Iterator[T] {$/;"	t
Product	scala/Product.scala	/^trait Product extends Equals {$/;"	t
Product	scala/concurrent/pilib.scala	/^  class Product[A](c: Chan[A], v: A) {$/;"	c
Product1	scala/Product1.scala	/^object Product1 {$/;"	c
Product1	scala/Product1.scala	/^trait Product1[@specialized(Int, Long, Double) +T1] extends Product {$/;"	t
Product10	scala/Product10.scala	/^object Product10 {$/;"	c
Product10	scala/Product10.scala	/^trait Product10[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10] extends Product {$/;"	t
Product11	scala/Product11.scala	/^object Product11 {$/;"	c
Product11	scala/Product11.scala	/^trait Product11[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11] extends Product {$/;"	t
Product12	scala/Product12.scala	/^object Product12 {$/;"	c
Product12	scala/Product12.scala	/^trait Product12[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12] extends Product {$/;"	t
Product13	scala/Product13.scala	/^object Product13 {$/;"	c
Product13	scala/Product13.scala	/^trait Product13[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13] extends Product {$/;"	t
Product14	scala/Product14.scala	/^object Product14 {$/;"	c
Product14	scala/Product14.scala	/^trait Product14[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14] extends Product {$/;"	t
Product15	scala/Product15.scala	/^object Product15 {$/;"	c
Product15	scala/Product15.scala	/^trait Product15[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15] extends Product {$/;"	t
Product16	scala/Product16.scala	/^object Product16 {$/;"	c
Product16	scala/Product16.scala	/^trait Product16[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16] extends Product {$/;"	t
Product17	scala/Product17.scala	/^object Product17 {$/;"	c
Product17	scala/Product17.scala	/^trait Product17[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17] extends Product {$/;"	t
Product18	scala/Product18.scala	/^object Product18 {$/;"	c
Product18	scala/Product18.scala	/^trait Product18[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18] extends Product {$/;"	t
Product19	scala/Product19.scala	/^object Product19 {$/;"	c
Product19	scala/Product19.scala	/^trait Product19[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19] extends Product {$/;"	t
Product2	scala/Product2.scala	/^object Product2 {$/;"	c
Product2	scala/Product2.scala	/^trait Product2[@specialized(Int, Long, Double) +T1, @specialized(Int, Long, Double) +T2] extends Product {$/;"	t
Product20	scala/Product20.scala	/^object Product20 {$/;"	c
Product20	scala/Product20.scala	/^trait Product20[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20] extends Product {$/;"	t
Product21	scala/Product21.scala	/^object Product21 {$/;"	c
Product21	scala/Product21.scala	/^trait Product21[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21] extends Product {$/;"	t
Product22	scala/Product22.scala	/^object Product22 {$/;"	c
Product22	scala/Product22.scala	/^trait Product22[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22] extends Product {$/;"	t
Product3	scala/Product3.scala	/^object Product3 {$/;"	c
Product3	scala/Product3.scala	/^trait Product3[+T1, +T2, +T3] extends Product {$/;"	t
Product4	scala/Product4.scala	/^object Product4 {$/;"	c
Product4	scala/Product4.scala	/^trait Product4[+T1, +T2, +T3, +T4] extends Product {$/;"	t
Product5	scala/Product5.scala	/^object Product5 {$/;"	c
Product5	scala/Product5.scala	/^trait Product5[+T1, +T2, +T3, +T4, +T5] extends Product {$/;"	t
Product6	scala/Product6.scala	/^object Product6 {$/;"	c
Product6	scala/Product6.scala	/^trait Product6[+T1, +T2, +T3, +T4, +T5, +T6] extends Product {$/;"	t
Product7	scala/Product7.scala	/^object Product7 {$/;"	c
Product7	scala/Product7.scala	/^trait Product7[+T1, +T2, +T3, +T4, +T5, +T6, +T7] extends Product {$/;"	t
Product8	scala/Product8.scala	/^object Product8 {$/;"	c
Product8	scala/Product8.scala	/^trait Product8[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8] extends Product {$/;"	t
Product9	scala/Product9.scala	/^object Product9 {$/;"	c
Product9	scala/Product9.scala	/^trait Product9[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9] extends Product {$/;"	t
Projection	scala/collection/Iterable.scala	/^  type Projection[A] = IterableView[A, Coll]$/;"	T
Projection	scala/collection/Seq.scala	/^  type Projection[A] = SeqView[A, Coll] $/;"	T
Prop	scala/sys/Prop.scala	/^object Prop {  $/;"	c
Prop	scala/sys/Prop.scala	/^trait Prop[+T] {$/;"	t
Properties	scala/util/Properties.scala	/^object Properties extends PropertiesTrait {$/;"	c
Proxy	scala/Proxy.scala	/^object Proxy {$/;"	c
Proxy	scala/Proxy.scala	/^trait Proxy {$/;"	t
Pub	scala/collection/mutable/ObservableBuffer.scala	/^  type Pub <: ObservableBuffer[A]$/;"	T
Pub	scala/collection/mutable/ObservableMap.scala	/^  type Pub <: ObservableMap[A, B]$/;"	T
Pub	scala/collection/mutable/ObservableSet.scala	/^  type Pub <: ObservableSet[A]$/;"	T
Pub	scala/collection/mutable/Publisher.scala	/^  type Pub <: Publisher[Evt]$/;"	T
PublicID	scala/xml/dtd/ExternalID.scala	/^case class PublicID(publicId: String, systemId: String) extends ExternalID {$/;"	c
Publisher	scala/collection/mutable/Publisher.scala	/^trait Publisher[Evt] { $/;"	t
Q	scala/util/automata/SubsetConstruction.scala	/^        val Q = nfa.next(P, label)$/;"	l
QNode	scala/xml/QNode.scala	/^object QNode {$/;"	c
Queue	scala/actors/threadpool/Queue.java	/^public interface Queue extends Collection {$/;"	i
Queue	scala/collection/immutable/Queue.scala	/^class Queue[+A] protected(protected val in: List[A], protected val out: List[A])$/;"	c
Queue	scala/collection/immutable/Queue.scala	/^object Queue extends SeqFactory[Queue] {$/;"	c
Queue	scala/collection/mutable/Queue.scala	/^class Queue[A]$/;"	c
Queue	scala/collection/mutable/Queue.scala	/^object Queue extends SeqFactory[Queue] {$/;"	c
QueueModule	scala/concurrent/MailBox.scala	/^trait QueueModule[A] {$/;"	t
QueueProxy	scala/collection/mutable/QueueProxy.scala	/^trait QueueProxy[A] extends Queue[A] with Proxy {$/;"	t
QueuedSync	scala/actors/threadpool/helpers/WaitQueue.java	/^    public static interface QueuedSync {$/;"	i	class:WaitQueue
QueueingFuture	scala/actors/threadpool/ExecutorCompletionService.java	/^        QueueingFuture(RunnableFuture task) {$/;"	m	class:ExecutorCompletionService.QueueingFuture
QueueingFuture	scala/actors/threadpool/ExecutorCompletionService.java	/^    private class QueueingFuture extends FutureTask {$/;"	c	class:ExecutorCompletionService
RAN	scala/actors/threadpool/FutureTask.java	/^    private static final int RAN       = 2;$/;"	f	class:FutureTask	file:
READER	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        private static final int READER = 1;$/;"	f	class:ReentrantReadWriteLock.Sync	file:
READY	scala/actors/threadpool/FutureTask.java	/^    private static final int READY     = 0;$/;"	f	class:FutureTask	file:
RED	scala/Console.scala	/^  final val RED        = "\\033[31m"$/;"	l
RED_B	scala/Console.scala	/^  final val RED_B      = "\\033[41m"$/;"	l
REF	scala/io/BytePickle.scala	/^  val REF = 0$/;"	l
REFINEDtpe	scala/reflect/generic/PickleFormat.scala	/^  final val REFINEDtpe = 18$/;"	l
REFINE_CLASS_NAME	scala/reflect/generic/StdNames.scala	/^    val REFINE_CLASS_NAME: NameType  = "<refinement>"$/;"	l
REQUIRED	scala/xml/dtd/Decl.scala	/^case object REQUIRED extends DefaultDecl {$/;"	c
RESET	scala/Console.scala	/^  final val RESET      = "\\033[0m"$/;"	l
RETURNtree	scala/reflect/generic/PickleFormat.scala	/^    final val RETURNtree = 25$/;"	l
REVERSED	scala/Console.scala	/^  final val REVERSED   = "\\033[7m"$/;"	l
ROOT	scala/reflect/generic/StdNames.scala	/^    val ROOT: NameType               = "<root>"$/;"	l
ROOTPKG	scala/reflect/generic/StdNames.scala	/^    val ROOTPKG: NameType       = "_root_"$/;"	l
RPAREN	scala/xml/dtd/Tokens.scala	/^  final val RPAREN       = 4$/;"	l
RUNNING	scala/actors/threadpool/FutureTask.java	/^    private static final int RUNNING   = 1;$/;"	f	class:FutureTask	file:
RUNNING	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private static final int RUNNING    = -1 << COUNT_BITS;$/;"	f	class:ThreadPoolExecutor	file:
Random	scala/util/Random.scala	/^class Random(val self: java.util.Random) {$/;"	c
Random	scala/util/Random.scala	/^object Random extends Random {$/;"	c
RandomAccessSeq	scala/package.scala	/^  type RandomAccessSeq[+A] = scala.collection.IndexedSeq[A]$/;"	T
RandomAccessSeq	scala/package.scala	/^  val RandomAccessSeq = scala.collection.IndexedSeq$/;"	l
Range	scala/collection/immutable/Range.scala	/^class Range(val start: Int, val end: Int, val step: Int)$/;"	c
Range	scala/collection/immutable/Range.scala	/^object Range {$/;"	c
Range	scala/package.scala	/^  type Range = scala.collection.immutable.Range$/;"	T
Range	scala/package.scala	/^  val Range = scala.collection.immutable.Range$/;"	l
RangeUtils	scala/collection/immutable/package.scala	/^  trait RangeUtils[+Repr <: RangeUtils[Repr]] {$/;"	t
RangedProxy	scala/runtime/ScalaNumberProxy.scala	/^trait RangedProxy[T] extends Typed[T] {$/;"	t
Reaction	scala/actors/Reaction.scala	/^class Reaction(a: Actor, f: PartialFunction[Any, Any], msg: Any)$/;"	c
Reactor	scala/actors/Reactor.scala	/^trait Reactor[Msg >: Null] extends OutputChannel[Msg] with Combinators {$/;"	t
ReadLock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        protected ReadLock(ReentrantReadWriteLock lock) {$/;"	m	class:ReentrantReadWriteLock.ReadLock
ReadLock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    public static class ReadLock implements Lock, java.io.Serializable {$/;"	c	class:ReentrantReadWriteLock
ReadWriteLock	scala/actors/threadpool/locks/ReadWriteLock.java	/^public interface ReadWriteLock {$/;"	i
Reader	scala/util/parsing/input/Reader.scala	/^abstract class Reader[+T] {$/;"	c
Receiver	scala/concurrent/MailBox.scala	/^  private class Receiver[A](receiver: PartialFunction[Message, A]) extends PreReceiver {$/;"	c
RecursiveProxyHandler	scala/actors/Actor.scala	/^  private class RecursiveProxyHandler(a: ReplyReactor, f: PartialFunction[Any, Unit])$/;"	c
RedBlack	scala/collection/immutable/RedBlack.scala	/^abstract class RedBlack[A] extends Serializable {$/;"	c
RedTree	scala/collection/immutable/RedBlack.scala	/^  case class RedTree[+B](override val key: A,$/;"	c
ReentrantLock	scala/actors/threadpool/locks/ReentrantLock.java	/^    public ReentrantLock() {$/;"	m	class:ReentrantLock
ReentrantLock	scala/actors/threadpool/locks/ReentrantLock.java	/^    public ReentrantLock(boolean fair) {$/;"	m	class:ReentrantLock
ReentrantLock	scala/actors/threadpool/locks/ReentrantLock.java	/^public class ReentrantLock implements Lock, java.io.Serializable,$/;"	c
ReentrantReadWriteLock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    public ReentrantReadWriteLock() {$/;"	m	class:ReentrantReadWriteLock
ReentrantReadWriteLock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^public class ReentrantReadWriteLock implements ReadWriteLock, java.io.Serializable  {$/;"	c
Ref	scala/io/BytePickle.scala	/^  case class Ref() extends RefDef$/;"	c
RefDef	scala/io/BytePickle.scala	/^  abstract class RefDef$/;"	c
RefTree	scala/reflect/generic/Trees.scala	/^  trait RefTree extends SymTree {$/;"	t
Reference	scala/ref/Reference.scala	/^trait Reference[+T <: AnyRef] extends Function0[T] {$/;"	t
ReferenceQueue	scala/ref/ReferenceQueue.scala	/^class ReferenceQueue[+T <: AnyRef] {$/;"	c
ReferenceWithWrapper	scala/ref/ReferenceWrapper.scala	/^private trait ReferenceWithWrapper[T <: AnyRef] {$/;"	t
ReferenceWrapper	scala/ref/ReferenceWrapper.scala	/^trait ReferenceWrapper[+T <: AnyRef] extends Reference[T] with Proxy {$/;"	t
RefinedType	scala/reflect/generic/Types.scala	/^  type RefinedType <: CompoundType$/;"	T
RefinedType	scala/reflect/generic/Types.scala	/^  val RefinedType: RefinedTypeExtractor$/;"	l
RefinedTypeExtractor	scala/reflect/generic/Types.scala	/^  abstract class RefinedTypeExtractor {$/;"	c
RegExp	scala/util/regexp/Base.scala	/^  abstract class RegExp {$/;"	c
Regex	scala/util/matching/Regex.scala	/^class Regex(regex: String, groupNames: String*) extends Serializable {$/;"	c
Regex	scala/util/matching/Regex.scala	/^object Regex {$/;"	c
RegexParsers	scala/util/parsing/combinator/RegexParsers.scala	/^trait RegexParsers extends Parsers {$/;"	t
RegexTest	scala/util/parsing/combinator/testing/RegexTest.scala	/^object RegexTest extends RegexParsers {$/;"	c
RejectedExecutionException	scala/actors/threadpool/RejectedExecutionException.java	/^    public RejectedExecutionException() { }$/;"	m	class:RejectedExecutionException
RejectedExecutionException	scala/actors/threadpool/RejectedExecutionException.java	/^    public RejectedExecutionException(String message) {$/;"	m	class:RejectedExecutionException
RejectedExecutionException	scala/actors/threadpool/RejectedExecutionException.java	/^    public RejectedExecutionException(String message, Throwable cause) {$/;"	m	class:RejectedExecutionException
RejectedExecutionException	scala/actors/threadpool/RejectedExecutionException.java	/^    public RejectedExecutionException(Throwable cause) {$/;"	m	class:RejectedExecutionException
RejectedExecutionException	scala/actors/threadpool/RejectedExecutionException.java	/^public class RejectedExecutionException extends RuntimeException {$/;"	c
RejectedExecutionHandler	scala/actors/threadpool/RejectedExecutionHandler.java	/^public interface RejectedExecutionHandler {$/;"	i
RelaxedPosition	scala/io/Source.scala	/^  object RelaxedPosition extends Position {$/;"	c
RelaxedPositioner	scala/io/Source.scala	/^  object RelaxedPositioner extends Positioner(RelaxedPosition) { }$/;"	c
RemoteActor	scala/actors/remote/RemoteActor.scala	/^object RemoteActor {$/;"	c
RemoteApply0	scala/actors/remote/NetKernel.scala	/^case class RemoteApply0(senderLoc: Locator, receiverLoc: Locator, rfun: Function2[AbstractActor, Proxy, Unit])$/;"	c
Remove	scala/collection/script/Message.scala	/^case class Remove[+A](location: Location, elem: A) extends Message[A] {$/;"	c
ReplyReactor	scala/actors/ReplyReactor.scala	/^trait ReplyReactor extends Reactor[Any] with ReactorCanReply {$/;"	t
Reset	scala/collection/script/Message.scala	/^case class Reset[+A]() extends Message[A]$/;"	c
ResizableArray	scala/collection/mutable/ResizableArray.scala	/^object ResizableArray extends SeqFactory[ResizableArray] {$/;"	c
ResizableArray	scala/collection/mutable/ResizableArray.scala	/^trait ResizableArray[A] extends IndexedSeq[A] $/;"	t
ResizableParArrayCombiner	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^object ResizableParArrayCombiner {$/;"	c
ResizableParArrayCombiner	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^trait ResizableParArrayCombiner[T]$/;"	t
ResizableThreadPoolScheduler	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^class ResizableThreadPoolScheduler(protected val terminate: Boolean,$/;"	c
Responder	scala/Responder.scala	/^abstract class Responder[+A] extends Serializable {$/;"	c
Responder	scala/Responder.scala	/^object Responder {$/;"	c
Result	scala/collection/parallel/Tasks.scala	/^    type Result = R$/;"	T
ResultWithoutStep	scala/runtime/RichInt.scala	/^  type ResultWithoutStep = Range$/;"	T
ResultWithoutStep	scala/runtime/ScalaNumberProxy.scala	/^  type ResultWithoutStep = NumericRange[T]$/;"	T
ResultWithoutStep	scala/runtime/ScalaNumberProxy.scala	/^  type ResultWithoutStep = Range.Partial[T, NumericRange[T]]$/;"	T
ResultWithoutStep	scala/runtime/ScalaNumberProxy.scala	/^  type ResultWithoutStep$/;"	T
Return	scala/reflect/generic/Trees.scala	/^  case class Return(expr: Tree)$/;"	c
ReturnAndDo	scala/util/parsing/ast/Binders.scala	/^  trait ReturnAndDo[T]{$/;"	t
Reversed	scala/collection/GenSeqViewLike.scala	/^  trait Reversed extends Transformed[A] {$/;"	t
Reversed	scala/collection/SeqViewLike.scala	/^  trait Reversed extends Transformed[A] with super[GenSeqViewLike].Reversed$/;"	t
Reversed	scala/collection/immutable/StreamViewLike.scala	/^  trait Reversed extends super.Reversed with Transformed[A]$/;"	t
Reversed	scala/collection/mutable/IndexedSeqView.scala	/^  trait Reversed extends super.Reversed with Transformed[A] {$/;"	t
Reversed	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Reversed extends super.Reversed with Transformed[T] {$/;"	t
RevertibleHistory	scala/collection/mutable/RevertibleHistory.scala	/^class RevertibleHistory[Evt <: Undoable, Pub] extends History[Evt, Pub] with Undoable with Serializable {$/;"	c
RewriteRule	scala/xml/transform/RewriteRule.scala	/^abstract class RewriteRule extends BasicTransformer {$/;"	c
RichBoolean	scala/runtime/RichBoolean.scala	/^final class RichBoolean(val self: Boolean) extends OrderedProxy[Boolean] {$/;"	c
RichByte	scala/runtime/RichByte.scala	/^final class RichByte(val self: Byte) extends ScalaWholeNumberProxy[Byte] { }$/;"	c
RichChar	scala/runtime/RichChar.scala	/^final class RichChar(val self: Char) extends IntegralProxy[Char] {$/;"	c
RichDouble	scala/runtime/RichDouble.scala	/^final class RichDouble(val self: Double) extends FractionalProxy[Double] {$/;"	c
RichException	scala/runtime/RichException.scala	/^final class RichException(exc: Throwable) {$/;"	c
RichFloat	scala/runtime/RichFloat.scala	/^final class RichFloat(val self: Float) extends FractionalProxy[Float] {$/;"	c
RichInt	scala/runtime/RichInt.scala	/^final class RichInt(val self: Int) extends ScalaNumberProxy[Int] with RangedProxy[Int] {$/;"	c
RichLong	scala/runtime/RichLong.scala	/^final class RichLong(val self: Long) extends IntegralProxy[Long] {$/;"	c
RichShort	scala/runtime/RichShort.scala	/^final class RichShort(val self: Short) extends ScalaWholeNumberProxy[Short] { }$/;"	c
Right	scala/Either.scala	/^final case class Right[+A, +B](b: B) extends Either[A, B] {$/;"	c
RightProjection	scala/Either.scala	/^  final case class RightProjection[+A, +B](e: Either[A, B]) {$/;"	c
RootClass	scala/reflect/generic/StandardDefinitions.scala	/^    def RootClass: Symbol$/;"	m
RootPackage	scala/reflect/generic/StandardDefinitions.scala	/^    def RootPackage: Symbol$/;"	m
RootSymbol	scala/reflect/Symbol.scala	/^case object RootSymbol extends Symbol {$/;"	c
RoundingMode	scala/math/BigDecimal.scala	/^    type RoundingMode = Value$/;"	T
RoundingMode	scala/math/BigDecimal.scala	/^  object RoundingMode extends Enumeration(java.math.RoundingMode.values map (_.toString) : _*) with Serializable {$/;"	c
RuleTransformer	scala/xml/transform/RuleTransformer.scala	/^class RuleTransformer(rules: RewriteRule*) extends BasicTransformer {$/;"	c
RunCallable	scala/actors/scheduler/ExecutorScheduler.scala	/^  private class RunCallable(fun: => Unit) extends Callable[Unit] with Runnable {$/;"	c
RunCallable	scala/concurrent/ThreadPoolRunner.scala	/^  private class RunCallable[S](fun: () => S) extends Runnable with Callable[S] {$/;"	c
RunnableAdapter	scala/actors/threadpool/Executors.java	/^        RunnableAdapter(Runnable  task, Object result) {$/;"	m	class:Executors.RunnableAdapter
RunnableAdapter	scala/actors/threadpool/Executors.java	/^    static final class RunnableAdapter implements Callable {$/;"	c	class:Executors
RunnableFuture	scala/actors/threadpool/RunnableFuture.java	/^public interface RunnableFuture extends Runnable, Future {$/;"	i
RuntimeException	scala/package.scala	/^  type RuntimeException                = java.lang.RuntimeException$/;"	T
S	scala/xml/dtd/Tokens.scala	/^  final val S            = 13$/;"	l
SAXException	scala/xml/package.scala	/^  type SAXException       = org.xml.sax.SAXException$/;"	T
SAXParseException	scala/xml/package.scala	/^  type SAXParseException  = org.xml.sax.SAXParseException$/;"	T
SAXParser	scala/xml/package.scala	/^  type SAXParser          = javax.xml.parsers.SAXParser$/;"	T
SCPI	scala/collection/parallel/immutable/ParHashMap.scala	/^  type SCPI = SignalContextPassingIterator[ParHashMapIterator]$/;"	T
SCPI	scala/collection/parallel/immutable/ParHashSet.scala	/^  type SCPI = SignalContextPassingIterator[ParHashSetIterator]$/;"	T
SCPI	scala/collection/parallel/immutable/ParRange.scala	/^  type SCPI = SignalContextPassingIterator[ParRangeIterator]$/;"	T
SCPI	scala/collection/parallel/immutable/ParVector.scala	/^  type SCPI = SignalContextPassingIterator[ParVectorIterator]$/;"	T
SCPI	scala/collection/parallel/immutable/package.scala	/^    type SCPI = SignalContextPassingIterator[ParIterator]$/;"	T
SCPI	scala/collection/parallel/mutable/ParArray.scala	/^  type SCPI = SignalContextPassingIterator[ParArrayIterator]$/;"	T
SCPI	scala/collection/parallel/mutable/ParHashMap.scala	/^  type SCPI = SignalContextPassingIterator[ParHashMapIterator]$/;"	T
SCPI	scala/collection/parallel/mutable/ParHashSet.scala	/^  type SCPI = SignalContextPassingIterator[ParHashSetIterator]$/;"	T
SEALED	scala/reflect/generic/Flags.scala	/^  final val SEALED        = 0x00000400$/;"	l
SECONDS	scala/actors/threadpool/TimeUnit.java	/^    public static final TimeUnit SECONDS = new TimeUnit(3, "SECONDS") {$/;"	f	class:TimeUnit
SELECTFROMTYPEtree	scala/reflect/generic/PickleFormat.scala	/^    final val SELECTFROMTYPEtree = 41$/;"	l
SELECTtree	scala/reflect/generic/PickleFormat.scala	/^    final val SELECTtree = 35$/;"	l
SEVERE	scala/annotation/elidable.scala	/^  final val SEVERE  = 1000          \/\/ Level.SEVERE.intValue()$/;"	l
SHORT	scala/runtime/BoxesRunTime.java	/^    private static final int CHAR = 0, BYTE = 1, SHORT = 2, INT = 3, LONG = 4, FLOAT = 5, DOUBLE = 6, OTHER = 7;$/;"	f	class:BoxesRunTime	file:
SHUTDOWN	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private static final int SHUTDOWN   =  0 << COUNT_BITS;$/;"	f	class:ThreadPoolExecutor	file:
SINGLETONTYPEtree	scala/reflect/generic/PickleFormat.scala	/^    final val SINGLETONTYPEtree = 40$/;"	l
SINGLEtpe	scala/reflect/generic/PickleFormat.scala	/^  final val SINGLEtpe = 14$/;"	l
SPECIALIZED	scala/reflect/generic/Flags.scala	/^  final val SPECIALIZED   = 0x10000000000L\/\/ symbol is a generated specialized member$/;"	l
SPU	scala/io/BytePickle.scala	/^  abstract class SPU[T] {$/;"	c
SQRT2	scala/collection/parallel/package.scala	/^  val SQRT2 = math.sqrt(2)$/;"	l
SSCTask	scala/collection/parallel/ParIterableLike.scala	/^  type SSCTask[R, Tp] = StrictSplitterCheckTask[R, Tp]$/;"	T
STABLE	scala/reflect/generic/Flags.scala	/^  final val STABLE        = 0x00400000    \/\/ functions that are assumed to be stable$/;"	l
STAR	scala/xml/dtd/Tokens.scala	/^  final val STAR         = 6$/;"	l
STARtree	scala/reflect/generic/PickleFormat.scala	/^    final val STARtree = 17$/;"	l
STATIC	scala/reflect/generic/Flags.scala	/^  final val STATIC        = 0x00800000    \/\/ static field, method or class$/;"	l
STOP	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private static final int STOP       =  1 << COUNT_BITS;$/;"	f	class:ThreadPoolExecutor	file:
SU	scala/xml/Utility.scala	/^  final val SU = '\\u001A'$/;"	l
SUPERACCESSOR	scala/reflect/generic/Flags.scala	/^  final val SUPERACCESSOR = 0x10000000    \/\/ a super accessor$/;"	l
SUPERtpe	scala/reflect/generic/PickleFormat.scala	/^  final val SUPERtpe = 46$/;"	l
SUPERtree	scala/reflect/generic/PickleFormat.scala	/^    final val SUPERtree = 33$/;"	l
SUnit	scala/testing/SUnit.scala	/^object SUnit {$/;"	c
SYMANNOT	scala/reflect/generic/PickleFormat.scala	/^  final val SYMANNOT = 40$/;"	l
SYNTHETIC	scala/reflect/generic/Flags.scala	/^  final val SYNTHETIC     = 0x00200000    \/\/ symbol is compiler-generated$/;"	l
ScalaBeanInfo	scala/reflect/ScalaBeanInfo.scala	/^abstract class ScalaBeanInfo(clazz: java.lang.Class[_], $/;"	c
ScalaLongSignature	scala/reflect/ScalaLongSignature.java	/^public @interface ScalaLongSignature {$/;"	i
ScalaNumber	scala/math/ScalaNumber.java	/^public abstract class ScalaNumber extends java.lang.Number {$/;"	c
ScalaNumberProxy	scala/runtime/ScalaNumberProxy.scala	/^abstract class ScalaNumberProxy[T: Numeric] extends ScalaNumericConversions with Typed[T] with OrderedProxy[T] {$/;"	c
ScalaNumericConversions	scala/math/ScalaNumericConversions.scala	/^trait ScalaNumericConversions extends ScalaNumber {  $/;"	t
ScalaObject	scala/ScalaObject.scala	/^trait ScalaObject extends java.lang.Object$/;"	t
ScalaPackage	scala/reflect/generic/StandardDefinitions.scala	/^    def ScalaPackage: Symbol$/;"	m
ScalaPackageClass	scala/reflect/generic/StandardDefinitions.scala	/^    def ScalaPackageClass: Symbol$/;"	m
ScalaRunTime	scala/runtime/ScalaRunTime.scala	/^object ScalaRunTime {$/;"	c
ScalaSignature	scala/reflect/ScalaSignature.java	/^public @interface ScalaSignature {$/;"	i
ScalaWholeNumberProxy	scala/runtime/ScalaNumberProxy.scala	/^abstract class ScalaWholeNumberProxy[T: Numeric] extends ScalaNumberProxy[T] {$/;"	c
Scan	scala/reflect/generic/UnPickler.scala	/^  abstract class Scan(bytes: Array[Byte], offset: Int, classRoot: Symbol, moduleRoot: Symbol, filename: String) extends PickleBuffer(bytes, offset, -1) {$/;"	c
ScanToArray	scala/collection/parallel/mutable/ParArray.scala	/^  class ScanToArray[U >: T](tree: ScanTree[U], z: U, op: (U, U) => U, targetarr: Array[Any]) $/;"	c
Scanner	scala/util/parsing/combinator/lexical/Scanners.scala	/^  class Scanner(in: Reader[Char]) extends Reader[Token] {$/;"	c
Scanner	scala/xml/dtd/Scanner.scala	/^class Scanner extends Tokens with parsing.TokenTests {$/;"	c
Scanners	scala/util/parsing/combinator/lexical/Scanners.scala	/^trait Scanners extends Parsers {$/;"	t
Scheduler	scala/actors/Scheduler.scala	/^object Scheduler extends DelegatingScheduler {$/;"	c
SchedulerAdapter	scala/actors/SchedulerAdapter.scala	/^trait SchedulerAdapter extends IScheduler {$/;"	t
Scope	scala/reflect/generic/Scopes.scala	/^  type Scope <: AbsScope$/;"	T
Scope	scala/util/parsing/ast/Binders.scala	/^  class Scope[binderType <: NameElement] extends Iterable[binderType]{$/;"	c
ScopeIsMappable	scala/util/parsing/ast/Binders.scala	/^  implicit def ScopeIsMappable[bt <: NameElement <% Mappable[bt]](scope: Scope[bt]): Mappable[Scope[bt]] = $/;"	m
Script	scala/collection/script/Message.scala	/^class Script[A] extends ArrayBuffer[Message[A]] with Message[A] {$/;"	c
Scriptable	scala/collection/script/Scriptable.scala	/^trait Scriptable[A] {$/;"	t
Select	scala/reflect/Tree.scala	/^case class Select(qual: Tree, sym: Symbol) extends Tree$/;"	c
Select	scala/reflect/generic/Trees.scala	/^  case class Select(qualifier: Tree, name: Name)$/;"	c
SelectFromArray	scala/reflect/generic/Trees.scala	/^  case class SelectFromArray(qualifier: Tree, name: Name, erasure: Type)$/;"	c
SelectFromTypeTree	scala/reflect/generic/Trees.scala	/^  case class SelectFromTypeTree(qualifier: Tree, name: TypeName)$/;"	c
SendTo	scala/actors/remote/NetKernel.scala	/^case class  SendTo(a: OutputChannel[Any], msg: Any, session: Symbol)$/;"	c
SendToReactor	scala/actors/ReactChannel.scala	/^  private case class SendToReactor(channel: ReactChannel[Msg], msg: Msg)$/;"	c
Seq	scala/collection/Seq.scala	/^object Seq extends SeqFactory[Seq] {$/;"	c
Seq	scala/collection/Seq.scala	/^trait Seq[+A] extends PartialFunction[Int, A] $/;"	t
Seq	scala/collection/immutable/Seq.scala	/^object Seq extends SeqFactory[Seq] {$/;"	c
Seq	scala/collection/immutable/Seq.scala	/^trait Seq[+A] extends Iterable[A] $/;"	t
Seq	scala/collection/mutable/Seq.scala	/^object Seq extends SeqFactory[Seq] {$/;"	c
Seq	scala/collection/mutable/Seq.scala	/^trait Seq[A] extends Iterable[A] $/;"	t
Seq	scala/package.scala	/^  type Seq[+A] = scala.collection.Seq[A]$/;"	T
Seq	scala/package.scala	/^  val Seq = scala.collection.Seq$/;"	l
SeqFactory	scala/collection/generic/SeqFactory.scala	/^abstract class SeqFactory[CC[X] <: Seq[X] with GenericTraversableTemplate[X, CC]]$/;"	c
SeqForwarder	scala/collection/generic/SeqForwarder.scala	/^trait SeqForwarder[+A] extends Seq[A] with IterableForwarder[A] {$/;"	t
SeqLike	scala/collection/SeqLike.scala	/^object SeqLike {$/;"	c
SeqLike	scala/collection/SeqLike.scala	/^trait SeqLike[+A, +Repr] extends IterableLike[A, Repr] with GenSeqLike[A, Repr] with Parallelizable[A, ParSeq[A]] { self =>$/;"	t
SeqLike	scala/collection/mutable/SeqLike.scala	/^trait SeqLike[A, +This <: SeqLike[A, This] with Seq[A]]$/;"	t
SeqMethods	scala/collection/interfaces/SeqMethods.scala	/^trait SeqMethods[+A, +This <: SeqLike[A, This] with Seq[A]] extends IterableMethods[A, This] {$/;"	t
SeqProxy	scala/collection/SeqProxy.scala	/^trait SeqProxy[+A] extends Seq[A] with SeqProxyLike[A, Seq[A]] $/;"	t
SeqProxyLike	scala/collection/SeqProxyLike.scala	/^trait SeqProxyLike[+A, +Repr <: SeqLike[A, Repr] with Seq[A]] extends SeqLike[A, Repr] with IterableProxyLike[A, Repr] { $/;"	t
SeqSplitter	scala/collection/parallel/RemainsIterator.scala	/^trait SeqSplitter[+T]$/;"	t
SeqView	scala/collection/SeqView.scala	/^object SeqView {$/;"	c
SeqView	scala/collection/SeqView.scala	/^trait SeqView[+A, +Coll] extends SeqViewLike[A, Coll, SeqView[A, Coll]] with GenSeqView[A, Coll]$/;"	t
SeqViewLike	scala/collection/SeqViewLike.scala	/^trait SeqViewLike[+A, $/;"	t
SeqWrapper	scala/collection/JavaConversions.scala	/^  case class SeqWrapper[A](underlying : Seq[A]) extends ju.AbstractList[A] with IterableWrapperTrait[A] {$/;"	c
Sequ	scala/util/regexp/Base.scala	/^  class Sequ private (val rs: _regexpT*) extends RegExp {$/;"	c
Sequ	scala/util/regexp/Base.scala	/^  object Sequ {$/;"	c
Sequence	scala/package.scala	/^  type Sequence[+A] = scala.collection.Seq[A]$/;"	T
Sequence	scala/package.scala	/^  val Sequence = scala.collection.Seq$/;"	l
SerialVersionUID	scala/SerialVersionUID.scala	/^class SerialVersionUID(uid: Long) extends annotation.StaticAnnotation$/;"	c
SerialVersionUID	scala/package.scala	/^  type SerialVersionUID = annotation.SerialVersionUID$/;"	T
Serializable	scala/Serializable.scala	/^trait Serializable extends java.io.Serializable$/;"	t
SerializationProxy	scala/collection/immutable/HashMap.scala	/^  private class SerializationProxy[A,B](@transient private var orig: HashMap[A, B]) extends Serializable {$/;"	c
Serializer	scala/actors/remote/Serializer.scala	/^abstract class Serializer(val service: Service) {$/;"	c
Service	scala/actors/remote/Service.scala	/^trait Service {$/;"	t
Set	scala/Predef.scala	/^  type Set[A]     = immutable.Set[A]$/;"	T
Set	scala/Predef.scala	/^  val Set         = immutable.Set$/;"	l
Set	scala/collection/Set.scala	/^object Set extends SetFactory[Set] {$/;"	c
Set	scala/collection/Set.scala	/^trait Set[A] extends (A => Boolean) $/;"	t
Set	scala/collection/immutable/Set.scala	/^object Set extends ImmutableSetFactory[Set] {$/;"	c
Set	scala/collection/immutable/Set.scala	/^trait Set[A] extends Iterable[A] $/;"	t
Set	scala/collection/mutable/Set.scala	/^object Set extends MutableSetFactory[Set] {$/;"	c
Set	scala/collection/mutable/Set.scala	/^trait Set[A] extends Iterable[A]$/;"	t
Set1	scala/collection/immutable/Set.scala	/^  class Set1[A] private[collection] (elem1: A) extends Set[A] with Serializable {$/;"	c
Set2	scala/collection/immutable/Set.scala	/^  class Set2[A] private[collection] (elem1: A, elem2: A) extends Set[A] with Serializable {$/;"	c
Set3	scala/collection/immutable/Set.scala	/^  class Set3[A] private[collection] (elem1: A, elem2: A, elem3: A) extends Set[A] with Serializable {$/;"	c
Set4	scala/collection/immutable/Set.scala	/^  class Set4[A] private[collection] (elem1: A, elem2: A, elem3: A, elem4: A) extends Set[A] with Serializable {$/;"	c
SetBuilder	scala/collection/mutable/SetBuilder.scala	/^class SetBuilder[A, Coll <: collection.Set[A] with collection.SetLike[A, Coll]](empty: Coll) extends Builder[A, Coll] {$/;"	c
SetFactory	scala/collection/generic/SetFactory.scala	/^abstract class SetFactory[CC[X] <: Set[X] with SetLike[X, CC[X]]]$/;"	c
SetLike	scala/collection/SetLike.scala	/^trait SetLike[A, +This <: SetLike[A, This] with Set[A]] $/;"	t
SetLike	scala/collection/mutable/SetLike.scala	/^trait SetLike[A, +This <: SetLike[A, This] with Set[A]] $/;"	t
SetMethods	scala/collection/interfaces/SetMethods.scala	/^trait SetMethods[A, +This <: SetLike[A, This] with Set[A]]$/;"	t
SetProxy	scala/collection/SetProxy.scala	/^trait SetProxy[A] extends Set[A] with SetProxyLike[A, Set[A]]$/;"	t
SetProxy	scala/collection/immutable/SetProxy.scala	/^trait SetProxy[A] extends Set[A] with SetProxyLike[A, Set[A]] {$/;"	t
SetProxy	scala/collection/mutable/SetProxy.scala	/^trait SetProxy[A] extends Set[A] with SetProxyLike[A, Set[A]] {  $/;"	t
SetProxyLike	scala/collection/SetProxyLike.scala	/^trait SetProxyLike[A, +This <: SetLike[A, This] with Set[A]] extends SetLike[A, This] with IterableProxyLike[A, This] {$/;"	t
SetStorage	scala/xml/persistent/SetStorage.scala	/^class SetStorage(file: File) extends CachedFileStorage(file) {$/;"	c
SetWrapper	scala/collection/JavaConversions.scala	/^  class SetWrapper[A](underlying: Set[A]) extends ju.AbstractSet[A] {$/;"	c
Short	scala/Short.scala	/^final class Short extends AnyVal {$/;"	c
Short	scala/Short.scala	/^object Short extends AnyValCompanion {$/;"	c
Short	scala/math/Ordering.scala	/^  implicit object Short extends ShortOrdering$/;"	c
Short	scala/reflect/ClassManifest.scala	/^  val Short   = Manifest.Short$/;"	l
Short	scala/reflect/Manifest.scala	/^  val Short: AnyValManifest[Short] = new AnyValManifest[scala.Short] {$/;"	l
Short2short	scala/Predef.scala	/^  implicit def Short2short(x: java.lang.Short): Short         = x.shortValue$/;"	m
Short2shortNullConflict	scala/LowPriorityImplicits.scala	/^  implicit def Short2shortNullConflict(x: Null): Short       = sys.error("value error")$/;"	m
ShortClass	scala/reflect/generic/StandardDefinitions.scala	/^    def ShortClass  : Symbol$/;"	m
ShortIsIntegral	scala/math/Numeric.scala	/^  implicit object ShortIsIntegral extends ShortIsIntegral with Ordering.ShortOrdering$/;"	c
ShortIsIntegral	scala/math/Numeric.scala	/^  trait ShortIsIntegral extends Integral[Short] {$/;"	t
ShortOrdering	scala/math/Ordering.scala	/^  trait ShortOrdering extends Ordering[Short] {$/;"	t
ShortRef	scala/runtime/ShortRef.java	/^    public ShortRef(short elem) { this.elem = elem; }$/;"	m	class:ShortRef
ShortRef	scala/runtime/ShortRef.java	/^public class ShortRef implements java.io.Serializable {$/;"	c
ShortTag	scala/reflect/generic/Constants.scala	/^  final val ShortTag   = 4$/;"	l
Show	scala/testing/Show.scala	/^trait Show {$/;"	t
Shrinkable	scala/collection/generic/Shrinkable.scala	/^trait Shrinkable[-A] { $/;"	t
ShutdownHookThread	scala/sys/ShutdownHookThread.scala	/^class ShutdownHookThread private (name: String) extends Thread(name) {$/;"	c
ShutdownHookThread	scala/sys/ShutdownHookThread.scala	/^object ShutdownHookThread {$/;"	c
SignalContextPassingIterator	scala/collection/parallel/ParIterableLike.scala	/^  trait SignalContextPassingIterator[+IterRepr <: ParIterator] extends ParIterator {$/;"	t
SignalContextPassingIterator	scala/collection/parallel/ParSeqLike.scala	/^  trait SignalContextPassingIterator[+IterRepr <: ParIterator]$/;"	t
Signalling	scala/collection/generic/Signalling.scala	/^trait Signalling {$/;"	t
SignallingOps	scala/collection/parallel/ParIterableLike.scala	/^  trait SignallingOps[PI <: DelegatedSignalling] {$/;"	t
SingleThreadedScheduler	scala/actors/package.scala	/^  type SingleThreadedScheduler = scala.actors.scheduler.SingleThreadedScheduler$/;"	T
SingleThreadedScheduler	scala/actors/scheduler/SingleThreadedScheduler.scala	/^class SingleThreadedScheduler extends IScheduler {$/;"	c
SingleType	scala/reflect/Type.scala	/^case class SingleType(pre: Type, sym: Symbol) extends Type$/;"	c
SingleType	scala/reflect/generic/Types.scala	/^  type SingleType <: SingletonType$/;"	T
SingleType	scala/reflect/generic/Types.scala	/^  val SingleType: SingleTypeExtractor$/;"	l
SingleTypeExtractor	scala/reflect/generic/Types.scala	/^  abstract class SingleTypeExtractor {$/;"	c
SingletonType	scala/reflect/generic/Types.scala	/^  type SingletonType >: Null <: Type$/;"	T
SingletonTypeManifest	scala/reflect/Manifest.scala	/^  private class SingletonTypeManifest[T <: AnyRef](value: AnyRef) extends Manifest[T] {$/;"	c
SingletonTypeTree	scala/reflect/generic/Trees.scala	/^  case class SingletonTypeTree(ref: Tree)$/;"	c
Sink	scala/sys/process/ProcessBuilder.scala	/^  trait Sink {$/;"	t
Sizing	scala/collection/generic/Sizing.scala	/^trait Sizing {$/;"	t
SliceInterval	scala/collection/generic/SliceInterval.scala	/^object SliceInterval {$/;"	c
Sliced	scala/collection/GenIterableViewLike.scala	/^  trait Sliced extends super.Sliced with Transformed[A] {$/;"	t
Sliced	scala/collection/GenSeqViewLike.scala	/^  trait Sliced extends super.Sliced with Transformed[A] {$/;"	t
Sliced	scala/collection/GenTraversableViewLike.scala	/^  trait Sliced extends Transformed[A] {$/;"	t
Sliced	scala/collection/IterableViewLike.scala	/^  trait Sliced extends super[TraversableViewLike].Sliced with super[GenIterableViewLike].Sliced with Transformed[A]$/;"	t
Sliced	scala/collection/SeqViewLike.scala	/^  trait Sliced extends super[IterableViewLike].Sliced with super[GenSeqViewLike].Sliced with Transformed[A]$/;"	t
Sliced	scala/collection/TraversableViewLike.scala	/^  trait Sliced extends Transformed[A] with super.Sliced$/;"	t
Sliced	scala/collection/immutable/StreamViewLike.scala	/^  trait Sliced extends super.Sliced with Transformed[A] { }$/;"	t
Sliced	scala/collection/mutable/IndexedSeqView.scala	/^  trait Sliced extends super.Sliced with Transformed[A] {$/;"	t
Sliced	scala/collection/parallel/ParIterableViewLike.scala	/^  trait Sliced extends super.Sliced with Transformed[T] {$/;"	t
Sliced	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Sliced extends super[GenSeqViewLike].Sliced with super[ParIterableViewLike].Sliced with Transformed[T] {$/;"	t
SoftReference	scala/ref/SoftReference.scala	/^class SoftReference[+T <: AnyRef](value : T, queue : ReferenceQueue[T]) extends ReferenceWrapper[T] {$/;"	c
SoftReferenceWithWrapper	scala/ref/SoftReference.scala	/^private class SoftReferenceWithWrapper[T <: AnyRef](value: T, queue: ReferenceQueue[T], val wrapper: SoftReference[T])$/;"	c
Some	scala/Option.scala	/^final case class Some[+A](x: A) extends Option[A] {$/;"	c
Sorted	scala/collection/generic/Sorted.scala	/^trait Sorted[K, +This <: Sorted[K, This]] {$/;"	t
SortedMap	scala/collection/SortedMap.scala	/^object SortedMap extends SortedMapFactory[SortedMap] {$/;"	c
SortedMap	scala/collection/SortedMap.scala	/^trait SortedMap[A, +B] extends Map[A, B] with SortedMapLike[A, B, SortedMap[A, B]] {$/;"	t
SortedMap	scala/collection/immutable/SortedMap.scala	/^object SortedMap extends ImmutableSortedMapFactory[SortedMap] {$/;"	c
SortedMap	scala/collection/immutable/SortedMap.scala	/^trait SortedMap[A, +B] extends Map[A, B] $/;"	t
SortedMapCanBuildFrom	scala/collection/generic/SortedMapFactory.scala	/^  class SortedMapCanBuildFrom[A, B](implicit ord: Ordering[A]) extends CanBuildFrom[Coll, (A, B), CC[A, B]] {$/;"	c
SortedMapFactory	scala/collection/generic/SortedMapFactory.scala	/^abstract class SortedMapFactory[CC[A, B] <: SortedMap[A, B] with SortedMapLike[A, B, CC[A, B]]] {$/;"	c
SortedMapLike	scala/collection/SortedMapLike.scala	/^trait SortedMapLike[A, +B, +This <: SortedMapLike[A, B, This] with SortedMap[A, B]] extends Sorted[A, This] with MapLike[A, B, This] { $/;"	t
SortedSet	scala/collection/SortedSet.scala	/^object SortedSet extends SortedSetFactory[SortedSet] {$/;"	c
SortedSet	scala/collection/SortedSet.scala	/^trait SortedSet[A] extends Set[A] with SortedSetLike[A, SortedSet[A]] {$/;"	t
SortedSet	scala/collection/immutable/SortedSet.scala	/^object SortedSet extends ImmutableSortedSetFactory[SortedSet] {$/;"	c
SortedSet	scala/collection/immutable/SortedSet.scala	/^trait SortedSet[A] extends Set[A] with scala.collection.SortedSet[A] with SortedSetLike[A, SortedSet[A]] {$/;"	t
SortedSetCanBuildFrom	scala/collection/generic/SortedSetFactory.scala	/^  class SortedSetCanBuildFrom[A](implicit ord: Ordering[A]) extends CanBuildFrom[Coll, A, CC[A]] {$/;"	c
SortedSetFactory	scala/collection/generic/SortedSetFactory.scala	/^abstract class SortedSetFactory[CC[A] <: SortedSet[A] with SortedSetLike[A, CC[A]]] {$/;"	c
SortedSetLike	scala/collection/SortedSetLike.scala	/^trait SortedSetLike[A, +This <: SortedSet[A] with SortedSetLike[A, This]] extends Sorted[A, This] with SetLike[A, This] {$/;"	t
Sorting	scala/util/Sorting.scala	/^object Sorting {$/;"	c
Source	scala/io/Source.scala	/^abstract class Source extends Iterator[Char] {$/;"	c
Source	scala/io/Source.scala	/^object Source {$/;"	c
Source	scala/sys/process/ProcessBuilder.scala	/^  trait Source {$/;"	t
Source	scala/xml/XML.scala	/^object Source$/;"	c
Spawn	scala/concurrent/pilib.scala	/^  abstract class Spawn {$/;"	c
SpecialNode	scala/xml/SpecialNode.scala	/^abstract class SpecialNode extends Node with pull.XMLEvent$/;"	c
Splitter	scala/collection/parallel/Splitter.scala	/^object Splitter {$/;"	c
Splitter	scala/collection/parallel/Splitter.scala	/^trait Splitter[+T] extends Iterator[T] {$/;"	t
Stack	scala/collection/immutable/Stack.scala	/^class Stack[+A] protected (protected val elems: List[A])$/;"	c
Stack	scala/collection/immutable/Stack.scala	/^object Stack extends SeqFactory[Stack] {$/;"	c
Stack	scala/collection/mutable/Stack.scala	/^class Stack[A] private (var elems: List[A])$/;"	c
Stack	scala/collection/mutable/Stack.scala	/^object Stack extends SeqFactory[Stack] {$/;"	c
StackBuilder	scala/collection/mutable/Stack.scala	/^  class StackBuilder[A] extends Builder[A, Stack[A]] {$/;"	c
StackOverflowError	scala/compat/Platform.scala	/^  type StackOverflowError = java.lang.StackOverflowError$/;"	T
StackProxy	scala/collection/mutable/StackProxy.scala	/^trait StackProxy[A] extends Stack[A] with Proxy {$/;"	t
StandardTokenParsers	scala/util/parsing/combinator/syntactical/StandardTokenParsers.scala	/^class StandardTokenParsers extends StdTokenParsers {$/;"	c
Star	scala/reflect/generic/Trees.scala	/^  case class Star(elem: Tree)$/;"	c
Star	scala/util/regexp/Base.scala	/^  case class Star(r: _regexpT) extends RegExp {$/;"	c
Start	scala/collection/script/Location.scala	/^case object Start extends Location$/;"	c
State	scala/actors/Actor.scala	/^  object State extends Enumeration {$/;"	c
StaticAnnotation	scala/annotation/StaticAnnotation.scala	/^trait StaticAnnotation extends Annotation$/;"	t
StaticAnnotation	scala/package.scala	/^  type StaticAnnotation = scala.annotation.StaticAnnotation$/;"	T
StdLexical	scala/util/parsing/combinator/lexical/StdLexical.scala	/^class StdLexical extends Lexical with StdTokens {$/;"	c
StdTokenParsers	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^trait StdTokenParsers extends TokenParsers {$/;"	t
StdTokens	scala/util/parsing/combinator/token/StdTokens.scala	/^trait StdTokens extends Tokens {$/;"	t
StdTokens	scala/util/parsing/syntax/package.scala	/^  type StdTokens = token.StdTokens$/;"	T
Str	scala/util/parsing/combinator/testing/RegexTest.scala	/^case class Str(s: String)$/;"	c
Stream	scala/collection/immutable/Stream.scala	/^abstract class Stream[+A] extends LinearSeq[A] $/;"	c
Stream	scala/collection/immutable/Stream.scala	/^object Stream extends SeqFactory[Stream] {$/;"	c
Stream	scala/package.scala	/^  type Stream[+A] = scala.collection.immutable.Stream[A]$/;"	T
Stream	scala/package.scala	/^  val Stream = scala.collection.immutable.Stream$/;"	l
StreamBuilder	scala/collection/immutable/Stream.scala	/^  class StreamBuilder[A] extends scala.collection.mutable.LazyBuilder[A, Stream[A]] {$/;"	c
StreamCanBuildFrom	scala/collection/immutable/Stream.scala	/^  class StreamCanBuildFrom[A] extends GenericCanBuildFrom[A]$/;"	c
StreamIterator	scala/collection/immutable/Stream.scala	/^final class StreamIterator[+A](self: Stream[A]) extends Iterator[A] {$/;"	c
StreamReader	scala/util/parsing/input/StreamReader.scala	/^object StreamReader {$/;"	c
StreamReader	scala/util/parsing/input/StreamReader.scala	/^sealed class StreamReader(seq: PagedSeq[Char], off: Int, lnum: Int) extends PagedSeqReader(seq, off) {$/;"	c
StreamView	scala/collection/immutable/StreamView.scala	/^trait StreamView[+A, +Coll] extends StreamViewLike[A, Coll, StreamView[A, Coll]] { }$/;"	t
StreamViewLike	scala/collection/immutable/StreamViewLike.scala	/^trait StreamViewLike[+A,$/;"	t
StreamWithFilter	scala/collection/immutable/Stream.scala	/^  final class StreamWithFilter(p: A => Boolean) extends WithFilter(p) {    $/;"	c
StrictSplitterCheckTask	scala/collection/parallel/ParIterableLike.scala	/^  protected trait StrictSplitterCheckTask[R, Tp] extends Task[R, Tp] {$/;"	t
String	scala/Predef.scala	/^  type String        = java.lang.String$/;"	T
String	scala/math/Ordering.scala	/^  implicit object String extends StringOrdering$/;"	c
StringAdd	scala/runtime/StringAdd.scala	/^final class StringAdd(self: Any) {$/;"	c
StringBuilder	scala/collection/mutable/StringBuilder.scala	/^final class StringBuilder(private val underlying: JavaStringBuilder)$/;"	c
StringBuilder	scala/collection/mutable/StringBuilder.scala	/^object StringBuilder {$/;"	c
StringBuilder	scala/package.scala	/^  type StringBuilder = scala.collection.mutable.StringBuilder$/;"	T
StringBuilder	scala/package.scala	/^  val StringBuilder = scala.collection.mutable.StringBuilder$/;"	l
StringClass	scala/reflect/generic/StandardDefinitions.scala	/^    def StringClass : Symbol$/;"	m
StringIndexOutOfBoundsException	scala/package.scala	/^  type StringIndexOutOfBoundsException = java.lang.StringIndexOutOfBoundsException$/;"	T
StringIsMappable	scala/util/parsing/ast/Binders.scala	/^  implicit def StringIsMappable(s: String): Mappable[String] =$/;"	m
StringLike	scala/collection/immutable/StringLike.scala	/^object StringLike {$/;"	c
StringLike	scala/collection/immutable/StringLike.scala	/^trait StringLike[+Repr] extends collection.IndexedSeqOptimized[Char, Repr] with Ordered[String] {$/;"	t
StringLit	scala/util/parsing/combinator/token/StdTokens.scala	/^  case class StringLit(chars: String) extends Token {$/;"	c
StringOps	scala/collection/immutable/StringOps.scala	/^final class StringOps(override val repr: String) extends StringLike[String] {$/;"	c
StringOrdering	scala/math/Ordering.scala	/^  trait StringOrdering extends Ordering[String] {$/;"	t
StringProp	scala/sys/Prop.scala	/^  implicit object StringProp extends CreatorImpl[String](s => s)$/;"	c
StringTag	scala/reflect/generic/Constants.scala	/^  final val StringTag  = 10$/;"	l
Sub	scala/collection/mutable/Publisher.scala	/^  type Sub = Subscriber[Evt, Pub]$/;"	T
Subscriber	scala/collection/mutable/Subscriber.scala	/^trait Subscriber[-Evt, -Pub] {$/;"	t
SubsetConstruction	scala/util/automata/SubsetConstruction.scala	/^class SubsetConstruction[T <: AnyRef](val nfa: NondetWordAutom[T]) {$/;"	c
SubsetsItr	scala/collection/SetLike.scala	/^  private class SubsetsItr(elms: IndexedSeq[A], len: Int) extends Iterator[This] {$/;"	c
Subtractable	scala/collection/generic/Subtractable.scala	/^trait Subtractable[A, +Repr <: Subtractable[A, Repr]] { self =>$/;"	t
SubtractableMethods	scala/collection/interfaces/SetMethods.scala	/^trait SubtractableMethods[A, +This <: Subtractable[A, This]] {$/;"	t
Success	scala/util/parsing/combinator/Parsers.scala	/^  case class Success[+T](result: T, override val next: Input) extends ParseResult[T] {$/;"	c
Sum	scala/concurrent/pilib.scala	/^  case class Sum(gs: List[UGP]) {$/;"	c
SunPerfProvider	scala/actors/threadpool/helpers/Utils.java	/^        SunPerfProvider() {$/;"	m	class:Utils.SunPerfProvider
SunPerfProvider	scala/actors/threadpool/helpers/Utils.java	/^    private static final class SunPerfProvider implements NanoTimer {$/;"	c	class:Utils
Super	scala/reflect/Tree.scala	/^case class Super(psym: Symbol) extends Tree$/;"	c
Super	scala/reflect/generic/Trees.scala	/^  case class Super(qual: Tree, mix: TypeName) extends TermTree {$/;"	c
SuperParIterator	scala/collection/parallel/ParSeqLike.scala	/^  type SuperParIterator = IterableSplitter[T]$/;"	T
SuperType	scala/reflect/generic/Types.scala	/^  type SuperType <: SingletonType $/;"	T
SuperType	scala/reflect/generic/Types.scala	/^  val SuperType: SuperTypeExtractor$/;"	l
SuperTypeExtractor	scala/reflect/generic/Types.scala	/^  abstract class SuperTypeExtractor {$/;"	c
SymApply	scala/testing/Show.scala	/^  class SymApply(f: Symbol) {$/;"	c
SymTree	scala/reflect/generic/Trees.scala	/^  trait SymTree extends Tree {$/;"	t
Symbol	scala/Symbol.scala	/^final class Symbol private (val name: String) extends Serializable {$/;"	c
Symbol	scala/Symbol.scala	/^object Symbol extends UniquenessCache[String, Symbol]$/;"	c
Symbol	scala/reflect/Symbol.scala	/^abstract class Symbol {$/;"	c
Symbol	scala/reflect/generic/Symbols.scala	/^  type Symbol >: Null <: AbsSymbol$/;"	T
SymbolClass	scala/reflect/generic/StandardDefinitions.scala	/^    def SymbolClass : Symbol$/;"	m
Sync	scala/actors/threadpool/locks/ReentrantLock.java	/^        protected Sync() {}$/;"	m	class:ReentrantLock.Sync
Sync	scala/actors/threadpool/locks/ReentrantLock.java	/^    static abstract class Sync implements java.io.Serializable {$/;"	c	class:ReentrantLock
Sync	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        Sync() {}$/;"	m	class:ReentrantReadWriteLock.Sync
Sync	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    private abstract static class Sync implements java.io.Serializable {$/;"	c	class:ReentrantReadWriteLock
SyncChannel	scala/concurrent/SyncChannel.scala	/^class SyncChannel[A] {$/;"	c
SyncVar	scala/concurrent/SyncVar.scala	/^class SyncVar[A] {$/;"	c
SyncVar	scala/sys/process/package.scala	/^      type SyncVar[T]      = scala.concurrent.SyncVar[T]$/;"	T
SynchronizedBuffer	scala/collection/mutable/SynchronizedBuffer.scala	/^trait SynchronizedBuffer[A] extends Buffer[A] {$/;"	t
SynchronizedMap	scala/collection/mutable/SynchronizedMap.scala	/^trait SynchronizedMap[A, B] extends Map[A, B] {$/;"	t
SynchronizedPriorityQueue	scala/collection/mutable/SynchronizedPriorityQueue.scala	/^class SynchronizedPriorityQueue[A](implicit ord: Ordering[A]) extends PriorityQueue[A] {$/;"	c
SynchronizedQueue	scala/collection/mutable/SynchronizedQueue.scala	/^class SynchronizedQueue[A] extends Queue[A] {$/;"	c
SynchronizedSet	scala/collection/mutable/SynchronizedSet.scala	/^trait SynchronizedSet[A] extends Set[A] {$/;"	t
SynchronizedStack	scala/collection/mutable/SynchronizedStack.scala	/^class SynchronizedStack[A] extends Stack[A] {$/;"	c
SynchronousQueue	scala/actors/threadpool/SynchronousQueue.java	/^    public SynchronousQueue() {$/;"	m	class:SynchronousQueue
SynchronousQueue	scala/actors/threadpool/SynchronousQueue.java	/^    public SynchronousQueue(boolean fair) {$/;"	m	class:SynchronousQueue
SynchronousQueue	scala/actors/threadpool/SynchronousQueue.java	/^public class SynchronousQueue extends AbstractQueue$/;"	c
SyntaxError	scala/util/regexp/SyntaxError.scala	/^class SyntaxError(e: String) extends RuntimeException(e)$/;"	c
SystemID	scala/xml/dtd/ExternalID.scala	/^case class SystemID(systemId: String) extends ExternalID {$/;"	c
SystemProperties	scala/sys/SystemProperties.scala	/^class SystemProperties extends mutable.Map[String, String] {$/;"	c
SystemProperties	scala/sys/SystemProperties.scala	/^object SystemProperties {$/;"	c
T	scala/collection/SeqLike.scala	/^    val T: Array[Int] = {$/;"	l
T	scala/concurrent/MailBox.scala	/^    type T = (LinkedList[A], LinkedList[A]) \/\/ fst = the list, snd = last elem$/;"	T
T	scala/concurrent/MailBox.scala	/^    type T = List[A]$/;"	T
T	scala/concurrent/MailBox.scala	/^  type T$/;"	T
TEMPLATEtree	scala/reflect/generic/PickleFormat.scala	/^    final val TEMPLATEtree = 12$/;"	l
TERMINATED	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private static final int TERMINATED =  3 << COUNT_BITS;$/;"	f	class:ThreadPoolExecutor	file:
TERMname	scala/reflect/generic/PickleFormat.scala	/^  final val TERMname = 1$/;"	l
THIStpe	scala/reflect/generic/PickleFormat.scala	/^  final val THIStpe = 13$/;"	l
THIStree	scala/reflect/generic/PickleFormat.scala	/^    final val THIStree = 34$/;"	l
THROWtree	scala/reflect/generic/PickleFormat.scala	/^    final val THROWtree = 27$/;"	l
TIDYING	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private static final int TIDYING    =  2 << COUNT_BITS;$/;"	f	class:ThreadPoolExecutor	file:
TIMEOUT	scala/actors/Actor.scala	/^case object TIMEOUT$/;"	c
TIMEOUT	scala/concurrent/TIMEOUT.scala	/^case object TIMEOUT$/;"	c
TOKEN_PCDATA	scala/xml/dtd/Tokens.scala	/^  final val TOKEN_PCDATA = 0$/;"	l
TRAIT	scala/reflect/generic/Flags.scala	/^  final val TRAIT         = 0x02000000    \/\/ symbol is a trait$/;"	l
TRANS_FLAG	scala/reflect/generic/Flags.scala	/^  final val TRANS_FLAG    = 0x4000000000L \/\/ transient flag guaranteed to be reset after each phase.$/;"	l
TREE	scala/reflect/generic/PickleFormat.scala	/^  final val TREE = 49      \/\/ prefix code that means a tree is coming$/;"	l
TREtree	scala/reflect/generic/PickleFormat.scala	/^    final val TREtree = 26$/;"	l
TRIEDCOOKING	scala/reflect/generic/Flags.scala	/^  final val TRIEDCOOKING  = 0x100000000000L \/\/ ``Cooking'' has been tried on this symbol $/;"	l
TYPE	scala/runtime/BoxedUnit.java	/^    public final static Class<Void> TYPE = java.lang.Void.TYPE;$/;"	f	class:BoxedUnit
TYPEAPPLYtree	scala/reflect/generic/PickleFormat.scala	/^    final val TYPEAPPLYtree = 30$/;"	l
TYPEBOUNDStpe	scala/reflect/generic/PickleFormat.scala	/^  final val TYPEBOUNDStpe = 17$/;"	l
TYPEBOUNDStree	scala/reflect/generic/PickleFormat.scala	/^    final val TYPEBOUNDStree = 44$/;"	l
TYPEDEFtree	scala/reflect/generic/PickleFormat.scala	/^    final val TYPEDEFtree = 7$/;"	l
TYPEDtree	scala/reflect/generic/PickleFormat.scala	/^    final val TYPEDtree = 29$/;"	l
TYPEREFtpe	scala/reflect/generic/PickleFormat.scala	/^  final val TYPEREFtpe = 16$/;"	l
TYPEname	scala/reflect/generic/PickleFormat.scala	/^  final val TYPEname = 2$/;"	l
TYPEsym	scala/reflect/generic/PickleFormat.scala	/^  final val TYPEsym = 4$/;"	l
TYPEtree	scala/reflect/generic/PickleFormat.scala	/^    final val TYPEtree = 38$/;"	l
TaggedDelegatedContext	scala/collection/generic/Signalling.scala	/^class TaggedDelegatedContext(deleg: Signalling, override val tag: Int) extends DelegatedContext(deleg)$/;"	c
TailCalls	scala/util/control/TailCalls.scala	/^object TailCalls {$/;"	c
TailRec	scala/util/control/TailCalls.scala	/^  abstract class TailRec[+A] {$/;"	c
Taken	scala/collection/parallel/RemainsIterator.scala	/^  class Taken(taken: Int) extends IterableSplitter[T] {$/;"	c
Taken	scala/collection/parallel/RemainsIterator.scala	/^  class Taken(tk: Int) extends super.Taken(tk) with SeqSplitter[T] {$/;"	c
TakenWhile	scala/collection/GenIterableViewLike.scala	/^  trait TakenWhile extends super.TakenWhile with Transformed[A] {$/;"	t
TakenWhile	scala/collection/GenSeqViewLike.scala	/^  trait TakenWhile extends super.TakenWhile with Transformed[A] {$/;"	t
TakenWhile	scala/collection/GenTraversableViewLike.scala	/^  trait TakenWhile extends Transformed[A] {$/;"	t
TakenWhile	scala/collection/IterableViewLike.scala	/^  trait TakenWhile extends super[TraversableViewLike].TakenWhile with super[GenIterableViewLike].TakenWhile with Transformed[A]$/;"	t
TakenWhile	scala/collection/SeqViewLike.scala	/^  trait TakenWhile extends super[IterableViewLike].TakenWhile with super[GenSeqViewLike].TakenWhile with Transformed[A]$/;"	t
TakenWhile	scala/collection/TraversableViewLike.scala	/^  trait TakenWhile extends Transformed[A] with super.TakenWhile$/;"	t
TakenWhile	scala/collection/immutable/StreamViewLike.scala	/^  trait TakenWhile extends super.TakenWhile with Transformed[A]$/;"	t
TakenWhile	scala/collection/mutable/IndexedSeqView.scala	/^  trait TakenWhile extends super.TakenWhile with Transformed[A] {$/;"	t
Target	scala/reflect/Tree.scala	/^case class Target(sym: LabelSymbol, body: Tree) extends Tree$/;"	c
Task	scala/collection/parallel/Tasks.scala	/^  trait Task[R, +Tp] {$/;"	t
Task	scala/concurrent/JavaConversions.scala	/^      type Task[T] = Runnable$/;"	T
Task	scala/concurrent/TaskRunner.scala	/^  type Task[T]$/;"	T
Task	scala/concurrent/ThreadPoolRunner.scala	/^  type Task[T] = Callable[T] with Runnable$/;"	T
Task	scala/concurrent/ThreadRunner.scala	/^  type Task[T] = () => T$/;"	T
TaskImpl	scala/collection/parallel/Tasks.scala	/^  class TaskImpl[R, Tp](val body: Task[R, Tp])$/;"	c
TaskImpl	scala/collection/parallel/Tasks.scala	/^  trait TaskImpl[R, +Tp] extends RecursiveAction with super.TaskImpl[R, Tp] {$/;"	t
TaskImpl	scala/collection/parallel/Tasks.scala	/^  trait TaskImpl[R, +Tp] extends Runnable with super.TaskImpl[R, Tp] {$/;"	t
TaskImpl	scala/collection/parallel/Tasks.scala	/^  trait TaskImpl[R, +Tp] {$/;"	t
TaskImpl	scala/collection/parallel/Tasks.scala	/^  trait TaskImpl[R, Tp] extends super.TaskImpl[R, Tp] {$/;"	t
TaskOps	scala/collection/parallel/ParIterableLike.scala	/^  trait TaskOps[R, Tp] {$/;"	t
TaskRunner	scala/concurrent/TaskRunner.scala	/^trait TaskRunner {$/;"	t
TaskRunners	scala/concurrent/TaskRunners.scala	/^object TaskRunners {$/;"	c
TaskSupport	scala/collection/parallel/TaskSupport.scala	/^trait TaskSupport extends Tasks$/;"	t
Tasks	scala/collection/parallel/Tasks.scala	/^trait Tasks {$/;"	t
TcpService	scala/actors/remote/TcpService.scala	/^class TcpService(port: Int, cl: ClassLoader) extends Thread with Service {$/;"	c
TcpService	scala/actors/remote/TcpService.scala	/^object TcpService {$/;"	c
Template	scala/reflect/Tree.scala	/^case class Template(parents: List[Type], body: List[Tree]) extends Tree$/;"	c
Template	scala/reflect/generic/Trees.scala	/^  case class Template(parents: List[Tree], self: ValDef, body: List[Tree])$/;"	c
TermName	scala/reflect/generic/Names.scala	/^  type TermName <: Name$/;"	T
TermTree	scala/reflect/generic/Trees.scala	/^  trait TermTree extends Tree $/;"	t
Terminate	scala/actors/remote/NetKernel.scala	/^case object Terminate$/;"	c
Test	scala/testing/SUnit.scala	/^  trait Test {$/;"	t
TestCase	scala/testing/SUnit.scala	/^  abstract class TestCase(val name: String) extends Test with Assert {$/;"	c
TestConsoleMain	scala/testing/SUnit.scala	/^  trait TestConsoleMain {$/;"	t
TestFailure	scala/testing/SUnit.scala	/^  class TestFailure(val failedTest: Test, val thrownException: Throwable) {$/;"	c
TestResult	scala/testing/SUnit.scala	/^  class TestResult {$/;"	c
TestSuite	scala/testing/SUnit.scala	/^  class TestSuite(tests: Test*) extends Test {$/;"	c
Tester	scala/util/parsing/combinator/testing/Tester.scala	/^abstract class Tester {$/;"	c
Text	scala/xml/Text.scala	/^case class Text(_data: String) extends Atom[String](_data)$/;"	c
TextBuffer	scala/xml/TextBuffer.scala	/^class TextBuffer$/;"	c
TextBuffer	scala/xml/TextBuffer.scala	/^object TextBuffer {$/;"	c
This	scala/reflect/Tree.scala	/^case class This(sym: Symbol) extends Tree$/;"	c
This	scala/reflect/generic/Trees.scala	/^  case class This(qual: TypeName)$/;"	c
ThisType	scala/reflect/Type.scala	/^case class ThisType(clazz: Symbol) extends Type$/;"	c
ThisType	scala/reflect/generic/Types.scala	/^  type ThisType <: SingletonType$/;"	T
ThisType	scala/reflect/generic/Types.scala	/^  val ThisType: ThisTypeExtractor$/;"	l
ThisTypeExtractor	scala/reflect/generic/Types.scala	/^  abstract class ThisTypeExtractor {$/;"	c
ThreadFactory	scala/actors/threadpool/ThreadFactory.java	/^public interface ThreadFactory {$/;"	i
ThreadHelpers	scala/actors/threadpool/helpers/ThreadHelpers.java	/^    private ThreadHelpers() {}$/;"	m	class:ThreadHelpers	file:
ThreadHelpers	scala/actors/threadpool/helpers/ThreadHelpers.java	/^public class ThreadHelpers {$/;"	c
ThreadPoolExecutor	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public ThreadPoolExecutor(int corePoolSize,$/;"	m	class:ThreadPoolExecutor
ThreadPoolExecutor	scala/actors/threadpool/ThreadPoolExecutor.java	/^public class ThreadPoolExecutor extends AbstractExecutorService {$/;"	c
ThreadPoolRunner	scala/concurrent/ThreadPoolRunner.scala	/^trait ThreadPoolRunner extends FutureTaskRunner {$/;"	t
ThreadPoolTasks	scala/collection/parallel/Tasks.scala	/^object ThreadPoolTasks {$/;"	c
ThreadPoolTasks	scala/collection/parallel/Tasks.scala	/^trait ThreadPoolTasks extends Tasks {$/;"	t
ThreadRunner	scala/concurrent/ThreadRunner.scala	/^class ThreadRunner extends FutureTaskRunner {$/;"	c
Throw	scala/reflect/generic/Trees.scala	/^  case class Throw(expr: Tree)$/;"	c
Throwable	scala/package.scala	/^  type Throwable = java.lang.Throwable$/;"	T
ThrowableOps	scala/collection/parallel/package.scala	/^  trait ThrowableOps {$/;"	t
TickedScheduler	scala/actors/package.scala	/^  type TickedScheduler = scala.actors.scheduler.ForkJoinScheduler$/;"	T
TimeUnit	scala/actors/threadpool/TimeUnit.java	/^    TimeUnit(int index, String name) {$/;"	m	class:TimeUnit
TimeUnit	scala/actors/threadpool/TimeUnit.java	/^public abstract class TimeUnit implements java.io.Serializable {$/;"	c
TimeoutException	scala/actors/threadpool/TimeoutException.java	/^    public TimeoutException() {}$/;"	m	class:TimeoutException
TimeoutException	scala/actors/threadpool/TimeoutException.java	/^    public TimeoutException(String message) {$/;"	m	class:TimeoutException
TimeoutException	scala/actors/threadpool/TimeoutException.java	/^public class TimeoutException extends Exception {$/;"	c
ToIteratorWrapper	scala/collection/JavaConversions.scala	/^  class ToIteratorWrapper[A](underlying : Iterator[A]) {$/;"	c
Token	scala/util/parsing/combinator/lexical/Scanners.scala	/^  type Token$/;"	T
Token	scala/util/parsing/combinator/token/Tokens.scala	/^  abstract class Token {$/;"	c
TokenParsers	scala/util/parsing/combinator/syntactical/TokenParsers.scala	/^trait TokenParsers extends Parsers {$/;"	t
TokenTests	scala/xml/parsing/TokenTests.scala	/^trait TokenTests {$/;"	t
Tokens	scala/util/parsing/combinator/syntactical/StandardTokenParsers.scala	/^  type Tokens = StdTokens$/;"	T
Tokens	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^  type Tokens <: StdTokens$/;"	T
Tokens	scala/util/parsing/combinator/syntactical/TokenParsers.scala	/^  type Tokens <: token.Tokens$/;"	T
Tokens	scala/util/parsing/combinator/token/Tokens.scala	/^trait Tokens {$/;"	t
Tokens	scala/util/parsing/json/Parser.scala	/^  type Tokens = Lexer$/;"	T
Tokens	scala/util/parsing/syntax/package.scala	/^  type Tokens = token.Tokens$/;"	T
Tokens	scala/xml/dtd/Tokens.scala	/^class Tokens {$/;"	c
TopIter	scala/util/regexp/PointedHedgeExp.scala	/^  case class  TopIter(r1: _regexpT, r2: _regexpT) extends RegExp {$/;"	c
TopScope	scala/xml/TopScope.scala	/^object TopScope extends NamespaceBinding(null, null, null)$/;"	c
TraitSetter	scala/runtime/TraitSetter.java	/^public @interface TraitSetter {$/;"	i
Transformed	scala/collection/GenIterableViewLike.scala	/^  trait Transformed[+B] extends GenIterableView[B, Coll] with super.Transformed[B] {$/;"	t
Transformed	scala/collection/GenSeqViewLike.scala	/^  trait Transformed[+B] extends GenSeqView[B, Coll] with super.Transformed[B] {$/;"	t
Transformed	scala/collection/GenTraversableViewLike.scala	/^  trait Transformed[+B] extends GenTraversableView[B, Coll] {$/;"	t
Transformed	scala/collection/IterableViewLike.scala	/^  trait Transformed[+B] extends IterableView[B, Coll] with super[TraversableViewLike].Transformed[B] with super[GenIterableViewLike].Transformed[B] {$/;"	t
Transformed	scala/collection/SeqViewLike.scala	/^  trait Transformed[+B] extends SeqView[B, Coll] with super[IterableViewLike].Transformed[B] with super[GenSeqViewLike].Transformed[B] {$/;"	t
Transformed	scala/collection/TraversableViewLike.scala	/^  trait Transformed[+B] extends TraversableView[B, Coll] with super.Transformed[B] {$/;"	t
Transformed	scala/collection/immutable/StreamViewLike.scala	/^  trait Transformed[+B] extends StreamView[B, Coll] with super.Transformed[B] {$/;"	t
Transformed	scala/collection/mutable/IndexedSeqView.scala	/^  trait Transformed[B] extends IndexedSeqView[B, Coll] with super.Transformed[B] {$/;"	t
Transformed	scala/collection/parallel/ParIterableViewLike.scala	/^  trait Transformed[+S] extends ParIterableView[S, Coll, CollSeq] with super.Transformed[S] {$/;"	t
Transformed	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Transformed[+S] extends ParSeqView[S, Coll, CollSeq]$/;"	t
Transformer	scala/collection/parallel/ParIterableLike.scala	/^  protected trait Transformer[R, Tp] extends Accessor[R, Tp]$/;"	t
Transformer	scala/collection/parallel/ParSeqLike.scala	/^  protected trait Transformer[R, Tp] extends Accessor[R, Tp] with super.Transformer[R, Tp]$/;"	t
Translator	scala/xml/dtd/ContentModel.scala	/^  object Translator extends WordBerrySethi {$/;"	c
Traversable	scala/collection/Traversable.scala	/^object Traversable extends TraversableFactory[Traversable] { self =>$/;"	c
Traversable	scala/collection/Traversable.scala	/^trait Traversable[+A] extends TraversableLike[A, Traversable[A]]$/;"	t
Traversable	scala/collection/immutable/Traversable.scala	/^object Traversable extends TraversableFactory[Traversable] {$/;"	c
Traversable	scala/collection/immutable/Traversable.scala	/^trait Traversable[+A] extends scala.collection.Traversable[A] $/;"	t
Traversable	scala/collection/mutable/Traversable.scala	/^object Traversable extends TraversableFactory[Traversable] {$/;"	c
Traversable	scala/collection/mutable/Traversable.scala	/^trait Traversable[A] extends scala.collection.Traversable[A] $/;"	t
Traversable	scala/package.scala	/^  type Traversable[+A] = scala.collection.Traversable[A]$/;"	T
Traversable	scala/package.scala	/^  val Traversable = scala.collection.Traversable$/;"	l
TraversableFactory	scala/collection/generic/TraversableFactory.scala	/^trait TraversableFactory[CC[X] <: Traversable[X] with GenericTraversableTemplate[X, CC]]$/;"	t
TraversableForwarder	scala/collection/generic/TraversableForwarder.scala	/^trait TraversableForwarder[+A] extends Traversable[A] {$/;"	t
TraversableLike	scala/collection/TraversableLike.scala	/^trait TraversableLike[+A, +Repr] extends HasNewBuilder[A, Repr] $/;"	t
TraversableMethods	scala/collection/interfaces/TraversableMethods.scala	/^trait TraversableMethods[+A, +This <: TraversableLike[A, This]] extends TraversableOnceMethods[A] {$/;"	t
TraversableOnce	scala/collection/TraversableOnce.scala	/^object TraversableOnce {$/;"	c
TraversableOnce	scala/collection/TraversableOnce.scala	/^trait TraversableOnce[+A] extends GenTraversableOnce[A] {$/;"	t
TraversableOnce	scala/package.scala	/^  type TraversableOnce[+A] = scala.collection.TraversableOnce[A]$/;"	T
TraversableOnceMethods	scala/collection/interfaces/TraversableOnceMethods.scala	/^trait TraversableOnceMethods[+A] {$/;"	t
TraversableOps	scala/collection/parallel/package.scala	/^  trait TraversableOps[T] {$/;"	t
TraversableProxy	scala/collection/TraversableProxy.scala	/^trait TraversableProxy[+A] extends Traversable[A] with TraversableProxyLike[A, Traversable[A]]$/;"	t
TraversableProxyLike	scala/collection/TraversableProxyLike.scala	/^trait TraversableProxyLike[+A, +Repr <: TraversableLike[A, Repr] with Traversable[A]] extends TraversableLike[A, Repr] with Proxy {$/;"	t
TraversableView	scala/collection/TraversableView.scala	/^object TraversableView {$/;"	c
TraversableView	scala/collection/TraversableView.scala	/^trait TraversableView[+A, +Coll] extends TraversableViewLike[A, Coll, TraversableView[A, Coll]] with GenTraversableView[A, Coll] { }$/;"	t
TraversableViewLike	scala/collection/TraversableViewLike.scala	/^trait TraversableViewLike[+A, $/;"	t
Traverser	scala/reflect/generic/Trees.scala	/^  class Traverser {$/;"	c
Tree	scala/collection/immutable/RedBlack.scala	/^  abstract class Tree[+B] extends Serializable {$/;"	c
Tree	scala/reflect/Tree.scala	/^abstract class Tree$/;"	c
Tree	scala/reflect/generic/Trees.scala	/^  abstract class Tree extends Product {$/;"	c
TreeMap	scala/collection/immutable/TreeMap.scala	/^class TreeMap[A, +B](override val size: Int, t: RedBlack[A]#Tree[B])(implicit val ordering: Ordering[A])$/;"	c
TreeMap	scala/collection/immutable/TreeMap.scala	/^object TreeMap extends ImmutableSortedMapFactory[TreeMap] {$/;"	c
TreeRHS	scala/util/grammar/TreeRHS.scala	/^abstract class TreeRHS$/;"	c
TreeSet	scala/collection/immutable/TreeSet.scala	/^class TreeSet[A](override val size: Int, t: RedBlack[A]#Tree[Unit])$/;"	c
TreeSet	scala/collection/immutable/TreeSet.scala	/^object TreeSet extends ImmutableSortedSetFactory[TreeSet] {$/;"	c
Triple	scala/Predef.scala	/^  object Triple {$/;"	c
Triple	scala/Predef.scala	/^  type Triple[+A, +B, +C] = Tuple3[A, B, C]$/;"	T
Try	scala/reflect/generic/Trees.scala	/^  case class Try(block: Tree, catches: List[CaseDef], finalizer: Tree)$/;"	c
Try	scala/runtime/ScalaRunTime.scala	/^  abstract class Try[+A] {$/;"	c
Try	scala/runtime/ScalaRunTime.scala	/^  def Try[A](block: => A): Try[A] = new Try[A] with Runnable {$/;"	m
Try	scala/util/control/Exception.scala	/^  class Try[+T] private[Exception](body: => T, val catcher: Catch[T]) {    $/;"	c
TryBlock	scala/util/control/Breaks.scala	/^  trait TryBlock {$/;"	t
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6, x7: A7, x8: A8, x9: A9, x10: A10, x11: A11, x12: A12, x13: A13, x14: A14, x15: A15, x16: A16, x17: A17, x18: A18, x19: A19, x20: A20, x21: A21, x22: A22) = Tuple22(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6, x7: A7, x8: A8, x9: A9, x10: A10, x11: A11, x12: A12, x13: A13, x14: A14, x15: A15, x16: A16, x17: A17, x18: A18, x19: A19, x20: A20, x21: A21) = Tuple21(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6, x7: A7, x8: A8, x9: A9, x10: A10, x11: A11, x12: A12, x13: A13, x14: A14, x15: A15, x16: A16, x17: A17, x18: A18, x19: A19, x20: A20) = Tuple20(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6, x7: A7, x8: A8, x9: A9, x10: A10, x11: A11, x12: A12, x13: A13, x14: A14, x15: A15, x16: A16, x17: A17, x18: A18, x19: A19) = Tuple19(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6, x7: A7, x8: A8, x9: A9, x10: A10, x11: A11, x12: A12, x13: A13, x14: A14, x15: A15, x16: A16, x17: A17, x18: A18) = Tuple18(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6, x7: A7, x8: A8, x9: A9, x10: A10, x11: A11, x12: A12, x13: A13, x14: A14, x15: A15, x16: A16, x17: A17) = Tuple17(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6, x7: A7, x8: A8, x9: A9, x10: A10, x11: A11, x12: A12, x13: A13, x14: A14, x15: A15, x16: A16) = Tuple16(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6, x7: A7, x8: A8, x9: A9, x10: A10, x11: A11, x12: A12, x13: A13, x14: A14, x15: A15) = Tuple15(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6, x7: A7, x8: A8, x9: A9, x10: A10, x11: A11, x12: A12, x13: A13, x14: A14) = Tuple14(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6, x7: A7, x8: A8, x9: A9, x10: A10, x11: A11, x12: A12, x13: A13) = Tuple13(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6, x7: A7, x8: A8, x9: A9, x10: A10, x11: A11, x12: A12) = Tuple12(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6, x7: A7, x8: A8, x9: A9, x10: A10, x11: A11) = Tuple11(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6, x7: A7, x8: A8, x9: A9, x10: A10) = Tuple10(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6, A7, A8, A9](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6, x7: A7, x8: A8, x9: A9) = Tuple9(x1, x2, x3, x4, x5, x6, x7, x8, x9)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6, A7, A8](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6, x7: A7, x8: A8) = Tuple8(x1, x2, x3, x4, x5, x6, x7, x8)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6, A7](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6, x7: A7) = Tuple7(x1, x2, x3, x4, x5, x6, x7)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5, A6](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5, x6: A6) = Tuple6(x1, x2, x3, x4, x5, x6)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4, A5](x1: A1, x2: A2, x3: A3, x4: A4, x5: A5) = Tuple5(x1, x2, x3, x4, x5)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3, A4](x1: A1, x2: A2, x3: A3, x4: A4) = Tuple4(x1, x2, x3, x4)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2, A3](x1: A1, x2: A2, x3: A3) = Tuple3(x1, x2, x3)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1, A2](x1: A1, x2: A2) = Tuple2(x1, x2)$/;"	m
Tuple	scala/package.scala	/^  def Tuple[A1](x1: A1) = Tuple1(x1)$/;"	m
Tuple1	scala/Tuple1.scala	/^case class Tuple1[@specialized(Int, Long, Double) +T1](_1: T1)$/;"	c
Tuple10	scala/Tuple10.scala	/^case class Tuple10[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10)$/;"	c
Tuple11	scala/Tuple11.scala	/^case class Tuple11[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11)$/;"	c
Tuple12	scala/Tuple12.scala	/^case class Tuple12[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12)$/;"	c
Tuple13	scala/Tuple13.scala	/^case class Tuple13[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13)$/;"	c
Tuple14	scala/Tuple14.scala	/^case class Tuple14[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14)$/;"	c
Tuple15	scala/Tuple15.scala	/^case class Tuple15[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15)$/;"	c
Tuple16	scala/Tuple16.scala	/^case class Tuple16[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16)$/;"	c
Tuple17	scala/Tuple17.scala	/^case class Tuple17[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17)$/;"	c
Tuple18	scala/Tuple18.scala	/^case class Tuple18[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18)$/;"	c
Tuple19	scala/Tuple19.scala	/^case class Tuple19[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19)$/;"	c
Tuple2	scala/Tuple2.scala	/^case class Tuple2[@specialized(Int, Long, Double) +T1, @specialized(Int, Long, Double) +T2](_1: T1, _2: T2)$/;"	c
Tuple2	scala/math/Ordering.scala	/^  implicit def Tuple2[T1, T2](implicit ord1: Ordering[T1], ord2: Ordering[T2]): Ordering[(T1, T2)] = $/;"	m
Tuple20	scala/Tuple20.scala	/^case class Tuple20[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20)$/;"	c
Tuple21	scala/Tuple21.scala	/^case class Tuple21[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21)$/;"	c
Tuple22	scala/Tuple22.scala	/^case class Tuple22[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22)$/;"	c
Tuple3	scala/Tuple3.scala	/^case class Tuple3[+T1, +T2, +T3](_1: T1, _2: T2, _3: T3)$/;"	c
Tuple3	scala/math/Ordering.scala	/^  implicit def Tuple3[T1, T2, T3](implicit ord1: Ordering[T1], ord2: Ordering[T2], ord3: Ordering[T3]) : Ordering[(T1, T2, T3)] = $/;"	m
Tuple4	scala/Tuple4.scala	/^case class Tuple4[+T1, +T2, +T3, +T4](_1: T1, _2: T2, _3: T3, _4: T4)$/;"	c
Tuple4	scala/math/Ordering.scala	/^  implicit def Tuple4[T1, T2, T3, T4](implicit ord1: Ordering[T1], ord2: Ordering[T2], ord3: Ordering[T3], ord4: Ordering[T4]) : Ordering[(T1, T2, T3, T4)] = $/;"	m
Tuple5	scala/Tuple5.scala	/^case class Tuple5[+T1, +T2, +T3, +T4, +T5](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5)$/;"	c
Tuple5	scala/math/Ordering.scala	/^  implicit def Tuple5[T1, T2, T3, T4, T5](implicit ord1: Ordering[T1], ord2: Ordering[T2], ord3: Ordering[T3], ord4: Ordering[T4], ord5: Ordering[T5]): Ordering[(T1, T2, T3, T4, T5)] = $/;"	m
Tuple6	scala/Tuple6.scala	/^case class Tuple6[+T1, +T2, +T3, +T4, +T5, +T6](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6)$/;"	c
Tuple6	scala/math/Ordering.scala	/^  implicit def Tuple6[T1, T2, T3, T4, T5, T6](implicit ord1: Ordering[T1], ord2: Ordering[T2], ord3: Ordering[T3], ord4: Ordering[T4], ord5: Ordering[T5], ord6: Ordering[T6]): Ordering[(T1, T2, T3, T4, T5, T6)] = $/;"	m
Tuple7	scala/Tuple7.scala	/^case class Tuple7[+T1, +T2, +T3, +T4, +T5, +T6, +T7](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7)$/;"	c
Tuple7	scala/math/Ordering.scala	/^  implicit def Tuple7[T1, T2, T3, T4, T5, T6, T7](implicit ord1: Ordering[T1], ord2: Ordering[T2], ord3: Ordering[T3], ord4: Ordering[T4], ord5: Ordering[T5], ord6: Ordering[T6], ord7: Ordering[T7]): Ordering[(T1, T2, T3, T4, T5, T6, T7)] = $/;"	m
Tuple8	scala/Tuple8.scala	/^case class Tuple8[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8)$/;"	c
Tuple8	scala/math/Ordering.scala	/^  implicit def Tuple8[T1, T2, T3, T4, T5, T6, T7, T8](implicit ord1: Ordering[T1], ord2: Ordering[T2], ord3: Ordering[T3], ord4: Ordering[T4], ord5: Ordering[T5], ord6: Ordering[T6], ord7: Ordering[T7], ord8: Ordering[T8]): Ordering[(T1, T2, T3, T4, T5, T6, T7, T8)] = $/;"	m
Tuple9	scala/Tuple9.scala	/^case class Tuple9[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9)$/;"	c
Tuple9	scala/math/Ordering.scala	/^  implicit def Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9](implicit ord1: Ordering[T1], ord2: Ordering[T2], ord3: Ordering[T3], ord4: Ordering[T4], ord5: Ordering[T5], ord6: Ordering[T6], ord7: Ordering[T7], ord8 : Ordering[T8], ord9: Ordering[T9]): Ordering[(T1, T2, T3, T4, T5, T6, T7, T8, T9)] = $/;"	m
TypTree	scala/reflect/generic/Trees.scala	/^  trait TypTree extends Tree $/;"	t
Type	scala/reflect/Type.scala	/^abstract class Type$/;"	c
Type	scala/reflect/generic/Types.scala	/^  type Type >: Null <: AbsType$/;"	T
TypeApply	scala/reflect/Tree.scala	/^case class TypeApply(fun: Tree, args: List[Type]) extends Tree$/;"	c
TypeApply	scala/reflect/generic/Trees.scala	/^  case class TypeApply(fun: Tree, args: List[Tree])$/;"	c
TypeBounds	scala/reflect/Type.scala	/^case class TypeBounds(lo: Type, hi: Type) extends Type$/;"	c
TypeBounds	scala/reflect/generic/Types.scala	/^  type TypeBounds <: Type$/;"	T
TypeBounds	scala/reflect/generic/Types.scala	/^  val TypeBounds: TypeBoundsExtractor$/;"	l
TypeBoundsExtractor	scala/reflect/generic/Types.scala	/^  abstract class TypeBoundsExtractor {$/;"	c
TypeBoundsTree	scala/reflect/generic/Trees.scala	/^  case class TypeBoundsTree(lo: Tree, hi: Tree)$/;"	c
TypeConstraint	scala/annotation/TypeConstraint.scala	/^trait TypeConstraint extends Annotation$/;"	t
TypeConstraint	scala/package.scala	/^  type TypeConstraint = scala.annotation.TypeConstraint$/;"	T
TypeDef	scala/reflect/generic/Trees.scala	/^  case class TypeDef(mods: Modifiers, name: TypeName, tparams: List[TypeDef], rhs: Tree) $/;"	c
TypeField	scala/reflect/Symbol.scala	/^case class TypeField(override val fullname: String, tpe: Type) extends GlobalSymbol(fullname)$/;"	c
TypeName	scala/reflect/generic/Names.scala	/^  type TypeName <: Name$/;"	T
TypeRef	scala/reflect/generic/Types.scala	/^  type TypeRef <: Type$/;"	T
TypeRef	scala/reflect/generic/Types.scala	/^  val TypeRef: TypeRefExtractor$/;"	l
TypeRefExtractor	scala/reflect/generic/Types.scala	/^  abstract class TypeRefExtractor {$/;"	c
TypeSymbol	scala/xml/TypeSymbol.scala	/^abstract class TypeSymbol$/;"	c
TypeTree	scala/reflect/generic/Trees.scala	/^  type TypeTree <: AbsTypeTree$/;"	T
TypeTree	scala/reflect/generic/Trees.scala	/^  val TypeTree: TypeTreeExtractor$/;"	l
TypeTreeExtractor	scala/reflect/generic/Trees.scala	/^  abstract class TypeTreeExtractor {$/;"	c
Typed	scala/Proxy.scala	/^  trait Typed[T] extends Proxy {$/;"	t
Typed	scala/reflect/generic/Trees.scala	/^  case class Typed(expr: Tree, tpt: Tree)$/;"	c
UChan	scala/concurrent/pilib.scala	/^  class UChan {$/;"	c
UGP	scala/concurrent/pilib.scala	/^  case class UGP(n: UChan, polarity: Boolean, v: Any, c: Any => Any)$/;"	c
UNAPPLYtree	scala/reflect/generic/PickleFormat.scala	/^    final val UNAPPLYtree = 19$/;"	l
UNDERLINED	scala/Console.scala	/^  final val UNDERLINED = "\\033[4m"$/;"	l
UNIT	scala/runtime/BoxedUnit.java	/^    public final static BoxedUnit UNIT = new BoxedUnit();$/;"	f	class:BoxedUnit
UNI_REPLACEMENT_BYTES	scala/io/UTF8Codec.scala	/^  final val UNI_REPLACEMENT_BYTES = Array[Byte](-17, -65, -67)$/;"	l
UNI_REPLACEMENT_CHAR	scala/io/UTF8Codec.scala	/^  final val UNI_REPLACEMENT_CHAR: Int = 0x0000FFFD$/;"	l
UP	scala/math/BigDecimal.scala	/^    val UP, DOWN, CEILING, FLOOR, HALF_UP, HALF_DOWN, HALF_EVEN, UNNECESSARY = Value$/;"	l
URL	scala/sys/process/package.scala	/^      type URL             = java.net.URL$/;"	T
URLBuilder	scala/sys/process/ProcessBuilder.scala	/^  trait URLBuilder extends Source {$/;"	t
UTF8	scala/io/Codec.scala	/^  final val UTF8    = Charset forName "UTF-8"$/;"	l
UTF8Codec	scala/io/UTF8Codec.scala	/^object UTF8Codec$/;"	c
UnApply	scala/reflect/generic/Trees.scala	/^  case class UnApply(fun: Tree, args: List[Tree]) $/;"	c
UnPickler	scala/reflect/generic/UnPickler.scala	/^abstract class UnPickler { $/;"	c
UnPicklerEnv	scala/io/BytePickle.scala	/^  class UnPicklerEnv extends HashMap[Int, Any] {$/;"	c
UnPicklerState	scala/io/BytePickle.scala	/^  class UnPicklerState(val stream: Array[Byte], val dict: UnPicklerEnv)$/;"	c
UnavailableResourceException	scala/xml/include/UnavailableResourceException.scala	/^class UnavailableResourceException(message: String) $/;"	c
UnboundElement	scala/util/parsing/ast/Binders.scala	/^  class UnboundElement[N <: NameElement](private val el: N) extends NameElement {$/;"	c
UncaughtException	scala/actors/UncaughtException.scala	/^case class UncaughtException(actor: Actor,$/;"	c
UncaughtExceptionHandler	scala/actors/threadpool/helpers/ThreadHelpers.java	/^    public static interface UncaughtExceptionHandler {$/;"	i	class:ThreadHelpers
UnderBinder	scala/util/parsing/ast/Binders.scala	/^  class UnderBinder[binderType  <: NameElement, elementT <% Mappable[elementT]](val scope: Scope[binderType], private[Binders] val element: elementT) extends Element with BindingSensitive {$/;"	c
UnderBinder	scala/util/parsing/ast/Binders.scala	/^  object UnderBinder {$/;"	c
UnderBinderIsMappable	scala/util/parsing/ast/Binders.scala	/^  implicit def UnderBinderIsMappable[bt <: NameElement <% Mappable[bt], st <% Mappable[st]](ub: UnderBinder[bt, st]): Mappable[UnderBinder[bt, st]] = $/;"	m
UndeterminedEnd	scala/collection/immutable/PagedSeq.scala	/^  final val UndeterminedEnd = Int.MaxValue$/;"	l
Undoable	scala/collection/mutable/Undoable.scala	/^trait Undoable {$/;"	t
UninitializedError	scala/UninitializedError.scala	/^final class UninitializedError extends RuntimeException("uninitialized value")$/;"	c
UninitializedFieldError	scala/UninitializedFieldError.scala	/^final case class UninitializedFieldError(msg: String) $/;"	c
Unit	scala/Unit.scala	/^final class Unit extends AnyVal {$/;"	c
Unit	scala/Unit.scala	/^object Unit extends AnyValCompanion {$/;"	c
Unit	scala/math/Ordering.scala	/^  implicit object Unit extends UnitOrdering$/;"	c
Unit	scala/reflect/ClassManifest.scala	/^  val Unit    = Manifest.Unit$/;"	l
Unit	scala/reflect/Manifest.scala	/^  val Unit: AnyValManifest[Unit] = new AnyValManifest[scala.Unit] {$/;"	l
UnitClass	scala/reflect/generic/StandardDefinitions.scala	/^    def UnitClass   : Symbol$/;"	m
UnitOrdering	scala/math/Ordering.scala	/^  trait UnitOrdering extends Ordering[Unit] {$/;"	t
UnitTag	scala/reflect/generic/Constants.scala	/^  final val UnitTag    = 1$/;"	l
Universe	scala/reflect/generic/Universe.scala	/^abstract class Universe extends Symbols$/;"	c
UnlinkFromFun	scala/actors/remote/Proxy.scala	/^class UnlinkFromFun extends Function2[AbstractActor, Proxy, Unit] with Serializable {$/;"	c
Unparsed	scala/xml/Unparsed.scala	/^class Unparsed(data: String) extends Atom[String](data)$/;"	c
Unparsed	scala/xml/Unparsed.scala	/^object Unparsed {$/;"	c
UnparsedEntityDecl	scala/xml/dtd/Decl.scala	/^case class UnparsedEntityDecl( name:String, extID:ExternalID, notation:String ) extends EntityDecl {$/;"	c
UnprefixedAttribute	scala/xml/UnprefixedAttribute.scala	/^class UnprefixedAttribute($/;"	c
UnprefixedAttribute	scala/xml/UnprefixedAttribute.scala	/^object UnprefixedAttribute {$/;"	c
Unrolled	scala/collection/mutable/UnrolledBuffer.scala	/^  class Unrolled[T: ClassManifest] private[collection] (var size: Int, var array: Array[T], var next: Unrolled[T], val buff: UnrolledBuffer[T] = null) {$/;"	c
UnrolledBuffer	scala/collection/mutable/UnrolledBuffer.scala	/^class UnrolledBuffer[T](implicit val manifest: ClassManifest[T])$/;"	c
UnrolledBuffer	scala/collection/mutable/UnrolledBuffer.scala	/^object UnrolledBuffer extends ClassManifestTraversableFactory[UnrolledBuffer] {$/;"	c
UnrolledParArrayCombiner	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^object UnrolledParArrayCombiner {$/;"	c
UnrolledParArrayCombiner	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^trait UnrolledParArrayCombiner[T]$/;"	t
UnsupportedOperationException	scala/package.scala	/^  type UnsupportedOperationException   = java.lang.UnsupportedOperationException$/;"	T
Update	scala/collection/script/Message.scala	/^case class Update[+A](location: Location, elem: A) extends Message[A] {$/;"	c
UserNameElementIsMappable	scala/util/parsing/ast/Binders.scala	/^  def UserNameElementIsMappable[t <: NameElement](self: t): Mappable[t]  $/;"	m
Utility	scala/xml/Utility.scala	/^object Utility extends AnyRef with parsing.TokenTests $/;"	c
Utils	scala/actors/threadpool/helpers/Utils.java	/^    private Utils() {}$/;"	m	class:Utils	file:
Utils	scala/actors/threadpool/helpers/Utils.java	/^public final class Utils {$/;"	c
VALDEFtree	scala/reflect/generic/PickleFormat.scala	/^    final val VALDEFtree = 5$/;"	l
VALsym	scala/reflect/generic/PickleFormat.scala	/^  final val VALsym = 8$/;"	l
VARARGS	scala/reflect/generic/Flags.scala	/^  final val VARARGS       = 0x80000000000L\/\/ symbol is a Java-style varargs method$/;"	l
VBRIDGE	scala/reflect/generic/Flags.scala	/^  final val VBRIDGE       = 0x40000000000L\/\/ symbol is a varargs bridge$/;"	l
Val	scala/Enumeration.scala	/^  protected class Val(i: Int, name: String) extends Value with Serializable {$/;"	c
ValDef	scala/reflect/Tree.scala	/^case class ValDef(sym: Symbol, rhs: Tree) extends Tree$/;"	c
ValDef	scala/reflect/generic/Trees.scala	/^  case class ValDef(mods: Modifiers, name: TermName, tpt: Tree, rhs: Tree) extends ValOrDefDef$/;"	c
ValOrDefDef	scala/reflect/generic/Trees.scala	/^  abstract class ValOrDefDef extends MemberDef {$/;"	c
ValidatingMarkupHandler	scala/xml/parsing/ValidatingMarkupHandler.scala	/^abstract class ValidatingMarkupHandler extends MarkupHandler with Logged {$/;"	c
ValidationException	scala/xml/dtd/ValidationException.scala	/^case class ValidationException(e: String) extends Exception(e)$/;"	c
Value	scala/Enumeration.scala	/^  abstract class Value extends Ordered[Value] with Serializable {$/;"	c
ValueFormatter	scala/util/parsing/json/Parser.scala	/^  type ValueFormatter = Any => String$/;"	T
ValueSet	scala/Enumeration.scala	/^  class ValueSet private[Enumeration] (val ids: immutable.SortedSet[Int]) extends Set[Value] with SetLike[Value, ValueSet] {$/;"	c
ValueSet	scala/Enumeration.scala	/^  object ValueSet {$/;"	c
Vector	scala/collection/immutable/Vector.scala	/^final class Vector[+A](private[collection] val startIndex: Int, private[collection] val endIndex: Int, focus: Int)$/;"	c
Vector	scala/collection/immutable/Vector.scala	/^object Vector extends SeqFactory[Vector] {$/;"	c
Vector	scala/package.scala	/^  type Vector[+A] = scala.collection.immutable.Vector[A]$/;"	T
Vector	scala/package.scala	/^  val Vector = scala.collection.immutable.Vector$/;"	l
VectorBuilder	scala/collection/immutable/Vector.scala	/^final class VectorBuilder[A]() extends Builder[A,Vector[A]] with VectorPointer[A @uncheckedVariance] {$/;"	c
VectorIterator	scala/collection/immutable/Vector.scala	/^class VectorIterator[+A](_startIndex: Int, _endIndex: Int) extends Iterator[A] with VectorPointer[A @uncheckedVariance] {$/;"	c
VersionString	scala/reflect/generic/PickleFormat.scala	/^  def VersionString = "V" + MajorVersion + "." + MinorVersion$/;"	m
ViewMkString	scala/collection/TraversableViewLike.scala	/^trait ViewMkString[+A] {$/;"	t
VolatileAbort	scala/collection/generic/Signalling.scala	/^trait VolatileAbort extends Signalling {$/;"	t
VolatileBooleanRef	scala/runtime/VolatileBooleanRef.java	/^    public VolatileBooleanRef(boolean elem) { this.elem = elem; }$/;"	m	class:VolatileBooleanRef
VolatileBooleanRef	scala/runtime/VolatileBooleanRef.java	/^public class VolatileBooleanRef implements java.io.Serializable {$/;"	c
VolatileByteRef	scala/runtime/VolatileByteRef.java	/^    public VolatileByteRef(byte elem) { this.elem = elem; }$/;"	m	class:VolatileByteRef
VolatileByteRef	scala/runtime/VolatileByteRef.java	/^public class VolatileByteRef implements java.io.Serializable {$/;"	c
VolatileCharRef	scala/runtime/VolatileCharRef.java	/^    public VolatileCharRef(char elem) { this.elem = elem; }$/;"	m	class:VolatileCharRef
VolatileCharRef	scala/runtime/VolatileCharRef.java	/^public class VolatileCharRef implements java.io.Serializable {$/;"	c
VolatileDoubleRef	scala/runtime/VolatileDoubleRef.java	/^    public VolatileDoubleRef(double elem) { this.elem = elem; }$/;"	m	class:VolatileDoubleRef
VolatileDoubleRef	scala/runtime/VolatileDoubleRef.java	/^public class VolatileDoubleRef implements java.io.Serializable {$/;"	c
VolatileFloatRef	scala/runtime/VolatileFloatRef.java	/^    public VolatileFloatRef(float elem) { this.elem = elem; }$/;"	m	class:VolatileFloatRef
VolatileFloatRef	scala/runtime/VolatileFloatRef.java	/^public class VolatileFloatRef implements java.io.Serializable {$/;"	c
VolatileIntRef	scala/runtime/VolatileIntRef.java	/^    public VolatileIntRef(int elem) { this.elem = elem; }$/;"	m	class:VolatileIntRef
VolatileIntRef	scala/runtime/VolatileIntRef.java	/^public class VolatileIntRef implements java.io.Serializable {$/;"	c
VolatileLongRef	scala/runtime/VolatileLongRef.java	/^    public VolatileLongRef(long elem) { this.elem = elem; }$/;"	m	class:VolatileLongRef
VolatileLongRef	scala/runtime/VolatileLongRef.java	/^public class VolatileLongRef implements java.io.Serializable {$/;"	c
VolatileObjectRef	scala/runtime/VolatileObjectRef.java	/^    public VolatileObjectRef(Object elem) { this.elem = elem; }$/;"	m	class:VolatileObjectRef
VolatileObjectRef	scala/runtime/VolatileObjectRef.java	/^public class VolatileObjectRef implements java.io.Serializable {$/;"	c
VolatileShortRef	scala/runtime/VolatileShortRef.java	/^    public VolatileShortRef(short elem) { this.elem = elem; }$/;"	m	class:VolatileShortRef
VolatileShortRef	scala/runtime/VolatileShortRef.java	/^public class VolatileShortRef implements java.io.Serializable {$/;"	c
WARNING	scala/annotation/elidable.scala	/^  final val WARNING = 900           \/\/ Level.WARNING.intValue()$/;"	l
WHITE	scala/Console.scala	/^  final val WHITE      = "\\033[37m"$/;"	l
WHITE_B	scala/Console.scala	/^  final val WHITE_B    = "\\033[47m"$/;"	l
WRITER	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        private static final int WRITER = 2;$/;"	f	class:ReentrantReadWriteLock.Sync	file:
WaitNode	scala/actors/threadpool/helpers/WaitQueue.java	/^        public WaitNode() {$/;"	m	class:WaitQueue.WaitNode
WaitNode	scala/actors/threadpool/helpers/WaitQueue.java	/^    public static class WaitNode {$/;"	c	class:WaitQueue
WaitQueue	scala/actors/threadpool/SynchronousQueue.java	/^    static abstract class WaitQueue implements java.io.Serializable {$/;"	c	class:SynchronousQueue
WaitQueue	scala/actors/threadpool/helpers/WaitQueue.java	/^public abstract class WaitQueue {$/;"	c
WeakHashMap	scala/collection/mutable/WeakHashMap.scala	/^class WeakHashMap[A, B] extends JMapWrapper[A, B](new java.util.WeakHashMap)$/;"	c
WeakHashMap	scala/collection/mutable/WeakHashMap.scala	/^object WeakHashMap extends MutableMapFactory[WeakHashMap] {$/;"	c
WeakReference	scala/ref/WeakReference.scala	/^class WeakReference[+T <: AnyRef](value: T, queue: ReferenceQueue[T]) extends ReferenceWrapper[T] {$/;"	c
WeakReferenceWithWrapper	scala/ref/WeakReference.scala	/^private class WeakReferenceWithWrapper[T <: AnyRef](value: T, queue: ReferenceQueue[T], val wrapper: WeakReference[T])$/;"	c
Wildcard	scala/util/regexp/WordExp.scala	/^  case class Wildcard() extends RegExp {$/;"	c
WithDefault	scala/collection/Map.scala	/^  abstract class WithDefault[A, +B](underlying: Map[A, B], d: A => B) extends Map[A, B] {$/;"	c
WithDefault	scala/collection/immutable/Map.scala	/^  class WithDefault[A, +B](underlying: Map[A, B], d: A => B) extends collection.Map.WithDefault[A, B](underlying, d) with Map[A, B] {$/;"	c
WithDefault	scala/collection/mutable/Map.scala	/^  class WithDefault[A, B](underlying: Map[A, B], d: A => B) extends collection.Map.WithDefault(underlying, d) with Map[A, B] {$/;"	c
WithFilter	scala/Option.scala	/^  class WithFilter(p: A => Boolean) {$/;"	c
WithFilter	scala/collection/TraversableLike.scala	/^  class WithFilter(p: A => Boolean) extends FilterMonadic[A, Repr] {$/;"	c
WithLookAhead	scala/xml/parsing/MarkupParser.scala	/^  private class WithLookAhead(underlying: Source) extends Source {$/;"	c
WordBerrySethi	scala/util/automata/WordBerrySethi.scala	/^abstract class WordBerrySethi extends BaseBerrySethi {$/;"	c
WordExp	scala/util/regexp/WordExp.scala	/^abstract class WordExp extends Base {$/;"	c
Worker	scala/actors/threadpool/ThreadPoolExecutor.java	/^        Worker(Runnable firstTask) {$/;"	m	class:ThreadPoolExecutor.Worker
Worker	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public final class Worker extends ReentrantLock implements Runnable {$/;"	c	class:ThreadPoolExecutor
WorkerThread	scala/actors/package.scala	/^  type WorkerThread = java.lang.Thread$/;"	T
WorkerThreadScheduler	scala/actors/package.scala	/^  type WorkerThreadScheduler = scala.actors.scheduler.ForkJoinScheduler$/;"	T
WrappedArray	scala/collection/mutable/WrappedArray.scala	/^abstract class WrappedArray[T]$/;"	c
WrappedArray	scala/collection/mutable/WrappedArray.scala	/^object WrappedArray {$/;"	c
WrappedArrayBuilder	scala/collection/mutable/WrappedArrayBuilder.scala	/^class WrappedArrayBuilder[A](manifest: ClassManifest[A]) extends Builder[A, WrappedArray[A]] {$/;"	c
WrappedString	scala/collection/immutable/WrappedString.scala	/^class WrappedString(val self: String) extends IndexedSeq[Char] with StringLike[WrappedString] {$/;"	c
WrappedString	scala/collection/immutable/WrappedString.scala	/^object WrappedString {$/;"	c
WriteLock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        protected WriteLock(ReentrantReadWriteLock lock) {$/;"	m	class:ReentrantReadWriteLock.WriteLock
WriteLock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    public static class WriteLock implements Lock, CondVar.ExclusiveLock,$/;"	c	class:ReentrantReadWriteLock
XINCLUDE_NAMESPACE	scala/xml/include/sax/XIncludeFilter.scala	/^  final val  XINCLUDE_NAMESPACE = "http:\/\/www.w3.org\/2001\/XInclude";$/;"	l
XIncludeException	scala/xml/include/XIncludeException.scala	/^class XIncludeException(message: String) extends Exception(message) {$/;"	c
XIncludeFilter	scala/xml/include/sax/XIncludeFilter.scala	/^class XIncludeFilter extends XMLFilterImpl {$/;"	c
XIncluder	scala/xml/include/sax/XIncluder.scala	/^class XIncluder(outs: OutputStream, encoding: String) extends ContentHandler with LexicalHandler {$/;"	c
XML	scala/xml/XML.scala	/^object XML extends XMLLoader[Elem]$/;"	c
XMLEvent	scala/xml/pull/XMLEvent.scala	/^trait XMLEvent$/;"	t
XMLEventReader	scala/xml/pull/XMLEventReader.scala	/^class XMLEventReader(src: Source) extends ProducerConsumerIterator[XMLEvent] {$/;"	c
XMLLoader	scala/xml/factory/XMLLoader.scala	/^trait XMLLoader[T <: Node]$/;"	t
XercesClassName	scala/xml/package.scala	/^  val XercesClassName = "org.apache.xerces.parsers.SAXParser"$/;"	l
Xhtml	scala/xml/Xhtml.scala	/^object Xhtml$/;"	c
XhtmlEntities	scala/xml/parsing/XhtmlEntities.scala	/^object XhtmlEntities {$/;"	c
XhtmlParser	scala/xml/parsing/XhtmlParser.scala	/^class XhtmlParser(val input: Source) extends ConstructingHandler with MarkupParser with ExternalSources  {$/;"	c
XhtmlParser	scala/xml/parsing/XhtmlParser.scala	/^object XhtmlParser {$/;"	c
YELLOW	scala/Console.scala	/^  final val YELLOW     = "\\033[33m"$/;"	l
YELLOW_B	scala/Console.scala	/^  final val YELLOW_B   = "\\033[43m"$/;"	l
Zipped	scala/Tuple2.scala	/^  class Zipped[+Repr1, +El1, +Repr2, +El2](coll1: TLike[El1, Repr1], coll2: ILike[El2, Repr2]) { \/\/ coll2: ILike for filter$/;"	c
Zipped	scala/Tuple3.scala	/^  class Zipped[+Repr1, +El1, +Repr2, +El2, +Repr3, +El3](coll1: TLike[El1, Repr1],$/;"	c
Zipped	scala/collection/GenIterableViewLike.scala	/^  trait Zipped[B] extends Transformed[(A, B)] {$/;"	t
Zipped	scala/collection/GenSeqViewLike.scala	/^  trait Zipped[B] extends super.Zipped[B] with Transformed[(A, B)] {$/;"	t
Zipped	scala/collection/IterableViewLike.scala	/^  trait Zipped[B] extends Transformed[(A, B)] with super[GenIterableViewLike].Zipped[B]$/;"	t
Zipped	scala/collection/SeqViewLike.scala	/^  trait Zipped[B] extends super[IterableViewLike].Zipped[B] with super[GenSeqViewLike].Zipped[B] with Transformed[(A, B)]$/;"	t
Zipped	scala/collection/immutable/StreamViewLike.scala	/^  trait Zipped[B] extends super.Zipped[B] with Transformed[(A, B)]$/;"	t
Zipped	scala/collection/parallel/ParIterableViewLike.scala	/^  trait Zipped[S] extends super.Zipped[S] with Transformed[(T, S)] {$/;"	t
Zipped	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Zipped[S] extends super[GenSeqViewLike].Zipped[S] with super[ParIterableViewLike].Zipped[S] with Transformed[(T, S)] {$/;"	t
Zipped	scala/collection/parallel/RemainsIterator.scala	/^  class Zipped[S](protected val that: SeqSplitter[S]) extends IterableSplitter[(T, S)] {$/;"	c
Zipped	scala/collection/parallel/RemainsIterator.scala	/^  class Zipped[S](ti: SeqSplitter[S]) extends super.Zipped[S](ti) with SeqSplitter[(T, S)] {$/;"	c
ZippedAll	scala/collection/GenIterableViewLike.scala	/^  trait ZippedAll[A1 >: A, B] extends Transformed[(A1, B)] {$/;"	t
ZippedAll	scala/collection/GenSeqViewLike.scala	/^  trait ZippedAll[A1 >: A, B] extends super.ZippedAll[A1, B] with Transformed[(A1, B)] {$/;"	t
ZippedAll	scala/collection/IterableViewLike.scala	/^  trait ZippedAll[A1 >: A, B] extends Transformed[(A1, B)] with super[GenIterableViewLike].ZippedAll[A1, B]$/;"	t
ZippedAll	scala/collection/SeqViewLike.scala	/^  trait ZippedAll[A1 >: A, B] extends super[IterableViewLike].ZippedAll[A1, B] with super[GenSeqViewLike].ZippedAll[A1, B] with Transformed[(A1, B)]$/;"	t
ZippedAll	scala/collection/immutable/StreamViewLike.scala	/^  trait ZippedAll[A1 >: A, B] extends super.ZippedAll[A1, B] with Transformed[(A1, B)]$/;"	t
ZippedAll	scala/collection/parallel/ParIterableViewLike.scala	/^  trait ZippedAll[U >: T, S] extends super.ZippedAll[U, S] with Transformed[(U, S)] {$/;"	t
ZippedAll	scala/collection/parallel/ParSeqViewLike.scala	/^  trait ZippedAll[U >: T, S] extends super[GenSeqViewLike].ZippedAll[U, S] with super[ParIterableViewLike].ZippedAll[U, S] with Transformed[(U, S)] {$/;"	t
ZippedAll	scala/collection/parallel/RemainsIterator.scala	/^  class ZippedAll[U >: T, S](protected val that: SeqSplitter[S], protected val thiselem: U, protected val thatelem: S)$/;"	c
ZippedAll	scala/collection/parallel/RemainsIterator.scala	/^  class ZippedAll[U >: T, S](ti: SeqSplitter[S], thise: U, thate: S) extends super.ZippedAll[U, S](ti, thise, thate) with SeqSplitter[(U, S)] {$/;"	c
_	scala/xml/parsing/MarkupParser.scala	/^      val _     = xEQ$/;"	l
_1	scala/Product1.scala	/^  def _1: T1$/;"	m
_1	scala/Product10.scala	/^  def _1: T1$/;"	m
_1	scala/Product11.scala	/^  def _1: T1$/;"	m
_1	scala/Product12.scala	/^  def _1: T1$/;"	m
_1	scala/Product13.scala	/^  def _1: T1$/;"	m
_1	scala/Product14.scala	/^  def _1: T1$/;"	m
_1	scala/Product15.scala	/^  def _1: T1$/;"	m
_1	scala/Product16.scala	/^  def _1: T1$/;"	m
_1	scala/Product17.scala	/^  def _1: T1$/;"	m
_1	scala/Product18.scala	/^  def _1: T1$/;"	m
_1	scala/Product19.scala	/^  def _1: T1$/;"	m
_1	scala/Product2.scala	/^  def _1: T1$/;"	m
_1	scala/Product20.scala	/^  def _1: T1$/;"	m
_1	scala/Product21.scala	/^  def _1: T1$/;"	m
_1	scala/Product22.scala	/^  def _1: T1$/;"	m
_1	scala/Product3.scala	/^  def _1: T1$/;"	m
_1	scala/Product4.scala	/^  def _1: T1$/;"	m
_1	scala/Product5.scala	/^  def _1: T1$/;"	m
_1	scala/Product6.scala	/^  def _1: T1$/;"	m
_1	scala/Product7.scala	/^  def _1: T1$/;"	m
_1	scala/Product8.scala	/^  def _1: T1$/;"	m
_1	scala/Product9.scala	/^  def _1: T1$/;"	m
_10	scala/Product10.scala	/^  def _10: T10$/;"	m
_10	scala/Product11.scala	/^  def _10: T10$/;"	m
_10	scala/Product12.scala	/^  def _10: T10$/;"	m
_10	scala/Product13.scala	/^  def _10: T10$/;"	m
_10	scala/Product14.scala	/^  def _10: T10$/;"	m
_10	scala/Product15.scala	/^  def _10: T10$/;"	m
_10	scala/Product16.scala	/^  def _10: T10$/;"	m
_10	scala/Product17.scala	/^  def _10: T10$/;"	m
_10	scala/Product18.scala	/^  def _10: T10$/;"	m
_10	scala/Product19.scala	/^  def _10: T10$/;"	m
_10	scala/Product20.scala	/^  def _10: T10$/;"	m
_10	scala/Product21.scala	/^  def _10: T10$/;"	m
_10	scala/Product22.scala	/^  def _10: T10$/;"	m
_11	scala/Product11.scala	/^  def _11: T11$/;"	m
_11	scala/Product12.scala	/^  def _11: T11$/;"	m
_11	scala/Product13.scala	/^  def _11: T11$/;"	m
_11	scala/Product14.scala	/^  def _11: T11$/;"	m
_11	scala/Product15.scala	/^  def _11: T11$/;"	m
_11	scala/Product16.scala	/^  def _11: T11$/;"	m
_11	scala/Product17.scala	/^  def _11: T11$/;"	m
_11	scala/Product18.scala	/^  def _11: T11$/;"	m
_11	scala/Product19.scala	/^  def _11: T11$/;"	m
_11	scala/Product20.scala	/^  def _11: T11$/;"	m
_11	scala/Product21.scala	/^  def _11: T11$/;"	m
_11	scala/Product22.scala	/^  def _11: T11$/;"	m
_12	scala/Product12.scala	/^  def _12: T12$/;"	m
_12	scala/Product13.scala	/^  def _12: T12$/;"	m
_12	scala/Product14.scala	/^  def _12: T12$/;"	m
_12	scala/Product15.scala	/^  def _12: T12$/;"	m
_12	scala/Product16.scala	/^  def _12: T12$/;"	m
_12	scala/Product17.scala	/^  def _12: T12$/;"	m
_12	scala/Product18.scala	/^  def _12: T12$/;"	m
_12	scala/Product19.scala	/^  def _12: T12$/;"	m
_12	scala/Product20.scala	/^  def _12: T12$/;"	m
_12	scala/Product21.scala	/^  def _12: T12$/;"	m
_12	scala/Product22.scala	/^  def _12: T12$/;"	m
_13	scala/Product13.scala	/^  def _13: T13$/;"	m
_13	scala/Product14.scala	/^  def _13: T13$/;"	m
_13	scala/Product15.scala	/^  def _13: T13$/;"	m
_13	scala/Product16.scala	/^  def _13: T13$/;"	m
_13	scala/Product17.scala	/^  def _13: T13$/;"	m
_13	scala/Product18.scala	/^  def _13: T13$/;"	m
_13	scala/Product19.scala	/^  def _13: T13$/;"	m
_13	scala/Product20.scala	/^  def _13: T13$/;"	m
_13	scala/Product21.scala	/^  def _13: T13$/;"	m
_13	scala/Product22.scala	/^  def _13: T13$/;"	m
_14	scala/Product14.scala	/^  def _14: T14$/;"	m
_14	scala/Product15.scala	/^  def _14: T14$/;"	m
_14	scala/Product16.scala	/^  def _14: T14$/;"	m
_14	scala/Product17.scala	/^  def _14: T14$/;"	m
_14	scala/Product18.scala	/^  def _14: T14$/;"	m
_14	scala/Product19.scala	/^  def _14: T14$/;"	m
_14	scala/Product20.scala	/^  def _14: T14$/;"	m
_14	scala/Product21.scala	/^  def _14: T14$/;"	m
_14	scala/Product22.scala	/^  def _14: T14$/;"	m
_15	scala/Product15.scala	/^  def _15: T15$/;"	m
_15	scala/Product16.scala	/^  def _15: T15$/;"	m
_15	scala/Product17.scala	/^  def _15: T15$/;"	m
_15	scala/Product18.scala	/^  def _15: T15$/;"	m
_15	scala/Product19.scala	/^  def _15: T15$/;"	m
_15	scala/Product20.scala	/^  def _15: T15$/;"	m
_15	scala/Product21.scala	/^  def _15: T15$/;"	m
_15	scala/Product22.scala	/^  def _15: T15$/;"	m
_16	scala/Product16.scala	/^  def _16: T16$/;"	m
_16	scala/Product17.scala	/^  def _16: T16$/;"	m
_16	scala/Product18.scala	/^  def _16: T16$/;"	m
_16	scala/Product19.scala	/^  def _16: T16$/;"	m
_16	scala/Product20.scala	/^  def _16: T16$/;"	m
_16	scala/Product21.scala	/^  def _16: T16$/;"	m
_16	scala/Product22.scala	/^  def _16: T16$/;"	m
_17	scala/Product17.scala	/^  def _17: T17$/;"	m
_17	scala/Product18.scala	/^  def _17: T17$/;"	m
_17	scala/Product19.scala	/^  def _17: T17$/;"	m
_17	scala/Product20.scala	/^  def _17: T17$/;"	m
_17	scala/Product21.scala	/^  def _17: T17$/;"	m
_17	scala/Product22.scala	/^  def _17: T17$/;"	m
_18	scala/Product18.scala	/^  def _18: T18$/;"	m
_18	scala/Product19.scala	/^  def _18: T18$/;"	m
_18	scala/Product20.scala	/^  def _18: T18$/;"	m
_18	scala/Product21.scala	/^  def _18: T18$/;"	m
_18	scala/Product22.scala	/^  def _18: T18$/;"	m
_19	scala/Product19.scala	/^  def _19: T19$/;"	m
_19	scala/Product20.scala	/^  def _19: T19$/;"	m
_19	scala/Product21.scala	/^  def _19: T19$/;"	m
_19	scala/Product22.scala	/^  def _19: T19$/;"	m
_2	scala/Product10.scala	/^  def _2: T2$/;"	m
_2	scala/Product11.scala	/^  def _2: T2$/;"	m
_2	scala/Product12.scala	/^  def _2: T2$/;"	m
_2	scala/Product13.scala	/^  def _2: T2$/;"	m
_2	scala/Product14.scala	/^  def _2: T2$/;"	m
_2	scala/Product15.scala	/^  def _2: T2$/;"	m
_2	scala/Product16.scala	/^  def _2: T2$/;"	m
_2	scala/Product17.scala	/^  def _2: T2$/;"	m
_2	scala/Product18.scala	/^  def _2: T2$/;"	m
_2	scala/Product19.scala	/^  def _2: T2$/;"	m
_2	scala/Product2.scala	/^  def _2: T2$/;"	m
_2	scala/Product20.scala	/^  def _2: T2$/;"	m
_2	scala/Product21.scala	/^  def _2: T2$/;"	m
_2	scala/Product22.scala	/^  def _2: T2$/;"	m
_2	scala/Product3.scala	/^  def _2: T2$/;"	m
_2	scala/Product4.scala	/^  def _2: T2$/;"	m
_2	scala/Product5.scala	/^  def _2: T2$/;"	m
_2	scala/Product6.scala	/^  def _2: T2$/;"	m
_2	scala/Product7.scala	/^  def _2: T2$/;"	m
_2	scala/Product8.scala	/^  def _2: T2$/;"	m
_2	scala/Product9.scala	/^  def _2: T2$/;"	m
_20	scala/Product20.scala	/^  def _20: T20$/;"	m
_20	scala/Product21.scala	/^  def _20: T20$/;"	m
_20	scala/Product22.scala	/^  def _20: T20$/;"	m
_21	scala/Product21.scala	/^  def _21: T21$/;"	m
_21	scala/Product22.scala	/^  def _21: T21$/;"	m
_22	scala/Product22.scala	/^  def _22: T22$/;"	m
_3	scala/Product10.scala	/^  def _3: T3$/;"	m
_3	scala/Product11.scala	/^  def _3: T3$/;"	m
_3	scala/Product12.scala	/^  def _3: T3$/;"	m
_3	scala/Product13.scala	/^  def _3: T3$/;"	m
_3	scala/Product14.scala	/^  def _3: T3$/;"	m
_3	scala/Product15.scala	/^  def _3: T3$/;"	m
_3	scala/Product16.scala	/^  def _3: T3$/;"	m
_3	scala/Product17.scala	/^  def _3: T3$/;"	m
_3	scala/Product18.scala	/^  def _3: T3$/;"	m
_3	scala/Product19.scala	/^  def _3: T3$/;"	m
_3	scala/Product20.scala	/^  def _3: T3$/;"	m
_3	scala/Product21.scala	/^  def _3: T3$/;"	m
_3	scala/Product22.scala	/^  def _3: T3$/;"	m
_3	scala/Product3.scala	/^  def _3: T3$/;"	m
_3	scala/Product4.scala	/^  def _3: T3$/;"	m
_3	scala/Product5.scala	/^  def _3: T3$/;"	m
_3	scala/Product6.scala	/^  def _3: T3$/;"	m
_3	scala/Product7.scala	/^  def _3: T3$/;"	m
_3	scala/Product8.scala	/^  def _3: T3$/;"	m
_3	scala/Product9.scala	/^  def _3: T3$/;"	m
_4	scala/Product10.scala	/^  def _4: T4$/;"	m
_4	scala/Product11.scala	/^  def _4: T4$/;"	m
_4	scala/Product12.scala	/^  def _4: T4$/;"	m
_4	scala/Product13.scala	/^  def _4: T4$/;"	m
_4	scala/Product14.scala	/^  def _4: T4$/;"	m
_4	scala/Product15.scala	/^  def _4: T4$/;"	m
_4	scala/Product16.scala	/^  def _4: T4$/;"	m
_4	scala/Product17.scala	/^  def _4: T4$/;"	m
_4	scala/Product18.scala	/^  def _4: T4$/;"	m
_4	scala/Product19.scala	/^  def _4: T4$/;"	m
_4	scala/Product20.scala	/^  def _4: T4$/;"	m
_4	scala/Product21.scala	/^  def _4: T4$/;"	m
_4	scala/Product22.scala	/^  def _4: T4$/;"	m
_4	scala/Product4.scala	/^  def _4: T4$/;"	m
_4	scala/Product5.scala	/^  def _4: T4$/;"	m
_4	scala/Product6.scala	/^  def _4: T4$/;"	m
_4	scala/Product7.scala	/^  def _4: T4$/;"	m
_4	scala/Product8.scala	/^  def _4: T4$/;"	m
_4	scala/Product9.scala	/^  def _4: T4$/;"	m
_5	scala/Product10.scala	/^  def _5: T5$/;"	m
_5	scala/Product11.scala	/^  def _5: T5$/;"	m
_5	scala/Product12.scala	/^  def _5: T5$/;"	m
_5	scala/Product13.scala	/^  def _5: T5$/;"	m
_5	scala/Product14.scala	/^  def _5: T5$/;"	m
_5	scala/Product15.scala	/^  def _5: T5$/;"	m
_5	scala/Product16.scala	/^  def _5: T5$/;"	m
_5	scala/Product17.scala	/^  def _5: T5$/;"	m
_5	scala/Product18.scala	/^  def _5: T5$/;"	m
_5	scala/Product19.scala	/^  def _5: T5$/;"	m
_5	scala/Product20.scala	/^  def _5: T5$/;"	m
_5	scala/Product21.scala	/^  def _5: T5$/;"	m
_5	scala/Product22.scala	/^  def _5: T5$/;"	m
_5	scala/Product5.scala	/^  def _5: T5$/;"	m
_5	scala/Product6.scala	/^  def _5: T5$/;"	m
_5	scala/Product7.scala	/^  def _5: T5$/;"	m
_5	scala/Product8.scala	/^  def _5: T5$/;"	m
_5	scala/Product9.scala	/^  def _5: T5$/;"	m
_6	scala/Product10.scala	/^  def _6: T6$/;"	m
_6	scala/Product11.scala	/^  def _6: T6$/;"	m
_6	scala/Product12.scala	/^  def _6: T6$/;"	m
_6	scala/Product13.scala	/^  def _6: T6$/;"	m
_6	scala/Product14.scala	/^  def _6: T6$/;"	m
_6	scala/Product15.scala	/^  def _6: T6$/;"	m
_6	scala/Product16.scala	/^  def _6: T6$/;"	m
_6	scala/Product17.scala	/^  def _6: T6$/;"	m
_6	scala/Product18.scala	/^  def _6: T6$/;"	m
_6	scala/Product19.scala	/^  def _6: T6$/;"	m
_6	scala/Product20.scala	/^  def _6: T6$/;"	m
_6	scala/Product21.scala	/^  def _6: T6$/;"	m
_6	scala/Product22.scala	/^  def _6: T6$/;"	m
_6	scala/Product6.scala	/^  def _6: T6$/;"	m
_6	scala/Product7.scala	/^  def _6: T6$/;"	m
_6	scala/Product8.scala	/^  def _6: T6$/;"	m
_6	scala/Product9.scala	/^  def _6: T6$/;"	m
_7	scala/Product10.scala	/^  def _7: T7$/;"	m
_7	scala/Product11.scala	/^  def _7: T7$/;"	m
_7	scala/Product12.scala	/^  def _7: T7$/;"	m
_7	scala/Product13.scala	/^  def _7: T7$/;"	m
_7	scala/Product14.scala	/^  def _7: T7$/;"	m
_7	scala/Product15.scala	/^  def _7: T7$/;"	m
_7	scala/Product16.scala	/^  def _7: T7$/;"	m
_7	scala/Product17.scala	/^  def _7: T7$/;"	m
_7	scala/Product18.scala	/^  def _7: T7$/;"	m
_7	scala/Product19.scala	/^  def _7: T7$/;"	m
_7	scala/Product20.scala	/^  def _7: T7$/;"	m
_7	scala/Product21.scala	/^  def _7: T7$/;"	m
_7	scala/Product22.scala	/^  def _7: T7$/;"	m
_7	scala/Product7.scala	/^  def _7: T7$/;"	m
_7	scala/Product8.scala	/^  def _7: T7$/;"	m
_7	scala/Product9.scala	/^  def _7: T7$/;"	m
_8	scala/Product10.scala	/^  def _8: T8$/;"	m
_8	scala/Product11.scala	/^  def _8: T8$/;"	m
_8	scala/Product12.scala	/^  def _8: T8$/;"	m
_8	scala/Product13.scala	/^  def _8: T8$/;"	m
_8	scala/Product14.scala	/^  def _8: T8$/;"	m
_8	scala/Product15.scala	/^  def _8: T8$/;"	m
_8	scala/Product16.scala	/^  def _8: T8$/;"	m
_8	scala/Product17.scala	/^  def _8: T8$/;"	m
_8	scala/Product18.scala	/^  def _8: T8$/;"	m
_8	scala/Product19.scala	/^  def _8: T8$/;"	m
_8	scala/Product20.scala	/^  def _8: T8$/;"	m
_8	scala/Product21.scala	/^  def _8: T8$/;"	m
_8	scala/Product22.scala	/^  def _8: T8$/;"	m
_8	scala/Product8.scala	/^  def _8: T8$/;"	m
_8	scala/Product9.scala	/^  def _8: T8$/;"	m
_9	scala/Product10.scala	/^  def _9: T9$/;"	m
_9	scala/Product11.scala	/^  def _9: T9$/;"	m
_9	scala/Product12.scala	/^  def _9: T9$/;"	m
_9	scala/Product13.scala	/^  def _9: T9$/;"	m
_9	scala/Product14.scala	/^  def _9: T9$/;"	m
_9	scala/Product15.scala	/^  def _9: T9$/;"	m
_9	scala/Product16.scala	/^  def _9: T9$/;"	m
_9	scala/Product17.scala	/^  def _9: T9$/;"	m
_9	scala/Product18.scala	/^  def _9: T9$/;"	m
_9	scala/Product19.scala	/^  def _9: T9$/;"	m
_9	scala/Product20.scala	/^  def _9: T9$/;"	m
_9	scala/Product21.scala	/^  def _9: T9$/;"	m
_9	scala/Product22.scala	/^  def _9: T9$/;"	m
_9	scala/Product9.scala	/^  def _9: T9$/;"	m
_Binder	scala/util/parsing/ast/Binders.scala	/^  private object _Binder {$/;"	c
_apply	scala/collection/immutable/package.scala	/^    final def _apply(idx: Int): Int = {$/;"	m
_decoder	scala/io/Codec.scala	/^    val _decoder = decoder$/;"	l
_drop	scala/collection/immutable/package.scala	/^    final def _drop(n: Int) = create(locationAfterN(n), end, step, inclusive)$/;"	m
_equals	scala/runtime/ScalaRunTime.scala	/^  def _equals(x: Product, y: Any): Boolean = y match {$/;"	m
_foreach	scala/collection/immutable/package.scala	/^    final def _foreach[U](f: Int => U) = if (_length > 0) {$/;"	m
_hashCode	scala/runtime/ScalaRunTime.scala	/^  def _hashCode(x: Product): Int = {$/;"	m
_labelT	scala/util/regexp/PointedHedgeExp.scala	/^  type _labelT$/;"	T
_labelT	scala/util/regexp/WordExp.scala	/^  type _labelT <: Label$/;"	T
_labelT	scala/xml/dtd/ContentModel.scala	/^  type _labelT = ElemName$/;"	T
_last	scala/collection/immutable/package.scala	/^    final def _last: Int = if (!inclusive) {$/;"	m
_length	scala/collection/immutable/package.scala	/^    final def _length: Int = if (!inclusive) {$/;"	m
_regexpT	scala/util/regexp/Base.scala	/^  type _regexpT <: RegExp$/;"	T
_regexpT	scala/util/regexp/PointedHedgeExp.scala	/^  type _regexpT <: RegExp$/;"	T
_regexpT	scala/util/regexp/WordExp.scala	/^  type _regexpT <: RegExp$/;"	T
_regexpT	scala/xml/dtd/ContentModel.scala	/^  type _regexpT = RegExp$/;"	T
_slice	scala/collection/immutable/package.scala	/^    final def _slice(from: Int, until: Int) = _drop(from)._take(until - from)$/;"	m
_take	scala/collection/immutable/package.scala	/^    final def _take(n: Int) = if (n > 0 && _length > 0) {$/;"	m
_toString	scala/runtime/ScalaRunTime.scala	/^  def _toString(x: Product): String =$/;"	m
a	scala/Array.scala	/^    val a = new Array[T](n)$/;"	l
a	scala/actors/Actor.scala	/^    val a = new Actor {$/;"	l
a	scala/actors/Actor.scala	/^    val a = tl.get$/;"	l
a	scala/actors/ActorCanReply.scala	/^    val a = new FutureActor[A](fun, c)$/;"	l
a	scala/actors/Channel.scala	/^    val a = new FutureActor[A](fun, c)$/;"	l
a	scala/actors/Future.scala	/^    val a = new FutureActor[T](_.set(body), c)$/;"	l
a	scala/actors/Future.scala	/^    val a = new FutureActor[Unit](fun, c)$/;"	l
a	scala/collection/immutable/HashMap.scala	/^            val a = thislsb - 1$/;"	l
a	scala/collection/parallel/mutable/ParArray.scala	/^      val a = arr$/;"	l
a	scala/io/BytePickle.scala	/^      val a = f(b)$/;"	l
a	scala/io/BytePickle.scala	/^      val a = resPa._1$/;"	l
a	scala/util/MurmurHash.scala	/^    var a,b,n = 0$/;"	l
a	scala/util/Sorting.scala	/^        var a = off$/;"	l
a	scala/util/Sorting.scala	/^      var a = _a$/;"	l
a2	scala/collection/immutable/Vector.scala	/^    val a2 = new Array[AnyRef](array.length)$/;"	l
aMap	scala/xml/parsing/MarkupParser.scala	/^    var aMap: MetaData = Null$/;"	l
ab	scala/util/Sorting.scala	/^      val ab = x(a) compare x(b)$/;"	l
abort	scala/collection/generic/Signalling.scala	/^  def abort() = signalDelegate.abort$/;"	m
abort	scala/collection/generic/Signalling.scala	/^  def abort(): Unit$/;"	m
abs	scala/MathCommon.scala	/^  def abs(x: Double): Double = java.lang.Math.abs(x)$/;"	m
abs	scala/MathCommon.scala	/^  def abs(x: Float): Float = java.lang.Math.abs(x)$/;"	m
abs	scala/MathCommon.scala	/^  def abs(x: Int): Int = java.lang.Math.abs(x)$/;"	m
abs	scala/MathCommon.scala	/^  def abs(x: Long): Long = java.lang.Math.abs(x)$/;"	m
abs	scala/math/BigDecimal.scala	/^  def abs: BigDecimal = this.bigDecimal abs mc$/;"	m
abs	scala/math/BigInt.scala	/^  def abs: BigInt = new BigInt(this.bigInteger.abs())$/;"	m
abs	scala/math/Numeric.scala	/^    def abs(): T = Numeric.this.abs(lhs)$/;"	m
abs	scala/math/Numeric.scala	/^  def abs(x: T): T = if (lt(x, zero)) negate(x) else x$/;"	m
abs	scala/runtime/ScalaNumberProxy.scala	/^  def abs             = num.abs(self)$/;"	m
abstractType	scala/reflect/ClassManifest.scala	/^  def abstractType[T](prefix: OptManifest[_], name: String, clazz: JClass[_], args: OptManifest[_]*): ClassManifest[T] =$/;"	m
abstractType	scala/reflect/ClassManifest.scala	/^  def abstractType[T](prefix: OptManifest[_], name: String, upperbound: ClassManifest[_], args: OptManifest[_]*): ClassManifest[T] =$/;"	m
abstractType	scala/reflect/Manifest.scala	/^  def abstractType[T](prefix: Manifest[_], name: String, clazz: Predef.Class[_], args: Manifest[_]*): Manifest[T] =$/;"	m
ac	scala/util/Sorting.scala	/^      val ac = x(a) compare x(c)$/;"	l
acc	scala/Array.scala	/^      var acc = start$/;"	l
acc	scala/actors/MessageQueue.scala	/^    var acc = z$/;"	l
acc	scala/actors/threadpool/Executors.java	/^        private final AccessControlContext acc;$/;"	f	class:Executors.PrivilegedCallable	file:
acc	scala/actors/threadpool/Executors.java	/^        private final AccessControlContext acc;$/;"	f	class:Executors.PrivilegedCallableUsingCurrentClassLoader	file:
acc	scala/actors/threadpool/Executors.java	/^        private final AccessControlContext acc;$/;"	f	class:Executors.PrivilegedThreadFactory	file:
acc	scala/collection/LinearSeqOptimized.scala	/^    var acc = z$/;"	l
acc	scala/collection/TraversableLike.scala	/^    var acc = z$/;"	l
acc	scala/collection/TraversableOnce.scala	/^    var acc: B = 0.asInstanceOf[B]$/;"	l
acc	scala/collection/generic/GenTraversableFactory.scala	/^      var acc = start$/;"	l
acc	scala/collection/immutable/ListMap.scala	/^      var acc = ListMap[A, B1]()$/;"	l
acc	scala/xml/dtd/Scanner.scala	/^  final def acc(d: Char) { $/;"	m
accS	scala/xml/dtd/Scanner.scala	/^  final def accS(ds: Seq[Char]) { ds foreach acc }$/;"	m
accept	scala/util/parsing/combinator/Parsers.scala	/^  def accept[ES <% List[Elem]](es: ES): Parser[List[Elem]] = acceptSeq(es)$/;"	m
accept	scala/util/parsing/combinator/Parsers.scala	/^  def accept[U](expected: String, f: PartialFunction[Elem, U]): Parser[U] = acceptMatch(expected, f)$/;"	m
accept	scala/util/parsing/combinator/Parsers.scala	/^  implicit def accept(e: Elem): Parser[Elem] = acceptIf(_ == e)("`"+e+"' expected but " + _ + " found")$/;"	m
accept	scala/xml/dtd/ContentModelParser.scala	/^  def accept(tok: Int) = {$/;"	m
acceptIf	scala/util/parsing/combinator/Parsers.scala	/^  def acceptIf(p: Elem => Boolean)(err: Elem => String): Parser[Elem] = Parser { in =>$/;"	m
acceptMatch	scala/util/parsing/combinator/Parsers.scala	/^  def acceptMatch[U](expected: String, f: PartialFunction[Elem, U]): Parser[U] = Parser{ in => $/;"	m
acceptSeq	scala/util/parsing/combinator/Parsers.scala	/^  def acceptSeq[ES <% Iterable[Elem]](es: ES): Parser[List[Elem]] = es.foldRight[Parser[List[Elem]]](success(Nil)){(x, pxs) => accept(x) ~ pxs ^^ mkList}$/;"	m
acos	scala/MathCommon.scala	/^  def acos(x: Double): Double = java.lang.Math.acos(x)$/;"	m
acquire	scala/concurrent/Lock.scala	/^  def acquire() = synchronized {$/;"	m
act	scala/actors/Actor.scala	/^      def act() = body$/;"	m
act	scala/actors/Actor.scala	/^      def act() {$/;"	m
act	scala/actors/ActorProxy.scala	/^  def act() {}$/;"	m
act	scala/actors/Future.scala	/^  def act() {$/;"	m
act	scala/actors/Reactor.scala	/^  def act(): Unit$/;"	m
act	scala/actors/remote/Proxy.scala	/^  def act() {$/;"	m
activateSubscription	scala/collection/mutable/Publisher.scala	/^  def activateSubscription(sub: Sub) { suspended -= sub }$/;"	m
activeBlocked	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^            val activeBlocked = numWorkersBlocked$/;"	l
activeReaders_	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        transient int activeReaders_ = 0;$/;"	f	class:ReentrantReadWriteLock.Sync
activeWriter_	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        transient Thread activeWriter_ = null;$/;"	f	class:ReentrantReadWriteLock.Sync
actor	scala/actors/Actor.scala	/^  def actor(body: => Unit): Actor = {$/;"	m
actualn	scala/collection/parallel/ParIterableLike.scala	/^    val actualn = if (size > n) n else size$/;"	l
adapter	scala/xml/factory/XMLLoader.scala	/^  def adapter: FactoryAdapter = new NoBindingFactoryAdapter()$/;"	m
add	scala/actors/threadpool/AbstractQueue.java	/^    public boolean add(Object e) {$/;"	m	class:AbstractQueue
add	scala/actors/threadpool/BlockingQueue.java	/^    boolean add(E e);$/;"	m	interface:BlockingQueue
add	scala/actors/threadpool/Queue.java	/^    boolean add(Object e);$/;"	m	interface:Queue
add	scala/collection/mutable/MultiMap.scala	/^  def add(key: A, value: B): this.type = addBinding(key, value)$/;"	m
add	scala/collection/mutable/SetLike.scala	/^  def add(elem: A): Boolean = {$/;"	m
add	scala/runtime/BoxesRunTime.java	/^    public static Object add(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
add	scala/runtime/MethodCache.scala	/^  def add(forReceiver: JClass[_], forMethod: JMethod): MethodCache = this$/;"	m
add	scala/runtime/MethodCache.scala	/^  def add(forReceiver: JClass[_], forMethod: JMethod): MethodCache =$/;"	m
add	scala/runtime/MethodCache.scala	/^  def add(forReceiver: JClass[_], forMethod: JMethod): MethodCache$/;"	m
add	scala/util/automata/SubsetConstruction.scala	/^    def add(Q: BitSet) {$/;"	m
addAll	scala/actors/threadpool/AbstractQueue.java	/^    public boolean addAll(Collection c) {$/;"	m	class:AbstractQueue
addAndGet	scala/actors/threadpool/AtomicInteger.java	/^    public final synchronized int addAndGet(int delta) {$/;"	m	class:AtomicInteger
addAnnotation	scala/reflect/generic/Symbols.scala	/^    def addAnnotation(annot: AnnotationInfo) { throw new UnsupportedOperationException("addAnnotation inapplicable for " + this) }$/;"	m
addBinder	scala/util/parsing/ast/Binders.scala	/^    def addBinder(b: binderType) { substitution += Pair(b, b) }$/;"	m
addBinding	scala/collection/mutable/MultiMap.scala	/^  def addBinding(key: A, value: B): this.type = {$/;"	m
addChild	scala/reflect/generic/Symbols.scala	/^    def addChild(sym: Symbol)        { throw new UnsupportedOperationException("addChild inapplicable for " + this) }$/;"	m
addEntry	scala/collection/mutable/FlatHashTable.scala	/^  def addEntry(elem: A) : Boolean = {$/;"	m
addFailure	scala/testing/SUnit.scala	/^    def addFailure(test: Test, t: Throwable) {$/;"	m
addFinal	scala/util/automata/SubsetConstruction.scala	/^    def addFinal(q: BitSet) {$/;"	m
addMore	scala/collection/immutable/PagedSeq.scala	/^  final def addMore(more: (Array[T], Int, Int) => Int): Page[T] =$/;"	m
addShutdownHook	scala/sys/package.scala	/^  def addShutdownHook(body: => Unit): ShutdownHookThread = ShutdownHookThread(body)$/;"	m
addString	scala/collection/TraversableOnce.scala	/^  def addString(b: StringBuilder): StringBuilder = addString(b, "")$/;"	m
addString	scala/collection/TraversableOnce.scala	/^  def addString(b: StringBuilder, sep: String): StringBuilder = addString(b, "", sep, "")$/;"	m
addString	scala/collection/TraversableOnce.scala	/^  def addString(b: StringBuilder, start: String, sep: String, end: String): StringBuilder = {$/;"	m
addString	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def addString(buf: StringBuilder): StringBuilder$/;"	m
addString	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def addString(buf: StringBuilder, sep: String): StringBuilder$/;"	m
addString	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def addString(buf: StringBuilder, start: String, sep: String, end: String): StringBuilder$/;"	m
addTest	scala/testing/SUnit.scala	/^    def addTest(t: Test) {$/;"	m
addWorker	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private boolean addWorker(Runnable firstTask, boolean core) {$/;"	m	class:ThreadPoolExecutor	file:
advance	scala/collection/Iterator.scala	/^      def advance() = {$/;"	m
advanceDFA	scala/xml/parsing/ValidatingMarkupHandler.scala	/^    def advanceDFA(dm:DFAContentModel) = {$/;"	m
advanceRunState	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private void advanceRunState(int targetState) {$/;"	m	class:ThreadPoolExecutor	file:
aes	scala/actors/threadpool/ExecutorCompletionService.java	/^    private final AbstractExecutorService aes;$/;"	f	class:ExecutorCompletionService	file:
after	scala/util/matching/Regex.scala	/^    def after(i: Int): java.lang.CharSequence = $/;"	m
after	scala/util/matching/Regex.scala	/^    def after: java.lang.CharSequence = $/;"	m
afterCombine	scala/collection/parallel/package.scala	/^    def afterCombine[N <: Elem, NewTo >: To](other: Combiner[N, NewTo]) {}$/;"	m
afterExecute	scala/actors/threadpool/ThreadPoolExecutor.java	/^    protected void afterExecute(Runnable r, Throwable t) { }$/;"	m	class:ThreadPoolExecutor
aggregate	scala/collection/GenTraversableOnce.scala	/^  def aggregate[B](z: B)(seqop: (B, A) => B, combop: (B, B) => B): B$/;"	m
aggregate	scala/collection/TraversableOnce.scala	/^  def aggregate[B](z: B)(seqop: (B, A) => B, combop: (B, B) => B): B = foldLeft(z)(seqop)$/;"	m
aggregate	scala/collection/parallel/ParIterableLike.scala	/^  def aggregate[S](z: S)(seqop: (S, T) => S, combop: (S, S) => S): S = {$/;"	m
ahead	scala/collection/Iterator.scala	/^    var ahead: Iterator[A] = null$/;"	l
alarm	scala/actors/Future.scala	/^  def alarm(timespan: Long): Future[Unit] = {$/;"	m
alive	scala/actors/remote/RemoteActor.scala	/^  def alive(port: Int): Unit = synchronized {$/;"	m
all	scala/collection/parallel/mutable/ParArray.scala	/^      var all = true$/;"	l
all	scala/reflect/generic/Flags.scala	/^    val all   = 0 to 62 map (1L << _)$/;"	l
allCatch	scala/util/control/Exception.scala	/^  final def allCatch[T]: Catch[T] = new Catch(allCatcher[T]) withDesc "<everything>"$/;"	m
allCatcher	scala/util/control/Exception.scala	/^  final def allCatcher[T]: Catcher[T]         = mkThrowableCatcher(_ => true, throw _)$/;"	m
allDeclarationsProcessed	scala/xml/Document.scala	/^  var allDeclarationsProcessed = false$/;"	l
allTerminated	scala/actors/scheduler/TerminationMonitor.scala	/^  def allTerminated: Boolean = allActorsTerminated$/;"	m
allThreads	scala/sys/package.scala	/^  def allThreads(): IndexedSeq[Thread] = {$/;"	m
allocateAndCopy	scala/collection/parallel/mutable/LazyCombiner.scala	/^  def allocateAndCopy: To$/;"	m
allocateAndCopy	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^  def allocateAndCopy = if (chain.size > 1) {$/;"	m
allowCoreThreadTimeOut	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private volatile boolean allowCoreThreadTimeOut;$/;"	f	class:ThreadPoolExecutor	file:
allowCoreThreadTimeOut	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public void allowCoreThreadTimeOut(boolean value) {$/;"	m	class:ThreadPoolExecutor
allowForwardRef	scala/util/parsing/ast/Binders.scala	/^    def allowForwardRef: Scope[binderType] = this \/\/ TODO$/;"	m
allowReader	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        boolean allowReader() {$/;"	m	class:ReentrantReadWriteLock.Sync
allowsCoreThreadTimeOut	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public boolean allowsCoreThreadTimeOut() {$/;"	m	class:ThreadPoolExecutor
alongWith	scala/collection/parallel/package.scala	/^    def alongWith(that: Throwable) = (self, that) match {$/;"	m
alongWith	scala/collection/parallel/package.scala	/^    def alongWith(that: Throwable): Throwable$/;"	m
alpha_	scala/util/parsing/ast/Binders.scala	/^    def alpha_==[t <: NameElement](other: BoundElement[t]): Boolean = scope.indexFor(el) == other.scope.indexFor(other.el)$/;"	m
alphanumeric	scala/util/Random.scala	/^  def alphanumeric: Stream[Char] = {$/;"	m
aname	scala/xml/parsing/MarkupParser.scala	/^      val aname = xName$/;"	l
and	scala/util/control/Exception.scala	/^    def and(other: => Unit): Finally = new Finally({ body ; other })$/;"	m
andDo	scala/util/parsing/ast/Binders.scala	/^      def andDo(block: => Unit): T = {block; r}$/;"	m
andDo	scala/util/parsing/ast/Binders.scala	/^    def andDo(block: => Unit): T$/;"	m
andFinally	scala/util/control/Exception.scala	/^    def andFinally(body: => Unit): Catch[T] = fin match {$/;"	m
andFinally	scala/util/control/Exception.scala	/^    def andFinally(fin: => Unit) = new Try(body, catcher andFinally fin)$/;"	m
andThen	scala/Function1.scala	/^  def andThen[A](g: R => A): T1 => A = { x => g(apply(x)) }$/;"	m
andThen	scala/actors/Actor.scala	/^    def andThen[b](other: => b): Unit = rawSelf.seq(body, other)$/;"	m
andThen	scala/actors/Actor.scala	/^    def andThen[b](other: => b): Unit$/;"	m
andThen	scala/actors/Reactor.scala	/^    def andThen[B](other: => B): Unit = Reactor.this.seq(body, other)$/;"	m
annot	scala/reflect/generic/UnPickler.scala	/^          val annot = readTreeRef()$/;"	l
annotations	scala/reflect/generic/HasFlags.scala	/^  def annotations: List[AnnotationType]$/;"	m
annots	scala/reflect/generic/UnPickler.scala	/^          val annots = until(end, readAnnotationRef)$/;"	l
any2ArrowAssoc	scala/Predef.scala	/^  implicit def any2ArrowAssoc[A](x: A): ArrowAssoc[A] = new ArrowAssoc(x)$/;"	m
any2Ensuring	scala/Predef.scala	/^  implicit def any2Ensuring[A](x: A): Ensuring[A] = new Ensuring(x)$/;"	m
any2stringadd	scala/Predef.scala	/^  implicit def any2stringadd(x: Any) = new runtime.StringAdd(x)$/;"	m
anyValClass	scala/runtime/ScalaRunTime.scala	/^  def anyValClass[T <: AnyVal](value: T): Class[T] = (value match {$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(a: T, state: Array[Byte]): Array[Byte]$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(a: T, state: PicklerState): PicklerState$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(a: t, state: Array[Byte]): Array[Byte] =$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(a: t, state: PicklerState): PicklerState =$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(b: Byte, s: PicklerState): PicklerState =$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(b: RefDef, s: Array[Byte]): Array[Byte] =$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(b: u, s: Array[Byte]): Array[Byte] = {$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(b: u, s: PicklerState): PicklerState = {$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(n: Int, s: Array[Byte]): Array[Byte] =$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(n: Int, s: PicklerState): PicklerState = {$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(v: a, state: PicklerState): PicklerState = {$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(s: Array[Byte]): (Int, Array[Byte]) = {$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(s: Array[Byte]): (RefDef, Array[Byte]) =$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(s: Array[Byte]): (u, Array[Byte]) = {$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(s: UnPicklerState): (Byte, UnPicklerState) =$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(s: UnPicklerState): (Int,UnPicklerState) = {$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(s: UnPicklerState): (u, UnPicklerState) = {$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(state: Array[Byte]) = (x, state)$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(state: Array[Byte]): (T, Array[Byte])$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(state: UnPicklerState) = (x, state)$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(state: UnPicklerState): (T, UnPicklerState)$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(state: UnPicklerState): (a, UnPicklerState) = {$/;"	m
append	scala/actors/MessageQueue.scala	/^  def append(el: MQueueElement[Msg]) {$/;"	m
append	scala/actors/MessageQueue.scala	/^  def append(msg: Msg, session: OutputChannel[Any]) {$/;"	m
append	scala/collection/Iterator.scala	/^  def append[B >: A](that: Iterator[B]) = self ++ that$/;"	m
append	scala/collection/immutable/RedBlack.scala	/^      def append(tl: Tree[B], tr: Tree[B]): Tree[B] = (tl, tr) match {$/;"	m
append	scala/collection/immutable/Stream.scala	/^  def append[B >: A](rest: => TraversableOnce[B]): Stream[B] =$/;"	m
append	scala/collection/mutable/BufferLike.scala	/^  def append(elems: A*) { appendAll(elems) }$/;"	m
append	scala/collection/mutable/LinkedListLike.scala	/^  def append(that: This): This = {$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(s: String): StringBuilder = {$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(sb: StringBuilder): StringBuilder = {$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Any): StringBuilder = {$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Array[Char]): StringBuilder = appendAll(x)$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Array[Char], offset: Int, len: Int): StringBuilder = appendAll(x, offset, len)$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Boolean): StringBuilder = { underlying append x ; this }$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Byte): StringBuilder = { underlying append x ; this }$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Char): StringBuilder = { underlying append x ; this }$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Double): StringBuilder = { underlying append x ; this }$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Float): StringBuilder = { underlying append x ; this }$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Int): StringBuilder = { underlying append x ; this }$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Long): StringBuilder = { underlying append x ; this }$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Seq[Char]): StringBuilder = appendAll(x)$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Short): StringBuilder = { underlying append x ; this }$/;"	m
append	scala/concurrent/MailBox.scala	/^    def append(l: T, x: A): T = l ::: x :: Nil$/;"	m
append	scala/concurrent/MailBox.scala	/^    def append(l: T, x: A): T = {$/;"	m
append	scala/concurrent/MailBox.scala	/^  def append(l: T, x: A): T$/;"	m
append	scala/util/MurmurHash.scala	/^  def append(i: Int) {$/;"	m
append	scala/util/parsing/combinator/Parsers.scala	/^    def append[U >: Nothing](a: => ParseResult[U]): ParseResult[U] = this$/;"	m
append	scala/util/parsing/combinator/Parsers.scala	/^    def append[U >: Nothing](a: => ParseResult[U]): ParseResult[U] = { val alt = a; alt match {$/;"	m
append	scala/util/parsing/combinator/Parsers.scala	/^    def append[U >: T](a: => ParseResult[U]): ParseResult[U] = this$/;"	m
append	scala/util/parsing/combinator/Parsers.scala	/^    def append[U >: T](a: => ParseResult[U]): ParseResult[U]$/;"	m
append	scala/util/parsing/combinator/Parsers.scala	/^    def append[U >: T](p0: => Parser[U]): Parser[U] = { lazy val p = p0 \/\/ lazy argument$/;"	m
append	scala/xml/MetaData.scala	/^  def append(updates: MetaData, scope: NamespaceBinding = TopScope): MetaData =$/;"	m
append	scala/xml/TextBuffer.scala	/^  def append(cs: Seq[Char]): this.type = {$/;"	m
appendAll	scala/collection/mutable/BufferLike.scala	/^  def appendAll(xs: TraversableOnce[A]) { this ++= xs }$/;"	m
appendAll	scala/collection/mutable/StringBuilder.scala	/^  def appendAll(xs: Array[Char]): StringBuilder = {$/;"	m
appendAll	scala/collection/mutable/StringBuilder.scala	/^  def appendAll(xs: Array[Char], offset: Int, len: Int): StringBuilder = {$/;"	m
appendAll	scala/collection/mutable/StringBuilder.scala	/^  def appendAll(xs: TraversableOnce[Char]): StringBuilder = appendAll(xs.toArray)$/;"	m
appendByte	scala/io/BytePickle.scala	/^  def appendByte(a: Array[Byte], b: Int): Array[Byte] =$/;"	m
appendEscapedQuoted	scala/xml/Utility.scala	/^  def appendEscapedQuoted(s: String, sb: StringBuilder): StringBuilder = {$/;"	m
appendMiddle	scala/collection/parallel/RemainsIterator.scala	/^      var appendMiddle = false$/;"	l
appendParIterable	scala/collection/parallel/RemainsIterator.scala	/^  def appendParIterable[U >: T, PI <: IterableSplitter[U]](that: PI) = new Appended[U, PI](that)$/;"	m
appendParSeq	scala/collection/parallel/RemainsIterator.scala	/^  def appendParSeq[U >: T, PI <: SeqSplitter[U]](that: PI) = new Appended[U, PI](that)$/;"	m
appendQuoted	scala/xml/Utility.scala	/^  def appendQuoted(s: String): String = sbToString(appendQuoted(s, _))$/;"	m
appendQuoted	scala/xml/Utility.scala	/^  def appendQuoted(s: String, sb: StringBuilder) = {$/;"	m
appendText	scala/xml/parsing/MarkupParser.scala	/^  def appendText(pos: Int, ts: NodeBuffer, txt: String): Unit = {$/;"	m
appendln	scala/collection/parallel/RemainsIterator.scala	/^    def appendln(s: String) = output += s + "\\n"$/;"	m
apply	scala/Array.scala	/^      def apply() = ArrayBuilder.make[T]()(m) $/;"	m
apply	scala/Array.scala	/^      def apply() = ArraySeq.newBuilder[T]$/;"	m
apply	scala/Array.scala	/^      def apply(from: Array[_]) = ArrayBuilder.make[T]()(m) $/;"	m
apply	scala/Array.scala	/^      def apply(from: Array[_]) = ArraySeq.newBuilder[T]$/;"	m
apply	scala/Array.scala	/^  def apply(i: Int): T = throw new Error()$/;"	m
apply	scala/Array.scala	/^  def apply(x: Boolean, xs: Boolean*): Array[Boolean] = {$/;"	m
apply	scala/Array.scala	/^  def apply(x: Byte, xs: Byte*): Array[Byte] = {$/;"	m
apply	scala/Array.scala	/^  def apply(x: Char, xs: Char*): Array[Char] = {$/;"	m
apply	scala/Array.scala	/^  def apply(x: Double, xs: Double*): Array[Double] = {$/;"	m
apply	scala/Array.scala	/^  def apply(x: Float, xs: Float*): Array[Float] = {$/;"	m
apply	scala/Array.scala	/^  def apply(x: Int, xs: Int*): Array[Int] = {$/;"	m
apply	scala/Array.scala	/^  def apply(x: Long, xs: Long*): Array[Long] = {$/;"	m
apply	scala/Array.scala	/^  def apply(x: Short, xs: Short*): Array[Short] = {$/;"	m
apply	scala/Array.scala	/^  def apply(x: Unit, xs: Unit*): Array[Unit] = {$/;"	m
apply	scala/Array.scala	/^  def apply[T: ClassManifest](xs: T*): Array[T] = {$/;"	m
apply	scala/Enumeration.scala	/^        def apply() = newBuilder $/;"	m
apply	scala/Enumeration.scala	/^        def apply(from: ValueSet) = newBuilder $/;"	m
apply	scala/Enumeration.scala	/^    def apply(elems: Value*): ValueSet = empty ++ elems$/;"	m
apply	scala/Enumeration.scala	/^  final def apply(x: Int): Value = vmap(x)$/;"	m
apply	scala/Function.scala	/^    def apply(x: T): R = f(x).get$/;"	m
apply	scala/Function0.scala	/^  def apply(): R$/;"	m
apply	scala/Function1.scala	/^  def apply(v1: T1): R$/;"	m
apply	scala/Function10.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10): R$/;"	m
apply	scala/Function11.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11): R$/;"	m
apply	scala/Function12.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12): R$/;"	m
apply	scala/Function13.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13): R$/;"	m
apply	scala/Function14.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14): R$/;"	m
apply	scala/Function15.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15): R$/;"	m
apply	scala/Function16.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15, v16: T16): R$/;"	m
apply	scala/Function17.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15, v16: T16, v17: T17): R$/;"	m
apply	scala/Function18.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15, v16: T16, v17: T17, v18: T18): R$/;"	m
apply	scala/Function19.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15, v16: T16, v17: T17, v18: T18, v19: T19): R$/;"	m
apply	scala/Function2.scala	/^  def apply(v1: T1, v2: T2): R$/;"	m
apply	scala/Function20.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15, v16: T16, v17: T17, v18: T18, v19: T19, v20: T20): R$/;"	m
apply	scala/Function21.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15, v16: T16, v17: T17, v18: T18, v19: T19, v20: T20, v21: T21): R$/;"	m
apply	scala/Function22.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15, v16: T16, v17: T17, v18: T18, v19: T19, v20: T20, v21: T21, v22: T22): R$/;"	m
apply	scala/Function3.scala	/^  def apply(v1: T1, v2: T2, v3: T3): R$/;"	m
apply	scala/Function4.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4): R$/;"	m
apply	scala/Function5.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5): R$/;"	m
apply	scala/Function6.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6): R$/;"	m
apply	scala/Function7.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7): R$/;"	m
apply	scala/Function8.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8): R$/;"	m
apply	scala/Function9.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9): R$/;"	m
apply	scala/LowPriorityImplicits.scala	/^      def apply() = immutable.IndexedSeq.newBuilder[T]$/;"	m
apply	scala/LowPriorityImplicits.scala	/^      def apply(from: String) = immutable.IndexedSeq.newBuilder[T]$/;"	m
apply	scala/Option.scala	/^  def apply[A](x: A): Option[A] = if (x == null) None else Some(x)$/;"	m
apply	scala/PartialFunction.scala	/^    def apply(x: A): C = k(PartialFunction.this.apply(x))$/;"	m
apply	scala/PartialFunction.scala	/^    def apply(x: A): Option[B] = if (isDefinedAt(x)) Some(PartialFunction.this.apply(x)) else None$/;"	m
apply	scala/PartialFunction.scala	/^    def apply(x: A1): B1 = $/;"	m
apply	scala/Predef.scala	/^      def apply() = mutable.StringBuilder.newBuilder$/;"	m
apply	scala/Predef.scala	/^      def apply(from: String) = apply()$/;"	m
apply	scala/Predef.scala	/^    def apply[A, B, C](x: A, y: B, z: C) = Tuple3(x, y, z)$/;"	m
apply	scala/Predef.scala	/^    def apply[A, B](x: A, y: B) = Tuple2(x, y)$/;"	m
apply	scala/Symbol.scala	/^  def apply(name: K): V = {$/;"	m
apply	scala/actors/Actor.scala	/^    def apply(m: Any) {$/;"	m
apply	scala/actors/Future.scala	/^        def apply(msg: Any): Unit = msg match {$/;"	m
apply	scala/actors/Future.scala	/^  def apply(): T = {$/;"	m
apply	scala/actors/Reactor.scala	/^    def apply(x: Any) {}$/;"	m
apply	scala/actors/ReactorCanReply.scala	/^      def apply() = {$/;"	m
apply	scala/actors/remote/Proxy.scala	/^  def apply(target: AbstractActor, creator: Proxy) {$/;"	m
apply	scala/actors/remote/TcpService.scala	/^  def apply(port: Int, cl: ClassLoader): TcpService =$/;"	m
apply	scala/actors/scheduler/ExecutorScheduler.scala	/^  def apply(exec: ExecutorService): ExecutorScheduler =$/;"	m
apply	scala/actors/scheduler/ExecutorScheduler.scala	/^  def apply(exec: ExecutorService, term: Boolean): ExecutorScheduler =$/;"	m
apply	scala/collection/GenMapLike.scala	/^  def apply(key: A): B$/;"	m
apply	scala/collection/GenSeqLike.scala	/^  def apply(idx: Int): A$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int) = $/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int) = (self.apply(idx), thatSeq.apply(idx))$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int) = forced.apply(idx)$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int) = self(index(idx))$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int) = {$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int) =$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int): A = self.apply(length - 1 - idx)$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int): A =$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int): B = $/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int): B = mapping(self(idx))$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int): B$/;"	m
apply	scala/collection/GenSetLike.scala	/^  def apply(elem: A): Boolean = this contains elem$/;"	m
apply	scala/collection/IterableView.scala	/^      def apply() = new NoBuilder $/;"	m
apply	scala/collection/IterableView.scala	/^      def apply(from: Coll) = new NoBuilder $/;"	m
apply	scala/collection/Iterator.scala	/^  def apply[A](elems: A*): Iterator[A] = elems.iterator$/;"	m
apply	scala/collection/JavaConversions.scala	/^    def apply(i : Int) = underlying.get(i)$/;"	m
apply	scala/collection/LinearSeqOptimized.scala	/^  def apply(n: Int): A = {$/;"	m
apply	scala/collection/MapLike.scala	/^  def apply(key: A): B = get(key) match {$/;"	m
apply	scala/collection/SeqLike.scala	/^  def apply(idx: Int): A$/;"	m
apply	scala/collection/SeqView.scala	/^      def apply() = new NoBuilder $/;"	m
apply	scala/collection/SeqView.scala	/^      def apply(from: Coll) = new NoBuilder $/;"	m
apply	scala/collection/SeqViewLike.scala	/^    def apply(idx: Int): B$/;"	m
apply	scala/collection/TraversableOnce.scala	/^    def apply() = newIterator$/;"	m
apply	scala/collection/TraversableOnce.scala	/^    def apply(from: TraversableOnce[A]) = newIterator$/;"	m
apply	scala/collection/TraversableView.scala	/^      def apply() = new NoBuilder $/;"	m
apply	scala/collection/TraversableView.scala	/^      def apply(from: Coll) = new NoBuilder $/;"	m
apply	scala/collection/generic/BitSetFactory.scala	/^    def apply() = newBuilder$/;"	m
apply	scala/collection/generic/BitSetFactory.scala	/^    def apply(from: Coll) = newBuilder$/;"	m
apply	scala/collection/generic/BitSetFactory.scala	/^  def apply(elems: Int*): Coll = (empty \/: elems) (_ + _)$/;"	m
apply	scala/collection/generic/CanBuildFrom.scala	/^  def apply(): Builder[Elem, To]$/;"	m
apply	scala/collection/generic/CanBuildFrom.scala	/^  def apply(from: From): Builder[Elem, To]$/;"	m
apply	scala/collection/generic/CanCombineFrom.scala	/^  def apply(): Combiner[Elem, To]$/;"	m
apply	scala/collection/generic/CanCombineFrom.scala	/^  def apply(from: From): Combiner[Elem, To]$/;"	m
apply	scala/collection/generic/ClassManifestTraversableFactory.scala	/^    def apply = newBuilder[A]$/;"	m
apply	scala/collection/generic/ClassManifestTraversableFactory.scala	/^    def apply(from: CC[_]) = from.genericClassManifestBuilder[A]$/;"	m
apply	scala/collection/generic/GenMapFactory.scala	/^    def apply() = newBuilder$/;"	m
apply	scala/collection/generic/GenMapFactory.scala	/^    def apply(from: Coll) = newBuilder[A, B]$/;"	m
apply	scala/collection/generic/GenMapFactory.scala	/^  def apply[A, B](elems: (A, B)*): CC[A, B] = (newBuilder[A, B] ++= elems).result$/;"	m
apply	scala/collection/generic/GenSetFactory.scala	/^    def apply() = newBuilder[A]$/;"	m
apply	scala/collection/generic/GenSetFactory.scala	/^    def apply(from: CC[_]) = newBuilder[A]$/;"	m
apply	scala/collection/generic/GenTraversableFactory.scala	/^    def apply() = newBuilder[A]$/;"	m
apply	scala/collection/generic/GenTraversableFactory.scala	/^    def apply(from: Coll) = from.genericBuilder[A] $/;"	m
apply	scala/collection/generic/GenericClassManifestCompanion.scala	/^  def apply[A](elems: A*)(implicit ord: ClassManifest[A]): CC[A] = {$/;"	m
apply	scala/collection/generic/GenericCompanion.scala	/^  def apply[A](elems: A*): CC[A] = {$/;"	m
apply	scala/collection/generic/GenericOrderedCompanion.scala	/^  def apply[A](elems: A*)(implicit ord: Ordering[A]): CC[A] = {$/;"	m
apply	scala/collection/generic/OrderedTraversableFactory.scala	/^    def apply = newBuilder[A]$/;"	m
apply	scala/collection/generic/OrderedTraversableFactory.scala	/^    def apply(from: CC[_]) = from.genericOrderedBuilder[A]$/;"	m
apply	scala/collection/generic/ParMapFactory.scala	/^    def apply() = newCombiner[K, V]$/;"	m
apply	scala/collection/generic/ParMapFactory.scala	/^    def apply(from: MapColl) = from.genericMapCombiner[K, V].asInstanceOf[Combiner[(K, V), CC[K, V]]]$/;"	m
apply	scala/collection/generic/SliceInterval.scala	/^  def apply(from: Int, until: Int) = {$/;"	m
apply	scala/collection/generic/SortedMapFactory.scala	/^    def apply() = newBuilder[A, B]$/;"	m
apply	scala/collection/generic/SortedMapFactory.scala	/^    def apply(from: Coll) = newBuilder[A, B](ord)$/;"	m
apply	scala/collection/generic/SortedMapFactory.scala	/^  def apply[A, B](elems: (A, B)*)(implicit ord: Ordering[A]): CC[A, B] = (newBuilder[A, B](ord) ++= elems).result$/;"	m
apply	scala/collection/generic/SortedSetFactory.scala	/^    def apply() = newBuilder[A](ord)$/;"	m
apply	scala/collection/generic/SortedSetFactory.scala	/^    def apply(from: Coll) = newBuilder[A](ord)$/;"	m
apply	scala/collection/generic/SortedSetFactory.scala	/^  def apply[A](elems: A*)(implicit ord: Ordering[A]): CC[A] = (newBuilder[A](ord) ++= elems).result$/;"	m
apply	scala/collection/immutable/IndexedSeq.scala	/^    def apply(idx: Int) = buf.apply(idx)$/;"	m
apply	scala/collection/immutable/IntMap.scala	/^    def apply(): Builder[(Int, B), IntMap[B]] = new MapBuilder[Int, B, IntMap[B]](empty[B])$/;"	m
apply	scala/collection/immutable/IntMap.scala	/^    def apply(from: IntMap[A]): Builder[(Int, B), IntMap[B]] = apply()$/;"	m
apply	scala/collection/immutable/IntMap.scala	/^  def apply[T](elems : (Int, T)*) : IntMap[T] = $/;"	m
apply	scala/collection/immutable/LongMap.scala	/^    def apply(): Builder[(Long, B), LongMap[B]] = new MapBuilder[Long, B, LongMap[B]](empty[B])$/;"	m
apply	scala/collection/immutable/LongMap.scala	/^    def apply(from: LongMap[A]): Builder[(Long, B), LongMap[B]] = apply()$/;"	m
apply	scala/collection/immutable/LongMap.scala	/^  def apply[T](elems : (Long, T)*) : LongMap[T] = $/;"	m
apply	scala/collection/immutable/NumericRange.scala	/^  def apply(idx: Int): T = {$/;"	m
apply	scala/collection/immutable/NumericRange.scala	/^  def apply[T](start: T, end: T, step: T)(implicit num: Integral[T]): Exclusive[T] =$/;"	m
apply	scala/collection/immutable/PagedSeq.scala	/^  def apply(index: Int) = {$/;"	m
apply	scala/collection/immutable/PagedSeq.scala	/^  def apply(index: Int) =$/;"	m
apply	scala/collection/immutable/Range.scala	/^    def apply(start: BigDecimal, end: BigDecimal, step: BigDecimal) =$/;"	m
apply	scala/collection/immutable/Range.scala	/^    def apply(start: BigInt, end: BigInt, step: BigInt) = NumericRange(start, end, step)$/;"	m
apply	scala/collection/immutable/Range.scala	/^    def apply(start: Double, end: Double, step: Double) =$/;"	m
apply	scala/collection/immutable/Range.scala	/^    def apply(start: Int, end: Int, step: Int) = NumericRange(start, end, step)$/;"	m
apply	scala/collection/immutable/Range.scala	/^    def apply(start: Long, end: Long, step: Long) = NumericRange(start, end, step)$/;"	m
apply	scala/collection/immutable/Range.scala	/^  def apply(start: Int, end: Int): Range = new Range(start, end, 1) $/;"	m
apply	scala/collection/immutable/Range.scala	/^  def apply(start: Int, end: Int, step: Int): Range = new Range(start, end, step)$/;"	m
apply	scala/collection/immutable/Range.scala	/^  final def apply(idx: Int): Int = {$/;"	m
apply	scala/collection/immutable/Stream.scala	/^    def apply[A](hd: A, tl: => Stream[A]) = new Cons(hd, tl)$/;"	m
apply	scala/collection/immutable/StringLike.scala	/^  def apply(n: Int): Char = toString charAt n$/;"	m
apply	scala/collection/immutable/Vector.scala	/^  def apply(index: Int): A = {$/;"	m
apply	scala/collection/immutable/WrappedString.scala	/^    def apply() = newBuilder$/;"	m
apply	scala/collection/immutable/WrappedString.scala	/^    def apply(from: WrappedString) = newBuilder$/;"	m
apply	scala/collection/interfaces/MapMethods.scala	/^  def apply(key: A): B$/;"	m
apply	scala/collection/interfaces/SeqMethods.scala	/^  def apply(idx: Int): A$/;"	m
apply	scala/collection/interfaces/SetMethods.scala	/^  def apply(elem: A): Boolean$/;"	m
apply	scala/collection/mutable/ArrayLike.scala	/^    def apply(idx: Int): Any = self.apply(idx) match {$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Boolean = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Byte = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Char = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Double = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Float = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Int = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Long = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Short = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): T = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Unit = repr(index)$/;"	m
apply	scala/collection/mutable/ArraySeq.scala	/^  def apply(idx: Int): A = {$/;"	m
apply	scala/collection/mutable/ArrayStack.scala	/^  def apply(n: Int): T =$/;"	m
apply	scala/collection/mutable/ArrayStack.scala	/^  def apply[A: ClassManifest](elems: A*): ArrayStack[A] = {$/;"	m
apply	scala/collection/mutable/BufferLike.scala	/^  def apply(n: Int): A$/;"	m
apply	scala/collection/mutable/BufferProxy.scala	/^  def apply(n: Int): A = self.apply(n)$/;"	m
apply	scala/collection/mutable/IndexedSeqView.scala	/^      def apply() = new NoBuilder $/;"	m
apply	scala/collection/mutable/IndexedSeqView.scala	/^      def apply(from: Coll) = new NoBuilder $/;"	m
apply	scala/collection/mutable/IndexedSeqView.scala	/^      def apply(from: TraversableView[_, Array[_]]) = new NoBuilder $/;"	m
apply	scala/collection/mutable/OpenHashMap.scala	/^  def apply[K, V](elems : (K, V)*) = new OpenHashMap[K, V] ++= elems$/;"	m
apply	scala/collection/mutable/ResizableArray.scala	/^  def apply(idx: Int) = {$/;"	m
apply	scala/collection/mutable/UnrolledBuffer.scala	/^  def apply(idx: Int) =$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^      def apply(from: WrappedArray[_]): Builder[T, WrappedArray[T]] =$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^      def apply: Builder[T, WrappedArray[T]] =$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Boolean = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Byte = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Char = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Double = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Float = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Int = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Long = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Short = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): T = array(index).asInstanceOf[T]$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Unit = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^  def apply(index: Int): T$/;"	m
apply	scala/collection/package.scala	/^      def apply()           = b.apply()$/;"	m
apply	scala/collection/package.scala	/^      def apply(from: From) = b.apply()$/;"	m
apply	scala/collection/parallel/ParIterableLike.scala	/^    def apply() = bf.apply()$/;"	m
apply	scala/collection/parallel/ParIterableLike.scala	/^    def apply(from: Sequential) = bf.apply(from.par.asInstanceOf[Repr]) \/\/ !!! we only use this on `this.seq`, and know that `this.seq.par.getClass == this.getClass`$/;"	m
apply	scala/collection/parallel/ParIterableView.scala	/^      def apply() = new NoCombiner[T] {} \/\/ was: with EnvironmentPassingCombiner[T, Nothing]$/;"	m
apply	scala/collection/parallel/ParIterableView.scala	/^      def apply(from: Coll) = new NoCombiner[T] {} \/\/ was: with EnvironmentPassingCombiner[T, Nothing]$/;"	m
apply	scala/collection/parallel/ParMapLike.scala	/^  def apply(key: K) = get(key) match {$/;"	m
apply	scala/collection/parallel/ParSeq.scala	/^  def apply(i: Int): T$/;"	m
apply	scala/collection/parallel/ParSeqLike.scala	/^    def apply(idx: Int) = self(idx)$/;"	m
apply	scala/collection/parallel/ParSeqView.scala	/^      def apply() = new NoCombiner[T] {} \/\/ was: with EnvironmentPassingCombiner[T, Nothing]$/;"	m
apply	scala/collection/parallel/ParSeqView.scala	/^      def apply(from: Coll) = new NoCombiner[T] {} \/\/ was: with EnvironmentPassingCombiner[T, Nothing]$/;"	m
apply	scala/collection/parallel/immutable/ParHashMap.scala	/^  def apply[K, V] = new HashMapCombiner[K, V] {} \/\/ was: with EnvironmentPassingCombiner[(K, V), ParHashMap[K, V]]$/;"	m
apply	scala/collection/parallel/immutable/ParHashSet.scala	/^  def apply[T] = new HashSetCombiner[T] {} \/\/ was: with EnvironmentPassingCombiner[T, ParHashSet[T]] {}$/;"	m
apply	scala/collection/parallel/immutable/ParRange.scala	/^  def apply(start: Int, end: Int, step: Int, inclusive: Boolean) = new ParRange($/;"	m
apply	scala/collection/parallel/immutable/ParVector.scala	/^  def apply(idx: Int) = vector.apply(idx)$/;"	m
apply	scala/collection/parallel/immutable/package.scala	/^    def apply(idx: Int) = if (0 <= idx && idx < length) elem else throw new IndexOutOfBoundsException("" + idx)$/;"	m
apply	scala/collection/parallel/mutable/ParArray.scala	/^  def apply(i: Int) = array(i).asInstanceOf[T]$/;"	m
apply	scala/collection/parallel/mutable/ParHashMap.scala	/^  def apply[K, V] = new ParHashMapCombiner[K, V](HashTable.defaultLoadFactor) {} \/\/ was: with EnvironmentPassingCombiner[(K, V), ParHashMap[K, V]]$/;"	m
apply	scala/collection/parallel/mutable/ParHashSet.scala	/^  def apply[T] = new ParHashSetCombiner[T](FlatHashTable.defaultLoadFactor) {} \/\/with EnvironmentPassingCombiner[T, ParHashSet[T]]$/;"	m
apply	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^  def apply[T](): ResizableParArrayCombiner[T] = apply(new ArrayBuffer[ExposedArrayBuffer[T]] += new ExposedArrayBuffer[T])$/;"	m
apply	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^  def apply[T](c: ArrayBuffer[ExposedArrayBuffer[T]]): ResizableParArrayCombiner[T] = {$/;"	m
apply	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^  def apply[T](): UnrolledParArrayCombiner[T] = new UnrolledParArrayCombiner[T] {} \/\/ was: with EnvironmentPassingCombiner[T, ParArray[T]]$/;"	m
apply	scala/concurrent/DelayedLazyVal.scala	/^  def apply(): T = if (isDone) complete else f()$/;"	m
apply	scala/concurrent/pilib.scala	/^    def apply(v: A) =$/;"	m
apply	scala/io/Codec.scala	/^  def apply(charSet: Charset): Codec        = new Codec(charSet)$/;"	m
apply	scala/io/Codec.scala	/^  def apply(decoder: CharsetDecoder): Codec = {$/;"	m
apply	scala/io/Codec.scala	/^  def apply(encoding: String): Codec        = new Codec(Charset forName encoding)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(bd: BigDec): BigDecimal = apply(bd, defaultMathContext)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(bd: BigDec, mc: MathContext): BigDecimal = new BigDecimal(bd, mc)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(d: Double): BigDecimal = apply(d, defaultMathContext)  $/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(d: Double, mc: MathContext): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(i: Int): BigDecimal = apply(i, defaultMathContext)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(i: Int, mc: MathContext): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(l: Long): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(l: Long, mc: MathContext): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(mc: MathContext): BigDecimal = BigDecimal(this.bigDecimal.toString, mc)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(unscaledVal: BigInt, scale: Int): BigDecimal = apply(unscaledVal, scale, defaultMathContext)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(unscaledVal: BigInt, scale: Int, mc: MathContext): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(unscaledVal: Long, scale: Int): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(unscaledVal: Long, scale: Int, mc: MathContext): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(x: Array[Char]): BigDecimal = apply(x, defaultMathContext)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(x: Array[Char], mc: MathContext): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(x: BigInt): BigDecimal = apply(x, defaultMathContext)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(x: BigInt, mc: MathContext): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(x: String): BigDecimal = apply(x, defaultMathContext)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(x: String, mc: MathContext): BigDecimal = $/;"	m
apply	scala/math/BigInt.scala	/^  def apply(bitlength: Int, certainty: Int, rnd: scala.util.Random): BigInt =$/;"	m
apply	scala/math/BigInt.scala	/^  def apply(i: Int): BigInt =$/;"	m
apply	scala/math/BigInt.scala	/^  def apply(l: Long): BigInt =$/;"	m
apply	scala/math/BigInt.scala	/^  def apply(numbits: Int, rnd: scala.util.Random): BigInt =$/;"	m
apply	scala/math/BigInt.scala	/^  def apply(signum: Int, magnitude: Array[Byte]): BigInt =$/;"	m
apply	scala/math/BigInt.scala	/^  def apply(x: Array[Byte]): BigInt = $/;"	m
apply	scala/math/BigInt.scala	/^  def apply(x: String): BigInt = $/;"	m
apply	scala/math/BigInt.scala	/^  def apply(x: String, radix: Int): BigInt =$/;"	m
apply	scala/math/Equiv.scala	/^  def apply[T: Equiv] : Equiv[T] = implicitly[Equiv[T]]$/;"	m
apply	scala/math/Ordering.scala	/^  def apply[T](implicit ord: Ordering[T]) = ord$/;"	m
apply	scala/parallel/Future.scala	/^  def apply(): R$/;"	m
apply	scala/ref/Reference.scala	/^  def apply(): T$/;"	m
apply	scala/ref/ReferenceWrapper.scala	/^  def apply() = {$/;"	m
apply	scala/reflect/Print.scala	/^  def apply(any: Any): String = any match {$/;"	m
apply	scala/reflect/Print.scala	/^  def apply(datatype: Type): String = datatype match {$/;"	m
apply	scala/reflect/Print.scala	/^  def apply(symbol: Symbol): String = symbol match {$/;"	m
apply	scala/reflect/Print.scala	/^  def apply(tree: Tree): String = tree match {$/;"	m
apply	scala/reflect/generic/AnnotationInfos.scala	/^    def apply(anninfo: AnnotationInfo): NestedAnnotArg$/;"	m
apply	scala/reflect/generic/AnnotationInfos.scala	/^    def apply(atp: Type, args: List[Tree], assocs: List[(Name, ClassfileAnnotArg)]): AnnotationInfo$/;"	m
apply	scala/reflect/generic/AnnotationInfos.scala	/^    def apply(const: Array[ClassfileAnnotArg]): ArrayAnnotArg$/;"	m
apply	scala/reflect/generic/AnnotationInfos.scala	/^    def apply(const: Constant): LiteralAnnotArg$/;"	m
apply	scala/reflect/generic/Trees.scala	/^    def apply(): TypeTree$/;"	m
apply	scala/reflect/generic/Types.scala	/^    def apply(annotations: List[AnnotationInfo], underlying: Type, selfsym: Symbol): AnnotatedType$/;"	m
apply	scala/reflect/generic/Types.scala	/^    def apply(lo: Type, hi: Type): TypeBounds$/;"	m
apply	scala/reflect/generic/Types.scala	/^    def apply(params: List[Symbol], resultType: Type): MethodType$/;"	m
apply	scala/reflect/generic/Types.scala	/^    def apply(parents: List[Type], decls: Scope): RefinedType$/;"	m
apply	scala/reflect/generic/Types.scala	/^    def apply(parents: List[Type], decls: Scope, clazz: Symbol): ClassInfoType$/;"	m
apply	scala/reflect/generic/Types.scala	/^    def apply(parents: List[Type], decls: Scope, clazz: Symbol): RefinedType$/;"	m
apply	scala/reflect/generic/Types.scala	/^    def apply(pre: Type, sym: Symbol): Type$/;"	m
apply	scala/reflect/generic/Types.scala	/^    def apply(pre: Type, sym: Symbol, args: List[Type]): Type$/;"	m
apply	scala/reflect/generic/Types.scala	/^    def apply(quantified: List[Symbol], underlying: Type): ExistentialType$/;"	m
apply	scala/reflect/generic/Types.scala	/^    def apply(resultType: Type): NullaryMethodType$/;"	m
apply	scala/reflect/generic/Types.scala	/^    def apply(sym: Symbol): Type$/;"	m
apply	scala/reflect/generic/Types.scala	/^    def apply(thistpe: Type, supertpe: Type): Type$/;"	m
apply	scala/reflect/generic/Types.scala	/^    def apply(typeParams: List[Symbol], resultType: Type): PolyType$/;"	m
apply	scala/reflect/generic/Types.scala	/^    def apply(value: Constant): ConstantType$/;"	m
apply	scala/sys/Prop.scala	/^    def apply(key: String): Prop[T]$/;"	m
apply	scala/sys/Prop.scala	/^  def apply[T: Creator](key: String): Prop[T] = implicitly[Creator[T]] apply key$/;"	m
apply	scala/sys/PropImpl.scala	/^  def apply(key: String): Prop[T] = new PropImpl[T](key, f)$/;"	m
apply	scala/sys/ShutdownHookThread.scala	/^  def apply(body: => Unit): ShutdownHookThread = {$/;"	m
apply	scala/sys/process/BasicIO.scala	/^    def apply(in: InputStream): InputStream      = new FilterInputStream(in) with Uncloseable { }$/;"	m
apply	scala/sys/process/BasicIO.scala	/^    def apply(out: OutputStream): OutputStream   = new FilterOutputStream(out) with Uncloseable { }$/;"	m
apply	scala/sys/process/BasicIO.scala	/^    def apply[T](nonzeroException: Boolean): Streamed[T] = {$/;"	m
apply	scala/sys/process/BasicIO.scala	/^  def apply(withIn: Boolean, buffer: StringBuffer, log: Option[ProcessLogger]) =$/;"	m
apply	scala/sys/process/BasicIO.scala	/^  def apply(withIn: Boolean, log: ProcessLogger) =$/;"	m
apply	scala/sys/process/BasicIO.scala	/^  def apply(withIn: Boolean, output: String => Unit, log: Option[ProcessLogger]) =$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(builder: JProcessBuilder): ProcessBuilder = new Simple(builder)$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(command: Seq[String]): ProcessBuilder                    = apply(command, None)$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(command: Seq[String], cwd: File, extraEnv: (String, String)*): ProcessBuilder =$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(command: Seq[String], cwd: Option[File], extraEnv: (String, String)*): ProcessBuilder = {$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(command: String): ProcessBuilder                         = apply(command, None)$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(command: String, arguments: Seq[String]): ProcessBuilder = apply(command +: arguments, None)$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(command: String, cwd: File, extraEnv: (String, String)*): ProcessBuilder =$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(command: String, cwd: Option[File], extraEnv: (String, String)*): ProcessBuilder = {$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(command: scala.xml.Elem): ProcessBuilder  = apply(command.text.trim)$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(file: File): FileBuilder                  = new FileImpl(file)$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(name: String, exitValue: => Int): ProcessBuilder = new Dummy(name, exitValue)$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(url: URL): URLBuilder                     = new URLImpl(url)$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(value: Boolean): ProcessBuilder           = apply(value.toString, if (value) 0 else 1)$/;"	m
apply	scala/sys/process/ProcessImpl.scala	/^    def apply(f: => Unit): Thread = apply(f, false)$/;"	m
apply	scala/sys/process/ProcessImpl.scala	/^    def apply(f: => Unit, daemon: Boolean): Thread = {$/;"	m
apply	scala/sys/process/ProcessImpl.scala	/^    def apply[T](f: => T): () => T = {$/;"	m
apply	scala/sys/process/ProcessLogger.scala	/^  def apply(file: File): FileProcessLogger = new FileProcessLogger(file)$/;"	m
apply	scala/sys/process/ProcessLogger.scala	/^  def apply(fn: String => Unit): ProcessLogger = apply(fn, fn)$/;"	m
apply	scala/sys/process/ProcessLogger.scala	/^  def apply(fout: String => Unit, ferr: String => Unit): ProcessLogger = new ProcessLogger {$/;"	m
apply	scala/testing/Show.scala	/^    def apply[A](args: A*) {$/;"	m
apply	scala/util/MurmurHash.scala	/^  def apply(t: T) {$/;"	m
apply	scala/util/control/Exception.scala	/^        def apply(x: Throwable) = f(x)$/;"	m
apply	scala/util/control/Exception.scala	/^      def apply(x: Throwable) = throw x$/;"	m
apply	scala/util/control/Exception.scala	/^    def apply(): T                    = catcher(body)$/;"	m
apply	scala/util/control/Exception.scala	/^    def apply(x: Throwable): T = f(downcast(x).get)$/;"	m
apply	scala/util/control/Exception.scala	/^    def apply[U >: T](body: => U): U =$/;"	m
apply	scala/util/control/Exception.scala	/^    def apply[U >: T](other: => U): U = catcher(other)$/;"	m
apply	scala/util/parsing/ast/Binders.scala	/^         def apply[s  <% Mappable[s], t  <% Mappable[t]](x :{s, t}): {s, t} = x match {$/;"	m
apply	scala/util/parsing/ast/Binders.scala	/^      def apply[b <: NameElement](w : b): Option[Scope[b]] =  $/;"	m
apply	scala/util/parsing/ast/Binders.scala	/^    def apply(i: Int): binderType = this.iterator.toList(i)$/;"	m
apply	scala/util/parsing/ast/Binders.scala	/^    def apply[A <: NameElement](v: A): Option[Scope[A]] = None$/;"	m
apply	scala/util/parsing/ast/Binders.scala	/^    def apply[A <: NameElement](v: A): Option[Scope[A]]$/;"	m
apply	scala/util/parsing/ast/Binders.scala	/^    def apply[binderType <: NameElement, elementT <% Mappable[elementT]](scope: Scope[binderType], element: elementT) = new UnderBinder(scope, element) $/;"	m
apply	scala/util/parsing/combinator/PackratParsers.scala	/^      def apply(in: Input) = in match {$/;"	m
apply	scala/util/parsing/combinator/PackratParsers.scala	/^      def apply(in: Input) = {$/;"	m
apply	scala/util/parsing/combinator/Parsers.scala	/^      def apply(in: Input) = Parser.this(in) map (x => v0)$/;"	m
apply	scala/util/parsing/combinator/Parsers.scala	/^      def apply(in: Input) = seq(Parser.this, q)((x, y) => combine(x,y))(in)$/;"	m
apply	scala/util/parsing/combinator/Parsers.scala	/^      def apply(in: Input) = {$/;"	m
apply	scala/util/parsing/combinator/Parsers.scala	/^    def apply(in: Input) = p(in) match {$/;"	m
apply	scala/util/parsing/combinator/Parsers.scala	/^    def apply(in: Input): ParseResult[T]$/;"	m
apply	scala/util/parsing/combinator/RegexParsers.scala	/^      def apply(in: Input) = {$/;"	m
apply	scala/util/parsing/combinator/RegexParsers.scala	/^    def apply(in: Input) = {$/;"	m
apply	scala/util/parsing/input/StreamReader.scala	/^  def apply(in: java.io.Reader): StreamReader = {$/;"	m
apply	scala/util/regexp/Base.scala	/^    def apply(rs: _regexpT*) = $/;"	m
apply	scala/util/regexp/Base.scala	/^    def apply(rs: _regexpT*) = if (rs.isEmpty) Eps else new Sequ(rs: _*)$/;"	m
apply	scala/xml/Attribute.scala	/^  def apply(key: String): Seq[Node]$/;"	m
apply	scala/xml/Attribute.scala	/^  def apply(key: String, value: Seq[Node], next: MetaData): Attribute =$/;"	m
apply	scala/xml/Attribute.scala	/^  def apply(namespace: String, scope: NamespaceBinding, key: String): Seq[Node]$/;"	m
apply	scala/xml/Attribute.scala	/^  def apply(pre: Option[String], key: String, value: Seq[Node], next: MetaData): Attribute =$/;"	m
apply	scala/xml/Attribute.scala	/^  def apply(pre: String, key: String, value: Seq[Node], next: MetaData): Attribute =$/;"	m
apply	scala/xml/Attribute.scala	/^  def apply(pre: String, key: String, value: String, next: MetaData): Attribute =$/;"	m
apply	scala/xml/Elem.scala	/^  def apply(prefix: String,label: String, attributes: MetaData, scope: NamespaceBinding, child: Node*) = $/;"	m
apply	scala/xml/MetaData.scala	/^  def apply(key: String): Seq[Node]$/;"	m
apply	scala/xml/MetaData.scala	/^  def apply(namespace_uri:String, scp:NamespaceBinding, k:String): Seq[Node]$/;"	m
apply	scala/xml/MetaData.scala	/^  final def apply(namespace_uri: String, owner: Node, key: String): Seq[Node] =$/;"	m
apply	scala/xml/NodeSeq.scala	/^      def apply() = newBuilder $/;"	m
apply	scala/xml/NodeSeq.scala	/^      def apply(from: Coll) = newBuilder $/;"	m
apply	scala/xml/NodeSeq.scala	/^  def apply(f: Node => Boolean): NodeSeq = filter(f)$/;"	m
apply	scala/xml/NodeSeq.scala	/^  def apply(i: Int): Node = theSeq(i)$/;"	m
apply	scala/xml/Null.scala	/^  def apply(key: String) = {$/;"	m
apply	scala/xml/Null.scala	/^  def apply(namespace: String, scope: NamespaceBinding, key: String) = null$/;"	m
apply	scala/xml/PrefixedAttribute.scala	/^  def apply(key: String): Seq[Node] = next(key)$/;"	m
apply	scala/xml/PrefixedAttribute.scala	/^  def apply(namespace: String, scope: NamespaceBinding, key: String): Seq[Node] = {$/;"	m
apply	scala/xml/Unparsed.scala	/^  def apply(data: String) = new Unparsed(data)$/;"	m
apply	scala/xml/UnprefixedAttribute.scala	/^  def apply(key: String): Seq[Node] = $/;"	m
apply	scala/xml/UnprefixedAttribute.scala	/^  def apply(namespace: String, scope: NamespaceBinding, key: String): Seq[Node] = $/;"	m
apply	scala/xml/dtd/ElementValidator.scala	/^  def apply(n: Node): Boolean =$/;"	m
apply	scala/xml/parsing/XhtmlEntities.scala	/^  def apply() = entities$/;"	m
apply	scala/xml/parsing/XhtmlParser.scala	/^  def apply(source: Source): NodeSeq = new XhtmlParser(source).initialize.document$/;"	m
apply	scala/xml/transform/BasicTransformer.scala	/^  def apply(n: Node): Node = {$/;"	m
applySeq	scala/sys/process/Process.scala	/^  def applySeq[T](builders: Seq[T])(implicit convert: T => Source): Seq[Source] = builders.map(convert)$/;"	m
arg	scala/reflect/generic/UnPickler.scala	/^          val arg = readClassfileAnnotArg(readNat())$/;"	l
arg	scala/reflect/generic/UnPickler.scala	/^          val arg = readTreeRef()$/;"	l
arg	scala/xml/Attribute.scala	/^    val arg = if (isPrefixed) scope getURI pre else null    $/;"	l
arg	scala/xml/parsing/FactoryAdapter.scala	/^        val arg = if (pre == null) null else key$/;"	l
arg1	scala/collection/immutable/StringLike.scala	/^    val arg1 = java.util.regex.Pattern.quote(literal)$/;"	l
arg2	scala/collection/immutable/StringLike.scala	/^    val arg2 = java.util.regex.Matcher.quoteReplacement(replacement)$/;"	l
argref	scala/reflect/generic/UnPickler.scala	/^        val argref = readNat()$/;"	l
args	scala/reflect/generic/Trees.scala	/^    val args: List[Tree]$/;"	l
args	scala/reflect/generic/UnPickler.scala	/^          val args = until(end, readTreeRef)$/;"	l
args	scala/reflect/generic/UnPickler.scala	/^          var args = until(end, readTypeRef)$/;"	l
args	scala/reflect/generic/UnPickler.scala	/^      val args = new ListBuffer[Tree]$/;"	l
args1	scala/testing/Show.scala	/^    val args1 = args map (_.asInstanceOf[AnyRef])$/;"	l
args2	scala/xml/include/sax/Main.scala	/^    val args2 = if (dashR) args drop 2 else args$/;"	l
arr	scala/Array.scala	/^    val arr: Array[Array[T]] = (new Array[Array[T]](n1): Array[Array[T]])$/;"	l
arr	scala/collection/GenSeqViewLike.scala	/^      val arr = new Array[Int](self.length)$/;"	l
arr	scala/collection/SeqLike.scala	/^      val arr = new Array[Int](W.length)$/;"	l
arr	scala/collection/SeqLike.scala	/^    val arr = new ArraySeq[A](len)$/;"	l
arr	scala/collection/mutable/StringBuilder.scala	/^    val arr = new Array[Char](length)$/;"	l
arr	scala/collection/parallel/ParIterableLike.scala	/^    val arr = new Array[U](size)$/;"	l
arr	scala/collection/parallel/mutable/ParHashTable.scala	/^        val arr = convertToArrayBuffer(es)$/;"	l
arr	scala/reflect/Manifest.scala	/^  def arr[T: Manifest] = new Array[T](0)                \/\/ shorthand for the preceding$/;"	m
arr	scala/reflect/Manifest.scala	/^  def arr[T] = new Array[T](0)                          \/\/ does not compile$/;"	m
arr	scala/reflect/Manifest.scala	/^  def arr[T](implicit m: Manifest[T]) = new Array[T](0) \/\/ compiles$/;"	m
arr	scala/runtime/ScalaRunTime.scala	/^    val arr =  x.productArity$/;"	l
arr	scala/runtime/ScalaRunTime.scala	/^    val arr = new Array[AnyRef](xs.length)$/;"	l
arrCanBuildFrom	scala/collection/mutable/IndexedSeqView.scala	/^  implicit def arrCanBuildFrom[A]: CanBuildFrom[TraversableView[_, Array[_]], A, SeqView[A, Array[A]]] = $/;"	m
array	scala/Array.scala	/^    val array = new Array[Boolean](xs.length + 1)$/;"	l
array	scala/Array.scala	/^    val array = new Array[Byte](xs.length + 1)$/;"	l
array	scala/Array.scala	/^    val array = new Array[Char](xs.length + 1)$/;"	l
array	scala/Array.scala	/^    val array = new Array[Double](xs.length + 1)$/;"	l
array	scala/Array.scala	/^    val array = new Array[Float](xs.length + 1)$/;"	l
array	scala/Array.scala	/^    val array = new Array[Int](xs.length + 1)$/;"	l
array	scala/Array.scala	/^    val array = new Array[Long](xs.length + 1)$/;"	l
array	scala/Array.scala	/^    val array = new Array[Short](xs.length + 1)$/;"	l
array	scala/Array.scala	/^    val array = new Array[T](xs.length)$/;"	l
array	scala/Array.scala	/^    val array = new Array[Unit](xs.length + 1)$/;"	l
array	scala/collection/mutable/ArraySeq.scala	/^  val array: Array[AnyRef] = new Array[AnyRef](length)$/;"	l
array	scala/collection/mutable/WrappedArray.scala	/^  def array: Array[T]$/;"	m
array	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^    val array = arrayseq.array.asInstanceOf[Array[Any]]$/;"	l
array	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^    val array = arrayseq.array.asInstanceOf[Array[Any]]$/;"	l
arrayHash	scala/util/MurmurHash.scala	/^  def arrayHash[@specialized T](a: Array[T]) = {$/;"	m
arrayIndex	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^      var arrayIndex = offset$/;"	l
arrayManifest	scala/reflect/ClassManifest.scala	/^  def arrayManifest: ClassManifest[Array[T]] = $/;"	m
arrayString	scala/collection/package.scala	/^    def arrayString[T](array: Array[T], from: Int, until: Int): String = {$/;"	m
arrayToCharSequence	scala/Predef.scala	/^  implicit def arrayToCharSequence(xs: Array[Char]): CharSequence = new CharSequence {$/;"	m
arrayType	scala/reflect/ClassManifest.scala	/^  def arrayType[T](arg: OptManifest[_]): ClassManifest[Array[T]] = arg match {$/;"	m
arrayType	scala/reflect/Manifest.scala	/^  def arrayType[T](arg: Manifest[_]): Manifest[Array[T]] = $/;"	m
array_apply	scala/runtime/ScalaRunTime.scala	/^  def array_apply(xs: AnyRef, idx: Int): Any = xs match {$/;"	m
array_clone	scala/runtime/ScalaRunTime.scala	/^  def array_clone(xs: AnyRef): AnyRef = xs match {$/;"	m
array_length	scala/runtime/ScalaRunTime.scala	/^  def array_length(xs: AnyRef): Int = xs match {$/;"	m
array_update	scala/runtime/ScalaRunTime.scala	/^  def array_update(xs: AnyRef, idx: Int, value: Any): Unit = xs match {$/;"	m
arrayclear	scala/compat/Platform.scala	/^  def arrayclear(arr: Array[Int]) { java.util.Arrays.fill(arr, 0) }$/;"	m
arraycopy	scala/compat/Platform.scala	/^  def arraycopy(src: AnyRef, srcPos: Int, dest: AnyRef, destPos: Int, length: Int) {$/;"	m
arrayseq	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^    val arrayseq = new ArraySeq[T](size)$/;"	l
arrayseq	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^    val arrayseq = new ArraySeq[T](size)$/;"	l
arroffset	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^      var arroffset = offset$/;"	l
arrpit	scala/collection/parallel/mutable/ParHashTable.scala	/^        val arrpit = new collection.parallel.BufferSplitter[T](arr, 0, arr.length, signalDelegate)$/;"	l
asAttrMap	scala/xml/MetaData.scala	/^  def asAttrMap: Map[String, String] =$/;"	m
asBuffer	scala/collection/JavaConversions.scala	/^  def asBuffer[A](l : ju.List[A]): mutable.Buffer[A] = asScalaBuffer[A](l)$/;"	m
asCollection	scala/collection/JavaConversions.scala	/^  def asCollection[A](i : Iterable[A]): ju.Collection[A] = asJavaCollection[A](i)$/;"	m
asConcurrentMap	scala/collection/JavaConversions.scala	/^  def asConcurrentMap[A, B](m: juc.ConcurrentMap[A, B]): mutable.ConcurrentMap[A, B] = asScalaConcurrentMap[A, B](m)$/;"	m
asConcurrentMap	scala/collection/JavaConversions.scala	/^  def asConcurrentMap[A, B](m: mutable.ConcurrentMap[A, B]): juc.ConcurrentMap[A, B] = asJavaConcurrentMap[A, B](m)$/;"	m
asCondVar	scala/actors/threadpool/locks/ReentrantLock.java	/^    private CondVar asCondVar(Condition condition) {$/;"	m	class:ReentrantLock	file:
asDictionary	scala/collection/JavaConversions.scala	/^  def asDictionary[A, B](m : mutable.Map[A, B]): ju.Dictionary[A, B] = asJavaDictionary[A, B](m)$/;"	m
asDigit	scala/runtime/RichChar.scala	/^  def asDigit: Int                      = Character.digit(self, Character.MAX_RADIX)$/;"	m
asEnumeration	scala/collection/JavaConversions.scala	/^  def asEnumeration[A](i : Iterator[A]): ju.Enumeration[A] = asJavaEnumeration[A](i)$/;"	m
asIterable	scala/collection/JavaConversions.scala	/^  def asIterable[A](i : Iterable[A]): jl.Iterable[A] = asJavaIterable[A](i)$/;"	m
asIterable	scala/collection/JavaConversions.scala	/^  def asIterable[A](i : jl.Iterable[A]): Iterable[A] = iterableAsScalaIterable[A](i)$/;"	m
asIterable	scala/collection/JavaConversions.scala	/^  def asIterable[A](i : ju.Collection[A]): Iterable[A] = collectionAsScalaIterable[A](i)$/;"	m
asIterator	scala/collection/JavaConversions.scala	/^  def asIterator[A](i : Iterator[A]): ju.Iterator[A] = asJavaIterator[A](i)$/;"	m
asIterator	scala/collection/JavaConversions.scala	/^  def asIterator[A](i : ju.Enumeration[A]): Iterator[A] = enumerationAsScalaIterator[A](i)$/;"	m
asIterator	scala/collection/JavaConversions.scala	/^  def asIterator[A](i : ju.Iterator[A]): Iterator[A] = asScalaIterator[A](i)$/;"	m
asJava	scala/collection/JavaConversions.scala	/^    def asJava = new IteratorWrapper(underlying)$/;"	m
asJava	scala/collection/JavaConverters.scala	/^    def asJava: C = op$/;"	m
asJavaCollection	scala/collection/JavaConversions.scala	/^  implicit def asJavaCollection[A](i : Iterable[A]): ju.Collection[A] = i match {$/;"	m
asJavaCollection	scala/collection/JavaConverters.scala	/^    def asJavaCollection: ju.Collection[A] = JavaConversions.asJavaCollection(i)$/;"	m
asJavaCollectionConverter	scala/collection/JavaConverters.scala	/^  implicit def asJavaCollectionConverter[A](i : Iterable[A]): AsJavaCollection[A] = $/;"	m
asJavaConcurrentMap	scala/collection/JavaConversions.scala	/^  implicit def asJavaConcurrentMap[A, B](m: mutable.ConcurrentMap[A, B]): juc.ConcurrentMap[A, B] = m match {$/;"	m
asJavaConcurrentMapConverter	scala/collection/JavaConverters.scala	/^  implicit def asJavaConcurrentMapConverter[A, B](m: mutable.ConcurrentMap[A, B]): AsJava[juc.ConcurrentMap[A, B]] = $/;"	m
asJavaDictionary	scala/collection/JavaConversions.scala	/^  implicit def asJavaDictionary[A, B](m : mutable.Map[A, B]): ju.Dictionary[A, B] = m match {$/;"	m
asJavaDictionary	scala/collection/JavaConverters.scala	/^    def asJavaDictionary: ju.Dictionary[A, B] = JavaConversions.asJavaDictionary(m)$/;"	m
asJavaDictionaryConverter	scala/collection/JavaConverters.scala	/^  implicit def asJavaDictionaryConverter[A, B](m : mutable.Map[A, B]): AsJavaDictionary[A, B] = $/;"	m
asJavaEnumeration	scala/collection/JavaConversions.scala	/^  implicit def asJavaEnumeration[A](i : Iterator[A]): ju.Enumeration[A] = i match {$/;"	m
asJavaEnumeration	scala/collection/JavaConverters.scala	/^    def asJavaEnumeration: ju.Enumeration[A] = JavaConversions.asJavaEnumeration(i)$/;"	m
asJavaEnumerationConverter	scala/collection/JavaConverters.scala	/^  implicit def asJavaEnumerationConverter[A](i : Iterator[A]): AsJavaEnumeration[A] = $/;"	m
asJavaIterable	scala/collection/JavaConversions.scala	/^  implicit def asJavaIterable[A](i : Iterable[A]): jl.Iterable[A] = i match {$/;"	m
asJavaIterableConverter	scala/collection/JavaConverters.scala	/^  implicit def asJavaIterableConverter[A](i : Iterable[A]): AsJava[jl.Iterable[A]] = $/;"	m
asJavaIterator	scala/collection/JavaConversions.scala	/^  implicit def asJavaIterator[A](i : Iterator[A]): ju.Iterator[A] = i match {$/;"	m
asJavaIteratorConverter	scala/collection/JavaConverters.scala	/^  implicit def asJavaIteratorConverter[A](i : Iterator[A]): AsJava[ju.Iterator[A]] = $/;"	m
asJavaList	scala/collection/JavaConversions.scala	/^  def asJavaList[A](b : Seq[A]): ju.List[A] = seqAsJavaList[A](b)$/;"	m
asJavaList	scala/collection/JavaConversions.scala	/^  def asJavaList[A](b : mutable.Buffer[A]): ju.List[A] = bufferAsJavaList[A](b)$/;"	m
asJavaList	scala/collection/JavaConversions.scala	/^  def asJavaList[A](b : mutable.Seq[A]): ju.List[A] = mutableSeqAsJavaList[A](b)$/;"	m
asJavaListConverter	scala/collection/JavaConverters.scala	/^  def asJavaListConverter[A](b : Seq[A]): AsJava[ju.List[A]] = seqAsJavaListConverter(b)$/;"	m
asJavaListConverter	scala/collection/JavaConverters.scala	/^  def asJavaListConverter[A](b : mutable.Buffer[A]): AsJava[ju.List[A]] = bufferAsJavaListConverter(b)$/;"	m
asJavaListConverter	scala/collection/JavaConverters.scala	/^  def asJavaListConverter[A](b : mutable.Seq[A]): AsJava[ju.List[A]] = mutableSeqAsJavaListConverter(b)$/;"	m
asJavaMap	scala/collection/JavaConversions.scala	/^  def asJavaMap[A, B](m : Map[A, B]): ju.Map[A, B] = mapAsJavaMap[A, B](m)$/;"	m
asJavaMap	scala/collection/JavaConversions.scala	/^  def asJavaMap[A, B](m : mutable.Map[A, B]): ju.Map[A, B] = mutableMapAsJavaMap[A, B](m)$/;"	m
asJavaMapConverter	scala/collection/JavaConverters.scala	/^  def asJavaMapConverter[A, B](m : Map[A, B]): AsJava[ju.Map[A, B]] = mapAsJavaMapConverter(m)$/;"	m
asJavaMapConverter	scala/collection/JavaConverters.scala	/^  def asJavaMapConverter[A, B](m : mutable.Map[A, B]): AsJava[ju.Map[A, B]] = mutableMapAsJavaMapConverter(m)$/;"	m
asJavaSet	scala/collection/JavaConversions.scala	/^  def asJavaSet[A](s : mutable.Set[A]): ju.Set[A] = mutableSetAsJavaSet[A](s)$/;"	m
asJavaSet	scala/collection/JavaConversions.scala	/^  def asJavaSet[A](s: Set[A]): ju.Set[A] = setAsJavaSet[A](s)$/;"	m
asJavaSetConverter	scala/collection/JavaConverters.scala	/^  def asJavaSetConverter[A](s : Set[A]): AsJava[ju.Set[A]] = setAsJavaSetConverter(s)$/;"	m
asJavaSetConverter	scala/collection/JavaConverters.scala	/^  def asJavaSetConverter[A](s : mutable.Set[A]): AsJava[ju.Set[A]] = mutableSetAsJavaSetConverter(s)$/;"	m
asList	scala/actors/threadpool/Arrays.java	/^    public static List asList(Object[] a) {$/;"	m	class:Arrays
asList	scala/collection/JavaConversions.scala	/^  def asList[A](b : Seq[A]): ju.List[A] = seqAsJavaList[A](b)$/;"	m
asList	scala/collection/JavaConversions.scala	/^  def asList[A](b : mutable.Buffer[A]): ju.List[A] = bufferAsJavaList[A](b)$/;"	m
asList	scala/collection/JavaConversions.scala	/^  def asList[A](b : mutable.Seq[A]): ju.List[A] = mutableSeqAsJavaList[A](b)$/;"	m
asMap	scala/collection/JavaConversions.scala	/^  def asMap(p: ju.Properties): mutable.Map[String, String] = propertiesAsScalaMap(p)$/;"	m
asMap	scala/collection/JavaConversions.scala	/^  def asMap[A, B](m : Map[A, B]): ju.Map[A, B] = mapAsJavaMap[A, B](m)$/;"	m
asMap	scala/collection/JavaConversions.scala	/^  def asMap[A, B](m : ju.Map[A, B]): mutable.Map[A, B] = mapAsScalaMap[A, B](m)$/;"	m
asMap	scala/collection/JavaConversions.scala	/^  def asMap[A, B](m : mutable.Map[A, B]): ju.Map[A, B] = mutableMapAsJavaMap[A, B](m)$/;"	m
asMap	scala/collection/JavaConversions.scala	/^  def asMap[A, B](p: ju.Dictionary[A, B]): mutable.Map[A, B] = dictionaryAsScalaMap[A, B](p)$/;"	m
asParIterable	scala/collection/parallel/package.scala	/^    def asParIterable = t.asInstanceOf[ParIterable[T]]$/;"	m
asParIterable	scala/collection/parallel/package.scala	/^    def asParIterable: ParIterable[T]$/;"	m
asParSeq	scala/collection/parallel/package.scala	/^    def asParSeq = t.asInstanceOf[ParSeq[T]]$/;"	m
asParSeq	scala/collection/parallel/package.scala	/^    def asParSeq: ParSeq[T]$/;"	m
asParallel	scala/collection/parallel/package.scala	/^    def asParallel = bf.asInstanceOf[CanCombineFrom[From, Elem, To]]$/;"	m
asParallel	scala/collection/parallel/package.scala	/^    def asParallel: CanCombineFrom[From, Elem, To]$/;"	m
asRef	scala/xml/Equality.scala	/^  def asRef(x: Any): AnyRef = x.asInstanceOf[AnyRef]$/;"	m
asScala	scala/collection/JavaConverters.scala	/^    def asScala: C = op$/;"	m
asScalaBuffer	scala/collection/JavaConversions.scala	/^  implicit def asScalaBuffer[A](l : ju.List[A]): mutable.Buffer[A] = l match {$/;"	m
asScalaBufferConverter	scala/collection/JavaConverters.scala	/^  implicit def asScalaBufferConverter[A](l : ju.List[A]): AsScala[mutable.Buffer[A]] = $/;"	m
asScalaConcurrentMap	scala/collection/JavaConversions.scala	/^  implicit def asScalaConcurrentMap[A, B](m: juc.ConcurrentMap[A, B]): mutable.ConcurrentMap[A, B] = m match {$/;"	m
asScalaConcurrentMapConverter	scala/collection/JavaConverters.scala	/^  implicit def asScalaConcurrentMapConverter[A, B](m: juc.ConcurrentMap[A, B]): AsScala[mutable.ConcurrentMap[A, B]] = $/;"	m
asScalaIterable	scala/collection/JavaConversions.scala	/^  def asScalaIterable[A](i : jl.Iterable[A]): Iterable[A] = iterableAsScalaIterable[A](i)$/;"	m
asScalaIterable	scala/collection/JavaConversions.scala	/^  def asScalaIterable[A](i : ju.Collection[A]): Iterable[A] = collectionAsScalaIterable[A](i)$/;"	m
asScalaIterableConverter	scala/collection/JavaConverters.scala	/^  def asScalaIterableConverter[A](i : jl.Iterable[A]): AsScala[Iterable[A]] = iterableAsScalaIterableConverter(i)$/;"	m
asScalaIterableConverter	scala/collection/JavaConverters.scala	/^  def asScalaIterableConverter[A](i : ju.Collection[A]): AsScala[Iterable[A]] = collectionAsScalaIterableConverter(i)$/;"	m
asScalaIterator	scala/collection/JavaConversions.scala	/^  implicit def asScalaIterator[A](i : ju.Iterator[A]): Iterator[A] = i match {$/;"	m
asScalaIteratorConverter	scala/collection/JavaConverters.scala	/^  implicit def asScalaIteratorConverter[A](i : ju.Iterator[A]): AsScala[Iterator[A]] = $/;"	m
asScalaMap	scala/collection/JavaConversions.scala	/^  def asScalaMap(p: ju.Properties): mutable.Map[String, String] = propertiesAsScalaMap(p)$/;"	m
asScalaMap	scala/collection/JavaConversions.scala	/^  def asScalaMap[A, B](m : ju.Map[A, B]): mutable.Map[A, B] = mapAsScalaMap[A, B](m)$/;"	m
asScalaMapConverter	scala/collection/JavaConverters.scala	/^  def asScalaMapConverter(p: ju.Properties): AsScala[mutable.Map[String, String]] =$/;"	m
asScalaMapConverter	scala/collection/JavaConverters.scala	/^  def asScalaMapConverter[A, B](m : ju.Map[A, B]): AsScala[mutable.Map[A, B]] = mapAsScalaMapConverter(m)$/;"	m
asScalaSet	scala/collection/JavaConversions.scala	/^  implicit def asScalaSet[A](s : ju.Set[A]): mutable.Set[A] = s match {$/;"	m
asScalaSetConverter	scala/collection/JavaConverters.scala	/^  implicit def asScalaSetConverter[A](s : ju.Set[A]): AsScala[mutable.Set[A]] = $/;"	m
asSet	scala/collection/JavaConversions.scala	/^  def asSet[A](s : Set[A]): ju.Set[A] = setAsJavaSet[A](s)$/;"	m
asSet	scala/collection/JavaConversions.scala	/^  def asSet[A](s : ju.Set[A]): mutable.Set[A] = asScalaSet[A](s)$/;"	m
asSet	scala/collection/JavaConversions.scala	/^  def asSet[A](s : mutable.Set[A]): ju.Set[A] = mutableSetAsJavaSet[A](s)$/;"	m
asTaskRunner	scala/concurrent/JavaConversions.scala	/^  implicit def asTaskRunner(exec: Executor): TaskRunner =$/;"	m
asTaskRunner	scala/concurrent/JavaConversions.scala	/^  implicit def asTaskRunner(exec: ExecutorService): FutureTaskRunner =$/;"	m
asin	scala/MathCommon.scala	/^  def asin(x: Double): Double = java.lang.Math.asin(x)$/;"	m
assert	scala/Predef.scala	/^  def assert(assertion: Boolean) {$/;"	m
assert	scala/Predef.scala	/^  final def assert(assertion: Boolean, message: => Any) {$/;"	m
assertEq	scala/testing/SUnit.scala	/^    def assertEq(expected: AnyRef, actual: AnyRef) {$/;"	m
assertEq	scala/testing/SUnit.scala	/^    def assertEq(msg: String, expected: AnyRef, actual: AnyRef) {$/;"	m
assertEquals	scala/testing/SUnit.scala	/^    def assertEquals[A](expected: A, actual: A) {$/;"	m
assertEquals	scala/testing/SUnit.scala	/^    def assertEquals[A](msg: String, expected: A, actual: A) {$/;"	m
assertEqualsXML	scala/testing/SUnit.scala	/^    def assertEqualsXML(expected: NodeSeq, actual: NodeSeq) {$/;"	m
assertEqualsXML	scala/testing/SUnit.scala	/^    def assertEqualsXML(msg: String, expected: NodeSeq, actual: NodeSeq) {$/;"	m
assertEqualsXML	scala/testing/SUnit.scala	/^    def assertEqualsXML(msg: String, expected: Seq[Node], actual: Seq[Node]) {$/;"	m
assertFalse	scala/testing/SUnit.scala	/^    def assertFalse(actual: Boolean) {$/;"	m
assertFalse	scala/testing/SUnit.scala	/^    def assertFalse(msg: String, actual: Boolean) {$/;"	m
assertNotEq	scala/testing/SUnit.scala	/^    def assertNotEq(expected: AnyRef, actual: AnyRef) {$/;"	m
assertNotEq	scala/testing/SUnit.scala	/^    def assertNotEq(msg: String, expected: AnyRef, actual: AnyRef) {$/;"	m
assertNotNull	scala/testing/SUnit.scala	/^    def assertNotNull(actual: AnyRef): Unit  =$/;"	m
assertNotNull	scala/testing/SUnit.scala	/^    def assertNotNull(msg: String, actual: AnyRef) {$/;"	m
assertNull	scala/testing/SUnit.scala	/^    def assertNull(actual: AnyRef) {$/;"	m
assertNull	scala/testing/SUnit.scala	/^    def assertNull(msg: String, actual: AnyRef) {$/;"	m
assertSameElements	scala/testing/SUnit.scala	/^    def assertSameElements[A](actual: Seq[A], expected: Seq[A]) {$/;"	m
assertSameElementsXML	scala/testing/SUnit.scala	/^    def assertSameElementsXML(actual: Seq[Node], expected: Seq[Node]) {$/;"	m
assertTrue	scala/testing/SUnit.scala	/^    def assertTrue(actual: Boolean) {$/;"	m
assertTrue	scala/testing/SUnit.scala	/^    def assertTrue(msg: String, actual: Boolean) {$/;"	m
assign	scala/collection/parallel/ParIterableLike.scala	/^    def assign(cntx: Signalling): PI = {$/;"	m
assign	scala/collection/parallel/ParIterableLike.scala	/^    def assign(cntx: Signalling): PI$/;"	m
assignExceptionHandler	scala/actors/threadpool/helpers/ThreadHelpers.java	/^    public static Runnable assignExceptionHandler(final Runnable runnable,$/;"	m	class:ThreadHelpers
assocs	scala/reflect/generic/UnPickler.scala	/^      val assocs = new ListBuffer[(Name, ClassfileAnnotArg)]$/;"	l
assume	scala/Predef.scala	/^  def assume(assumption: Boolean) {$/;"	m
assume	scala/Predef.scala	/^  final def assume(assumption: Boolean, message: => Any) {$/;"	m
atEnd	scala/reflect/generic/UnPickler.scala	/^      def atEnd = readIndex == end$/;"	m
atEnd	scala/util/parsing/combinator/PackratParsers.scala	/^    def atEnd: Boolean = underlying.atEnd$/;"	m
atEnd	scala/util/parsing/combinator/lexical/Scanners.scala	/^    def atEnd = in.atEnd || (whitespace(in) match { case Success(_, in1) => in1.atEnd case _ => false })$/;"	m
atEnd	scala/util/parsing/input/CharSequenceReader.scala	/^  def atEnd = offset >= source.length$/;"	m
atEnd	scala/util/parsing/input/PagedSeqReader.scala	/^  def atEnd = !seq.isDefinedAt(offset)$/;"	m
atEnd	scala/util/parsing/input/Reader.scala	/^  def atEnd: Boolean$/;"	m
atOwner	scala/reflect/generic/Trees.scala	/^    def atOwner(owner: Symbol)(traverse: => Unit) {$/;"	m
atPos	scala/collection/parallel/mutable/ParHashSet.scala	/^      val atPos = blockStart(that.offset)$/;"	l
atResult	scala/xml/NodeSeq.scala	/^    def atResult = {$/;"	m
atTail	scala/concurrent/MailBox.scala	/^      val atTail = new LinkedList(x, null)$/;"	l
atan	scala/MathCommon.scala	/^  def atan(x: Double): Double = java.lang.Math.atan(x)$/;"	m
atan2	scala/MathCommon.scala	/^  def atan2(y: Double, x: Double): Double = java.lang.Math.atan2(y, x)$/;"	m
atom	scala/xml/dtd/ContentModelParser.scala	/^  def atom = token match {$/;"	m
atp	scala/reflect/generic/UnPickler.scala	/^      val atp = readTypeRef()$/;"	l
atpe	scala/xml/parsing/MarkupParser.scala	/^      val atpe = cbuf.toString()$/;"	l
attList	scala/xml/parsing/MarkupParser.scala	/^    var attList: List[AttrDecl] = Nil$/;"	l
attListDecl	scala/xml/parsing/MarkupHandler.scala	/^  def attListDecl(name: String, attList: List[AttrDecl]): Unit = ()$/;"	m
attach	scala/concurrent/pilib.scala	/^    def attach(f: A => Unit) =$/;"	m
attempt	scala/actors/threadpool/SynchronousQueue.java	/^        private boolean attempt(long nanos) throws InterruptedException {$/;"	m	class:SynchronousQueue.Node	file:
attr	scala/xml/NodeSeq.scala	/^      val attr = $/;"	l
attr	scala/xml/dtd/DTD.scala	/^  var attr: mutable.Map[String, AttListDecl] = new HashMap[String, AttListDecl]()$/;"	l
attrDecl	scala/xml/parsing/MarkupParser.scala	/^  def attrDecl() = {$/;"	m
attrStr	scala/xml/dtd/ElementValidator.scala	/^      def attrStr = attr.value.toString$/;"	m
attribStack	scala/xml/parsing/FactoryAdapter.scala	/^  val attribStack = new mutable.Stack[MetaData]$/;"	l
attribute	scala/xml/Node.scala	/^  final def attribute(key: String): Option[Seq[Node]] = attributes.get(key)$/;"	m
attribute	scala/xml/Node.scala	/^  final def attribute(uri: String, key: String): Option[Seq[Node]] =$/;"	m
attribute	scala/xml/dtd/ExternalID.scala	/^  def attribute = Node.NoAttributes$/;"	m
attributes	scala/xml/Node.scala	/^  def attributes: MetaData = Null$/;"	m
atts	scala/xml/include/sax/XIncludeFilter.scala	/^    var atts = atts1$/;"	l
attsImpl	scala/xml/include/sax/XIncludeFilter.scala	/^          val attsImpl = new AttributesImpl(atts)$/;"	l
augmentString	scala/Predef.scala	/^  implicit def augmentString(x: String): StringOps = new StringOps(x)$/;"	m
automatonFrom	scala/util/automata/WordBerrySethi.scala	/^  def automatonFrom(pat: RegExp, finalTag: Int): NondetWordAutom[_labelT] = {$/;"	m
av	scala/xml/parsing/MarkupParser.scala	/^        val av = xEntityValue()$/;"	l
available	scala/collection/Iterator.scala	/^          val available =$/;"	l
available	scala/concurrent/Lock.scala	/^  var available = true$/;"	l
available	scala/xml/pull/XMLEventReader.scala	/^  def available() = isElement(buffer) || isElement(queue.peek)$/;"	m
availableProcessors	scala/collection/parallel/package.scala	/^  val availableProcessors = java.lang.Runtime.getRuntime.availableProcessors$/;"	l
avoidZero	scala/reflect/generic/ByteCodecs.scala	/^  def avoidZero(src: Array[Byte]): Array[Byte] = {$/;"	m
await	scala/actors/threadpool/locks/CondVar.java	/^    public boolean await(long timeout, TimeUnit unit) throws InterruptedException {$/;"	m	class:CondVar
await	scala/actors/threadpool/locks/CondVar.java	/^    public void await() throws InterruptedException {$/;"	m	class:CondVar
await	scala/actors/threadpool/locks/Condition.java	/^    boolean await(long time, TimeUnit unit) throws InterruptedException;$/;"	m	interface:Condition
await	scala/actors/threadpool/locks/Condition.java	/^    void await() throws InterruptedException;$/;"	m	interface:Condition
await	scala/actors/threadpool/locks/FIFOCondVar.java	/^    public boolean await(long timeout, TimeUnit unit) throws InterruptedException {$/;"	m	class:FIFOCondVar
await	scala/actors/threadpool/locks/FIFOCondVar.java	/^    public void await() throws InterruptedException {$/;"	m	class:FIFOCondVar
awaitAll	scala/actors/Future.scala	/^  def awaitAll(timeout: Long, fts: Future[Any]*): List[Option[Any]] = {$/;"	m
awaitEither	scala/actors/Future.scala	/^  def awaitEither[A, B >: A](ft1: Future[A], ft2: Future[B]): B = {$/;"	m
awaitNanos	scala/actors/threadpool/helpers/Utils.java	/^    public static long awaitNanos(Condition cond, long nanosTimeout)$/;"	m	class:Utils
awaitTermination	scala/actors/threadpool/ExecutorService.java	/^    boolean awaitTermination(long timeout, TimeUnit unit)$/;"	m	interface:ExecutorService
awaitTermination	scala/actors/threadpool/Executors.java	/^        public boolean awaitTermination(long timeout, TimeUnit unit)$/;"	m	class:Executors.DelegatedExecutorService
awaitTermination	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public boolean awaitTermination(long timeout, TimeUnit unit)$/;"	m	class:ThreadPoolExecutor
awaitUninterruptibly	scala/actors/threadpool/locks/CondVar.java	/^    public void awaitUninterruptibly() {$/;"	m	class:CondVar
awaitUninterruptibly	scala/actors/threadpool/locks/Condition.java	/^    void awaitUninterruptibly();$/;"	m	interface:Condition
awaitUninterruptibly	scala/actors/threadpool/locks/FIFOCondVar.java	/^    public void awaitUninterruptibly() {$/;"	m	class:FIFOCondVar
awaitUntil	scala/actors/threadpool/locks/CondVar.java	/^    public boolean awaitUntil(Date deadline) throws InterruptedException {$/;"	m	class:CondVar
awaitUntil	scala/actors/threadpool/locks/Condition.java	/^    boolean awaitUntil(Date deadline) throws InterruptedException;$/;"	m	interface:Condition
awaitUntil	scala/actors/threadpool/locks/FIFOCondVar.java	/^    public boolean awaitUntil(Date deadline) throws InterruptedException {$/;"	m	class:FIFOCondVar
awaitWith	scala/actors/Future.scala	/^    def awaitWith(partFuns: Seq[PartialFunction[Any, Pair[Int, Any]]]) {$/;"	m
b	scala/Array.scala	/^    val b = newBuilder[Int]$/;"	l
b	scala/Array.scala	/^    val b = newBuilder[T]$/;"	l
b	scala/Tuple2.scala	/^      val b = cbf(coll1.repr)$/;"	l
b	scala/Tuple3.scala	/^      val b = cbf(coll1.repr)$/;"	l
b	scala/collection/DefaultMap.scala	/^    val b = Map.newBuilder[A, B1]$/;"	l
b	scala/collection/DefaultMap.scala	/^    val b = newBuilder$/;"	l
b	scala/collection/IndexedSeqOptimized.scala	/^      val b = bf(repr)$/;"	l
b	scala/collection/IndexedSeqOptimized.scala	/^    val b     = newBuilder$/;"	l
b	scala/collection/IndexedSeqOptimized.scala	/^    val b = bf(repr)$/;"	l
b	scala/collection/IndexedSeqOptimized.scala	/^    val b = newBuilder$/;"	l
b	scala/collection/IterableLike.scala	/^      val b = newBuilder$/;"	l
b	scala/collection/IterableLike.scala	/^    val b = bf(repr)$/;"	l
b	scala/collection/IterableLike.scala	/^    val b = newBuilder$/;"	l
b	scala/collection/LinearSeqOptimized.scala	/^    val b = newBuilder$/;"	l
b	scala/collection/SeqLike.scala	/^    val b = bf(repr)$/;"	l
b	scala/collection/SeqLike.scala	/^    val b = newBuilder$/;"	l
b	scala/collection/TraversableLike.scala	/^      val b = bf(repr)$/;"	l
b	scala/collection/TraversableLike.scala	/^      val b = newBuilder$/;"	l
b	scala/collection/TraversableLike.scala	/^    val b = bf(repr)$/;"	l
b	scala/collection/TraversableLike.scala	/^    val b = immutable.Map.newBuilder[K, Repr]$/;"	l
b	scala/collection/TraversableLike.scala	/^    val b = newBuilder$/;"	l
b	scala/collection/TraversableOnce.scala	/^    val b = immutable.Map.newBuilder[T, U]$/;"	l
b	scala/collection/TraversableViewLike.scala	/^    val b = bf(underlying)$/;"	l
b	scala/collection/generic/GenTraversableFactory.scala	/^    val b = newBuilder[A]$/;"	l
b	scala/collection/generic/GenTraversableFactory.scala	/^    val b = newBuilder[T]$/;"	l
b	scala/collection/generic/GenericClassManifestCompanion.scala	/^    val b = newBuilder[A]$/;"	l
b	scala/collection/generic/GenericCompanion.scala	/^      val b = newBuilder[A]$/;"	l
b	scala/collection/generic/GenericOrderedCompanion.scala	/^    val b = newBuilder[A]$/;"	l
b	scala/collection/generic/GenericTraversableTemplate.scala	/^    val b = genericBuilder[B]$/;"	l
b	scala/collection/immutable/DefaultMap.scala	/^    val b = Map.newBuilder[A, B1]$/;"	l
b	scala/collection/immutable/DefaultMap.scala	/^    val b = newBuilder$/;"	l
b	scala/collection/immutable/HashMap.scala	/^            val b = thatlsb - 1$/;"	l
b	scala/collection/immutable/HashMap.scala	/^      var b = bm$/;"	l
b	scala/collection/immutable/List.scala	/^            val b = new ListBuffer[A]$/;"	l
b	scala/collection/immutable/List.scala	/^          val b = if (mapped eq null) new ListBuffer[B] else mapped$/;"	l
b	scala/collection/immutable/List.scala	/^    val b = bf(this)$/;"	l
b	scala/collection/immutable/List.scala	/^    val b = new ListBuffer[A] $/;"	l
b	scala/collection/immutable/List.scala	/^    val b = new ListBuffer[A]$/;"	l
b	scala/collection/immutable/List.scala	/^    val b = new ListBuffer[B]$/;"	l
b	scala/collection/immutable/List.scala	/^    val b = new ListBuffer[C]$/;"	l
b	scala/collection/immutable/List.scala	/^    val b = new ListBuffer[D]$/;"	l
b	scala/collection/immutable/List.scala	/^    val b = new ListBuffer[Int]$/;"	l
b	scala/collection/immutable/MapLike.scala	/^    val b = bf(repr)$/;"	l
b	scala/collection/immutable/Vector.scala	/^      val b = new Array[AnyRef](a.length)$/;"	l
b	scala/collection/immutable/Vector.scala	/^    val b = bf(repr)$/;"	l
b	scala/collection/mutable/ArrayOps.scala	/^    val b = Array.newBuilder[U]$/;"	l
b	scala/collection/mutable/PriorityQueue.scala	/^    val b = bf.apply$/;"	l
b	scala/collection/parallel/ParIterableLike.scala	/^      val b = bf(repr)$/;"	l
b	scala/collection/parallel/ParIterableViewLike.scala	/^    val b = bf(underlying)$/;"	l
b	scala/collection/parallel/ParSeqLike.scala	/^    val b = bf(repr)$/;"	l
b	scala/collection/parallel/ParSeqViewLike.scala	/^    val b = bf(underlying)$/;"	l
b	scala/io/BytePickle.scala	/^        var b = 0$/;"	l
b	scala/io/BytePickle.scala	/^        var b = 0;$/;"	l
b	scala/reflect/generic/PickleBuffer.scala	/^    var b = 0L$/;"	l
b	scala/util/Sorting.scala	/^        var b = a$/;"	l
b	scala/util/Sorting.scala	/^      var b = _b$/;"	l
b	scala/xml/PrettyPrinter.scala	/^      val b = Box(ind, s.substring(0, last.head))$/;"	l
b1	scala/Tuple2.scala	/^      val b1 = cbf1(coll1.repr)$/;"	l
b1	scala/Tuple3.scala	/^      val b1 = cbf1(coll1.repr)$/;"	l
b1	scala/collection/generic/GenericTraversableTemplate.scala	/^    val b1 = genericBuilder[A1]$/;"	l
b1	scala/collection/immutable/List.scala	/^    val b1 = new ListBuffer[A]$/;"	l
b2	scala/Tuple2.scala	/^      val b2 = cbf2(coll2.repr)$/;"	l
b2	scala/Tuple3.scala	/^      val b2 = cbf2(coll2.repr)$/;"	l
b2	scala/collection/generic/GenericTraversableTemplate.scala	/^    val b2 = genericBuilder[A2]$/;"	l
b2	scala/collection/immutable/List.scala	/^    val b2 = new ListBuffer[B]$/;"	l
b3	scala/Tuple3.scala	/^      val b3 = cbf3(coll3.repr)$/;"	l
b3	scala/collection/generic/GenericTraversableTemplate.scala	/^    val b3 = genericBuilder[A3]$/;"	l
ba	scala/util/Marshal.scala	/^    val ba = new ByteArrayOutputStream(512)$/;"	l
balLeft	scala/collection/immutable/RedBlack.scala	/^      def balLeft(x: A, xv: B, tl: Tree[B], tr: Tree[B]) = (tl, tr) match {$/;"	m
balRight	scala/collection/immutable/RedBlack.scala	/^      def balRight(x: A, xv: B, tl: Tree[B], tr: Tree[B]) = (tl, tr) match {$/;"	m
balance	scala/collection/immutable/RedBlack.scala	/^      def balance(x: A, xv: B, tl: Tree[B], tr: Tree[B]) = (tl, tr) match {$/;"	m
base	scala/util/parsing/combinator/PackratParsers.scala	/^            val base = LR(Failure("Base Failure",in), p, None)$/;"	l
base	scala/xml/Utility.scala	/^    val base = if (hex) 16 else 10$/;"	l
base	scala/xml/include/sax/XIncludeFilter.scala	/^      val base = atts.getValue(NamespaceSupport.XMLNS, "base")$/;"	l
base	scala/xml/include/sax/XIncludeFilter.scala	/^      val base = bases.peek().asInstanceOf[URL]$/;"	l
base	scala/xml/include/sax/XIncludeFilter.scala	/^    val base = locator.getSystemId()$/;"	l
baseURI	scala/xml/Document.scala	/^  var baseURI: String = _$/;"	l
basisForHashCode	scala/xml/Equality.scala	/^  def basisForHashCode: Seq[Any]$/;"	m
basisForHashCode	scala/xml/MetaData.scala	/^  def basisForHashCode: Seq[Any] = List(this.asAttrMap)$/;"	m
basisForHashCode	scala/xml/NamespaceBinding.scala	/^  def basisForHashCode: Seq[Any] = List(prefix, uri, parent)$/;"	m
basisForHashCode	scala/xml/NodeSeq.scala	/^  def basisForHashCode: Seq[Any] = theSeq$/;"	m
bb	scala/collection/generic/GenericTraversableTemplate.scala	/^    val bb = genericBuilder[CC[B]]$/;"	l
bb	scala/collection/mutable/ArrayOps.scala	/^    val bb: Builder[Array[U], Array[Array[U]]] = Array.newBuilder($/;"	l
bbuffer	scala/io/Codec.scala	/^    val bbuffer = UTF8 encode cbuffer$/;"	l
bbuffer	scala/io/Codec.scala	/^    val bbuffer = java.nio.ByteBuffer wrap bytes$/;"	l
bc	scala/util/Sorting.scala	/^      val bc = x(b) compare x(c)$/;"	l
beanGetter	scala/annotation/target/beanGetter.scala	/^final class beanGetter extends annotation.StaticAnnotation$/;"	c
beanSetter	scala/annotation/target/beanSetter.scala	/^final class beanSetter extends annotation.StaticAnnotation$/;"	c
before	scala/util/matching/Regex.scala	/^    def before(i: Int): java.lang.CharSequence = $/;"	m
before	scala/util/matching/Regex.scala	/^    def before: java.lang.CharSequence = $/;"	m
beforeCombine	scala/collection/parallel/package.scala	/^    def beforeCombine[N <: Elem, NewTo >: To](other: Combiner[N, NewTo]) {}$/;"	m
beforeExecute	scala/actors/threadpool/ThreadPoolExecutor.java	/^    protected void beforeExecute(Thread t, Runnable r) { }$/;"	m	class:ThreadPoolExecutor
beforePos	scala/collection/parallel/mutable/ParHashSet.scala	/^      val beforePos = blockStart(that.offset + that.howmany)$/;"	l
beforePos	scala/collection/parallel/mutable/ParHashSet.scala	/^      val beforePos = nextBlockStart(block)$/;"	l
beforelast	scala/collection/parallel/Tasks.scala	/^        val beforelast = last$/;"	l
beginsAt	scala/collection/parallel/ParIterableLike.scala	/^    def beginsAt = from$/;"	m
beginsAt	scala/collection/parallel/ParIterableLike.scala	/^    def beginsAt = left.beginsAt$/;"	m
beginsAt	scala/collection/parallel/ParIterableLike.scala	/^    def beginsAt: Int$/;"	m
bigDecAsIntegral	scala/collection/immutable/Range.scala	/^    implicit val bigDecAsIntegral = scala.math.Numeric.BigDecimalAsIfIntegral$/;"	l
bigDecimal	scala/math/BigDecimal.scala	/^  val bigDecimal: BigDec,$/;"	l
bigUCS4	scala/xml/include/sax/EncodingHeuristics.scala	/^    val bigUCS4       = "UCS-4"$/;"	l
bigUTF16	scala/xml/include/sax/EncodingHeuristics.scala	/^    val bigUTF16      = "UTF-16BE"$/;"	l
bin	scala/collection/immutable/IntMap.scala	/^    def bin[S](left : IntMap[S], right : IntMap[S]) : IntMap[S] = {$/;"	m
bin	scala/collection/immutable/IntMap.scala	/^  def bin[T](prefix : Int, mask : Int, left : IntMap[T], right : IntMap[T]) : IntMap[T] = (left, right) match {$/;"	m
bin	scala/collection/immutable/LongMap.scala	/^    def bin[S](left : LongMap[S], right : LongMap[S]) : LongMap[S] = {$/;"	m
bin	scala/collection/immutable/LongMap.scala	/^  def bin[T](prefix : Long, mask : Long, left : LongMap[T], right : LongMap[T]) : LongMap[T] = (left, right) match {$/;"	m
binarySearch	scala/actors/threadpool/Arrays.java	/^    public static int binarySearch(Object[] a, Object key) {$/;"	m	class:Arrays
binarySearch	scala/actors/threadpool/Arrays.java	/^    public static int binarySearch(Object[] a, Object key, Comparator c) {$/;"	m	class:Arrays
binarySearch	scala/actors/threadpool/Arrays.java	/^    public static int binarySearch(byte[] a, byte key) {$/;"	m	class:Arrays
binarySearch	scala/actors/threadpool/Arrays.java	/^    public static int binarySearch(char[] a, char key) {$/;"	m	class:Arrays
binarySearch	scala/actors/threadpool/Arrays.java	/^    public static int binarySearch(double[] a, double key) {$/;"	m	class:Arrays
binarySearch	scala/actors/threadpool/Arrays.java	/^    public static int binarySearch(float[] a, float key) {$/;"	m	class:Arrays
binarySearch	scala/actors/threadpool/Arrays.java	/^    public static int binarySearch(int[] a, int key) {$/;"	m	class:Arrays
binarySearch	scala/actors/threadpool/Arrays.java	/^    public static int binarySearch(long[] a, long key) {$/;"	m	class:Arrays
binarySearch	scala/actors/threadpool/Arrays.java	/^    public static int binarySearch(short[] a, short key) {$/;"	m	class:Arrays
bind	scala/collection/mutable/UnrolledBuffer.scala	/^    def bind(thathead: Unrolled[T]) = {$/;"	m
bindersToString	scala/util/parsing/ast/Binders.scala	/^    def bindersToString: List[String] = (for(b <- this.iterator) yield b+"!"+id).toList$/;"	m
binds	scala/util/parsing/ast/Binders.scala	/^    def binds(b: binderType): Boolean = substitution.contains(b)$/;"	m
bis	scala/actors/remote/JavaSerializer.scala	/^    val bis = new ByteArrayInputStream(bytes)$/;"	l
bitCount	scala/math/BigInt.scala	/^  def bitCount: Int             = this.bigInteger.bitCount()$/;"	m
bitLength	scala/math/BigInt.scala	/^  def bitLength: Int            = this.bigInteger.bitLength()$/;"	m
bitString	scala/collection/generic/BitOperations.scala	/^    def bitString(num: Int, sep: String = "")   = bits(num) map (b => if (b) "1" else "0") mkString sep$/;"	m
bitString	scala/collection/generic/BitOperations.scala	/^    def bitString(num: Long, sep: String = "")     = bits(num) map (b => if (b) "1" else "0") mkString sep$/;"	m
bitmap	scala/collection/parallel/immutable/ParHashMap.scala	/^    var bitmap = 0$/;"	l
bitmap	scala/collection/parallel/immutable/ParHashSet.scala	/^    var bitmap = 0$/;"	l
bitmapNew	scala/collection/immutable/HashMap.scala	/^          val bitmapNew = bitmap ^ mask$/;"	l
bitmapNew	scala/collection/immutable/HashSet.scala	/^          val bitmapNew = bitmap ^ mask$/;"	l
bitmapNew	scala/collection/immutable/HashSet.scala	/^        val bitmapNew = bitmap | mask$/;"	l
bits	scala/collection/generic/BitOperations.scala	/^    def bits(num: Int)                          = 31 to 0 by -1 map (i => (num >>> i & 1) != 0)$/;"	m
bits	scala/collection/generic/BitOperations.scala	/^    def bits(num: Long)                            = 63L to 0L by -1L map (i => (num >>> i & 1L) != 0L)$/;"	m
bitsetCanBuildFrom	scala/collection/generic/BitSetFactory.scala	/^  def bitsetCanBuildFrom = new CanBuildFrom[Coll, Int, Coll] {$/;"	m
bitsplitpoint	scala/collection/immutable/HashMap.scala	/^        val bitsplitpoint = posOf(nodesize \/ 2, bitmap)$/;"	l
bldr	scala/collection/TraversableLike.scala	/^      val bldr = m.getOrElseUpdate(key, newBuilder)$/;"	l
blkNewLeft	scala/collection/immutable/RedBlack.scala	/^      val blkNewLeft = blacken(newLeft)$/;"	l
blkNewRight	scala/collection/immutable/RedBlack.scala	/^      val blkNewRight = blacken(newRight)$/;"	l
block	scala/actors/Actor.scala	/^    def block() = {$/;"	m
block	scala/actors/scheduler/ForkJoinScheduler.scala	/^      def block = blocker.block()$/;"	m
block	scala/concurrent/ManagedBlocker.scala	/^  def block(): Boolean$/;"	m
block	scala/reflect/generic/UnPickler.scala	/^          val block = readTreeRef()$/;"	l
blockIndex	scala/collection/immutable/Vector.scala	/^      var blockIndex = (startIndex - 1) & ~31$/;"	l
blockIndex	scala/collection/immutable/Vector.scala	/^      var blockIndex = endIndex & ~31$/;"	l
blockIndex	scala/collection/immutable/Vector.scala	/^    var blockIndex = (cutIndex - 1) & ~31$/;"	l
blockIndex	scala/collection/immutable/Vector.scala	/^    var blockIndex = cutIndex & ~31$/;"	l
blocker	scala/actors/Actor.scala	/^  private object blocker extends scala.concurrent.ManagedBlocker {$/;"	c
blocksize	scala/collection/parallel/ParIterableLike.scala	/^      val blocksize = scanBlockSize$/;"	l
blocksize	scala/collection/parallel/mutable/ParHashMap.scala	/^      val blocksize = table.length \/ (1 << ParHashMapCombiner.discriminantbits)$/;"	l
bm1	scala/collection/immutable/HashMap.scala	/^        val bm1 = bitmap & (-1 << bitsplitpoint)$/;"	l
bm2	scala/collection/immutable/HashMap.scala	/^        val bm2 = bitmap & (-1 >>> (32 - bitsplitpoint))$/;"	l
body	scala/collection/parallel/Tasks.scala	/^    val body: Task[R, Tp]$/;"	l
body	scala/reflect/generic/UnPickler.scala	/^          val body = readTreeRef()$/;"	l
body	scala/reflect/generic/UnPickler.scala	/^          val body = until(end, readTreeRef)$/;"	l
bool	scala/io/BytePickle.scala	/^  def bool: SPU[Boolean] = {$/;"	m
boolean2Boolean	scala/Predef.scala	/^  implicit def boolean2Boolean(x: Boolean)  = java.lang.Boolean.valueOf(x)$/;"	m
boolean2BooleanConflict	scala/Predef.scala	/^  implicit def boolean2BooleanConflict(x: Boolean)  = new AnyRef$/;"	m
booleanArrayOps	scala/Predef.scala	/^  implicit def booleanArrayOps(xs: Array[Boolean]): ArrayOps[Boolean] = new ArrayOps.ofBoolean(xs)$/;"	m
booleanPropAsBoolean	scala/sys/BooleanProp.scala	/^  implicit def booleanPropAsBoolean(b: BooleanProp): Boolean = b.value$/;"	m
booleanValue	scala/reflect/generic/Constants.scala	/^    def booleanValue: Boolean = $/;"	m
booleanWrapper	scala/LowPriorityImplicits.scala	/^  implicit def booleanWrapper(x: Boolean) = new runtime.RichBoolean(x)$/;"	m
bos	scala/actors/remote/JavaSerializer.scala	/^    val bos = new ByteArrayOutputStream()$/;"	l
bottelems	scala/collection/immutable/HashMap.scala	/^          val bottelems = new Array[HashMap[A,B1]](2)$/;"	l
bottom	scala/collection/immutable/HashMap.scala	/^          val bottom = new HashTrieMap[A,B1]((1 << thisindex) | (1 << thatindex), bottelems, 2)$/;"	l
box	scala/Boolean.scala	/^  def box(x: Boolean): java.lang.Boolean = java.lang.Boolean.valueOf(x)$/;"	m
box	scala/Byte.scala	/^  def box(x: Byte): java.lang.Byte = java.lang.Byte.valueOf(x)$/;"	m
box	scala/Char.scala	/^  def box(x: Char): java.lang.Character = java.lang.Character.valueOf(x)$/;"	m
box	scala/Double.scala	/^  def box(x: Double): java.lang.Double = java.lang.Double.valueOf(x)$/;"	m
box	scala/Float.scala	/^  def box(x: Float): java.lang.Float = java.lang.Float.valueOf(x)$/;"	m
box	scala/Int.scala	/^  def box(x: Int): java.lang.Integer = java.lang.Integer.valueOf(x)$/;"	m
box	scala/Long.scala	/^  def box(x: Long): java.lang.Long = java.lang.Long.valueOf(x)$/;"	m
box	scala/Short.scala	/^  def box(x: Short): java.lang.Short = java.lang.Short.valueOf(x)$/;"	m
box	scala/Unit.scala	/^  def box(x: Unit): scala.runtime.BoxedUnit = scala.runtime.BoxedUnit.UNIT$/;"	m
boxDescription	scala/runtime/BoxesRunTime.java	/^    private static String boxDescription(Object a) {$/;"	m	class:BoxesRunTime	file:
boxToBoolean	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Boolean boxToBoolean(boolean b) {$/;"	m	class:BoxesRunTime
boxToByte	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Byte boxToByte(byte b) {$/;"	m	class:BoxesRunTime
boxToCharacter	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Character boxToCharacter(char c) {$/;"	m	class:BoxesRunTime
boxToDouble	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Double boxToDouble(double d) {$/;"	m	class:BoxesRunTime
boxToFloat	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Float boxToFloat(float f) {$/;"	m	class:BoxesRunTime
boxToInteger	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Integer boxToInteger(int i) {$/;"	m	class:BoxesRunTime
boxToLong	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Long boxToLong(long l) {$/;"	m	class:BoxesRunTime
boxToShort	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Short boxToShort(short s) {$/;"	m	class:BoxesRunTime
branchMask	scala/collection/immutable/IntMap.scala	/^  def branchMask(i: Int, j: Int) = highestOneBit(i ^ j)$/;"	m
branchMask	scala/collection/immutable/LongMap.scala	/^  def branchMask(i: Long, j: Long) = highestOneBit(i ^ j)$/;"	m
break	scala/collection/immutable/List.scala	/^  def break(p: A => Boolean): (List[A], List[A]) = span { x => !p(x) }$/;"	m
break	scala/text/Document.scala	/^  def break = DocBreak$/;"	m
break	scala/util/control/Breaks.scala	/^  def break() { throw breakException }$/;"	m
breakOut	scala/collection/package.scala	/^  def breakOut[From, T, To](implicit b: CanBuildFrom[Nothing, T, To]): CanBuildFrom[From, T, To] =$/;"	m
breakable	scala/util/control/Breaks.scala	/^  def breakable(op: => Unit) {$/;"	m
bs	scala/collection/generic/GenericTraversableTemplate.scala	/^    val bs: IndexedSeq[Builder[B, CC[B]]] = IndexedSeq.fill(headSize)(genericBuilder[B])$/;"	l
bs	scala/collection/mutable/ArrayOps.scala	/^    val bs = asArray(head) map (_ => rowBuilder[U])$/;"	l
bucketidx	scala/collection/mutable/FlatHashTable.scala	/^    var bucketidx = 0$/;"	l
bucketidx	scala/collection/mutable/HashTable.scala	/^    var bucketidx = 0$/;"	l
buckets	scala/collection/parallel/mutable/ParHashMap.scala	/^    val buckets = for (i <- 0 until (table.length \/ sizeMapBucketSize)) yield checkBucket(i)$/;"	l
bucks	scala/collection/parallel/immutable/ParHashMap.scala	/^    val bucks = buckets.filter(_ != null).map(_.headPtr)$/;"	l
bucks	scala/collection/parallel/immutable/ParHashSet.scala	/^    val bucks = buckets.filter(_ != null).map(_.headPtr)$/;"	l
bucks	scala/collection/parallel/mutable/ParHashMap.scala	/^    val bucks = buckets.map(b => if (b ne null) b.headPtr else null)$/;"	l
buf	scala/collection/Iterator.scala	/^      val buf = new ArrayBuffer[A]$/;"	l
buf	scala/collection/SeqLike.scala	/^      val buf = self.newBuilder$/;"	l
buf	scala/collection/SetLike.scala	/^      val buf = self.newBuilder$/;"	l
buf	scala/collection/immutable/List.scala	/^    val buf = new ListBuffer[List[A]]$/;"	l
buf	scala/collection/immutable/PagedSeq.scala	/^    val buf = new StringBuilder$/;"	l
buf	scala/collection/immutable/StringLike.scala	/^    val buf = new StringBuilder$/;"	l
buf	scala/io/BytePickle.scala	/^    val buf = new ArrayBuffer[Byte]$/;"	l
buf	scala/reflect/NameTransformer.scala	/^    var buf: StringBuilder = null$/;"	l
buf	scala/testing/SUnit.scala	/^    val buf = new ArrayBuffer[(Test, Throwable)]()$/;"	l
buf	scala/testing/SUnit.scala	/^    val buf = new ArrayBuffer[Test]()$/;"	l
buf	scala/util/Random.scala	/^    val buf = new ArrayBuffer[T] ++= xs$/;"	l
buf	scala/xml/parsing/MarkupParserCommon.scala	/^    val buf = new StringBuilder      $/;"	l
buf	scala/xml/parsing/MarkupParserCommon.scala	/^    val buf = new StringBuilder$/;"	l
bufReader	scala/io/BufferedSource.scala	/^    val bufReader: BufferedReader = {$/;"	l
buff	scala/collection/immutable/TrieIterator.scala	/^      val buff = subIter.toBuffer$/;"	l
buff	scala/collection/parallel/immutable/ParHashMap.scala	/^        val buff = triter.toBuffer$/;"	l
buff	scala/collection/parallel/immutable/ParHashSet.scala	/^        val buff = triter.toBuffer$/;"	l
buff	scala/collection/parallel/mutable/ParHashTable.scala	/^      var buff = mutable.ArrayBuffer[Entry]()$/;"	l
buff	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^  val buff = new DoublingUnrolledBuffer[Any]$/;"	l
buffer	scala/collection/immutable/IntMap.scala	/^    val buffer = new scala.collection.mutable.ListBuffer[(Int, T)];$/;"	l
buffer	scala/collection/immutable/IntMap.scala	/^  var buffer = new Array[AnyRef](33);$/;"	l
buffer	scala/collection/immutable/LongMap.scala	/^    val buffer = new scala.collection.mutable.ListBuffer[(Long, T)];$/;"	l
buffer	scala/collection/immutable/LongMap.scala	/^  var buffer = new Array[AnyRef](65);$/;"	l
buffer	scala/reflect/generic/Trees.scala	/^      val buffer = new StringWriter()$/;"	l
buffer	scala/sys/process/BasicIO.scala	/^    val buffer = new Array[Byte](BufferSize)$/;"	l
buffer	scala/sys/process/ProcessBuilderImpl.scala	/^      val buffer = new StringBuffer$/;"	l
buffer	scala/sys/process/ProcessLogger.scala	/^    def buffer[T](f: => T): T = f$/;"	m
buffer	scala/sys/process/ProcessLogger.scala	/^  def buffer[T](f: => T): T = f$/;"	m
buffer	scala/sys/process/ProcessLogger.scala	/^  def buffer[T](f: => T): T$/;"	m
buffer	scala/xml/parsing/FactoryAdapter.scala	/^  val buffer      = new StringBuilder()$/;"	l
bufferAsJavaList	scala/collection/JavaConversions.scala	/^  implicit def bufferAsJavaList[A](b : mutable.Buffer[A]): ju.List[A] = b match {$/;"	m
bufferAsJavaListConverter	scala/collection/JavaConverters.scala	/^  implicit def bufferAsJavaListConverter[A](b : mutable.Buffer[A]): AsJava[ju.List[A]] = $/;"	m
bufferMsg	scala/actors/remote/TcpService.scala	/^    def bufferMsg(t: Throwable) {$/;"	m
buffered	scala/collection/Iterator.scala	/^  def buffered = new BufferedIterator[A] {    $/;"	m
bufferedReader	scala/io/BufferedSource.scala	/^  def bufferedReader() = new BufferedReader(reader(), bufferSize)$/;"	m
buffind	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^      var buffind = 0$/;"	l
buffind	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^      var buffind = stbuff$/;"	l
buildString	scala/collection/package.scala	/^    def buildString(closure: (Any => Unit) => Unit): String = {$/;"	m
buildString	scala/xml/Atom.scala	/^  def buildString(sb: StringBuilder) =$/;"	m
buildString	scala/xml/Group.scala	/^  def buildString(sb: StringBuilder)  = fail("toString(StringBuilder)")$/;"	m
buildString	scala/xml/MetaData.scala	/^  def buildString(sb: StringBuilder): StringBuilder = {$/;"	m
buildString	scala/xml/NamespaceBinding.scala	/^  def buildString(sb: StringBuilder, stop: NamespaceBinding): Unit = {$/;"	m
buildString	scala/xml/NamespaceBinding.scala	/^  def buildString(stop: NamespaceBinding): String = sbToString(buildString(_, stop))$/;"	m
buildString	scala/xml/Node.scala	/^  def buildString(stripComments: Boolean): String =$/;"	m
buildString	scala/xml/SpecialNode.scala	/^  def buildString(sb: StringBuilder): StringBuilder$/;"	m
buildString	scala/xml/dtd/ContentModel.scala	/^  def buildString(c: ContentModel, sb: StringBuilder): StringBuilder = c match {$/;"	m
buildString	scala/xml/dtd/ContentModel.scala	/^  def buildString(r: RegExp): String = sbToString(buildString(r, _))$/;"	m
buildString	scala/xml/dtd/ContentModel.scala	/^  def buildString(r: RegExp, sb: StringBuilder): StringBuilder =$/;"	m
buildString	scala/xml/dtd/ContentModel.scala	/^  def buildString(sb: StringBuilder): StringBuilder$/;"	m
buildString	scala/xml/dtd/Decl.scala	/^  def buildString(sb: StringBuilder): StringBuilder = {$/;"	m
buildString	scala/xml/dtd/Decl.scala	/^  def buildString(sb: StringBuilder): StringBuilder$/;"	m
buildString	scala/xml/dtd/ExternalID.scala	/^  def buildString(sb: StringBuilder): StringBuilder =$/;"	m
builderToProcess	scala/sys/process/Process.scala	/^  implicit def builderToProcess(builder: JProcessBuilder): ProcessBuilder = apply(builder)$/;"	m
buildersToProcess	scala/sys/process/Process.scala	/^  implicit def buildersToProcess[T](builders: Seq[T])(implicit convert: T => Source): Seq[Source] = applySeq(builders)$/;"	m
bv	scala/util/Sorting.scala	/^          var bv = x(b) compare v$/;"	l
by	scala/collection/immutable/NumericRange.scala	/^  def by(newStep: T): NumericRange[T] = copy(start, end, newStep)$/;"	m
by	scala/collection/immutable/Range.scala	/^    def by(x: T): U = f(x)$/;"	m
by	scala/collection/immutable/Range.scala	/^  def by(step: Int): Range = copy(start, end, step)$/;"	m
by	scala/math/Equiv.scala	/^  def by[T, S: Equiv](f: T => S): Equiv[T] =$/;"	m
by	scala/math/Ordering.scala	/^  def by[T, S](f: T => S)(implicit ord: Ordering[S]): Ordering[T] =$/;"	m
by	scala/util/control/Exception.scala	/^    def by(x: T): R = f(x)$/;"	m
byCores	scala/actors/scheduler/ThreadPoolConfig.scala	/^      val byCores = rt.availableProcessors() * 2$/;"	l
byName	scala/annotation/elidable.scala	/^  val byName: Map[String, Int] = Map($/;"	l
byte	scala/io/BytePickle.scala	/^  def byte: SPU[Byte] = new SPU[Byte] {$/;"	m
byte2Byte	scala/Predef.scala	/^  implicit def byte2Byte(x: Byte)           = java.lang.Byte.valueOf(x)$/;"	m
byte2ByteConflict	scala/Predef.scala	/^  implicit def byte2ByteConflict(x: Byte)           = new AnyRef$/;"	m
byte2double	scala/Predef.scala	/^  implicit def byte2double(x: Byte): Double = x.toDouble$/;"	m
byte2float	scala/Predef.scala	/^  implicit def byte2float(x: Byte): Float = x.toFloat$/;"	m
byte2int	scala/Predef.scala	/^  implicit def byte2int(x: Byte): Int = x.toInt$/;"	m
byte2long	scala/Predef.scala	/^  implicit def byte2long(x: Byte): Long = x.toLong$/;"	m
byte2short	scala/Predef.scala	/^  implicit def byte2short(x: Byte): Short = x.toShort$/;"	m
byteArrayOps	scala/Predef.scala	/^  implicit def byteArrayOps(xs: Array[Byte]): ArrayOps[Byte] = new ArrayOps.ofByte(xs)$/;"	m
byteCount	scala/sys/process/BasicIO.scala	/^      val byteCount = in.read(buffer)$/;"	l
byteValue	scala/reflect/generic/Constants.scala	/^    def byteValue: Byte = tag match {$/;"	m
byteWrapper	scala/LowPriorityImplicits.scala	/^  implicit def byteWrapper(x: Byte)       = new runtime.RichByte(x)$/;"	m
bytearray	scala/io/BytePickle.scala	/^  def bytearray: SPU[Array[Byte]] = {$/;"	m
bytes	scala/actors/remote/NetKernel.scala	/^    val bytes = service.serializer.serialize(msg)$/;"	l
bytes	scala/actors/remote/Serializer.scala	/^      val bytes = new Array[Byte](length)$/;"	l
bytes	scala/actors/remote/Serializer.scala	/^    val bytes = readBytes(inputStream)$/;"	l
bytes	scala/actors/remote/Serializer.scala	/^    val bytes = serialize(obj)$/;"	l
bytes	scala/io/Codec.scala	/^    val bytes = new Array[Byte](bbuffer.remaining())$/;"	l
bytes	scala/io/UTF8Codec.scala	/^    val bytes = Codec toUTF8 src.slice(from, from + len)$/;"	l
bytes	scala/reflect/ScalaLongSignature.java	/^    public String[] bytes();$/;"	m	interface:ScalaLongSignature
bytes	scala/reflect/ScalaSignature.java	/^    public String bytes();$/;"	m	interface:ScalaSignature
bytes	scala/reflect/generic/PickleBuffer.scala	/^      val bytes = data.slice(readIndex, len + readIndex)$/;"	l
bytes	scala/reflect/generic/PickleBuffer.scala	/^  var bytes = data$/;"	l
bytes	scala/xml/include/sax/EncodingHeuristics.scala	/^    val bytes = (in.read, in.read, in.read, in.read)$/;"	l
bytes1	scala/reflect/generic/PickleBuffer.scala	/^    val bytes1 = new Array[Byte](bytes.length * 2)$/;"	l
bytesToRead	scala/xml/include/sax/EncodingHeuristics.scala	/^    val bytesToRead = 1024 \/\/ enough to read most XML encoding declarations$/;"	l
c	scala/actors/ActorCanReply.scala	/^    val c = new Channel[A](Actor.self(scheduler))$/;"	l
c	scala/actors/Channel.scala	/^    val c = new Channel[A](Actor.self(receiver.scheduler))$/;"	l
c	scala/actors/Future.scala	/^    val c = new Channel[T](Actor.self(DaemonScheduler))$/;"	l
c	scala/actors/Future.scala	/^    val c = new Channel[Unit](Actor.self(DaemonScheduler))$/;"	l
c	scala/collection/mutable/HashTable.scala	/^    var c = target - 1;$/;"	l
c	scala/collection/mutable/ListBuffer.scala	/^      var c = count1$/;"	l
c	scala/collection/parallel/mutable/ParArray.scala	/^      val c = count_quick(p, arr, until, i)$/;"	l
c	scala/collection/parallel/mutable/ParHashMap.scala	/^    val c = table.hashTableContents$/;"	l
c	scala/collection/parallel/mutable/ParHashTable.scala	/^      var c = 0$/;"	l
c	scala/reflect/NameTransformer.scala	/^      val c = name charAt i$/;"	l
c	scala/reflect/NameTransformer.scala	/^    val c = (code.charAt(1) - 'a') * 26 + code.charAt(2) - 'a'$/;"	l
c	scala/runtime/ScalaRunTime.scala	/^      var c = startMagicA$/;"	l
c	scala/util/MurmurHash.scala	/^    var c = 1$/;"	l
c	scala/util/MurmurHash.scala	/^    var c = hiddenMagicA$/;"	l
c	scala/util/Sorting.scala	/^        var c = off + len - 1$/;"	l
c	scala/xml/Utility.scala	/^      var c = it.next$/;"	l
c	scala/xml/dtd/ExternalID.scala	/^    val c = if (s contains '"') '\\'' else '"'$/;"	l
c	scala/xml/include/sax/XIncludeFilter.scala	/^      val c = new Array[Char](1024)$/;"	l
c	scala/xml/include/sax/XIncluder.scala	/^        val c = ch(start+i);$/;"	l
c	scala/xml/parsing/FactoryAdapter.scala	/^        val c = it.next$/;"	l
c	scala/xml/parsing/MarkupParserCommon.scala	/^    var c = it.next$/;"	l
c	scala/xml/persistent/CachedFileStorage.scala	/^    val c   = fos.getChannel()$/;"	l
cache	scala/xml/factory/NodeFactory.scala	/^  val cache = new collection.mutable.HashMap[Int, List[A]]$/;"	l
cached	scala/Symbol.scala	/^    def cached(): V = {$/;"	m
cached	scala/util/parsing/combinator/PackratParsers.scala	/^    val cached = in.getFromCache(p)$/;"	l
call	scala/actors/ReactorTask.scala	/^  def call() = run()$/;"	m
call	scala/actors/scheduler/ExecutorScheduler.scala	/^    def call() { fun }$/;"	m
call	scala/actors/threadpool/Callable.java	/^    Object call() throws Exception;$/;"	m	interface:Callable
call	scala/actors/threadpool/Executors.java	/^        public Object call() throws Exception {$/;"	m	class:Executors.PrivilegedCallable
call	scala/actors/threadpool/Executors.java	/^        public Object call() throws Exception {$/;"	m	class:Executors.PrivilegedCallableUsingCurrentClassLoader
call	scala/actors/threadpool/Executors.java	/^        public Object call() {$/;"	m	class:Executors.RunnableAdapter
call	scala/concurrent/ThreadPoolRunner.scala	/^    def call() = fun()$/;"	m
callable	scala/actors/threadpool/Executors.java	/^    public static Callable callable(Runnable task) {$/;"	m	class:Executors
callable	scala/actors/threadpool/Executors.java	/^    public static Callable callable(Runnable task, Object result) {$/;"	m	class:Executors
callable	scala/actors/threadpool/Executors.java	/^    public static Callable callable(final PrivilegedAction action) {$/;"	m	class:Executors
callable	scala/actors/threadpool/Executors.java	/^    public static Callable callable(final PrivilegedExceptionAction action) {$/;"	m	class:Executors
callable	scala/actors/threadpool/FutureTask.java	/^    private final Callable callable;$/;"	f	class:FutureTask	file:
canAddBinder	scala/util/parsing/ast/Binders.scala	/^    def canAddBinder(b: binderType): Boolean = !binds(b)$/;"	m
canBuildFrom	scala/Array.scala	/^  implicit def canBuildFrom[T](implicit m: ClassManifest[T]): CanBuildFrom[Array[_], T, Array[T]] = $/;"	m
canBuildFrom	scala/Enumeration.scala	/^    implicit def canBuildFrom: CanBuildFrom[ValueSet, Value, ValueSet] = $/;"	m
canBuildFrom	scala/collection/BitSet.scala	/^  implicit def canBuildFrom: CanBuildFrom[BitSet, Int, BitSet] = bitsetCanBuildFrom$/;"	m
canBuildFrom	scala/collection/GenIterable.scala	/^  implicit def canBuildFrom[A] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/GenMap.scala	/^  implicit def canBuildFrom[A, B]: CanBuildFrom[Coll, (A, B), GenMap[A, B]] = new MapCanBuildFrom[A, B]$/;"	m
canBuildFrom	scala/collection/GenSeq.scala	/^  implicit def canBuildFrom[A] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/GenSet.scala	/^  implicit def canBuildFrom[A] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/GenTraversable.scala	/^  implicit def canBuildFrom[A] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/IndexedSeq.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, IndexedSeq[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/Iterable.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Iterable[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/IterableView.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, IterableView[A, Iterable[_]]] = $/;"	m
canBuildFrom	scala/collection/LinearSeq.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, LinearSeq[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/Map.scala	/^  implicit def canBuildFrom[A, B]: CanBuildFrom[Coll, (A, B), Map[A, B]] = new MapCanBuildFrom[A, B]$/;"	m
canBuildFrom	scala/collection/Seq.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Seq[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/SeqView.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, SeqView[A, Seq[_]]] = $/;"	m
canBuildFrom	scala/collection/Set.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Set[A]] = setCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/SortedMap.scala	/^  implicit def canBuildFrom[A, B](implicit ord: Ordering[A]): CanBuildFrom[Coll, (A, B), SortedMap[A, B]] = new SortedMapCanBuildFrom[A, B]$/;"	m
canBuildFrom	scala/collection/SortedSet.scala	/^  implicit def canBuildFrom[A](implicit ord: Ordering[A]): CanBuildFrom[Coll, A, SortedSet[A]] = new SortedSetCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/Traversable.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Traversable[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/TraversableView.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, TraversableView[A, Traversable[_]]] = $/;"	m
canBuildFrom	scala/collection/immutable/BitSet.scala	/^  implicit def canBuildFrom: CanBuildFrom[BitSet, Int, BitSet] = bitsetCanBuildFrom$/;"	m
canBuildFrom	scala/collection/immutable/HashMap.scala	/^  implicit def canBuildFrom[A, B]: CanBuildFrom[Coll, (A, B), HashMap[A, B]] = new MapCanBuildFrom[A, B]$/;"	m
canBuildFrom	scala/collection/immutable/HashSet.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, HashSet[A]] = setCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/immutable/IndexedSeq.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, IndexedSeq[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/immutable/IntMap.scala	/^  implicit def canBuildFrom[A, B] = new CanBuildFrom[IntMap[A], (Int, B), IntMap[B]] {$/;"	m
canBuildFrom	scala/collection/immutable/Iterable.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Iterable[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/immutable/LinearSeq.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, LinearSeq[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/immutable/List.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, List[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/immutable/ListMap.scala	/^  implicit def canBuildFrom[A, B]: CanBuildFrom[Coll, (A, B), ListMap[A, B]] =$/;"	m
canBuildFrom	scala/collection/immutable/ListSet.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, ListSet[A]] = setCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/immutable/LongMap.scala	/^  implicit def canBuildFrom[A, B] = new CanBuildFrom[LongMap[A], (Long, B), LongMap[B]] {$/;"	m
canBuildFrom	scala/collection/immutable/Map.scala	/^  implicit def canBuildFrom[A, B]: CanBuildFrom[Coll, (A, B), Map[A, B]] = new MapCanBuildFrom[A, B]$/;"	m
canBuildFrom	scala/collection/immutable/Queue.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Queue[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/immutable/Seq.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Seq[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/immutable/Set.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Set[A]] = setCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/immutable/SortedMap.scala	/^  implicit def canBuildFrom[A, B](implicit ord: Ordering[A]): CanBuildFrom[Coll, (A, B), SortedMap[A, B]] = new SortedMapCanBuildFrom[A, B]$/;"	m
canBuildFrom	scala/collection/immutable/SortedSet.scala	/^  implicit def canBuildFrom[A](implicit ord: Ordering[A]): CanBuildFrom[Coll, A, SortedSet[A]] = new SortedSetCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/immutable/Stack.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Stack[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/immutable/Stream.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Stream[A]] = new StreamCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/immutable/Traversable.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Traversable[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/immutable/TreeMap.scala	/^  implicit def canBuildFrom[A, B](implicit ord: Ordering[A]): CanBuildFrom[Coll, (A, B), TreeMap[A, B]] = new SortedMapCanBuildFrom[A, B]$/;"	m
canBuildFrom	scala/collection/immutable/WrappedString.scala	/^  implicit def canBuildFrom: CanBuildFrom[WrappedString, Char, WrappedString] = new CanBuildFrom[WrappedString, Char, WrappedString] {$/;"	m
canBuildFrom	scala/collection/mutable/ArrayBuffer.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, ArrayBuffer[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/ArraySeq.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, ArraySeq[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/ArrayStack.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, ArrayStack[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/BitSet.scala	/^  implicit def canBuildFrom: CanBuildFrom[BitSet, Int, BitSet] = bitsetCanBuildFrom$/;"	m
canBuildFrom	scala/collection/mutable/Buffer.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Buffer[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/DoubleLinkedList.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, DoubleLinkedList[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/HashMap.scala	/^  implicit def canBuildFrom[A, B]: CanBuildFrom[Coll, (A, B), HashMap[A, B]] = new MapCanBuildFrom[A, B]$/;"	m
canBuildFrom	scala/collection/mutable/HashSet.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, HashSet[A]] = setCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/IndexedSeq.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, IndexedSeq[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/IndexedSeqView.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, SeqView[A, Seq[_]]] = $/;"	m
canBuildFrom	scala/collection/mutable/Iterable.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Iterable[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/LinearSeq.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, LinearSeq[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/LinkedHashMap.scala	/^  implicit def canBuildFrom[A, B]: CanBuildFrom[Coll, (A, B), LinkedHashMap[A, B]] = new MapCanBuildFrom[A, B]$/;"	m
canBuildFrom	scala/collection/mutable/LinkedHashSet.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, LinkedHashSet[A]] = setCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/LinkedList.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, LinkedList[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/ListBuffer.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, ListBuffer[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/ListMap.scala	/^  implicit def canBuildFrom[A, B]: CanBuildFrom[Coll, (A, B), ListMap[A, B]] = new MapCanBuildFrom[A, B]$/;"	m
canBuildFrom	scala/collection/mutable/Map.scala	/^  implicit def canBuildFrom[A, B]: CanBuildFrom[Coll, (A, B), Map[A, B]] = new MapCanBuildFrom[A, B]$/;"	m
canBuildFrom	scala/collection/mutable/MutableList.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, MutableList[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/PriorityQueue.scala	/^  implicit def canBuildFrom[A](implicit ord: Ordering[A]): CanBuildFrom[Coll, A, PriorityQueue[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/Queue.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Queue[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/ResizableArray.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, ResizableArray[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/Seq.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Seq[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/Set.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Set[A]] = setCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/Stack.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Stack[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/Traversable.scala	/^  implicit def canBuildFrom[A]: CanBuildFrom[Coll, A, Traversable[A]] = new GenericCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/mutable/UnrolledBuffer.scala	/^  implicit def canBuildFrom[T](implicit m: ClassManifest[T]): CanBuildFrom[Coll, T, UnrolledBuffer[T]] = $/;"	m
canBuildFrom	scala/collection/mutable/WeakHashMap.scala	/^  implicit def canBuildFrom[A, B]: CanBuildFrom[Coll, (A, B), WeakHashMap[A, B]] = new MapCanBuildFrom[A, B]$/;"	m
canBuildFrom	scala/collection/mutable/WrappedArray.scala	/^  implicit def canBuildFrom[T](implicit m: ClassManifest[T]): CanBuildFrom[WrappedArray[_], T, WrappedArray[T]] =$/;"	m
canBuildFrom	scala/collection/parallel/ParIterable.scala	/^  implicit def canBuildFrom[T]: CanCombineFrom[Coll, T, ParIterable[T]] = new GenericCanCombineFrom[T]$/;"	m
canBuildFrom	scala/collection/parallel/ParIterableView.scala	/^  implicit def canBuildFrom[T]: CanCombineFrom[Coll, T, ParIterableView[T, ParIterable[T], Iterable[T]]] = $/;"	m
canBuildFrom	scala/collection/parallel/ParMap.scala	/^  implicit def canBuildFrom[K, V]: CanCombineFrom[Coll, (K, V), ParMap[K, V]] = new CanCombineFromMap[K, V]$/;"	m
canBuildFrom	scala/collection/parallel/ParSeq.scala	/^  implicit def canBuildFrom[T]: CanCombineFrom[Coll, T, ParSeq[T]] = new GenericCanCombineFrom[T]$/;"	m
canBuildFrom	scala/collection/parallel/ParSeqView.scala	/^  implicit def canBuildFrom[T]: CanCombineFrom[Coll, T, ParSeqView[T, ParSeq[T], Seq[T]]] = $/;"	m
canBuildFrom	scala/collection/parallel/ParSet.scala	/^  implicit def canBuildFrom[T]: CanCombineFrom[Coll, T, ParSet[T]] = new GenericCanCombineFrom[T]$/;"	m
canBuildFrom	scala/collection/parallel/immutable/ParHashMap.scala	/^  implicit def canBuildFrom[K, V]: CanCombineFrom[Coll, (K, V), ParHashMap[K, V]] = {$/;"	m
canBuildFrom	scala/collection/parallel/immutable/ParHashSet.scala	/^  implicit def canBuildFrom[T]: CanCombineFrom[Coll, T, ParHashSet[T]] =$/;"	m
canBuildFrom	scala/collection/parallel/immutable/ParIterable.scala	/^  implicit def canBuildFrom[T]: CanCombineFrom[Coll, T, ParIterable[T]] =$/;"	m
canBuildFrom	scala/collection/parallel/immutable/ParMap.scala	/^  implicit def canBuildFrom[K, V]: CanCombineFrom[Coll, (K, V), ParMap[K, V]] = new CanCombineFromMap[K, V]$/;"	m
canBuildFrom	scala/collection/parallel/immutable/ParSeq.scala	/^  implicit def canBuildFrom[T]: CanCombineFrom[Coll, T, ParSeq[T]] = new GenericCanCombineFrom[T]$/;"	m
canBuildFrom	scala/collection/parallel/immutable/ParSet.scala	/^  implicit def canBuildFrom[T]: CanCombineFrom[Coll, T, ParSet[T]] = new GenericCanCombineFrom[T]$/;"	m
canBuildFrom	scala/collection/parallel/immutable/ParVector.scala	/^  implicit def canBuildFrom[T]: CanCombineFrom[Coll, T, ParVector[T]] =$/;"	m
canBuildFrom	scala/collection/parallel/mutable/ParArray.scala	/^  implicit def canBuildFrom[T]: CanCombineFrom[Coll, T, ParArray[T]] = new GenericCanCombineFrom[T]$/;"	m
canBuildFrom	scala/collection/parallel/mutable/ParHashMap.scala	/^  implicit def canBuildFrom[K, V]: CanCombineFrom[Coll, (K, V), ParHashMap[K, V]] = new CanCombineFromMap[K, V]$/;"	m
canBuildFrom	scala/collection/parallel/mutable/ParHashSet.scala	/^  implicit def canBuildFrom[T]: CanCombineFrom[Coll, T, ParHashSet[T]] = new GenericCanCombineFrom[T]$/;"	m
canBuildFrom	scala/collection/parallel/mutable/ParIterable.scala	/^  implicit def canBuildFrom[T]: CanCombineFrom[Coll, T, ParIterable[T]] =$/;"	m
canBuildFrom	scala/collection/parallel/mutable/ParMap.scala	/^  implicit def canBuildFrom[K, V]: CanCombineFrom[Coll, (K, V), ParMap[K, V]] = new CanCombineFromMap[K, V]$/;"	m
canBuildFrom	scala/collection/parallel/mutable/ParSeq.scala	/^  implicit def canBuildFrom[T]: CanCombineFrom[Coll, T, ParSeq[T]] = new GenericCanCombineFrom[T]$/;"	m
canBuildFrom	scala/collection/parallel/mutable/ParSet.scala	/^  implicit def canBuildFrom[T]: CanCombineFrom[Coll, T, ParSet[T]] = new GenericCanCombineFrom[T]$/;"	m
canBuildFrom	scala/xml/NodeSeq.scala	/^  implicit def canBuildFrom: CanBuildFrom[Coll, Node, NodeSeq] = $/;"	m
canEqual	scala/Equals.scala	/^  def canEqual(that: Any): Boolean$/;"	m
canEqual	scala/collection/parallel/ParIterableLike.scala	/^  def canEqual(other: Any) = true$/;"	m
canEqual	scala/reflect/ClassManifest.scala	/^  def canEqual(other: Any) = other match {$/;"	m
canPipeTo	scala/sys/process/ProcessBuilder.scala	/^  def canPipeTo: Boolean$/;"	m
canPipeTo	scala/sys/process/ProcessBuilderImpl.scala	/^    def canPipeTo = false$/;"	m
cancel	scala/actors/threadpool/Future.java	/^    boolean cancel(boolean mayInterruptIfRunning);$/;"	m	interface:Future
cancel	scala/actors/threadpool/FutureTask.java	/^    public boolean cancel(boolean mayInterruptIfRunning) {$/;"	m	class:FutureTask
cancelledWaitingReader	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized void cancelledWaitingReader() { --waitingReaders_; }$/;"	m	class:ReentrantReadWriteLock.Sync
cancelledWaitingWriter	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized void cancelledWaitingWriter() { --waitingWriters_; }$/;"	m	class:ReentrantReadWriteLock.Sync
cannotMatch	scala/reflect/ClassManifest.scala	/^    def cannotMatch = {$/;"	m
capacity	scala/actors/threadpool/LinkedBlockingQueue.java	/^    private final int capacity;$/;"	f	class:LinkedBlockingQueue	file:
capacity	scala/collection/mutable/StringBuilder.scala	/^  def capacity: Int = underlying.capacity()$/;"	m
capacity_	scala/collection/mutable/StringBuilder.scala	/^  def capacity_=(n: Int) { ensureCapacity(n) }$/;"	m
capitalize	scala/collection/immutable/StringLike.scala	/^  def capitalize: String =$/;"	m
capture	scala/xml/parsing/FactoryAdapter.scala	/^  var capture: Boolean = false$/;"	l
captureExceptions	scala/util/continuations/ControlContext.scala	/^          var captureExceptions = true$/;"	l
captureText	scala/xml/parsing/FactoryAdapter.scala	/^  def captureText(): Unit = {$/;"	m
cases	scala/reflect/generic/UnPickler.scala	/^          val cases = until(end, readCaseDefRef)$/;"	l
cat	scala/sys/process/Process.scala	/^  def cat(file: Source, files: Source*): ProcessBuilder = cat(file +: files)$/;"	m
cat	scala/sys/process/Process.scala	/^  def cat(files: Seq[Source]): ProcessBuilder = {$/;"	m
cat	scala/sys/process/ProcessBuilder.scala	/^    def cat = toSource$/;"	m
catchBreak	scala/util/control/Breaks.scala	/^    def catchBreak(onBreak: => Unit) = try {$/;"	m
catchBreak	scala/util/control/Breaks.scala	/^    def catchBreak(onBreak: => Unit): Unit$/;"	m
catches	scala/reflect/generic/UnPickler.scala	/^          val catches = until(end, readCaseDefRef)$/;"	l
catching	scala/util/control/Exception.scala	/^  def catching[T](c: Catcher[T]): Catch[T] = new Catch(c)$/;"	m
catching	scala/util/control/Exception.scala	/^  def catching[T](exceptions: Class[_]*): Catch[T] =$/;"	m
catchingPromiscuously	scala/util/control/Exception.scala	/^  def catchingPromiscuously[T](c: Catcher[T]): Catch[T]         = new Catch(c, None, _ => false)$/;"	m
catchingPromiscuously	scala/util/control/Exception.scala	/^  def catchingPromiscuously[T](exceptions: Class[_]*): Catch[T] = catchingPromiscuously(pfFromExceptions(exceptions : _*))$/;"	m
cb	scala/collection/Parallelizable.scala	/^    val cb = parCombiner$/;"	l
cb	scala/collection/generic/GenericParTemplate.scala	/^    val cb = companion.newCombiner[A]$/;"	l
cb	scala/collection/generic/GenericParTemplate.scala	/^    val cb = companion.newCombiner[B]$/;"	l
cb	scala/collection/generic/GenericParTemplate.scala	/^    val cb = mapCompanion.newCombiner[K, V]$/;"	l
cb	scala/collection/generic/GenericParTemplate.scala	/^    val cb = mapCompanion.newCombiner[P, Q]$/;"	l
cb	scala/collection/parallel/ParIterableLike.scala	/^        val cb = pbf(repr)$/;"	l
cb	scala/collection/parallel/ParIterableLike.scala	/^      val cb = mcf()$/;"	l
cb	scala/collection/parallel/ParIterableLike.scala	/^      val cb = reuse(prev, cbf(self.repr))$/;"	l
cb	scala/collection/parallel/ParIterableLike.scala	/^    val cb = newCombiner$/;"	l
cb	scala/collection/parallel/mutable/ParArray.scala	/^    val cb = ParArrayCombiner[T]()$/;"	l
cb	scala/collection/parallel/package.scala	/^      val cb = mutable.ParArrayCombiner[T]()$/;"	l
cbf	scala/collection/parallel/ParIterableLike.scala	/^    val cbf = bf.asParallel$/;"	l
cbrt	scala/math/package.scala	/^  def cbrt(x: Double): Double = java.lang.Math.cbrt(x)$/;"	m
cbuffer	scala/io/Codec.scala	/^    val cbuffer = UTF8 decode bbuffer$/;"	l
cbuffer	scala/io/Codec.scala	/^    val cbuffer = java.nio.CharBuffer wrap cs$/;"	l
cc1	scala/util/continuations/ControlContext.scala	/^              val cc1 = pf(t)$/;"	l
ccl	scala/actors/threadpool/Executors.java	/^        private final ClassLoader ccl;$/;"	f	class:Executors.PrivilegedCallableUsingCurrentClassLoader	file:
ccl	scala/actors/threadpool/Executors.java	/^        private final ClassLoader ccl;$/;"	f	class:Executors.PrivilegedThreadFactory	file:
ccol	scala/io/Source.scala	/^    var ccol = 1$/;"	l
ce	scala/collection/parallel/mutable/ParHashMap.scala	/^      var ce = olde$/;"	l
ceil	scala/MathCommon.scala	/^  def ceil(x: Double): Double = java.lang.Math.ceil(x)$/;"	m
ceil	scala/runtime/RichDouble.scala	/^  def ceil: Double  = math.ceil(self)$/;"	m
ceil	scala/runtime/RichFloat.scala	/^  def ceil: Float  = math.ceil(self).toFloat$/;"	m
cell	scala/collection/mutable/Queue.scala	/^      var cell = start$/;"	l
ch	scala/actors/Future.scala	/^  def ch: InputChannel[Any] = inputChannel$/;"	m
ch	scala/io/Source.scala	/^      val ch = iter.next$/;"	l
ch	scala/io/Source.scala	/^    var ch: Char = _$/;"	l
ch	scala/io/Source.scala	/^  def ch = positioner.ch$/;"	m
ch	scala/xml/Utility.scala	/^    val ch = if (s contains '"') '\\'' else '"'$/;"	l
ch	scala/xml/parsing/MarkupParser.scala	/^  var ch: Char = _$/;"	l
ch	scala/xml/parsing/MarkupParserCommon.scala	/^  def ch: Char$/;"	m
ch	scala/xml/transform/BasicTransformer.scala	/^        val ch = n.child$/;"	l
ch1	scala/reflect/NameTransformer.scala	/^        val ch1 = name.charAt(i+1)$/;"	l
ch2	scala/reflect/NameTransformer.scala	/^          val ch2 = name.charAt(i+2)$/;"	l
ch_returning_nextch	scala/xml/parsing/MarkupParser.scala	/^  def ch_returning_nextch = { val res = ch ; nextch ; res }$/;"	m
ch_returning_nextch	scala/xml/parsing/MarkupParserCommon.scala	/^  def ch_returning_nextch: Char$/;"	m
chain	scala/Function.scala	/^  def chain[a](fs: Seq[a => a]): a => a = { x => (x \/: fs) ((x, f) => f(x)) }$/;"	m
chain	scala/collection/parallel/Tasks.scala	/^      var chain = "chain: "$/;"	l
chain	scala/collection/parallel/mutable/LazyCombiner.scala	/^  val chain: ArrayBuffer[Buff]$/;"	l
chainString	scala/collection/mutable/DefaultEntry.scala	/^  def chainString = {$/;"	m
chainl1	scala/util/parsing/combinator/Parsers.scala	/^  def chainl1[T, U](first: => Parser[T], p: => Parser[U], q: => Parser[(T, U) => T]): Parser[T] $/;"	m
chainl1	scala/util/parsing/combinator/Parsers.scala	/^  def chainl1[T](p: => Parser[T], q: => Parser[(T, T) => T]): Parser[T]  $/;"	m
chainr1	scala/util/parsing/combinator/Parsers.scala	/^  def chainr1[T, U](p: => Parser[T], q: => Parser[(T, U) => U], combine: (T, U) => U, first: U): Parser[U]$/;"	m
channelMap	scala/actors/remote/Proxy.scala	/^  var channelMap = new HashMap[Symbol, OutputChannel[Any]]$/;"	l
char2Character	scala/Predef.scala	/^  implicit def char2Character(x: Char)      = java.lang.Character.valueOf(x)$/;"	m
char2CharacterConflict	scala/Predef.scala	/^  implicit def char2CharacterConflict(x: Char)      = new AnyRef$/;"	m
char2double	scala/Predef.scala	/^  implicit def char2double(x: Char): Double = x.toDouble$/;"	m
char2float	scala/Predef.scala	/^  implicit def char2float(x: Char): Float = x.toFloat$/;"	m
char2int	scala/Predef.scala	/^  implicit def char2int(x: Char): Int = x.toInt$/;"	m
char2long	scala/Predef.scala	/^  implicit def char2long(x: Char): Long = x.toLong$/;"	m
charArrayOps	scala/Predef.scala	/^  implicit def charArrayOps(xs: Array[Char]): ArrayOps[Char] = new ArrayOps.ofChar(xs)$/;"	m
charAt	scala/Predef.scala	/^    def charAt(index: Int): Char = xs(index)$/;"	m
charAt	scala/collection/mutable/StringBuilder.scala	/^  def charAt(index: Int): Char = underlying charAt index$/;"	m
charOK	scala/xml/parsing/TokenTests.scala	/^    def charOK(c: Char) = isAlphaDigit(c) || ("._-" contains c)$/;"	m
charSeq	scala/util/parsing/json/Lexer.scala	/^  def charSeq: Parser[String] =$/;"	m
charValue	scala/math/BigDecimal.scala	/^  def charValue   = intValue.toChar$/;"	m
charValue	scala/math/BigInt.scala	/^  def charValue   = intValue.toChar$/;"	m
charValue	scala/reflect/generic/Constants.scala	/^    def charValue: Char = tag match {$/;"	m
charWrapper	scala/LowPriorityImplicits.scala	/^  implicit def charWrapper(c: Char)       = new runtime.RichChar(c)$/;"	m
characters	scala/xml/include/sax/XIncluder.scala	/^  def characters(ch: Array[Char], start: Int, length: Int) {$/;"	m
chars	scala/collection/immutable/StringLike.scala	/^      val chars = toString.toCharArray$/;"	l
chars	scala/io/Codec.scala	/^    val chars = new Array[Char](cbuffer.remaining())$/;"	l
chars	scala/io/UTF8Codec.scala	/^    val chars = Codec fromUTF8 src.slice(from, from + len)$/;"	l
chars	scala/util/parsing/combinator/token/Tokens.scala	/^    def chars = "*** error: "+msg$/;"	m
chars	scala/util/parsing/combinator/token/Tokens.scala	/^    def chars = "<eof>"$/;"	m
chars	scala/util/parsing/combinator/token/Tokens.scala	/^    def chars: String$/;"	m
charsRead	scala/xml/include/sax/XIncludeFilter.scala	/^      var charsRead: Int = 0  \/\/ bogus init value$/;"	l
charset2codec	scala/io/Codec.scala	/^  implicit def charset2codec(c: Charset) = apply(c)$/;"	m
check	scala/collection/parallel/mutable/ParHashMap.scala	/^    def check(e: HashEntry[K, DefaultEntry[K, V]]): List[String] = if (e eq null) Nil else$/;"	m
check	scala/xml/dtd/ElementValidator.scala	/^  def check(md: MetaData): Boolean = {$/;"	m
check	scala/xml/dtd/ElementValidator.scala	/^  def check(nodes: Seq[Node]): Boolean = contentModel match {$/;"	m
checkAttributeValue	scala/xml/Utility.scala	/^  def checkAttributeValue(value: String): String = {$/;"	m
checkCancellationOnInterrupt	scala/actors/threadpool/SynchronousQueue.java	/^        private void checkCancellationOnInterrupt(InterruptedException ie)$/;"	m	class:SynchronousQueue.Node	file:
checkInitialized	scala/runtime/ScalaRunTime.scala	/^  def checkInitialized[T <: AnyRef](x: T): T = $/;"	m
checkInput	scala/io/Position.scala	/^  def checkInput(line: Int, column: Int) {$/;"	m
checkInput	scala/io/Position.scala	/^  def checkInput(line: Int, column: Int): Unit$/;"	m
checkInput	scala/io/Source.scala	/^    def checkInput(line: Int, column: Int): Unit = ()$/;"	m
checkKeyword	scala/util/parsing/json/Lexer.scala	/^  def checkKeyword(xs : List[Any]) = {$/;"	m
checkPubID	scala/xml/parsing/TokenTests.scala	/^  def checkPubID(s: String) = s forall isPubIDChar$/;"	m
checkShutdownAccess	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private void checkShutdownAccess() {$/;"	m	class:ThreadPoolExecutor	file:
checkSysID	scala/xml/parsing/TokenTests.scala	/^  def checkSysID(s: String) = List('"', '\\'') exists (c => !(s contains c))$/;"	m
child	scala/xml/Elem.scala	/^  val child: Node*)$/;"	l
child	scala/xml/Node.scala	/^  def child: Seq[Node]$/;"	m
child	scala/xml/SpecialNode.scala	/^  final def child = Nil$/;"	m
child	scala/xml/dtd/ExternalID.scala	/^  def child = Nil$/;"	m
children	scala/reflect/generic/Trees.scala	/^    def children: List[Tree] = {$/;"	m
children	scala/xml/Document.scala	/^  var children: Seq[Node] = _$/;"	l
children	scala/xml/parsing/MarkupParser.scala	/^    var children: NodeSeq = null$/;"	l
choice	scala/concurrent/pilib.scala	/^  def choice[A](s: GP[A]*): A = {$/;"	m
choiceRest	scala/xml/dtd/ContentModelParser.scala	/^  def choiceRest( p:RegExp ) = { $/;"	m
chrExcept	scala/util/parsing/combinator/lexical/Lexical.scala	/^  def chrExcept(cs: Char*) = elem("", ch => (cs forall (ch !=)))$/;"	m
chunkarr	scala/collection/mutable/UnrolledBuffer.scala	/^        val chunkarr = unrolled.array$/;"	l
chunkarr	scala/collection/parallel/immutable/ParHashMap.scala	/^        val chunkarr = unrolled.array$/;"	l
chunkarr	scala/collection/parallel/immutable/ParHashSet.scala	/^        val chunkarr = unrolled.array$/;"	l
chunkarr	scala/collection/parallel/mutable/ParHashMap.scala	/^        val chunkarr = unrolled.array$/;"	l
chunkarr	scala/collection/parallel/mutable/ParHashSet.scala	/^        val chunkarr = unrolled.array$/;"	l
chunksize	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^        val chunksize = if (totalleft < (currbuff.size - ind)) totalleft else currbuff.size - ind$/;"	l
chunksz	scala/collection/mutable/UnrolledBuffer.scala	/^        val chunksz = unrolled.size$/;"	l
chunksz	scala/collection/parallel/immutable/ParHashMap.scala	/^        val chunksz = unrolled.size$/;"	l
chunksz	scala/collection/parallel/immutable/ParHashSet.scala	/^        val chunksz = unrolled.size$/;"	l
chunksz	scala/collection/parallel/mutable/ParHashMap.scala	/^        val chunksz = unrolled.size$/;"	l
chunksz	scala/collection/parallel/mutable/ParHashSet.scala	/^        val chunksz = unrolled.size$/;"	l
classLoader	scala/actors/remote/RemoteActor.scala	/^  def classLoader: ClassLoader = cl$/;"	m
classLoader_	scala/actors/remote/RemoteActor.scala	/^  def classLoader_=(x: ClassLoader) { cl = x }$/;"	m
classManifest	scala/Predef.scala	/^  def classManifest[T](implicit m: ClassManifest[T]) = m$/;"	m
classManifestCompanion	scala/collection/generic/GenericClassManifestTraversableTemplate.scala	/^  def classManifestCompanion: GenericClassManifestCompanion[CC]$/;"	m
classManifestCompanion	scala/collection/mutable/UnrolledBuffer.scala	/^  def classManifestCompanion = UnrolledBuffer$/;"	m
classOf	scala/Predef.scala	/^  def classOf[T]: Class[T] = null$/;"	m
classType	scala/reflect/ClassManifest.scala	/^  def classType[T <: AnyRef](clazz: JClass[_]): ClassManifest[T] =$/;"	m
classType	scala/reflect/ClassManifest.scala	/^  def classType[T <: AnyRef](clazz: JClass[_], arg1: OptManifest[_], args: OptManifest[_]*): ClassManifest[T] =$/;"	m
classType	scala/reflect/ClassManifest.scala	/^  def classType[T <: AnyRef](prefix: OptManifest[_], clazz: JClass[_], args: OptManifest[_]*): ClassManifest[T] =$/;"	m
classType	scala/reflect/Manifest.scala	/^  def classType[T](clazz: Predef.Class[T], arg1: Manifest[_], args: Manifest[_]*): Manifest[T] =$/;"	m
classType	scala/reflect/Manifest.scala	/^  def classType[T](clazz: Predef.Class[_]): Manifest[T] =$/;"	m
classType	scala/reflect/Manifest.scala	/^  def classType[T](prefix: Manifest[_], clazz: Predef.Class[_], args: Manifest[_]*): Manifest[T] =$/;"	m
classfileAnnotArgManifest	scala/reflect/generic/AnnotationInfos.scala	/^  implicit def classfileAnnotArgManifest: ClassManifest[ClassfileAnnotArg] \/\/ need a precise manifest to pass to UnPickle's toArray call$/;"	m
clazz	scala/reflect/generic/UnPickler.scala	/^          val clazz = at(inforef, () => readType()).typeSymbol \/\/ after the NMT_TRANSITION period, we can leave off the () => ... ()$/;"	l
clazz	scala/reflect/generic/UnPickler.scala	/^          val clazz = readSymbolRef()$/;"	l
clear	scala/actors/threadpool/AbstractQueue.java	/^    public void clear() {$/;"	m	class:AbstractQueue
clear	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public void clear() {$/;"	m	class:LinkedBlockingQueue
clear	scala/actors/threadpool/SynchronousQueue.java	/^    public void clear() {}$/;"	m	class:SynchronousQueue
clear	scala/collection/JavaConversions.scala	/^    def clear = underlying.clear$/;"	m
clear	scala/collection/TraversableView.scala	/^    def clear() {}$/;"	m
clear	scala/collection/generic/Growable.scala	/^  def clear()$/;"	m
clear	scala/collection/immutable/ListSet.scala	/^    def clear() = { elems.clear() ; seen.clear() }$/;"	m
clear	scala/collection/immutable/Vector.scala	/^  def clear(): Unit = {$/;"	m
clear	scala/collection/mutable/AddingBuilder.scala	/^  def clear() { elems = empty }$/;"	m
clear	scala/collection/mutable/ArrayBuffer.scala	/^  def clear() { reduceToSize(0) }$/;"	m
clear	scala/collection/mutable/ArrayBuilder.scala	/^    def clear() {$/;"	m
clear	scala/collection/mutable/ArrayStack.scala	/^  def clear() {$/;"	m
clear	scala/collection/mutable/BufferLike.scala	/^  def clear()$/;"	m
clear	scala/collection/mutable/BufferProxy.scala	/^  def clear() { self.clear }$/;"	m
clear	scala/collection/mutable/Builder.scala	/^      def clear() = self.clear()$/;"	m
clear	scala/collection/mutable/Builder.scala	/^  def clear()$/;"	m
clear	scala/collection/mutable/DoubleLinkedList.scala	/^      def clear(): Unit = current = emptyList()$/;"	m
clear	scala/collection/mutable/GrowingBuilder.scala	/^  def clear() { elems = empty }$/;"	m
clear	scala/collection/mutable/History.scala	/^  def clear() { log.clear }$/;"	m
clear	scala/collection/mutable/LazyBuilder.scala	/^  def clear() { parts.clear() } $/;"	m
clear	scala/collection/mutable/ListBuffer.scala	/^  def clear() {$/;"	m
clear	scala/collection/mutable/MapBuilder.scala	/^  def clear() { elems = empty }$/;"	m
clear	scala/collection/mutable/MapLike.scala	/^  def clear() { keysIterator foreach -= }$/;"	m
clear	scala/collection/mutable/MutableList.scala	/^  def clear() {$/;"	m
clear	scala/collection/mutable/PriorityQueue.scala	/^  def clear(): Unit = { resarr.p_size0 = 1 }$/;"	m
clear	scala/collection/mutable/SetBuilder.scala	/^  def clear() { elems = empty }$/;"	m
clear	scala/collection/mutable/SetLike.scala	/^  def clear() { foreach(-=) }$/;"	m
clear	scala/collection/mutable/Stack.scala	/^    def clear = lbuff.clear$/;"	m
clear	scala/collection/mutable/Stack.scala	/^  def clear(): Unit = elems = Nil$/;"	m
clear	scala/collection/mutable/StringBuilder.scala	/^  def clear(): Unit = setLength(0)$/;"	m
clear	scala/collection/mutable/UnrolledBuffer.scala	/^  def clear() {$/;"	m
clear	scala/collection/mutable/WrappedArrayBuilder.scala	/^  def clear() {$/;"	m
clear	scala/collection/parallel/ParIterableView.scala	/^    def clear() {}$/;"	m
clear	scala/collection/parallel/ParSeqView.scala	/^    def clear() {}$/;"	m
clear	scala/collection/parallel/immutable/ParVector.scala	/^  def clear = {$/;"	m
clear	scala/collection/parallel/mutable/LazyCombiner.scala	/^  def clear = { chain.clear }$/;"	m
clear	scala/collection/parallel/mutable/ParHashSet.scala	/^  def clear() = clearTable()$/;"	m
clear	scala/collection/parallel/mutable/ParMapLike.scala	/^  def clear(): Unit$/;"	m
clear	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^  def clear() {$/;"	m
clear	scala/collection/parallel/package.scala	/^    def clear = {$/;"	m
clear	scala/ref/Reference.scala	/^  def clear(): Unit$/;"	m
clear	scala/ref/ReferenceWrapper.scala	/^  def clear = underlying.clear$/;"	m
clear	scala/sys/BooleanProp.scala	/^    val clear, enable, disable, toggle = ()$/;"	l
clear	scala/sys/Prop.scala	/^  def clear(): Unit$/;"	m
clear	scala/sys/PropImpl.scala	/^  def clear(): Unit = underlying -= key$/;"	m
clearBit	scala/math/BigInt.scala	/^  def clearBit(n: Int): BigInt  = new BigInt(this.bigInteger.clearBit(n))$/;"	m
clearInterruptsForTaskRun	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private void clearInterruptsForTaskRun() {$/;"	m	class:ThreadPoolExecutor	file:
clearProp	scala/util/Properties.scala	/^  def clearProp(name: String)                   = System.clearProperty(name)$/;"	m
clearSelf	scala/actors/Actor.scala	/^  def clearSelf() {$/;"	m
cline	scala/io/Source.scala	/^    var cline = 1$/;"	l
cloneArray	scala/runtime/ArrayRuntime.java	/^  static Object[] cloneArray(Object[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneArray	scala/runtime/ArrayRuntime.java	/^  static boolean[] cloneArray(boolean[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneArray	scala/runtime/ArrayRuntime.java	/^  static byte[] cloneArray(byte[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneArray	scala/runtime/ArrayRuntime.java	/^  static char[] cloneArray(char[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneArray	scala/runtime/ArrayRuntime.java	/^  static double[] cloneArray(double[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneArray	scala/runtime/ArrayRuntime.java	/^  static float[] cloneArray(float[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneArray	scala/runtime/ArrayRuntime.java	/^  static int[] cloneArray(int[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneArray	scala/runtime/ArrayRuntime.java	/^  static long[] cloneArray(long[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneArray	scala/runtime/ArrayRuntime.java	/^  static short[] cloneArray(short[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneElementNoBoundElements	scala/util/parsing/ast/Binders.scala	/^    def cloneElementNoBoundElements = element.gmap(new Mapper { def apply[t <% Mappable[t]](x :t): t = x match{ $/;"	m
cloneElementWithSubst	scala/util/parsing/ast/Binders.scala	/^    def cloneElementWithSubst(subst: scala.collection.immutable.Map[NameElement, NameElement]) = element.gmap(new Mapper { def apply[t <% Mappable[t]](x :t): t = x match{$/;"	m
cloneable	scala/cloneable.scala	/^class cloneable extends annotation.StaticAnnotation$/;"	c
cloneable	scala/package.scala	/^  type cloneable = annotation.cloneable$/;"	T
close	scala/io/Source.scala	/^  def close() {$/;"	m
close	scala/sys/process/BasicIO.scala	/^  def close(c: Closeable) = try c.close() catch { case _: IOException => () }$/;"	m
close	scala/sys/process/ProcessLogger.scala	/^  def close(): Unit = writer.close()$/;"	m
cmb	scala/collection/parallel/immutable/ParHashMap.scala	/^              val cmb: Combiner[V, Repr] = cbf()$/;"	l
cmb	scala/collection/parallel/immutable/ParHashMap.scala	/^          val cmb: Combiner[V, Repr] = trie.get0(kv._1, hc, rootbits) match {$/;"	l
cmstr	scala/xml/parsing/MarkupParser.scala	/^    val cmstr = cbuf.toString()$/;"	l
cnd	scala/collection/SeqLike.scala	/^      var cnd = 0$/;"	l
cnt	scala/actors/Future.scala	/^    var cnt = 0$/;"	l
cnt	scala/collection/LinearSeqOptimized.scala	/^    var cnt = 0$/;"	l
cnt	scala/collection/TraversableOnce.scala	/^    var cnt = 0$/;"	l
cnt	scala/collection/immutable/PagedSeq.scala	/^        val cnt = current.length min len$/;"	l
cnt	scala/collection/parallel/mutable/ParArray.scala	/^      var cnt = 0$/;"	l
cnt	scala/util/parsing/input/Reader.scala	/^    var cnt = n$/;"	l
cntx	scala/collection/parallel/ParIterableLike.scala	/^    val cntx = new DefaultSignalling with AtomicIndexFlag$/;"	l
code	scala/sys/process/ProcessBuilderImpl.scala	/^      val code   = this ! BasicIO(withIn, buffer, log)$/;"	l
code	scala/sys/process/ProcessImpl.scala	/^      val code = new SyncVar[Option[Int]]()$/;"	l
col	scala/io/Source.scala	/^    val col   = Position column pos$/;"	l
collect	scala/Option.scala	/^  def collect[B](pf: PartialFunction[A, B]): Option[B] =$/;"	m
collect	scala/collection/GenTraversableLike.scala	/^  def collect[B, That](pf: PartialFunction[A, B])(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
collect	scala/collection/Iterator.scala	/^  def collect[B](pf: PartialFunction[A, B]): Iterator[B] = {$/;"	m
collect	scala/collection/TraversableLike.scala	/^  def collect[B, That](pf: PartialFunction[A, B])(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
collect	scala/collection/interfaces/TraversableMethods.scala	/^  def collect[B, That](pf: PartialFunction[A, B])(implicit bf: CanBuildFrom[This, B, That]): That$/;"	m
collect	scala/collection/parallel/ParIterableLike.scala	/^  def collect[S, That](pf: PartialFunction[T, S])(implicit bf: CanBuildFrom[Repr, S, That]): That = bf ifParallel { pbf =>$/;"	m
collect2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def collect2combiner[S, That](pf: PartialFunction[T, S], cb: Combiner[S, That]): Combiner[S, That] = {$/;"	m
collectFirst	scala/collection/TraversableOnce.scala	/^  def collectFirst[B](pf: PartialFunction[A, B]): Option[B] = {$/;"	m
collectFirst	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def collectFirst[B](pf: PartialFunction[A, B]): Option[B]$/;"	m
collectGarbage	scala/compat/Platform.scala	/^  def collectGarbage(): Unit = System.gc()$/;"	m
collectNamespaces	scala/xml/Utility.scala	/^  def collectNamespaces(n: Node, set: mutable.Set[String]) {$/;"	m
collectNamespaces	scala/xml/Utility.scala	/^  def collectNamespaces(nodes: Seq[Node]): mutable.Set[String] = $/;"	m
collection	scala/collection/package.scala	/^package collection {$/;"	p
collectionAsScalaIterable	scala/collection/JavaConversions.scala	/^  implicit def collectionAsScalaIterable[A](i : ju.Collection[A]): Iterable[A] = i match {$/;"	m
collectionAsScalaIterableConverter	scala/collection/JavaConverters.scala	/^  implicit def collectionAsScalaIterableConverter[A](i : ju.Collection[A]): AsScala[Iterable[A]] = $/;"	m
collectionToArray	scala/actors/threadpool/helpers/Utils.java	/^    public static Object[] collectionToArray(Collection c) {$/;"	m	class:Utils
collectionToArray	scala/actors/threadpool/helpers/Utils.java	/^    public static Object[] collectionToArray(Collection c, Object[] a) {$/;"	m	class:Utils
column	scala/io/Position.scala	/^  final def column(pos: Int): Int = pos & COLUMN_MASK$/;"	m
column	scala/util/parsing/input/NoPosition.scala	/^  def column = 0$/;"	m
column	scala/util/parsing/input/OffsetPosition.scala	/^  def column: Int = offset - index(line - 1) + 1$/;"	m
column	scala/util/parsing/input/Position.scala	/^  def column: Int$/;"	m
column	scala/util/parsing/input/StreamReader.scala	/^    def column = off + 1$/;"	m
column	scala/xml/include/sax/XIncludeFilter.scala	/^    var column = -1$/;"	l
combinations	scala/collection/SeqLike.scala	/^  def combinations(n: Int): Iterator[Repr] =$/;"	m
combinations	scala/collection/interfaces/SeqMethods.scala	/^  def combinations(n: Int): Iterator[This]$/;"	m
combinator	scala/util/parsing/combinator/lexical/Lexical.scala	/^package combinator$/;"	p
combinator	scala/util/parsing/combinator/lexical/Scanners.scala	/^package combinator$/;"	p
combinator	scala/util/parsing/combinator/lexical/StdLexical.scala	/^package combinator$/;"	p
combinator	scala/util/parsing/combinator/syntactical/StandardTokenParsers.scala	/^package combinator$/;"	p
combinator	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^package combinator$/;"	p
combinator	scala/util/parsing/combinator/syntactical/TokenParsers.scala	/^package combinator$/;"	p
combinator	scala/util/parsing/combinator/token/StdTokens.scala	/^package combinator$/;"	p
combinator	scala/util/parsing/combinator/token/Tokens.scala	/^package combinator$/;"	p
combine	scala/collection/mutable/ArrayStack.scala	/^  def combine(f: (T, T) => T): Unit = push(f(pop, pop))$/;"	m
combine	scala/collection/parallel/Combiner.scala	/^  def combine[N <: Elem, NewTo >: To](other: Combiner[N, NewTo]): Combiner[N, NewTo]$/;"	m
combine	scala/collection/parallel/ParIterableView.scala	/^    def combine[N <: T, NewTo >: Nothing](other: Combiner[N, NewTo]) =$/;"	m
combine	scala/collection/parallel/ParSeqView.scala	/^    def combine[N <: T, NewTo >: Nothing](other: Combiner[N, NewTo]) =$/;"	m
combine	scala/collection/parallel/immutable/ParVector.scala	/^  def combine[U <: T, NewTo >: ParVector[T]](other: Combiner[U, NewTo]) = if (other eq this) this else {$/;"	m
combine	scala/collection/parallel/mutable/LazyCombiner.scala	/^  def combine[N <: Elem, NewTo >: To](other: Combiner[N, NewTo]): Combiner[N, NewTo] = if (this ne other) {$/;"	m
combine	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^  def combine[N <: T, NewTo >: ParArray[T]](other: Combiner[N, NewTo]): Combiner[N, NewTo] = other match {$/;"	m
combine	scala/collection/parallel/package.scala	/^    def combine[N <: Elem, NewTo >: To](other: Combiner[N, NewTo]): Combiner[N, NewTo] = if (this ne other) {$/;"	m
combineResults	scala/collection/parallel/ParIterableLike.scala	/^      def combineResults(fr: R, sr: R2): R3 = resCombiner(fr, sr)$/;"	m
combineResults	scala/collection/parallel/ParIterableLike.scala	/^    def combineResults(fr: FR, sr: SR): R$/;"	m
comment	scala/xml/factory/Binder.scala	/^  final def comment(pos: Int, txt: String) =$/;"	m
comment	scala/xml/include/sax/XIncluder.scala	/^  def comment(ch: Array[Char], start: Int, length: Int) {$/;"	m
comment	scala/xml/parsing/ConstructingHandler.scala	/^  def comment(pos: Int, txt: String)  = Comment(txt)$/;"	m
comment	scala/xml/parsing/DefaultMarkupHandler.scala	/^  def comment(pos: Int, comment: String ): NodeSeq = NodeSeq.Empty$/;"	m
comment	scala/xml/parsing/MarkupHandler.scala	/^  def comment(pos: Int, comment: String): NodeSeq$/;"	m
comment	scala/xml/pull/XMLEventReader.scala	/^    def comment(pos: Int, txt: String)                    = setEvent(EvComment(txt))$/;"	m
commit	scala/util/parsing/combinator/Parsers.scala	/^  def commit[T](p: => Parser[T]) = Parser{ in =>$/;"	m
companion	scala/collection/GenTraversable.scala	/^  def companion: GenericCompanion[GenTraversable] = GenTraversable$/;"	m
companion	scala/collection/generic/GenericParTemplate.scala	/^  def companion: GenericCompanion[CC] with GenericParCompanion[CC]$/;"	m
companion	scala/collection/generic/GenericTraversableTemplate.scala	/^  def companion: GenericCompanion[CC]$/;"	m
comparatorToOrdering	scala/math/Ordering.scala	/^  implicit def comparatorToOrdering[A](implicit cmp: Comparator[A]): Ordering[A] = new Ordering[A] {$/;"	m
compare	scala/collection/generic/Sorted.scala	/^  def compare(k0: K, k1: K): Int = ordering.compare(k0, k1);$/;"	m
compare	scala/collection/mutable/PriorityQueue.scala	/^      def compare(x: A, y: A) = ord.compare(y, x)$/;"	m
compare	scala/math/BigDecimal.scala	/^  def compare (that: BigDecimal): Int = this.bigDecimal compareTo that.bigDecimal$/;"	m
compare	scala/math/BigInt.scala	/^  def compare (that: BigInt): Int = this.bigInteger.compareTo(that.bigInteger)$/;"	m
compare	scala/math/Ordered.scala	/^  def compare(that: A): Int$/;"	m
compare	scala/math/Ordering.scala	/^        def compare(x: CC[T], y: CC[T]): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: (T1, T2), y: (T1, T2)): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: (T1, T2, T3), y: (T1, T2, T3)): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: (T1, T2, T3, T4), y: (T1, T2, T3, T4)): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: (T1, T2, T3, T4, T5), y: Tuple5[T1, T2, T3, T4, T5]): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: (T1, T2, T3, T4, T5, T6), y: (T1, T2, T3, T4, T5, T6)): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: (T1, T2, T3, T4, T5, T6, T7), y: (T1, T2, T3, T4, T5, T6, T7)): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: (T1, T2, T3, T4, T5, T6, T7, T8), y: (T1, T2, T3, T4, T5, T6, T7, T8)): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: (T1, T2, T3, T4, T5, T6, T7, T8, T9), y: (T1, T2, T3, T4, T5, T6, T7, T8, T9)): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: Iterable[T], y: Iterable[T]): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: A, y: A) = cmp.compare(x, y)$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: A, y: A): Int = x compareTo y$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: BigDecimal, y: BigDecimal) = x.compare(y)$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: BigInt, y: BigInt) = x.compare(y)$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Boolean, y: Boolean) = (x, y) match {$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Byte, y: Byte) = x.toInt - y.toInt$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Char, y: Char) = x.toInt - y.toInt$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Double, y: Double) = java.lang.Double.compare(x, y)$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Float, y: Float) = java.lang.Float.compare(x, y)$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Int, y: Int) = $/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Long, y: Long) = $/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Option[T], y: Option[T]) = (x, y) match {$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Short, y: Short) = x.toInt - y.toInt$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: String, y: String) = x.compareTo(y)$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: T, y: T) = if (cmp(x, y)) -1 else if (cmp(y, x)) 1 else 0$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: T, y: T) = outer.compare(y, x)$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: U, y: U) = outer.compare(f(x), f(y))$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Unit, y: Unit) = 0$/;"	m
compare	scala/math/Ordering.scala	/^  def compare(x: T, y: T): Int$/;"	m
compare	scala/runtime/ScalaNumberProxy.scala	/^  def compare(y: T) = ord.compare(self, y)$/;"	m
compare1	scala/math/Ordering.scala	/^        val compare1 = ord1.compare(x._1, y._1)$/;"	l
compare2	scala/math/Ordering.scala	/^        val compare2 = ord2.compare(x._2, y._2)$/;"	l
compare3	scala/math/Ordering.scala	/^        val compare3 = ord3.compare(x._3, y._3)$/;"	l
compare4	scala/math/Ordering.scala	/^        val compare4 = ord4.compare(x._4, y._4)$/;"	l
compare5	scala/math/Ordering.scala	/^        val compare5 = ord5.compare(x._5, y._5)$/;"	l
compare6	scala/math/Ordering.scala	/^        val compare6 = ord6.compare(x._6, y._6)$/;"	l
compare7	scala/math/Ordering.scala	/^        val compare7 = ord7.compare(x._7, y._7)$/;"	l
compare8	scala/math/Ordering.scala	/^        val compare8 = ord8.compare(x._8, y._8)$/;"	l
compare9	scala/math/Ordering.scala	/^        val compare9 = ord9.compare(x._9, y._9)$/;"	l
compareAndDecrementWorkerCount	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private boolean compareAndDecrementWorkerCount(int expect) {$/;"	m	class:ThreadPoolExecutor	file:
compareAndIncrementWorkerCount	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private boolean compareAndIncrementWorkerCount(int expect) {$/;"	m	class:ThreadPoolExecutor	file:
compareAndSet	scala/actors/threadpool/AtomicInteger.java	/^    public final synchronized boolean compareAndSet(int expect, int update) {$/;"	m	class:AtomicInteger
compareBlithely	scala/xml/Equality.scala	/^  def compareBlithely(x1: AnyRef, x2: AnyRef): Boolean = {$/;"	m
compareBlithely	scala/xml/Equality.scala	/^  def compareBlithely(x1: AnyRef, x2: Node): Boolean = x1 match {$/;"	m
compareBlithely	scala/xml/Equality.scala	/^  def compareBlithely(x1: AnyRef, x2: String): Boolean = x1 match {$/;"	m
compareTo	scala/math/Ordered.scala	/^  def compareTo(that: A): Int = compare(that)$/;"	m
complement	scala/collection/generic/BitOperations.scala	/^    def complement(i: Int)                      = (-1) ^ i$/;"	m
complement	scala/collection/generic/BitOperations.scala	/^    def complement(i: Long)                        = (-1L) ^ i$/;"	m
complement	scala/runtime/BoxesRunTime.java	/^    public static Object complement(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
complete	scala/reflect/generic/Types.scala	/^    def complete(sym: Symbol) {}$/;"	m
completedTaskCount	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private long completedTaskCount;$/;"	f	class:ThreadPoolExecutor	file:
completedTasks	scala/actors/threadpool/ThreadPoolExecutor.java	/^        volatile long completedTasks;$/;"	f	class:ThreadPoolExecutor.Worker
completionQueue	scala/actors/threadpool/ExecutorCompletionService.java	/^    private final BlockingQueue completionQueue;$/;"	f	class:ExecutorCompletionService	file:
compose	scala/Function1.scala	/^  def compose[A](g: A => T1): A => R = { x => apply(g(x)) }$/;"	m
compose	scala/collection/parallel/ParIterableLike.scala	/^    def compose[R3, R2, Tp2](t2: SSCTask[R2, Tp2])(resCombiner: (R, R2) => R3) = new SeqComposite[R, R2, R3, SSCTask[R, Tp], SSCTask[R2, Tp2]](tsk, t2) {$/;"	m
compose	scala/collection/parallel/ParIterableLike.scala	/^    def compose[R3, R2, Tp2](t2: SSCTask[R2, Tp2])(resCombiner: (R, R2) => R3): SeqComposite[R, R2, R3, SSCTask[R, Tp], SSCTask[R2, Tp2]]$/;"	m
compute	scala/actors/ReactorTask.scala	/^  def compute() = run()$/;"	m
compute	scala/collection/parallel/Tasks.scala	/^    def compute() = if (body.shouldSplitFurther) internal else body.tryLeaf(None)$/;"	m
compute	scala/collection/parallel/Tasks.scala	/^    def compute()$/;"	m
concat	scala/Array.scala	/^  def concat[T: ClassManifest](xss: Array[T]*): Array[T] = {$/;"	m
concat	scala/collection/generic/GenTraversableFactory.scala	/^  def concat[A](xss: Traversable[A]*): CC[A] = {$/;"	m
concat	scala/collection/immutable/Stream.scala	/^  def concat[A](xs: Iterable[Stream[A]]): Stream[A] = concat(xs.iterator)$/;"	m
concat	scala/collection/immutable/Stream.scala	/^  def concat[A](xs: Iterator[Stream[A]]): Stream[A] = xs.toStream.flatten \/\/(conforms[Stream[A], scala.collection.Traversable[A]])$/;"	m
concat	scala/collection/mutable/UnrolledBuffer.scala	/^  def concat(that: UnrolledBuffer[T]) = {$/;"	m
concatenate	scala/xml/MetaData.scala	/^  def concatenate(attribs: MetaData, new_tail: MetaData): MetaData =$/;"	m
cond	scala/Either.scala	/^  def cond[A, B](test: Boolean, right: => B, left: => A): Either[A, B] = $/;"	m
cond	scala/PartialFunction.scala	/^  def cond[T](x: T)(pf: PartialFunction[T, Boolean]): Boolean =$/;"	m
cond	scala/reflect/generic/UnPickler.scala	/^          val cond = readTreeRef()$/;"	l
condOpt	scala/PartialFunction.scala	/^  def condOpt[T,U](x: T)(pf: PartialFunction[T, U]): Option[U] =$/;"	m
conforms	scala/Predef.scala	/^  implicit def conforms[A]: A <:< A = singleton_<:<.asInstanceOf[A <:< A]$/;"	m
conformsOrViewsAs	scala/Predef.scala	/^    implicit def conformsOrViewsAs[A <% B, B]: A <%< B = new (A <%< B) {def apply(x: A) = x}$/;"	m
connect	scala/actors/remote/TcpService.scala	/^  def connect(n: Node): TcpServiceWorker = synchronized {$/;"	m
connectToIn	scala/sys/process/BasicIO.scala	/^  def connectToIn(o: OutputStream): Unit = transferFully(stdin, o)$/;"	m
connectedNode	scala/actors/remote/TcpService.scala	/^  var connectedNode: Node = _$/;"	l
cons	scala/collection/immutable/Stream.scala	/^  object cons {$/;"	c
cons	scala/xml/factory/NodeFactory.scala	/^    def cons(old: List[A]) = construct(hash, old, pre, name, attrSeq, scope, children)$/;"	m
consWrapper	scala/collection/immutable/Stream.scala	/^  implicit def consWrapper[A](stream: => Stream[A]): ConsWrapper[A] = $/;"	m
const	scala/Function.scala	/^  def const[T, U](x: T)(y: U): T = x$/;"	m
const	scala/collection/immutable/Stream.scala	/^  def const[A](elem: A): Stream[A] = cons(elem, const(elem))$/;"	m
const	scala/reflect/generic/UnPickler.scala	/^        val const = at(i, readConstant)$/;"	l
constant	scala/Responder.scala	/^  def constant[A](x: A) = new Responder[A] {$/;"	m
constant	scala/sys/BooleanProp.scala	/^  def constant(key: String, isOn: Boolean): BooleanProp = new ConstantImpl(key, isOn)$/;"	m
cont	scala/concurrent/pilib.scala	/^    var cont: () => Any = _$/;"	l
contains	scala/Enumeration.scala	/^    def contains(v: Value) = ids contains (v.id)$/;"	m
contains	scala/actors/threadpool/BlockingQueue.java	/^    public boolean contains(Object o);$/;"	m	interface:BlockingQueue
contains	scala/actors/threadpool/SynchronousQueue.java	/^    public boolean contains(Object o) {$/;"	m	class:SynchronousQueue
contains	scala/collection/BitSetLike.scala	/^  def contains(elem: Int): Boolean =$/;"	m
contains	scala/collection/GenSetLike.scala	/^  def contains(elem: A): Boolean$/;"	m
contains	scala/collection/Iterator.scala	/^  def contains(elem: Any): Boolean = exists(_ == elem)$/;"	m
contains	scala/collection/JavaConversions.scala	/^    def contains(elem: A): Boolean = underlying.contains(elem)$/;"	m
contains	scala/collection/MapLike.scala	/^    def contains(key : A) = self.contains(key)$/;"	m
contains	scala/collection/MapLike.scala	/^  def contains(key: A): Boolean = get(key) match {$/;"	m
contains	scala/collection/SeqLike.scala	/^  def contains(elem: Any): Boolean = exists (_ == elem)$/;"	m
contains	scala/collection/SetLike.scala	/^  def contains(elem: A): Boolean$/;"	m
contains	scala/collection/immutable/HashSet.scala	/^  def contains(e: A): Boolean = get0(e, computeHash(e), 0)$/;"	m
contains	scala/collection/immutable/ListSet.scala	/^  def contains(elem: A): Boolean = false$/;"	m
contains	scala/collection/immutable/Range.scala	/^  final def contains(x: Int) = isWithinBoundaries(x) && ((x - start) % step == 0)$/;"	m
contains	scala/collection/immutable/Set.scala	/^    def contains(elem: A): Boolean = $/;"	m
contains	scala/collection/immutable/Set.scala	/^    def contains(elem: A): Boolean = false$/;"	m
contains	scala/collection/immutable/Set.scala	/^    def contains(elem: Any): Boolean = false$/;"	m
contains	scala/collection/immutable/TreeSet.scala	/^  def contains(elem: A): Boolean = !tree.lookup(elem).isEmpty$/;"	m
contains	scala/collection/interfaces/MapMethods.scala	/^  def contains(key: A): Boolean$/;"	m
contains	scala/collection/interfaces/SeqMethods.scala	/^  def contains(elem: Any): Boolean$/;"	m
contains	scala/collection/interfaces/SetMethods.scala	/^  def contains(elem: A): Boolean$/;"	m
contains	scala/collection/mutable/HashSet.scala	/^  def contains(elem: A): Boolean = containsEntry(elem)$/;"	m
contains	scala/collection/mutable/ImmutableSetAdaptor.scala	/^  def contains(elem: A): Boolean = set.contains(elem)$/;"	m
contains	scala/collection/mutable/LinkedHashSet.scala	/^  def contains(elem: A): Boolean = containsEntry(elem)$/;"	m
contains	scala/collection/parallel/immutable/ParHashSet.scala	/^  def contains(e: T): Boolean = trie.contains(e)$/;"	m
contains	scala/collection/parallel/mutable/ParHashSet.scala	/^  def contains(elem: T) = containsEntry(elem)$/;"	m
containsAll	scala/actors/threadpool/SynchronousQueue.java	/^    public boolean containsAll(Collection c) {$/;"	m	class:SynchronousQueue
containsEntry	scala/collection/mutable/FlatHashTable.scala	/^  def containsEntry(elem: A): Boolean = {$/;"	m
containsFinal	scala/util/automata/NondetWordAutom.scala	/^  final def containsFinal(Q: BitSet): Boolean = Q exists isFinal$/;"	m
containsSlice	scala/collection/SeqLike.scala	/^  def containsSlice[B](that: GenSeq[B]): Boolean = indexOfSlice(that) != -1 $/;"	m
containsSlice	scala/collection/SeqLike.scala	/^  def containsSlice[B](that: Seq[B]): Boolean = containsSlice(that: GenSeq[B])$/;"	m
containsSlice	scala/collection/interfaces/SeqMethods.scala	/^  def containsSlice[B](that: Seq[B]): Boolean$/;"	m
containsText	scala/xml/dtd/ContentModel.scala	/^  def containsText(cm: ContentModel) = (cm == PCDATA) || isMixed(cm)$/;"	m
containsTyped	scala/collection/immutable/NumericRange.scala	/^  def containsTyped(x: T): Boolean =$/;"	m
content	scala/xml/parsing/MarkupParser.scala	/^  def content(pscope: NamespaceBinding): NodeSeq = {$/;"	m
content1	scala/xml/parsing/MarkupParser.scala	/^  def content1(pscope: NamespaceBinding, ts: NodeBuffer): Unit =$/;"	m
contentType	scala/xml/include/sax/XIncludeFilter.scala	/^      var contentType = uc.getContentType()$/;"	l
contents	scala/collection/parallel/mutable/ParHashSet.scala	/^    val contents = if (size >= ParHashSetCombiner.numblocks * sizeMapBucketSize) parPopulate else seqPopulate$/;"	l
contentspec	scala/xml/dtd/ContentModelParser.scala	/^  def contentspec: ContentModel = token match {$/;"	m
continually	scala/collection/Iterator.scala	/^  def continually[A](elem: => A): Iterator[A] = new Iterator[A] {$/;"	m
continually	scala/collection/immutable/Stream.scala	/^  def continually[A](elem: => A): Stream[A] = cons(elem, continually(elem))$/;"	m
continue	scala/actors/Combinators.scala	/^  def continue(): Unit = throw new KillActorControl$/;"	m
continue	scala/concurrent/pilib.scala	/^    def continue = synchronized {$/;"	m
continue	scala/util/parsing/combinator/Parsers.scala	/^    def continue(in: Input): ParseResult[List[T]] = {$/;"	m
convert	scala/actors/threadpool/TimeUnit.java	/^    public abstract long convert(long sourceDuration, TimeUnit sourceUnit);$/;"	m	class:TimeUnit
convertTo	scala/reflect/generic/Constants.scala	/^    def convertTo(pt: Type): Constant = {$/;"	m
copy	scala/Array.scala	/^  def copy(src: AnyRef, srcPos: Int, dest: AnyRef, destPos: Int, length: Int) {$/;"	m
copy	scala/collection/immutable/NumericRange.scala	/^      def copy(start: A, end: A, step: A): NumericRange[A] =$/;"	m
copy	scala/collection/immutable/NumericRange.scala	/^    def copy(start: T, end: T, step: T): Exclusive[T] =$/;"	m
copy	scala/collection/immutable/NumericRange.scala	/^    def copy(start: T, end: T, step: T): Inclusive[T] =$/;"	m
copy	scala/collection/immutable/NumericRange.scala	/^  def copy(start: T, end: T, step: T): NumericRange[T]$/;"	m
copy	scala/xml/Attribute.scala	/^  def copy(next: MetaData): Attribute$/;"	m
copy	scala/xml/Elem.scala	/^  def copy($/;"	m
copy	scala/xml/MetaData.scala	/^  def copy(next: MetaData): MetaData$/;"	m
copy	scala/xml/Null.scala	/^  def copy(next: MetaData) = next$/;"	m
copy	scala/xml/PrefixedAttribute.scala	/^  def copy(next: MetaData) = $/;"	m
copy	scala/xml/UnprefixedAttribute.scala	/^  def copy(next: MetaData) = new UnprefixedAttribute(key, value, next)$/;"	m
copy2builder	scala/collection/parallel/RemainsIterator.scala	/^  def copy2builder[U >: T, Coll, Bld <: Builder[U, Coll]](b: Bld): Bld = {$/;"	m
copyOf	scala/actors/threadpool/Arrays.java	/^    public static Object[] copyOf(Object[] original, int newLength) {$/;"	m	class:Arrays
copyOf	scala/actors/threadpool/Arrays.java	/^    public static Object[] copyOf(Object[] original, int newLength, Class newType) {$/;"	m	class:Arrays
copyOf	scala/actors/threadpool/Arrays.java	/^    public static boolean[] copyOf(boolean[] original, int newLength) {$/;"	m	class:Arrays
copyOf	scala/actors/threadpool/Arrays.java	/^    public static byte[] copyOf(byte[] original, int newLength) {$/;"	m	class:Arrays
copyOf	scala/actors/threadpool/Arrays.java	/^    public static char[] copyOf(char[] original, int newLength) {$/;"	m	class:Arrays
copyOf	scala/actors/threadpool/Arrays.java	/^    public static double[] copyOf(double[] original, int newLength) {$/;"	m	class:Arrays
copyOf	scala/actors/threadpool/Arrays.java	/^    public static float[] copyOf(float[] original, int newLength) {$/;"	m	class:Arrays
copyOf	scala/actors/threadpool/Arrays.java	/^    public static int[] copyOf(int[] original, int newLength) {$/;"	m	class:Arrays
copyOf	scala/actors/threadpool/Arrays.java	/^    public static long[] copyOf(long[] original, int newLength) {$/;"	m	class:Arrays
copyOf	scala/actors/threadpool/Arrays.java	/^    public static short[] copyOf(short[] original, int newLength) {$/;"	m	class:Arrays
copyOfRange	scala/actors/threadpool/Arrays.java	/^    public static Object[] copyOfRange(Object[] original, int from, int to) {$/;"	m	class:Arrays
copyOfRange	scala/actors/threadpool/Arrays.java	/^    public static Object[] copyOfRange(Object[] original, int from, int to, Class newType) {$/;"	m	class:Arrays
copyOfRange	scala/actors/threadpool/Arrays.java	/^    public static boolean[] copyOfRange(boolean[] original, int from, int to) {$/;"	m	class:Arrays
copyOfRange	scala/actors/threadpool/Arrays.java	/^    public static byte[] copyOfRange(byte[] original, int from, int to) {$/;"	m	class:Arrays
copyOfRange	scala/actors/threadpool/Arrays.java	/^    public static char[] copyOfRange(char[] original, int from, int to) {$/;"	m	class:Arrays
copyOfRange	scala/actors/threadpool/Arrays.java	/^    public static double[] copyOfRange(double[] original, int from, int to) {$/;"	m	class:Arrays
copyOfRange	scala/actors/threadpool/Arrays.java	/^    public static float[] copyOfRange(float[] original, int from, int to) {$/;"	m	class:Arrays
copyOfRange	scala/actors/threadpool/Arrays.java	/^    public static int[] copyOfRange(int[] original, int from, int to) {$/;"	m	class:Arrays
copyOfRange	scala/actors/threadpool/Arrays.java	/^    public static long[] copyOfRange(long[] original, int from, int to) {$/;"	m	class:Arrays
copyOfRange	scala/actors/threadpool/Arrays.java	/^    public static short[] copyOfRange(short[] original, int from, int to) {$/;"	m	class:Arrays
copyToArray	scala/collection/GenTraversableOnce.scala	/^  def copyToArray[B >: A](xs: Array[B]): Unit$/;"	m
copyToArray	scala/collection/GenTraversableOnce.scala	/^  def copyToArray[B >: A](xs: Array[B], start: Int): Unit$/;"	m
copyToArray	scala/collection/GenTraversableOnce.scala	/^  def copyToArray[B >: A](xs: Array[B], start: Int, len: Int): Unit$/;"	m
copyToArray	scala/collection/IndexedSeqOptimized.scala	/^  def copyToArray[B >: A](xs: Array[B], start: Int, len: Int) {$/;"	m
copyToArray	scala/collection/Iterator.scala	/^  def copyToArray[B >: A](xs: Array[B], start: Int, len: Int): Unit = {$/;"	m
copyToArray	scala/collection/TraversableLike.scala	/^  def copyToArray[B >: A](xs: Array[B], start: Int, len: Int) {$/;"	m
copyToArray	scala/collection/TraversableOnce.scala	/^  def copyToArray[B >: A](xs: Array[B]): Unit =$/;"	m
copyToArray	scala/collection/TraversableOnce.scala	/^  def copyToArray[B >: A](xs: Array[B], start: Int): Unit = $/;"	m
copyToArray	scala/collection/TraversableOnce.scala	/^  def copyToArray[B >: A](xs: Array[B], start: Int, len: Int): Unit$/;"	m
copyToArray	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def copyToArray[B >: A](xs: Array[B]): Unit$/;"	m
copyToArray	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def copyToArray[B >: A](xs: Array[B], start: Int): Unit$/;"	m
copyToArray	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def copyToArray[B >: A](xs: Array[B], start: Int, len: Int): Unit$/;"	m
copyToArray	scala/collection/parallel/ParIterableLike.scala	/^  def copyToArray[U >: T](xs: Array[U]) = copyToArray(xs, 0)$/;"	m
copyToArray	scala/collection/parallel/ParIterableLike.scala	/^  def copyToArray[U >: T](xs: Array[U], start: Int) = copyToArray(xs, start, xs.length - start)$/;"	m
copyToArray	scala/collection/parallel/ParIterableLike.scala	/^  def copyToArray[U >: T](xs: Array[U], start: Int, len: Int) = if (len > 0) {$/;"	m
copyToBuffer	scala/collection/TraversableOnce.scala	/^  def copyToBuffer[B >: A](dest: Buffer[B]): Unit = dest ++= seq$/;"	m
copyToBuffer	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def copyToBuffer[B >: A](dest: mutable.Buffer[B]): Unit$/;"	m
copyend	scala/collection/parallel/ParSeqLike.scala	/^      val copyend = new Copy[U, That](() => pbf(repr), pits(2))$/;"	l
copymiddle	scala/collection/parallel/ParSeqLike.scala	/^      val copymiddle = wrap {$/;"	l
copyrightString	scala/util/Properties.scala	/^  val copyrightString       = scalaPropOrElse("copyright.string", "(c) 2002-2011 LAMP\/EPFL")$/;"	l
copystart	scala/collection/parallel/ParSeqLike.scala	/^      val copystart = new Copy[U, That](() => pbf(repr), pits(0))$/;"	l
copythat	scala/collection/parallel/ParIterableLike.scala	/^      val copythat = wrap {$/;"	l
copythis	scala/collection/parallel/ParIterableLike.scala	/^      val copythis = new Copy(() => pbf(repr), splitter)$/;"	l
corePoolSize	scala/actors/scheduler/ThreadPoolConfig.scala	/^  val corePoolSize = getIntegerProp("actors.corePoolSize") match {$/;"	l
corePoolSize	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private volatile int corePoolSize;$/;"	f	class:ThreadPoolExecutor	file:
coresize	scala/collection/parallel/Tasks.scala	/^        val coresize = executor.getCorePoolSize$/;"	l
corresponds	scala/collection/GenSeqLike.scala	/^  def corresponds[B](that: GenSeq[B])(p: (A, B) => Boolean): Boolean$/;"	m
corresponds	scala/collection/SeqLike.scala	/^  def corresponds[B](that: GenSeq[B])(p: (A,B) => Boolean): Boolean = {$/;"	m
corresponds	scala/collection/SeqLike.scala	/^  def corresponds[B](that: Seq[B])(p: (A,B) => Boolean): Boolean = $/;"	m
corresponds	scala/collection/interfaces/SeqMethods.scala	/^  def corresponds[B](that: Seq[B])(p: (A,B) => Boolean): Boolean$/;"	m
corresponds	scala/collection/parallel/ParSeqLike.scala	/^  def corresponds[S](that: GenSeq[S])(p: (T, S) => Boolean): Boolean = that ifParSeq { pthat =>$/;"	m
corresponds	scala/collection/parallel/RemainsIterator.scala	/^  def corresponds[S](corr: (T, S) => Boolean)(that: Iterator[S]): Boolean = {$/;"	m
cos	scala/MathCommon.scala	/^  def cos(x: Double): Double = java.lang.Math.cos(x)$/;"	m
cosh	scala/math/package.scala	/^  def cosh(x: Double): Double = java.lang.Math.cosh(x)$/;"	m
count	scala/CountedIterator.scala	/^  def count: Int$/;"	m
count	scala/actors/remote/FreshNameCreator.scala	/^    val count = counters.get(prefix) match {$/;"	l
count	scala/actors/threadpool/LinkedBlockingQueue.java	/^    private final AtomicInteger count = new AtomicInteger(0);$/;"	f	class:LinkedBlockingQueue	file:
count	scala/collection/GenTraversableOnce.scala	/^  def count(p: A => Boolean): Int$/;"	m
count	scala/collection/Iterator.scala	/^    def count = cnt$/;"	m
count	scala/collection/LinearSeqOptimized.scala	/^    var count = from max 0$/;"	l
count	scala/collection/LinearSeqOptimized.scala	/^    var count = n$/;"	l
count	scala/collection/LinearSeqOptimized.scala	/^  def count(p: A => Boolean): Int = {$/;"	m
count	scala/collection/TraversableOnce.scala	/^  def count(p: A => Boolean): Int = {$/;"	m
count	scala/collection/immutable/List.scala	/^    var count = n$/;"	l
count	scala/collection/immutable/NumericRange.scala	/^    var count = 0$/;"	l
count	scala/collection/immutable/NumericRange.scala	/^  def count[T](start: T, end: T, step: T, isInclusive: Boolean)(implicit num: Integral[T]): Int = {$/;"	m
count	scala/collection/immutable/PagedSeq.scala	/^      val count = more(data, filled, PageSize - filled) $/;"	l
count	scala/collection/immutable/Range.scala	/^  def count(start: Int, end: Int, step: Int): Int =$/;"	m
count	scala/collection/immutable/Range.scala	/^  def count(start: Int, end: Int, step: Int, isInclusive: Boolean): Int = {$/;"	m
count	scala/collection/immutable/RedBlack.scala	/^    def count : Int$/;"	m
count	scala/collection/immutable/RedBlack.scala	/^    def count = 0$/;"	m
count	scala/collection/immutable/RedBlack.scala	/^    def count = 1 + left.count + right.count$/;"	m
count	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def count(p: A => Boolean): Int$/;"	m
count	scala/collection/parallel/ParIterableLike.scala	/^  def count(p: T => Boolean): Int = {$/;"	m
count	scala/collection/parallel/RemainsIterator.scala	/^    var count = from1$/;"	l
count	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      var count = 0$/;"	l
count	scala/collection/parallel/mutable/ParHashMap.scala	/^    def count(e: HashEntry[K, DefaultEntry[K, V]]): Int = if (e eq null) 0 else 1 + count(e.next)$/;"	m
count	scala/reflect/generic/ByteCodecs.scala	/^    var count = 0$/;"	l
count1	scala/collection/mutable/ListBuffer.scala	/^    val count1 = count min (len - n1)$/;"	l
countBits	scala/collection/BitSetLike.scala	/^    def countBits(x: Int): Int = if (x == 0) 0 else x % 2 + countBits(x >>> 1)$/;"	m
counted	scala/collection/Iterator.scala	/^  def counted = new CountedIterator[A] {$/;"	m
counted	scala/collection/immutable/NumericRange.scala	/^    var counted = 0$/;"	l
counted	scala/collection/immutable/Range.scala	/^    var counted = 0$/;"	l
cps	scala/util/continuations/package.scala	/^  type cps[A] = cpsParam[A,A]$/;"	T
cpsMinus	scala/util/continuations/ControlContext.scala	/^private class cpsMinus extends Annotation \/\/ implementation detail$/;"	c
cpsParam	scala/util/continuations/ControlContext.scala	/^class cpsParam[-B,+C] extends StaticAnnotation with TypeConstraint$/;"	c
cpsPlus	scala/util/continuations/ControlContext.scala	/^private class cpsPlus extends StaticAnnotation with TypeConstraint \/\/ implementation detail$/;"	c
cpsSym	scala/util/continuations/ControlContext.scala	/^private class cpsSym[B] extends Annotation \/\/ implementation detail$/;"	c
cpsSynth	scala/util/continuations/ControlContext.scala	/^private class cpsSynth extends Annotation \/\/ implementation detail$/;"	c
create	scala/collection/immutable/package.scala	/^    def create(_start: Int, _end: Int, _step: Int, _inclusive: Boolean): Repr$/;"	m
createArray	scala/compat/Platform.scala	/^  def createArray(elemClass: Class[_], length: Int): AnyRef =$/;"	m
createBufferedSource	scala/io/Source.scala	/^  def createBufferedSource($/;"	m
createFromCopy	scala/collection/parallel/mutable/ParArray.scala	/^  def createFromCopy[T <: AnyRef : ClassManifest](arr: Array[T]): ParArray[T] = {$/;"	m
createIndex	scala/reflect/generic/PickleBuffer.scala	/^  def createIndex: Array[Int] = {$/;"	m
createKernelOnPort	scala/actors/remote/RemoteActor.scala	/^  def createKernelOnPort(port: Int): NetKernel =$/;"	m
createNameType	scala/reflect/generic/StdNames.scala	/^    implicit def createNameType(name: String): NameType$/;"	m
createNew	scala/actors/scheduler/DelegatingScheduler.scala	/^    val createNew = if (sched eq null)$/;"	l
createNode	scala/xml/parsing/FactoryAdapter.scala	/^  def createNode(pre: String, elemName: String, attribs: MetaData,$/;"	m
createNode	scala/xml/parsing/NoBindingFactoryAdapter.scala	/^  def createNode(pre: String, label: String, attrs: MetaData, scope: NamespaceBinding, children: List[Node]): Elem =$/;"	m
createProcInstr	scala/xml/parsing/FactoryAdapter.scala	/^  def createProcInstr(target: String, data: String): Seq[ProcInstr] $/;"	m
createProcInstr	scala/xml/parsing/NoBindingFactoryAdapter.scala	/^  def createProcInstr(target: String, data: String) = makeProcInstr(target, data)$/;"	m
createProxy	scala/actors/remote/NetKernel.scala	/^  def createProxy(node: Node, sym: Symbol): Proxy = {$/;"	m
createText	scala/xml/parsing/FactoryAdapter.scala	/^  def createText(text: String): Text \/\/ abstract$/;"	m
createText	scala/xml/parsing/NoBindingFactoryAdapter.scala	/^  def createText(text: String) = Text(text)$/;"	m
cs	scala/collection/SeqLike.scala	/^      val cs = new Array[Int](m.size)$/;"	l
ctl	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));$/;"	f	class:ThreadPoolExecutor	file:
ctlOf	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private static int ctlOf(int rs, int wc) { return rs | wc; }$/;"	m	class:ThreadPoolExecutor	file:
ctx	scala/collection/parallel/ParSeqLike.scala	/^      val ctx = new DefaultSignalling with VolatileAbort$/;"	l
ctx	scala/collection/parallel/ParSeqLike.scala	/^    val ctx = new DefaultSignalling with AtomicIndexFlag$/;"	l
ctx	scala/collection/parallel/ParSeqLike.scala	/^    val ctx = new DefaultSignalling with VolatileAbort$/;"	l
ctxR	scala/util/continuations/ControlContext.scala	/^            val ctxR = f(x)$/;"	l
ctxR	scala/util/continuations/package.scala	/^    val ctxR = reify[A,A,C](ctx)$/;"	l
ctxR	scala/util/continuations/package.scala	/^    val ctxR = reify[Any,Unit,A](ctx)$/;"	l
cur	scala/collection/immutable/ListMap.scala	/^      var cur: ListMap[A, B1] = this$/;"	l
cur	scala/collection/immutable/Stream.scala	/^      val cur    = these.v$/;"	l
cur	scala/collection/mutable/LinkedHashMap.scala	/^    var cur = firstEntry$/;"	l
cur	scala/xml/PrettyPrinter.scala	/^    var cur = 0$/;"	l
curInput	scala/xml/parsing/MarkupParser.scala	/^  var curInput: Source = input$/;"	l
curTag	scala/xml/parsing/FactoryAdapter.scala	/^  var curTag : String = null$/;"	l
curr	scala/actors/MessageQueue.scala	/^      var curr = first.next   \/\/ init to element #2$/;"	l
curr	scala/actors/MessageQueue.scala	/^    var curr = first$/;"	l
curr	scala/collection/mutable/UnrolledBuffer.scala	/^      var curr = this$/;"	l
curr	scala/collection/parallel/RemainsIterator.scala	/^      val curr = next$/;"	l
curr	scala/collection/parallel/RemainsIterator.scala	/^    var curr = startValue$/;"	l
curr	scala/collection/parallel/Tasks.scala	/^      var curr = this$/;"	l
curr	scala/collection/parallel/mutable/ParArray.scala	/^        val curr = a(j).asInstanceOf[T]$/;"	l
curr	scala/collection/parallel/mutable/ParArray.scala	/^        var curr = a(j).asInstanceOf[T]$/;"	l
curr	scala/collection/parallel/mutable/ParArray.scala	/^      var curr = startval$/;"	l
curr	scala/collection/parallel/mutable/ParHashTable.scala	/^      var curr = chainhead$/;"	l
curr	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^      var curr = startnode$/;"	l
currbucketsize	scala/collection/mutable/HashTable.scala	/^      var currbucketsize = 0$/;"	l
currbucketsz	scala/collection/mutable/FlatHashTable.scala	/^      var currbucketsz = 0$/;"	l
currbuff	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^        val currbuff = chain(buffind)$/;"	l
current	scala/actors/threadpool/LinkedBlockingQueue.java	/^        private Node<E> current;$/;"	f	class:LinkedBlockingQueue.Itr	file:
current	scala/collection/immutable/List.scala	/^    var current: ::[B] = this$/;"	l
current	scala/collection/immutable/NumericRange.scala	/^    var current = start$/;"	l
current	scala/collection/immutable/PagedSeq.scala	/^    var current: String = ""$/;"	l
current	scala/collection/immutable/Range.scala	/^    var current = start$/;"	l
current	scala/collection/mutable/DoubleLinkedList.scala	/^      var current = emptyList()$/;"	l
current	scala/util/automata/Inclusion.scala	/^    var current = encode(q1, q2)$/;"	l
currentBase	scala/xml/include/sax/XIncludeFilter.scala	/^      var currentBase = parentBase$/;"	l
currentElement	scala/actors/threadpool/LinkedBlockingQueue.java	/^        private E currentElement;$/;"	f	class:LinkedBlockingQueue.Itr	file:
currentIndex	scala/collection/mutable/ArrayStack.scala	/^    var currentIndex = index$/;"	l
currentSink	scala/sys/process/ProcessImpl.scala	/^      val currentSink = new SyncVar[Option[OutputStream]]$/;"	l
currentSource	scala/sys/process/ProcessImpl.scala	/^      val currentSource = new SyncVar[Option[InputStream]]$/;"	l
currentThread	scala/package.scala	/^  def currentThread = java.lang.Thread.currentThread()$/;"	m
currentTime	scala/compat/Platform.scala	/^  def currentTime: Long = System.currentTimeMillis()$/;"	m
curried	scala/Function.scala	/^  def curried[a1, a2, a3, a4, a5, b](f: (a1, a2, a3, a4, a5) => b): a1 => a2 => a3 => a4 => a5 => b = {$/;"	m
curried	scala/Function.scala	/^  def curried[a1, a2, a3, a4, b](f: (a1, a2, a3, a4) => b): a1 => a2 => a3 => a4 => b = {$/;"	m
curried	scala/Function.scala	/^  def curried[a1, a2, a3, b](f: (a1, a2, a3) => b): a1 => a2 => a3 => b = {$/;"	m
curried	scala/Function.scala	/^  def curried[a1, a2, b](f: (a1, a2) => b): a1 => a2 => b = {$/;"	m
curried	scala/Function10.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => T7 => T8 => T9 => T10 => R = {$/;"	m
curried	scala/Function11.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => T7 => T8 => T9 => T10 => T11 => R = {$/;"	m
curried	scala/Function12.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => T7 => T8 => T9 => T10 => T11 => T12 => R = {$/;"	m
curried	scala/Function13.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => T7 => T8 => T9 => T10 => T11 => T12 => T13 => R = {$/;"	m
curried	scala/Function14.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => T7 => T8 => T9 => T10 => T11 => T12 => T13 => T14 => R = {$/;"	m
curried	scala/Function15.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => T7 => T8 => T9 => T10 => T11 => T12 => T13 => T14 => T15 => R = {$/;"	m
curried	scala/Function16.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => T7 => T8 => T9 => T10 => T11 => T12 => T13 => T14 => T15 => T16 => R = {$/;"	m
curried	scala/Function17.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => T7 => T8 => T9 => T10 => T11 => T12 => T13 => T14 => T15 => T16 => T17 => R = {$/;"	m
curried	scala/Function18.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => T7 => T8 => T9 => T10 => T11 => T12 => T13 => T14 => T15 => T16 => T17 => T18 => R = {$/;"	m
curried	scala/Function19.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => T7 => T8 => T9 => T10 => T11 => T12 => T13 => T14 => T15 => T16 => T17 => T18 => T19 => R = {$/;"	m
curried	scala/Function2.scala	/^  def curried: T1 => T2 => R = {$/;"	m
curried	scala/Function20.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => T7 => T8 => T9 => T10 => T11 => T12 => T13 => T14 => T15 => T16 => T17 => T18 => T19 => T20 => R = {$/;"	m
curried	scala/Function21.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => T7 => T8 => T9 => T10 => T11 => T12 => T13 => T14 => T15 => T16 => T17 => T18 => T19 => T20 => T21 => R = {$/;"	m
curried	scala/Function22.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => T7 => T8 => T9 => T10 => T11 => T12 => T13 => T14 => T15 => T16 => T17 => T18 => T19 => T20 => T21 => T22 => R = {$/;"	m
curried	scala/Function3.scala	/^  def curried: T1 => T2 => T3 => R = {$/;"	m
curried	scala/Function4.scala	/^  def curried: T1 => T2 => T3 => T4 => R = {$/;"	m
curried	scala/Function5.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => R = {$/;"	m
curried	scala/Function6.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => R = {$/;"	m
curried	scala/Function7.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => T7 => R = {$/;"	m
curried	scala/Function8.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => T7 => T8 => R = {$/;"	m
curried	scala/Function9.scala	/^  def curried: T1 => T2 => T3 => T4 => T5 => T6 => T7 => T8 => T9 => R = {$/;"	m
curry	scala/Function10.scala	/^  def curry = curried$/;"	m
curry	scala/Function11.scala	/^  def curry = curried$/;"	m
curry	scala/Function12.scala	/^  def curry = curried$/;"	m
curry	scala/Function13.scala	/^  def curry = curried$/;"	m
curry	scala/Function14.scala	/^  def curry = curried$/;"	m
curry	scala/Function15.scala	/^  def curry = curried$/;"	m
curry	scala/Function16.scala	/^  def curry = curried$/;"	m
curry	scala/Function17.scala	/^  def curry = curried$/;"	m
curry	scala/Function18.scala	/^  def curry = curried$/;"	m
curry	scala/Function19.scala	/^  def curry = curried$/;"	m
curry	scala/Function2.scala	/^  def curry = curried$/;"	m
curry	scala/Function20.scala	/^  def curry = curried$/;"	m
curry	scala/Function21.scala	/^  def curry = curried$/;"	m
curry	scala/Function22.scala	/^  def curry = curried$/;"	m
curry	scala/Function3.scala	/^  def curry = curried$/;"	m
curry	scala/Function4.scala	/^  def curry = curried$/;"	m
curry	scala/Function5.scala	/^  def curry = curried$/;"	m
curry	scala/Function6.scala	/^  def curry = curried$/;"	m
curry	scala/Function7.scala	/^  def curry = curried$/;"	m
curry	scala/Function8.scala	/^  def curry = curried$/;"	m
curry	scala/Function9.scala	/^  def curry = curried$/;"	m
cursor	scala/collection/mutable/ListBuffer.scala	/^        var cursor = start$/;"	l
cursor	scala/collection/mutable/ListBuffer.scala	/^      var cursor = start$/;"	l
cursor	scala/collection/mutable/ListBuffer.scala	/^    var cursor = start$/;"	l
cursor	scala/collection/mutable/ListBuffer.scala	/^    var cursor: List[A] = null$/;"	l
cv	scala/util/Sorting.scala	/^          var cv = x(c) compare v$/;"	l
d	scala/collection/immutable/Vector.scala	/^    val d = requiredDepth(xor)$/;"	l
d	scala/collection/mutable/FlatHashTable.scala	/^      val d = table.length >> 1$/;"	l
d	scala/util/Sorting.scala	/^        var d = c$/;"	l
d	scala/util/parsing/combinator/lexical/StdLexical.scala	/^    val d = new Array[String](delimiters.size)$/;"	l
daemonizeThreads	scala/sys/process/ProcessIO.scala	/^  val daemonizeThreads: Boolean$/;"	l
daemonized	scala/sys/process/ProcessBuilderImpl.scala	/^    def daemonized(): ProcessBuilder = new DaemonBuilder(this)$/;"	m
daemonized	scala/sys/process/ProcessIO.scala	/^  def daemonized(): ProcessIO = new ProcessIO(writeInput, processOutput, processError, true)$/;"	m
dashR	scala/xml/include/sax/Main.scala	/^    def dashR = args.size >= 2 && args(0) == "-r"$/;"	m
data	scala/collection/immutable/PagedSeq.scala	/^  final val data = new Array[T](PageSize)$/;"	l
data	scala/io/BytePickle.scala	/^  def data[a](tag: a => Int, ps: List[()=>SPU[a]]): SPU[a] =$/;"	m
data	scala/xml/include/sax/EncodingHeuristics.scala	/^      val data = new Array[Byte](bytesToRead - 4)$/;"	l
datain	scala/actors/remote/TcpService.scala	/^  val datain = new DataInputStream(so.getInputStream)$/;"	l
dataout	scala/actors/remote/TcpService.scala	/^  val dataout = new DataOutputStream(so.getOutputStream)$/;"	l
dbg	scala/sys/process/package.scala	/^      def dbg(msgs: Any*) = if (processDebug) {$/;"	m
debugBuffer	scala/collection/parallel/ParIterableLike.scala	/^  def debugBuffer: ArrayBuffer[String] = null$/;"	m
decimalNumber	scala/util/parsing/combinator/JavaTokenParsers.scala	/^  def decimalNumber: Parser[String] = $/;"	m
decl	scala/reflect/generic/Types.scala	/^    def decl(name: Name): Symbol$/;"	m
decl	scala/xml/parsing/ValidatingMarkupHandler.scala	/^    val decl = lookupElemDecl(label);$/;"	l
declCurrent	scala/xml/parsing/ValidatingMarkupHandler.scala	/^  var declCurrent: ElemDecl = null$/;"	l
declStack	scala/xml/parsing/ValidatingMarkupHandler.scala	/^  var declStack: List[ElemDecl] = Nil$/;"	l
declaration	scala/xml/include/sax/EncodingHeuristics.scala	/^      val declaration = new String(data, 0, length, "ISO-8859-1")$/;"	l
decls	scala/xml/dtd/DTD.scala	/^  var decls: List[Decl]                 = Nil$/;"	l
decls	scala/xml/parsing/MarkupHandler.scala	/^  var decls: List[Decl] = Nil$/;"	l
decode	scala/io/UTF8Codec.scala	/^  def decode(src: Array[Byte], from: Int, dst: Array[Char], to: Int, len: Int): Int = {$/;"	m
decode	scala/io/UTF8Codec.scala	/^  def decode(src: Array[Byte], from: Int, len: Int): String =$/;"	m
decode	scala/reflect/NameTransformer.scala	/^  def decode(name0: String): String = {$/;"	m
decode	scala/reflect/generic/ByteCodecs.scala	/^  def decode(xs: Array[Byte]): Int = {$/;"	m
decode	scala/reflect/generic/ByteCodecs.scala	/^  def decode(xs: Array[Byte], dstlen: Int) { decode(xs) }$/;"	m
decode	scala/xml/Xhtml.scala	/^    def decode(er: EntityRef) = XhtmlEntities.entMap.get(er.entityName) match {$/;"	m
decode1	scala/util/automata/Inclusion.scala	/^    def decode1(c: Int) = (c-1) % (dfa1.nstates)$/;"	m
decode2	scala/util/automata/Inclusion.scala	/^    def decode2(c: Int) = (c-1) \/ (dfa1.nstates) \/\/integer division$/;"	m
decode7to8	scala/reflect/generic/ByteCodecs.scala	/^  def decode7to8(src: Array[Byte], srclen: Int): Int = {$/;"	m
decode7to8	scala/reflect/generic/ByteCodecs.scala	/^  def decode7to8(src: Array[Byte], srclen: Int, dstlen: Int) { decode7to8(src, srclen) }$/;"	m
decodedName	scala/reflect/generic/Symbols.scala	/^    def decodedName: String = stripLocalSuffix(NameTransformer.decode(encodedName))$/;"	m
decoder	scala/io/Codec.scala	/^  def decoder = $/;"	m
decoder2codec	scala/io/Codec.scala	/^  implicit def decoder2codec(cd: CharsetDecoder) = apply(cd)$/;"	m
decodingReplaceWith	scala/io/Codec.scala	/^  def decodingReplaceWith(newReplacement: String): this.type = { _decodingReplacement = newReplacement ; this }$/;"	m
decrementAndGet	scala/actors/threadpool/AtomicInteger.java	/^    public final synchronized int decrementAndGet() {$/;"	m	class:AtomicInteger
decrementWorkerCount	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private void decrementWorkerCount() {$/;"	m	class:ThreadPoolExecutor	file:
deep	scala/collection/mutable/ArrayLike.scala	/^  def deep: scala.collection.IndexedSeq[Any] = new scala.collection.IndexedSeq[Any] {$/;"	m
deepEquals	scala/actors/threadpool/Arrays.java	/^    public static boolean deepEquals(Object[] a1, Object[] a2) {$/;"	m	class:Arrays
deepEquals	scala/collection/mutable/ArrayLike.scala	/^  final def deepEquals(that: Any): Boolean = that match {$/;"	m
deepHashCode	scala/actors/threadpool/Arrays.java	/^    public static int deepHashCode(Object a[]) {$/;"	m	class:Arrays
deepMkString	scala/collection/mutable/ArrayLike.scala	/^  final def deepMkString(sep: String): String = $/;"	m
deepMkString	scala/collection/mutable/ArrayLike.scala	/^  final def deepMkString(start: String, sep: String, end: String): String =$/;"	m
deepToString	scala/actors/threadpool/Arrays.java	/^    private static void deepToString(Object[] a, StringBuffer buf, List seen) {$/;"	m	class:Arrays	file:
deepToString	scala/actors/threadpool/Arrays.java	/^    public static String deepToString(Object[] a) {$/;"	m	class:Arrays
deepToString	scala/collection/mutable/ArrayLike.scala	/^  final def deepToString() = $/;"	m
default	scala/collection/GenMapLike.scala	/^  def default(key: A): B$/;"	m
default	scala/collection/MapLike.scala	/^  def default(key: A): B =$/;"	m
default	scala/collection/interfaces/MapMethods.scala	/^  def default(key: A): B$/;"	m
default	scala/collection/parallel/ParMapLike.scala	/^  def default(key: K): V = throw new NoSuchElementException("key not found: " + key)$/;"	m
default	scala/io/Codec.scala	/^  def default                               = defaultCharsetCodec$/;"	m
default	scala/util/automata/DetWordAutom.scala	/^  val default: Array[Int]$/;"	l
default	scala/util/automata/NondetWordAutom.scala	/^  val default: Array[BitSet]$/;"	l
default	scala/util/automata/SubsetConstruction.scala	/^      val default = defaultR$/;"	l
default	scala/util/automata/WordBerrySethi.scala	/^          val default  = defaultArr$/;"	l
default	scala/xml/include/sax/EncodingHeuristics.scala	/^    val default       = utf8$/;"	l
defaultArr	scala/util/automata/WordBerrySethi.scala	/^        val defaultArr  = 0 until pos map (k => immutable.BitSet(defaultq(k): _*)) toArray$/;"	l
defaultCharsetCodec	scala/io/Codec.scala	/^  def defaultCharsetCodec                   = apply(Charset.defaultCharset)$/;"	m
defaultCharsetName	scala/compat/Platform.scala	/^  def defaultCharsetName: String = java.nio.charset.Charset.defaultCharset.name$/;"	m
defaultForkJoinPool	scala/collection/parallel/Tasks.scala	/^  val defaultForkJoinPool: ForkJoinPool = new ForkJoinPool() \/\/ scala.parallel.forkjoinpool$/;"	l
defaultFormatter	scala/util/parsing/json/Parser.scala	/^  val defaultFormatter : ValueFormatter = (x : Any) => x match {$/;"	l
defaultHandler	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private static final RejectedExecutionHandler defaultHandler =$/;"	f	class:ThreadPoolExecutor	file:
defaultMathContext	scala/math/BigDecimal.scala	/^  val defaultMathContext = MathContext.DECIMAL128$/;"	l
defaultR	scala/util/automata/SubsetConstruction.scala	/^    val defaultR = new Array[Int](nstatesR)$/;"	l
defaultRunner	scala/concurrent/ops.scala	/^  val defaultRunner: FutureTaskRunner = TaskRunners.threadRunner$/;"	l
defaultThreadFactory	scala/actors/threadpool/Executors.java	/^    public static ThreadFactory defaultThreadFactory() {$/;"	m	class:Executors
defaultThreadPool	scala/collection/parallel/Tasks.scala	/^  val defaultThreadPool = Executors.newCachedThreadPool()$/;"	l
defaultThreadPool	scala/collection/parallel/Tasks.scala	/^  val defaultThreadPool = new ThreadPoolExecutor($/;"	l
defaultValue	scala/concurrent/pilib.scala	/^    var defaultValue: A = _$/;"	l
defdecl	scala/xml/parsing/MarkupParser.scala	/^      val defdecl: DefaultDecl = ch match {$/;"	l
defineType	scala/reflect/generic/Trees.scala	/^    def defineType(tp: Type): this.type = setType(tp)$/;"	m
definitions	scala/reflect/generic/StandardDefinitions.scala	/^  val definitions: AbsDefinitions$/;"	l
deftrans	scala/util/automata/SubsetConstruction.scala	/^    var deftrans = mutable.Map(q0 -> sink, sink -> sink)  \/\/ initial transitions$/;"	l
del	scala/collection/immutable/RedBlack.scala	/^    def del(k: A): Tree[B] = {$/;"	m
del	scala/collection/immutable/RedBlack.scala	/^    def del(k: A): Tree[B]$/;"	m
del	scala/collection/immutable/RedBlack.scala	/^    def del(k: A): Tree[Nothing] = this$/;"	m
delLeft	scala/collection/immutable/RedBlack.scala	/^      def delLeft = left match {$/;"	m
delRight	scala/collection/immutable/RedBlack.scala	/^      def delRight = right match {$/;"	m
delay	scala/reflect/generic/UnPickler.scala	/^      def delay(i: Int, action: => Unit) {$/;"	m
delayedInit	scala/DelayedInit.scala	/^  def delayedInit(x: => Unit): Unit$/;"	m
delete	scala/collection/immutable/RedBlack.scala	/^    def delete(k: A): Tree[B] = blacken(del(k))$/;"	m
delete	scala/collection/mutable/StringBuilder.scala	/^  def delete(start: Int, end: Int): StringBuilder = {$/;"	m
deleteCharAt	scala/collection/mutable/StringBuilder.scala	/^  def deleteCharAt(index: Int): StringBuilder = {$/;"	m
delimiters	scala/util/parsing/combinator/lexical/StdLexical.scala	/^  val delimiters = new HashSet[String]$/;"	l
deliver	scala/collection/Iterator.scala	/^      def deliver(howMany: Int) = {$/;"	m
delivered	scala/collection/mutable/ListBuffer.scala	/^    var delivered = 0$/;"	l
delta	scala/util/automata/DetWordAutom.scala	/^  val delta: Array[mutable.Map[T, Int]]$/;"	l
delta	scala/util/automata/NondetWordAutom.scala	/^  val delta: Array[mutable.Map[T, BitSet]]$/;"	l
delta	scala/util/automata/SubsetConstruction.scala	/^      val delta = deltaR$/;"	l
delta	scala/util/automata/SubsetConstruction.scala	/^    val delta    = new mutable.HashMap[BitSet, mutable.HashMap[T, BitSet]]$/;"	l
delta	scala/util/automata/WordBerrySethi.scala	/^          val delta    = deltaArr$/;"	l
delta1	scala/util/automata/WordBerrySethi.scala	/^        val delta1      = immutable.Map(deltaq.zipWithIndex map (_.swap): _*)$/;"	l
deltaArr	scala/util/automata/WordBerrySethi.scala	/^        val deltaArr: Array[mutable.Map[_labelT, immutable.BitSet]] =$/;"	l
deltaR	scala/util/automata/SubsetConstruction.scala	/^    val deltaR = new Array[mutable.Map[T, Int]](nstatesR)$/;"	l
deltaString	scala/util/automata/NondetWordAutom.scala	/^    val deltaString = (0 until nstates) .$/;"	l
deprecated	scala/deprecated.scala	/^class deprecated(message: String = "", since: String = "") extends annotation.StaticAnnotation$/;"	c
deprecated	scala/package.scala	/^  type deprecated = annotation.deprecated$/;"	T
deprecatedName	scala/deprecatedName.scala	/^class deprecatedName(name: Symbol) extends annotation.StaticAnnotation$/;"	c
deprecatedName	scala/package.scala	/^  type deprecatedName = annotation.deprecatedName$/;"	T
deq	scala/actors/threadpool/SynchronousQueue.java	/^        Node deq() {$/;"	m	class:SynchronousQueue.FifoWaitQueue
deq	scala/actors/threadpool/SynchronousQueue.java	/^        Node deq() {$/;"	m	class:SynchronousQueue.LifoWaitQueue
deq	scala/actors/threadpool/SynchronousQueue.java	/^        abstract Node deq();$/;"	m	class:SynchronousQueue.WaitQueue
dequeue	scala/actors/threadpool/LinkedBlockingQueue.java	/^    private E dequeue() {$/;"	m	class:LinkedBlockingQueue	file:
dequeue	scala/collection/immutable/Queue.scala	/^  def dequeue: (A, Queue[A]) = out match {$/;"	m
dequeue	scala/collection/mutable/PriorityQueue.scala	/^  def dequeue(): A =$/;"	m
dequeue	scala/collection/mutable/Queue.scala	/^  def dequeue(): A =$/;"	m
dequeueAll	scala/collection/mutable/PriorityQueue.scala	/^  def dequeueAll[A1 >: A, That](implicit bf: CanBuildFrom[_, A1, That]): That = {$/;"	m
dequeueAll	scala/collection/mutable/Queue.scala	/^  def dequeueAll(p: A => Boolean): Seq[A] = {$/;"	m
dequeueFirst	scala/collection/mutable/Queue.scala	/^  def dequeueFirst(p: A => Boolean): Option[A] =$/;"	m
desc	scala/util/control/Exception.scala	/^    def desc = _desc$/;"	m
descendant	scala/xml/Node.scala	/^  def descendant: List[Node] =$/;"	m
descendant_or_self	scala/xml/Node.scala	/^  def descendant_or_self: List[Node] = this :: descendant$/;"	m
descr	scala/collection/immutable/NumericRange.scala	/^        val descr = List(start, word, end, "by", step) mkString " "$/;"	l
descr	scala/io/Source.scala	/^  var descr: String = ""$/;"	l
deserialize	scala/actors/remote/JavaSerializer.scala	/^  def deserialize(bytes: Array[Byte]): AnyRef = {$/;"	m
deserialize	scala/actors/remote/Serializer.scala	/^  def deserialize(a: Array[Byte]): AnyRef$/;"	m
dest	scala/runtime/ScalaRunTime.scala	/^    val dest = new Array[Object](length)$/;"	l
destroy	scala/sys/process/Process.scala	/^  def destroy(): Unit$/;"	m
destroy	scala/sys/process/ProcessImpl.scala	/^    def destroy()   = destroyer()$/;"	m
determinize	scala/util/automata/SubsetConstruction.scala	/^  def determinize: DetWordAutom[T] = {    $/;"	m
developmentVersion	scala/util/Properties.scala	/^  val developmentVersion = scalaPropOrNone("version.number") flatMap { s =>$/;"	l
dfa	scala/xml/dtd/ContentModel.scala	/^  lazy val dfa: DetWordAutom[ElemName] = {$/;"	l
dictionaryAsScalaMap	scala/collection/JavaConversions.scala	/^  implicit def dictionaryAsScalaMap[A, B](p: ju.Dictionary[A, B]): mutable.Map[A, B] = p match {$/;"	m
dictionaryAsScalaMapConverter	scala/collection/JavaConverters.scala	/^  implicit def dictionaryAsScalaMapConverter[A, B](p: ju.Dictionary[A, B]): AsScala[mutable.Map[A, B]] =$/;"	m
diff	scala/collection/GenSeqLike.scala	/^  def diff[B >: A](that: GenSeq[B]): Repr$/;"	m
diff	scala/collection/GenSetLike.scala	/^  def diff(that: GenSet[A]): Repr$/;"	m
diff	scala/collection/SeqLike.scala	/^    var diff = len - length$/;"	l
diff	scala/collection/SeqLike.scala	/^  def diff[B >: A](that: GenSeq[B]): Repr = {$/;"	m
diff	scala/collection/SeqLike.scala	/^  def diff[B >: A](that: Seq[B]): Repr = diff(that: GenSeq[B])$/;"	m
diff	scala/collection/SetLike.scala	/^  def diff(that: GenSet[A]): This = this -- that$/;"	m
diff	scala/collection/SetLike.scala	/^  def diff(that: Set[A]): This = diff(that: GenSet[A])$/;"	m
diff	scala/collection/immutable/NumericRange.scala	/^      val diff      = num.minus(end, start)$/;"	l
diff	scala/collection/interfaces/SeqMethods.scala	/^  def diff[B >: A, That](that: Seq[B]): This$/;"	m
diff	scala/collection/interfaces/SetMethods.scala	/^  def diff(that: Set[A]): This$/;"	m
diff	scala/collection/parallel/ParIterableLike.scala	/^      val diff = len - pit.remaining$/;"	l
diff	scala/collection/parallel/ParSeqLike.scala	/^  def diff[U >: T](that: GenSeq[U]): Repr = sequentially {$/;"	m
diff	scala/collection/parallel/ParSetLike.scala	/^  def diff(that: GenSet[T]): Repr = sequentially {$/;"	m
digit	scala/util/parsing/combinator/lexical/Lexical.scala	/^  def digit = elem("digit", _.isDigit)$/;"	m
disable	scala/sys/BooleanProp.scala	/^    def disable() = this.clear()$/;"	m
disable	scala/sys/BooleanProp.scala	/^  def disable(): Unit$/;"	m
disconnectNode	scala/actors/remote/TcpService.scala	/^  def disconnectNode(n: Node) = synchronized {$/;"	m
distinct	scala/collection/GenSeqLike.scala	/^  def distinct: Repr$/;"	m
distinct	scala/collection/SeqLike.scala	/^  def distinct: Repr = {$/;"	m
distinct	scala/collection/interfaces/SeqMethods.scala	/^  def distinct: This$/;"	m
distinct	scala/collection/parallel/ParSeqLike.scala	/^  def distinct: Repr = sequentially {$/;"	m
div	scala/math/Fractional.scala	/^  def div(x: T, y: T): T$/;"	m
div	scala/math/Numeric.scala	/^    def div(x: BigDecimal, y: BigDecimal): BigDecimal = x \/ y$/;"	m
div	scala/math/Numeric.scala	/^    def div(x: Double, y: Double): Double = x \/ y$/;"	m
div	scala/math/Numeric.scala	/^    def div(x: Float, y: Float): Float = x \/ y$/;"	m
divide	scala/runtime/BoxesRunTime.java	/^    public static Object divide(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
divisor	scala/actors/threadpool/helpers/Utils.java	/^        final long multiplier, divisor;$/;"	f	class:Utils.SunPerfProvider
divpt	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val divpt = (until + idx) \/ 2$/;"	l
divsz	scala/collection/parallel/mutable/ParHashTable.scala	/^        val divsz = (until - idx) \/ 2$/;"	l
divsz	scala/collection/parallel/package.scala	/^      val divsz = (until - index) \/ 2$/;"	l
doCollectNamespaces	scala/xml/Node.scala	/^  def doCollectNamespaces = true  \/\/ if (tag >= 0) DO collect namespaces$/;"	m
doError	scala/actors/Debug.scala	/^  def doError(b: => Unit) =$/;"	m
doIgnore	scala/xml/parsing/MarkupParser.scala	/^    def doIgnore() = {$/;"	m
doInclude	scala/xml/parsing/MarkupParser.scala	/^    def doInclude() = {$/;"	m
doInfo	scala/actors/Debug.scala	/^  def doInfo(b: => Unit) =$/;"	m
doInvokeAny	scala/actors/threadpool/AbstractExecutorService.java	/^    private Object doInvokeAny(Collection tasks,$/;"	m	class:AbstractExecutorService	file:
doSpaces	scala/xml/Xhtml.scala	/^    val doSpaces = children forall isAtomAndNotText \/\/ interleave spaces$/;"	l
doTimedWait	scala/actors/threadpool/helpers/WaitQueue.java	/^        public synchronized boolean doTimedWait(QueuedSync sync, long nanos)$/;"	m	class:WaitQueue.WaitNode
doTransform	scala/xml/Node.scala	/^  def doTransform         = true  \/\/ if (tag < 0) DO NOT transform$/;"	m
doWait	scala/actors/threadpool/helpers/WaitQueue.java	/^        public synchronized void doWait(QueuedSync sync)$/;"	m	class:WaitQueue.WaitNode
doWaitUninterruptibly	scala/actors/threadpool/helpers/WaitQueue.java	/^        public synchronized void doWaitUninterruptibly(QueuedSync sync) {$/;"	m	class:WaitQueue.WaitNode
doWarning	scala/actors/Debug.scala	/^  def doWarning(b: => Unit) =$/;"	m
doc	scala/xml/factory/LoggedNodeFactory.scala	/^  val doc = x.load(new java.net.URL("http:\/\/lampsvn.epfl.ch\/svn-repos\/scala\/scala\/trunk\/build.xml"))$/;"	l
docElem	scala/xml/Document.scala	/^  var docElem: Node = _$/;"	l
document	scala/xml/parsing/MarkupParser.scala	/^  def document(): Document = {$/;"	m
done	scala/actors/Actor.scala	/^    var done = false$/;"	l
done	scala/actors/Reactor.scala	/^    var done = false$/;"	l
done	scala/actors/ReplyReactor.scala	/^    var done = false$/;"	l
done	scala/actors/threadpool/ExecutorCompletionService.java	/^        protected void done() { completionQueue.add(task); }$/;"	m	class:ExecutorCompletionService.QueueingFuture
done	scala/actors/threadpool/FutureTask.java	/^    protected void done() { }$/;"	m	class:FutureTask
done	scala/sys/process/BasicIO.scala	/^    val    done: Int => Unit,$/;"	l
done	scala/util/Sorting.scala	/^        var done = false$/;"	l
done	scala/util/continuations/ControlContext.scala	/^          var done = false$/;"	l
done	scala/util/control/TailCalls.scala	/^  def done[A](result: A): TailRec[A] = new Done(result)$/;"	m
done	scala/xml/parsing/MarkupParser.scala	/^    def done = new NodeSeq { val theSeq = ts.toList }$/;"	m
double2Double	scala/Predef.scala	/^  implicit def double2Double(x: Double)     = java.lang.Double.valueOf(x)$/;"	m
double2DoubleConflict	scala/Predef.scala	/^  implicit def double2DoubleConflict(x: Double)     = new AnyRef$/;"	m
double2bigDecimal	scala/math/BigDecimal.scala	/^  implicit def double2bigDecimal(d: Double): BigDecimal = valueOf(d, defaultMathContext)$/;"	m
doubleArrayOps	scala/Predef.scala	/^  implicit def doubleArrayOps(xs: Array[Double]): ArrayOps[Double] = new ArrayOps.ofDouble(xs)$/;"	m
doubleAsIntegral	scala/collection/immutable/Range.scala	/^    implicit val doubleAsIntegral = scala.math.Numeric.DoubleAsIfIntegral$/;"	l
doubleValue	scala/actors/threadpool/AtomicInteger.java	/^    public double doubleValue() {$/;"	m	class:AtomicInteger
doubleValue	scala/math/BigDecimal.scala	/^  def doubleValue = this.bigDecimal.doubleValue$/;"	m
doubleValue	scala/math/BigInt.scala	/^  def doubleValue = this.bigInteger.doubleValue$/;"	m
doubleValue	scala/reflect/generic/Constants.scala	/^    def doubleValue: Double = tag match {$/;"	m
doubleValue	scala/runtime/ScalaNumberProxy.scala	/^  def doubleValue() = num.toDouble(self)$/;"	m
doubleWrapper	scala/LowPriorityImplicits.scala	/^  implicit def doubleWrapper(x: Double)   = new runtime.RichDouble(x)  $/;"	m
down	scala/collection/immutable/List.scala	/^    val down = step(start) < start$/;"	l
dr	scala/math/BigInt.scala	/^    val dr = this.bigInteger.divideAndRemainder(that.bigInteger)$/;"	l
drain	scala/collection/mutable/ArrayStack.scala	/^  def drain(f: T => Unit) = while (!isEmpty) f(pop)$/;"	m
drainQueue	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private List drainQueue() {$/;"	m	class:ThreadPoolExecutor	file:
drainRefQ	scala/actors/scheduler/ActorGC.scala	/^    def drainRefQ() {$/;"	m
drainTo	scala/actors/threadpool/BlockingQueue.java	/^    int drainTo(Collection<? super E> c);$/;"	m	interface:BlockingQueue
drainTo	scala/actors/threadpool/BlockingQueue.java	/^    int drainTo(Collection<? super E> c, int maxElements);$/;"	m	interface:BlockingQueue
drainTo	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public int drainTo(Collection<? super E> c) {$/;"	m	class:LinkedBlockingQueue
drainTo	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public int drainTo(Collection<? super E> c, int maxElements) {$/;"	m	class:LinkedBlockingQueue
drainTo	scala/actors/threadpool/SynchronousQueue.java	/^    public int drainTo(Collection c) {$/;"	m	class:SynchronousQueue
drainTo	scala/actors/threadpool/SynchronousQueue.java	/^    public int drainTo(Collection c, int maxElements) {$/;"	m	class:SynchronousQueue
drop	scala/collection/GenTraversableLike.scala	/^  def drop(n: Int): Repr$/;"	m
drop	scala/collection/IndexedSeqOptimized.scala	/^  def drop(n: Int): Repr = slice(n, length)$/;"	m
drop	scala/collection/Iterator.scala	/^  def drop(n: Int): Iterator[A] = slice(n, Int.MaxValue)$/;"	m
drop	scala/collection/LinearSeqOptimized.scala	/^  def drop(n: Int): Repr = {$/;"	m
drop	scala/collection/TraversableLike.scala	/^  def drop(n: Int): Repr = $/;"	m
drop	scala/collection/interfaces/TraversableMethods.scala	/^  def drop(n: Int): Traversable[A]$/;"	m
drop	scala/collection/parallel/ParIterableLike.scala	/^  def drop(n: Int): Repr = {$/;"	m
drop	scala/util/parsing/input/Reader.scala	/^  def drop(n: Int): Reader[T] = {$/;"	m
drop2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def drop2combiner[U >: T, This](n: Int, cb: Combiner[U, This]): Combiner[U, This] = {$/;"	m
dropRight	scala/collection/IndexedSeqOptimized.scala	/^  def dropRight(n: Int): Repr = slice(0, length - n)$/;"	m
dropRight	scala/collection/IterableLike.scala	/^  def dropRight(n: Int): Repr = {$/;"	m
dropRight	scala/collection/LinearSeqOptimized.scala	/^  def dropRight(n: Int): Repr = {$/;"	m
dropRight	scala/collection/interfaces/IterableMethods.scala	/^  def dropRight(n: Int): Iterable[A]$/;"	m
dropWhile	scala/collection/GenTraversableLike.scala	/^  def dropWhile(pred: A => Boolean): Repr$/;"	m
dropWhile	scala/collection/IndexedSeqOptimized.scala	/^  def dropWhile(p: A => Boolean): Repr = drop(prefixLength(p))$/;"	m
dropWhile	scala/collection/Iterator.scala	/^  def dropWhile(p: A => Boolean): Iterator[A] = {$/;"	m
dropWhile	scala/collection/TraversableLike.scala	/^  def dropWhile(p: A => Boolean): Repr = {$/;"	m
dropWhile	scala/collection/interfaces/TraversableMethods.scala	/^  def dropWhile(p: A => Boolean): Traversable[A]$/;"	m
dropWhile	scala/collection/parallel/ParIterableLike.scala	/^  def dropWhile(pred: T => Boolean): Repr = {$/;"	m
dropped	scala/collection/Iterator.scala	/^      var dropped = false$/;"	l
dst	scala/reflect/generic/ByteCodecs.scala	/^    val dst = new Array[Byte](dstlen)$/;"	l
dst	scala/reflect/generic/ByteCodecs.scala	/^    val dst = new Array[Byte](srclen + count)$/;"	l
dstlen	scala/reflect/generic/ByteCodecs.scala	/^    val dstlen = (srclen * 7 + 7) \/ 8$/;"	l
dstlen	scala/reflect/generic/ByteCodecs.scala	/^    val dstlen = (srclen * 8 + 6) \/ 7$/;"	l
dtd	scala/xml/Document.scala	/^  var dtd: scala.xml.dtd.DTD = _$/;"	l
dtd	scala/xml/dtd/ContentModel.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/ContentModelParser.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/DTD.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/Decl.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/DocType.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/ElementValidator.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/ExternalID.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/Scanner.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/Tokens.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/ValidationException.scala	/^package dtd$/;"	p
dtd	scala/xml/parsing/MarkupParser.scala	/^  var dtd: DTD = null$/;"	l
dummyImplicit	scala/Predef.scala	/^    implicit def dummyImplicit: DummyImplicit = new DummyImplicit$/;"	m
dump	scala/util/Marshal.scala	/^  def dump[A](o: A)(implicit m: ClassManifest[A]): Array[Byte] = {$/;"	m
dup	scala/collection/mutable/ArrayStack.scala	/^  def dup() = push(top)$/;"	m
dup	scala/collection/parallel/ParSeqLike.scala	/^    def dup = new Elements(i, end) with SignalContextPassingIterator[ParIterator]$/;"	m
dup	scala/collection/parallel/RemainsIterator.scala	/^    def dup = self.dup.patchParSeq(from, patch, replaced)$/;"	m
dup	scala/collection/parallel/RemainsIterator.scala	/^    def dup: IterableSplitter[(T, S)] = self.dup.zipParSeq(that)$/;"	m
dup	scala/collection/parallel/RemainsIterator.scala	/^    def dup: IterableSplitter[(U, S)] = self.dup.zipAllParSeq(that, thiselem, thatelem)$/;"	m
dup	scala/collection/parallel/RemainsIterator.scala	/^    def dup: IterableSplitter[S] = self.dup map f$/;"	m
dup	scala/collection/parallel/RemainsIterator.scala	/^    def dup: IterableSplitter[T] = self.dup.take(taken)$/;"	m
dup	scala/collection/parallel/RemainsIterator.scala	/^    def dup: IterableSplitter[U] = self.dup.appendParIterable[U, PI](that)$/;"	m
dup	scala/collection/parallel/RemainsIterator.scala	/^  def dup: IterableSplitter[T]$/;"	m
dup	scala/collection/parallel/RemainsIterator.scala	/^  def dup: SeqSplitter[T]$/;"	m
dup	scala/collection/parallel/immutable/ParHashMap.scala	/^    def dup = triter match {$/;"	m
dup	scala/collection/parallel/immutable/ParHashSet.scala	/^    def dup = triter match {$/;"	m
dup	scala/collection/parallel/immutable/ParRange.scala	/^    def dup = new ParRangeIterator(rangeleft) with SCPI$/;"	m
dup	scala/collection/parallel/immutable/ParVector.scala	/^    def dup: SeqSplitter[T] = (new ParVector(remainingVector)).splitter$/;"	m
dup	scala/collection/parallel/immutable/package.scala	/^      def dup = new ParIterator(i, until, elem) with SCPI$/;"	m
dup	scala/collection/parallel/mutable/ParArray.scala	/^    def dup = new ParArrayIterator(i, until, arr) with SCPI$/;"	m
dup	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^    def dup = newIterator(idx, until, totalsize)$/;"	m
dup	scala/collection/parallel/mutable/ParHashTable.scala	/^    def dup = newIterator(idx, until, totalsize, es)$/;"	m
dup	scala/collection/parallel/package.scala	/^    def dup = new BufferSplitter(buffer, index, until, signalDelegate)$/;"	m
dupIterator	scala/collection/immutable/TrieIterator.scala	/^  def dupIterator: TrieIterator[T] = new DupIterator(elems)$/;"	m
duplicate	scala/collection/Iterator.scala	/^  def duplicate: (Iterator[A], Iterator[A]) = {$/;"	m
e	scala/actors/threadpool/Executors.java	/^        private final ExecutorService e;$/;"	f	class:Executors.DelegatedExecutorService	file:
e	scala/collection/Iterator.scala	/^          val e = self.next()$/;"	l
e	scala/collection/Iterator.scala	/^      val e = next()$/;"	l
e	scala/collection/immutable/HashSet.scala	/^        val e = in.readObject().asInstanceOf[A]$/;"	l
e	scala/collection/immutable/PagedSeq.scala	/^    val e = if (_end == UndeterminedEnd) _end else start + _end$/;"	l
e	scala/collection/mutable/DefaultMapModel.scala	/^    val e = findEntry(key)$/;"	l
e	scala/collection/mutable/HashMap.scala	/^    val e = findEntry(key)$/;"	l
e	scala/collection/mutable/HashMap.scala	/^    val e = findEntry(kv._1)$/;"	l
e	scala/collection/mutable/HashMap.scala	/^    val e = removeEntry(key)$/;"	l
e	scala/collection/mutable/HashTable.scala	/^        var e = tbl(tableidx)$/;"	l
e	scala/collection/mutable/HashTable.scala	/^      var e = oldTable(i)$/;"	l
e	scala/collection/mutable/HashTable.scala	/^    var e = table(h).asInstanceOf[Entry]$/;"	l
e	scala/collection/mutable/LinkedHashMap.scala	/^      val e = new Entry(key, value)$/;"	l
e	scala/collection/mutable/LinkedHashMap.scala	/^    val e = findEntry(key)$/;"	l
e	scala/collection/mutable/LinkedHashMap.scala	/^    val e = removeEntry(key)$/;"	l
e	scala/collection/parallel/mutable/ParHashMap.scala	/^    val e = findEntry(key)$/;"	l
e	scala/collection/parallel/mutable/ParHashMap.scala	/^    val e = findEntry(kv._1)$/;"	l
e	scala/collection/parallel/mutable/ParHashMap.scala	/^    val e = removeEntry(key)$/;"	l
e1	scala/collection/mutable/HashTable.scala	/^        val e1 = e.next$/;"	l
e1	scala/collection/mutable/HashTable.scala	/^        var e1 = e.next$/;"	l
earlier	scala/collection/mutable/LinkedEntry.scala	/^  var earlier: LinkedEntry[A, B] = null$/;"	l
either	scala/util/control/Exception.scala	/^    def either(): Either[Throwable, T]                    = catcher either body$/;"	m
either	scala/util/control/Exception.scala	/^    def either[U >: T](body: => U): Either[Throwable, U] = toEither(Right(body))$/;"	m
either	scala/util/control/Exception.scala	/^    def either[U >: T](other: => U): Either[Throwable, U] = catcher either other$/;"	m
either2mergeable	scala/Either.scala	/^  implicit def either2mergeable[A](x: Either[A, A]): MergeableEither[A] = new MergeableEither(x)$/;"	m
el	scala/actors/MessageQueue.scala	/^    val el = new MQueueElement(msg, session)$/;"	l
el	scala/collection/immutable/TrieIterator.scala	/^      val el = subIter.next$/;"	l
el	scala/xml/factory/NodeFactory.scala	/^    val el = create(pre, name, attrSeq, scope, children)$/;"	l
el2	scala/Tuple2.scala	/^          val el2 = elems2.next$/;"	l
el2	scala/Tuple3.scala	/^          val el2 = elems2.next$/;"	l
el3	scala/Tuple3.scala	/^          val el3 = elems3.next$/;"	l
elapsed	scala/concurrent/SyncVar.scala	/^      val elapsed = waitMeasuringElapsed(rest)$/;"	l
elapsed	scala/concurrent/SyncVar.scala	/^    val elapsed = System.currentTimeMillis - start$/;"	l
elem	scala/collection/Iterator.scala	/^    var elem = z$/;"	l
elem	scala/collection/immutable/ListMap.scala	/^        val elem = lst.head$/;"	l
elem	scala/collection/mutable/FlatHashTable.scala	/^      val elem = in.readObject.asInstanceOf[A]$/;"	l
elem	scala/collection/mutable/HashSet.scala	/^      val elem = table(i)$/;"	l
elem	scala/collection/mutable/LinkedListLike.scala	/^  var elem: A = _$/;"	l
elem	scala/collection/mutable/UnrolledBuffer.scala	/^          val elem = chunkarr(i)$/;"	l
elem	scala/collection/parallel/ParIterableLike.scala	/^        val elem = pit.next$/;"	l
elem	scala/collection/parallel/mutable/ParArray.scala	/^        val elem = a(j).asInstanceOf[T]$/;"	l
elem	scala/collection/parallel/mutable/ParArray.scala	/^      val elem = arr(i)$/;"	l
elem	scala/collection/parallel/mutable/ParHashMap.scala	/^          val elem = chunkarr(i)$/;"	l
elem	scala/collection/parallel/mutable/ParHashSet.scala	/^          val elem = chunkarr(i)$/;"	l
elem	scala/concurrent/Channel.scala	/^    var elem: A = _$/;"	l
elem	scala/runtime/BooleanRef.java	/^    public boolean elem;$/;"	f	class:BooleanRef
elem	scala/runtime/ByteRef.java	/^    public byte elem;$/;"	f	class:ByteRef
elem	scala/runtime/CharRef.java	/^    public char elem;$/;"	f	class:CharRef
elem	scala/runtime/DoubleRef.java	/^    public double elem;$/;"	f	class:DoubleRef
elem	scala/runtime/FloatRef.java	/^    public float elem;$/;"	f	class:FloatRef
elem	scala/runtime/IntRef.java	/^    public int elem;$/;"	f	class:IntRef
elem	scala/runtime/LongRef.java	/^    public long elem;$/;"	f	class:LongRef
elem	scala/runtime/ObjectRef.java	/^    public Object elem;$/;"	f	class:ObjectRef
elem	scala/runtime/ScalaRunTime.scala	/^        val elem = x.productElement(i)$/;"	l
elem	scala/runtime/ShortRef.java	/^    public short elem;$/;"	f	class:ShortRef
elem	scala/runtime/VolatileBooleanRef.java	/^    volatile public boolean elem;$/;"	f	class:VolatileBooleanRef
elem	scala/runtime/VolatileByteRef.java	/^    volatile public byte elem;$/;"	f	class:VolatileByteRef
elem	scala/runtime/VolatileCharRef.java	/^    volatile public char elem;$/;"	f	class:VolatileCharRef
elem	scala/runtime/VolatileDoubleRef.java	/^    volatile public double elem;$/;"	f	class:VolatileDoubleRef
elem	scala/runtime/VolatileFloatRef.java	/^    volatile public float elem;$/;"	f	class:VolatileFloatRef
elem	scala/runtime/VolatileIntRef.java	/^    volatile public int elem;$/;"	f	class:VolatileIntRef
elem	scala/runtime/VolatileLongRef.java	/^    volatile public long elem;$/;"	f	class:VolatileLongRef
elem	scala/runtime/VolatileObjectRef.java	/^    volatile public Object elem;$/;"	f	class:VolatileObjectRef
elem	scala/runtime/VolatileShortRef.java	/^    volatile public short elem;$/;"	f	class:VolatileShortRef
elem	scala/util/parsing/combinator/Parsers.scala	/^  def elem(e: Elem): Parser[Elem] = accept(e)$/;"	m
elem	scala/util/parsing/combinator/Parsers.scala	/^  def elem(kind: String, p: Elem => Boolean) = acceptIf(p)(inEl => kind+" expected")$/;"	m
elem	scala/xml/dtd/DTD.scala	/^  var elem: mutable.Map[String, ElemDecl]    = new HashMap[String, ElemDecl]()$/;"	l
elem	scala/xml/parsing/ConstructingHandler.scala	/^  def elem(pos: Int, pre: String, label: String, attrs: MetaData,$/;"	m
elem	scala/xml/parsing/DefaultMarkupHandler.scala	/^  def elem(pos: Int, pre: String, label: String, attrs: MetaData,$/;"	m
elem	scala/xml/parsing/MarkupHandler.scala	/^  def elem(pos: Int, pre: String, label: String, attrs: MetaData, scope: NamespaceBinding, args: NodeSeq): NodeSeq$/;"	m
elem	scala/xml/pull/XMLEventReader.scala	/^    final def elem(pos: Int, pre: String, label: String, attrs: MetaData, pscope: NamespaceBinding, nodes: NodeSeq): NodeSeq = $/;"	m
elemCount	scala/xml/parsing/MarkupParser.scala	/^    var elemCount = 0;$/;"	l
elemDecl	scala/xml/parsing/MarkupHandler.scala	/^  def elemDecl(n: String, cmstr: String): Unit = ()$/;"	m
elemEnd	scala/xml/parsing/MarkupHandler.scala	/^  def elemEnd(pos: Int, pre: String, label: String): Unit = ()$/;"	m
elemManifest	scala/collection/mutable/WrappedArray.scala	/^    def elemManifest = ClassManifest.Boolean$/;"	m
elemManifest	scala/collection/mutable/WrappedArray.scala	/^    def elemManifest = ClassManifest.Byte$/;"	m
elemManifest	scala/collection/mutable/WrappedArray.scala	/^    def elemManifest = ClassManifest.Char$/;"	m
elemManifest	scala/collection/mutable/WrappedArray.scala	/^    def elemManifest = ClassManifest.Double$/;"	m
elemManifest	scala/collection/mutable/WrappedArray.scala	/^    def elemManifest = ClassManifest.Float$/;"	m
elemManifest	scala/collection/mutable/WrappedArray.scala	/^    def elemManifest = ClassManifest.Int$/;"	m
elemManifest	scala/collection/mutable/WrappedArray.scala	/^    def elemManifest = ClassManifest.Long$/;"	m
elemManifest	scala/collection/mutable/WrappedArray.scala	/^    def elemManifest = ClassManifest.Short$/;"	m
elemManifest	scala/collection/mutable/WrappedArray.scala	/^    def elemManifest = ClassManifest.Unit$/;"	m
elemManifest	scala/collection/mutable/WrappedArray.scala	/^    lazy val elemManifest = ClassManifest.classType[T](array.getClass.getComponentType)$/;"	l
elemManifest	scala/collection/mutable/WrappedArray.scala	/^  def elemManifest: ClassManifest[T]$/;"	m
elemStart	scala/xml/parsing/MarkupHandler.scala	/^  def elemStart(pos: Int, pre: String, label: String, attrs: MetaData, scope: NamespaceBinding): Unit = ()$/;"	m
element	scala/actors/threadpool/AbstractQueue.java	/^    public Object element() {$/;"	m	class:AbstractQueue
element	scala/actors/threadpool/Queue.java	/^    Object element();$/;"	m	interface:Queue
element	scala/xml/parsing/MarkupParser.scala	/^  def element(pscope: NamespaceBinding): NodeSeq = {$/;"	m
element1	scala/xml/parsing/MarkupParser.scala	/^  def element1(pscope: NamespaceBinding): NodeSeq = {$/;"	m
elementDecl	scala/xml/parsing/MarkupParser.scala	/^  def elementDecl() {$/;"	m
elementToString	scala/util/parsing/ast/Binders.scala	/^    def elementToString: String = element.toString$/;"	m
elements	scala/collection/IterableLike.scala	/^  def elements = iterator$/;"	m
elements	scala/collection/JavaConversions.scala	/^    def elements: ju.Enumeration[B] = asJavaEnumeration(underlying.valuesIterator)$/;"	m
elements	scala/collection/TraversableView.scala	/^    def elements = iterator$/;"	m
elements	scala/collection/immutable/RedBlack.scala	/^    def elements = iterator$/;"	m
elemleft	scala/collection/parallel/immutable/ParRange.scala	/^      val elemleft = rleft.length$/;"	l
elems	scala/collection/IndexedSeqOptimized.scala	/^    val elems = math.max(hi - lo, 0)$/;"	l
elems	scala/collection/IterableLike.scala	/^    val elems = until - lo$/;"	l
elems	scala/collection/TraversableOnce.scala	/^    var elems: List[A] = Nil$/;"	l
elems	scala/collection/generic/SliceInterval.scala	/^    val elems = math.min(_until - lo, width)$/;"	l
elems	scala/collection/immutable/HashMap.scala	/^        val elems = new Array[HashMap[A,B]](2)$/;"	l
elems	scala/collection/immutable/Vector.scala	/^      val elems = new Array[AnyRef](32)$/;"	l
elems	scala/collection/mutable/LinkedListLike.scala	/^    var elems = self$/;"	l
elems	scala/collection/mutable/ListBuffer.scala	/^      var elems = seq.toList.reverse$/;"	l
elems	scala/collection/parallel/mutable/ParHashMap.scala	/^    val elems = for (i <- 0 until table.length) yield checkEntry(i)$/;"	l
elems	scala/util/parsing/combinator/Parsers.scala	/^      val elems = new ListBuffer[T]$/;"	l
elems	scala/util/parsing/combinator/Parsers.scala	/^    val elems = new ListBuffer[T]$/;"	l
elems1	scala/collection/mutable/BitSet.scala	/^      val elems1 = new Array[Long](newlen)$/;"	l
elems1	scala/collection/mutable/BitSet.scala	/^    val elems1 = new Array[Long](elems.length)$/;"	l
elems2	scala/Tuple2.scala	/^      val elems2 = coll2.iterator$/;"	l
elems2	scala/Tuple3.scala	/^      val elems2 = coll2.iterator$/;"	l
elems3	scala/Tuple3.scala	/^      val elems3 = coll3.iterator$/;"	l
elemsNew	scala/collection/immutable/HashMap.scala	/^            val elemsNew = new Array[HashMap[A,B]](elems.length - 1)$/;"	l
elemsNew	scala/collection/immutable/HashMap.scala	/^          val elemsNew = new Array[HashMap[A,B]](elems.length)$/;"	l
elemsNew	scala/collection/immutable/HashMap.scala	/^        val elemsNew = new Array[HashMap[A,B1]](elems.length + 1)$/;"	l
elemsNew	scala/collection/immutable/HashMap.scala	/^        val elemsNew = new Array[HashMap[A,B1]](elems.length)$/;"	l
elemsNew	scala/collection/immutable/HashSet.scala	/^            val elemsNew = new Array[HashSet[A]](elems.length - 1)$/;"	l
elemsNew	scala/collection/immutable/HashSet.scala	/^          val elemsNew = new Array[HashSet[A]](elems.length)$/;"	l
elemsNew	scala/collection/immutable/HashSet.scala	/^        val elemsNew = new Array[HashSet[A]](elems.length + 1)$/;"	l
elemsNew	scala/collection/immutable/HashSet.scala	/^        val elemsNew = new Array[HashSet[A]](elems.length)$/;"	l
elemtpt	scala/reflect/generic/UnPickler.scala	/^          val elemtpt = readTreeRef()$/;"	l
elidable	scala/annotation/elidable.scala	/^final class elidable(final val level: Int) extends annotation.StaticAnnotation {}$/;"	c
elidable	scala/annotation/elidable.scala	/^object elidable {$/;"	c
els	scala/collection/mutable/ArrayStack.scala	/^    val els: Array[AnyRef] = elems.reverse.map{_.asInstanceOf[AnyRef]}(breakOut)$/;"	l
elsep	scala/reflect/generic/UnPickler.scala	/^          val elsep = readTreeRef()$/;"	l
empty	scala/Array.scala	/^  def empty[T: ClassManifest]: Array[T] = new Array[T](0)$/;"	m
empty	scala/Enumeration.scala	/^    val empty = new ValueSet(immutable.SortedSet.empty)$/;"	l
empty	scala/Option.scala	/^  def empty[A] : Option[A] = None$/;"	m
empty	scala/collection/BitSet.scala	/^  val empty: BitSet = immutable.BitSet.empty  $/;"	l
empty	scala/collection/BitSetLike.scala	/^  def empty: This$/;"	m
empty	scala/collection/GenMap.scala	/^  def empty[A, B]: immutable.Map[A, B] = immutable.Map.empty$/;"	m
empty	scala/collection/Iterator.scala	/^  val empty = new Iterator[Nothing] {$/;"	l
empty	scala/collection/Map.scala	/^  def empty: Map[A, B] = Map.empty$/;"	m
empty	scala/collection/Map.scala	/^  def empty[A, B]: immutable.Map[A, B] = immutable.Map.empty$/;"	m
empty	scala/collection/MapLike.scala	/^  def empty: This$/;"	m
empty	scala/collection/SetLike.scala	/^  def empty: This$/;"	m
empty	scala/collection/SetProxyLike.scala	/^  def empty: This$/;"	m
empty	scala/collection/SortedMap.scala	/^  def empty[A, B](implicit ord: Ordering[A]): immutable.SortedMap[A, B] = immutable.SortedMap.empty[A, B](ord)$/;"	m
empty	scala/collection/SortedSet.scala	/^  def empty[A](implicit ord: Ordering[A]): immutable.SortedSet[A] = immutable.SortedSet.empty[A](ord)$/;"	m
empty	scala/collection/TraversableViewLike.scala	/^      var empty = true$/;"	l
empty	scala/collection/generic/BitSetFactory.scala	/^  def empty: Coll$/;"	m
empty	scala/collection/generic/GenMapFactory.scala	/^  def empty[A, B]: CC[A, B]$/;"	m
empty	scala/collection/generic/GenericClassManifestCompanion.scala	/^  def empty[A: ClassManifest]: CC[A] = newBuilder[A].result$/;"	m
empty	scala/collection/generic/GenericCompanion.scala	/^  def empty[A]: CC[A] = newBuilder[A].result$/;"	m
empty	scala/collection/generic/GenericOrderedCompanion.scala	/^  def empty[A: Ordering]: CC[A] = newBuilder[A].result$/;"	m
empty	scala/collection/generic/GenericSetTemplate.scala	/^  def empty: CC[A] = companion.empty[A]$/;"	m
empty	scala/collection/generic/MapFactory.scala	/^  def empty[A, B]: CC[A, B]$/;"	m
empty	scala/collection/generic/SortedMapFactory.scala	/^  def empty[A, B](implicit ord: Ordering[A]): CC[A, B]$/;"	m
empty	scala/collection/generic/SortedSetFactory.scala	/^  def empty[A](implicit ord: Ordering[A]): CC[A]$/;"	m
empty	scala/collection/immutable/BitSet.scala	/^  val empty: BitSet = new BitSet1(0L)$/;"	l
empty	scala/collection/immutable/HashMap.scala	/^  def empty[A, B]: HashMap[A, B] = EmptyHashMap.asInstanceOf[HashMap[A, B]]$/;"	m
empty	scala/collection/immutable/IntMap.scala	/^  def empty[T] : IntMap[T]  = IntMap.Nil;$/;"	m
empty	scala/collection/immutable/ListMap.scala	/^  def empty[A, B]: ListMap[A, B] = EmptyListMap.asInstanceOf[ListMap[A, B]]$/;"	m
empty	scala/collection/immutable/LongMap.scala	/^  def empty[T] : LongMap[T]  = LongMap.Nil;$/;"	m
empty	scala/collection/immutable/Map.scala	/^  def empty[A, B]: Map[A, B] = EmptyMap.asInstanceOf[Map[A, B]]$/;"	m
empty	scala/collection/immutable/SortedMap.scala	/^  def empty[A, B](implicit ord: Ordering[A]): SortedMap[A, B] = TreeMap.empty[A, B]$/;"	m
empty	scala/collection/immutable/SortedSet.scala	/^  def empty[A](implicit ord: Ordering[A]): SortedSet[A] = TreeSet.empty[A]$/;"	m
empty	scala/collection/immutable/TreeMap.scala	/^  def empty[A, B](implicit ord: Ordering[A]) = new TreeMap[A, B]()(ord)$/;"	m
empty	scala/collection/immutable/TreeSet.scala	/^  def empty[A](implicit ordering: Ordering[A]) = new TreeSet[A]$/;"	m
empty	scala/collection/interfaces/MapMethods.scala	/^  def empty: This$/;"	m
empty	scala/collection/interfaces/SetMethods.scala	/^  def empty: This$/;"	m
empty	scala/collection/mutable/ArrayStack.scala	/^  def empty: ArrayStack[Nothing] = new ArrayStack()$/;"	m
empty	scala/collection/mutable/BitSet.scala	/^  def empty: BitSet = new BitSet$/;"	m
empty	scala/collection/mutable/HashMap.scala	/^  def empty[A, B]: HashMap[A, B] = new HashMap[A, B]$/;"	m
empty	scala/collection/mutable/LinkedHashMap.scala	/^  def empty[A, B] = new LinkedHashMap[A, B]$/;"	m
empty	scala/collection/mutable/ListMap.scala	/^  def empty[A, B]: ListMap[A, B] = new ListMap[A, B]$/;"	m
empty	scala/collection/mutable/Map.scala	/^  def empty[A, B]: Map[A, B] = new HashMap[A, B]$/;"	m
empty	scala/collection/mutable/OpenHashMap.scala	/^  def empty[K, V] = new OpenHashMap[K, V]$/;"	m
empty	scala/collection/mutable/Stack.scala	/^  val empty: Stack[Nothing] = new Stack(Nil)$/;"	l
empty	scala/collection/mutable/WeakHashMap.scala	/^  def empty[A, B]: WeakHashMap[A, B] = new WeakHashMap[A, B]$/;"	m
empty	scala/collection/mutable/WrappedArray.scala	/^  def empty[T <: AnyRef]: WrappedArray[T] = EmptyWrappedArray.asInstanceOf[WrappedArray[T]]$/;"	m
empty	scala/collection/parallel/ParMap.scala	/^  def empty: ParMap[K, V] = new mutable.ParHashMap[K, V]$/;"	m
empty	scala/collection/parallel/ParMap.scala	/^  def empty[K, V]: ParMap[K, V] = new mutable.ParHashMap[K, V]$/;"	m
empty	scala/collection/parallel/ParMapLike.scala	/^  def empty: Repr$/;"	m
empty	scala/collection/parallel/ParSetLike.scala	/^  def empty: Repr$/;"	m
empty	scala/collection/parallel/Splitter.scala	/^  def empty[T]: Splitter[T] = new Splitter[T] {$/;"	m
empty	scala/collection/parallel/immutable/ParHashMap.scala	/^  def empty[K, V]: ParHashMap[K, V] = new ParHashMap[K, V]$/;"	m
empty	scala/collection/parallel/immutable/ParMap.scala	/^  def empty[K, V]: ParMap[K, V] = new ParHashMap[K, V]$/;"	m
empty	scala/collection/parallel/mutable/ParHashMap.scala	/^  def empty[K, V]: ParHashMap[K, V] = new ParHashMap[K, V]$/;"	m
empty	scala/collection/parallel/mutable/ParMap.scala	/^  def empty[K, V]: ParMap[K, V] = new ParHashMap[K, V]$/;"	m
empty	scala/text/Document.scala	/^  def empty = DocNil$/;"	m
emptyList	scala/collection/mutable/DoubleLinkedList.scala	/^      def emptyList() = new DoubleLinkedList[A]()$/;"	m
emptySet	scala/util/automata/BaseBerrySethi.scala	/^  final val emptySet: Set[Int] = Set()$/;"	l
emptyTrie	scala/collection/parallel/immutable/ParHashMap.scala	/^  val emptyTrie = HashMap.empty[K, V]$/;"	l
emptyTrie	scala/collection/parallel/immutable/ParHashSet.scala	/^  val emptyTrie = HashSet.empty[T]$/;"	l
enable	scala/sys/BooleanProp.scala	/^    def enable()  = this setValue true$/;"	m
enable	scala/sys/BooleanProp.scala	/^  def enable(): Unit$/;"	m
enableChannel	scala/actors/Future.scala	/^  var enableChannel = false \/\/ guarded by this$/;"	l
enableStackTrace	scala/testing/SUnit.scala	/^    def enableStackTrace: Boolean = true$/;"	m
enclClass	scala/reflect/generic/Symbols.scala	/^    def enclClass: Symbol = if (isClass) this else owner.enclClass$/;"	m
enclMethod	scala/reflect/generic/Symbols.scala	/^    def enclMethod: Symbol = if (isSourceMethod) this else owner.enclMethod$/;"	m
encode	scala/io/Position.scala	/^  final def encode(line: Int, column: Int): Int = {$/;"	m
encode	scala/io/UTF8Codec.scala	/^  def encode(ch: Int): Array[Byte] =$/;"	m
encode	scala/io/UTF8Codec.scala	/^  def encode(s: String): Array[Byte] = Codec toUTF8 s$/;"	m
encode	scala/io/UTF8Codec.scala	/^  def encode(s: String, dst: Array[Byte], to: Int): Int =$/;"	m
encode	scala/io/UTF8Codec.scala	/^  def encode(src: Array[Char], from: Int, dst: Array[Byte], to: Int, len: Int): Int = {$/;"	m
encode	scala/reflect/NameTransformer.scala	/^  def encode(name: String): String = {$/;"	m
encode	scala/reflect/generic/ByteCodecs.scala	/^  def encode(xs: Array[Byte]): Array[Byte] = avoidZero(encode8to7(xs))$/;"	m
encode	scala/reflect/generic/StdNames.scala	/^  def encode(str: String): TermName = newTermName(NameTransformer.encode(str))$/;"	m
encode	scala/util/automata/Inclusion.scala	/^    def encode(q1: Int, q2: Int) = 1 + q1 + q2 * dfa1.nstates$/;"	m
encode8to7	scala/reflect/generic/ByteCodecs.scala	/^  def encode8to7(src: Array[Byte]): Array[Byte] = {$/;"	m
encodedName	scala/reflect/generic/Symbols.scala	/^    def encodedName: String = name.toString$/;"	m
encoder	scala/io/Codec.scala	/^  def encoder =$/;"	m
encoding	scala/xml/Document.scala	/^  var encoding: Option[String] = _$/;"	l
encoding	scala/xml/XML.scala	/^  val encoding  = "ISO-8859-1"$/;"	l
encoding	scala/xml/include/sax/XIncludeFilter.scala	/^          val encoding = atts.getValue("encoding");$/;"	l
encoding	scala/xml/include/sax/XIncludeFilter.scala	/^    var encoding = encoding1$/;"	l
encodingFromHeader	scala/xml/include/sax/XIncludeFilter.scala	/^      var encodingFromHeader = uc.getContentEncoding()$/;"	l
encodingReplaceWith	scala/io/Codec.scala	/^  def encodingReplaceWith(newReplacement: Array[Byte]): this.type = { _encodingReplacement = newReplacement ; this }$/;"	m
encodingString	scala/util/Properties.scala	/^  def encodingString        = propOrElse("file.encoding", "UTF-8")$/;"	m
end	scala/collection/IndexedSeqOptimized.scala	/^    val end = length min len min (xs.length - start)$/;"	l
end	scala/collection/IterableLike.scala	/^    val end = (start + len) min xs.length$/;"	l
end	scala/collection/Iterator.scala	/^    val end = start + math.min(len, xs.length)$/;"	l
end	scala/collection/TraversableLike.scala	/^    val end = (start + len) min xs.length$/;"	l
end	scala/collection/immutable/PagedSeq.scala	/^  final def end = start + filled$/;"	m
end	scala/collection/immutable/StringLike.scala	/^    val end   = until min length$/;"	l
end	scala/collection/immutable/StringOps.scala	/^    val end = if (until > length) length else until$/;"	l
end	scala/collection/immutable/WrappedString.scala	/^    val end = if (until > length) length else until$/;"	l
end	scala/collection/immutable/package.scala	/^    def end: Int$/;"	m
end	scala/collection/mutable/BufferLike.scala	/^    val end = i + len$/;"	l
end	scala/collection/parallel/mutable/ParArray.scala	/^        val end = (traversed + sz) min until$/;"	l
end	scala/reflect/generic/UnPickler.scala	/^      val end   = readNat() + readIndex$/;"	l
end	scala/reflect/generic/UnPickler.scala	/^      val end = readNat() + readIndex$/;"	l
end	scala/util/matching/Regex.scala	/^    def end(i: Int) = ends(i)$/;"	m
end	scala/util/matching/Regex.scala	/^    def end(i: Int): Int = matcher.end(i)$/;"	m
end	scala/util/matching/Regex.scala	/^    def end(i: Int): Int$/;"	m
end	scala/util/matching/Regex.scala	/^    def end: Int = matcher.end$/;"	m
end	scala/util/matching/Regex.scala	/^    def end: Int$/;"	m
end	scala/util/matching/Regex.scala	/^    val end = matcher.end$/;"	l
endCDATA	scala/xml/include/sax/XIncluder.scala	/^  def endCDATA() {}$/;"	m
endDTD	scala/xml/include/sax/XIncluder.scala	/^  def endDTD() {}$/;"	m
endDTD	scala/xml/parsing/MarkupHandler.scala	/^  def endDTD(n: String): Unit = ()$/;"	m
endDocument	scala/xml/include/sax/XIncluder.scala	/^  def endDocument() {$/;"	m
endElement	scala/xml/include/sax/XIncluder.scala	/^  def endElement(namespaceURI: String, localName:String, qualifiedName: String) {$/;"	m
endEntity	scala/xml/include/sax/XIncluder.scala	/^  def endEntity(name: String) {$/;"	m
endPrefixMapping	scala/xml/include/sax/XIncluder.scala	/^  def endPrefixMapping(prefix: String) {}$/;"	m
endRead	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized int endRead() {$/;"	m	class:ReentrantReadWriteLock.Sync
endStr	scala/collection/immutable/NumericRange.scala	/^    val endStr = if (length > Range.MAX_PRINT) ", ... )" else ")"$/;"	l
endStr	scala/collection/immutable/Range.scala	/^    val endStr = if (length > Range.MAX_PRINT) ", ... )" else ")"$/;"	l
endWrite	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized int endWrite() {$/;"	m	class:ReentrantReadWriteLock.Sync
endch	scala/xml/parsing/MarkupParser.scala	/^    val endch = ch$/;"	l
endpos	scala/collection/parallel/mutable/ParArray.scala	/^      var endpos = ntil$/;"	l
endsWith	scala/collection/GenSeqLike.scala	/^  def endsWith[B](that: GenSeq[B]): Boolean$/;"	m
endsWith	scala/collection/IndexedSeqOptimized.scala	/^  def endsWith[B](that: GenSeq[B]): Boolean = that match {$/;"	m
endsWith	scala/collection/SeqLike.scala	/^  def endsWith[B](that: GenSeq[B]): Boolean = {$/;"	m
endsWith	scala/collection/SeqLike.scala	/^  def endsWith[B](that: Seq[B]): Boolean = endsWith(that: GenSeq[B])$/;"	m
endsWith	scala/collection/interfaces/SeqMethods.scala	/^  def endsWith[B](that: Seq[B]): Boolean$/;"	m
endsWith	scala/collection/parallel/ParSeqLike.scala	/^  def endsWith[S](that: GenSeq[S]): Boolean = that ifParSeq { pthat =>$/;"	m
enq	scala/actors/threadpool/SynchronousQueue.java	/^        Node enq(Object x) {$/;"	m	class:SynchronousQueue.FifoWaitQueue
enq	scala/actors/threadpool/SynchronousQueue.java	/^        Node enq(Object x) {$/;"	m	class:SynchronousQueue.LifoWaitQueue
enq	scala/actors/threadpool/SynchronousQueue.java	/^        abstract Node enq(Object x);$/;"	m	class:SynchronousQueue.WaitQueue
enqueue	scala/actors/threadpool/LinkedBlockingQueue.java	/^    private void enqueue(E x) {$/;"	m	class:LinkedBlockingQueue	file:
enqueue	scala/collection/immutable/Queue.scala	/^  def enqueue[B >: A](elem: B) = new Queue(elem :: in, out)$/;"	m
enqueue	scala/collection/immutable/Queue.scala	/^  def enqueue[B >: A](iter: Iterable[B]) =$/;"	m
enqueue	scala/collection/mutable/PriorityQueue.scala	/^  def enqueue(elems: A*): Unit = { this ++= elems }$/;"	m
enqueue	scala/collection/mutable/Queue.scala	/^  def enqueue(elems: A*): Unit = this ++= elems$/;"	m
enqueue	scala/ref/Reference.scala	/^  def enqueue(): Boolean$/;"	m
enqueue	scala/ref/ReferenceWrapper.scala	/^  def enqueue = underlying.enqueue$/;"	m
ensureAccessible	scala/runtime/ScalaRunTime.scala	/^  def ensureAccessible(m: JMethod): JMethod = {$/;"	m
ensureCapacity	scala/collection/mutable/StringBuilder.scala	/^  def ensureCapacity(newCapacity: Int): Unit = underlying ensureCapacity newCapacity$/;"	m
ensureCapacity	scala/reflect/generic/PickleBuffer.scala	/^  def ensureCapacity(capacity: Int) =$/;"	m
ensuring	scala/Predef.scala	/^    def ensuring(cond: A => Boolean): A = { assert(cond(x)); x }$/;"	m
ensuring	scala/Predef.scala	/^    def ensuring(cond: A => Boolean, msg: => Any): A = { assert(cond(x), msg); x }$/;"	m
ensuring	scala/Predef.scala	/^    def ensuring(cond: Boolean): A = { assert(cond); x }$/;"	m
ensuring	scala/Predef.scala	/^    def ensuring(cond: Boolean, msg: => Any): A = { assert(cond, msg); x }$/;"	m
ent	scala/xml/dtd/DTD.scala	/^  var ent:  mutable.Map[String, EntityDecl]  = new HashMap[String, EntityDecl]()$/;"	l
ent	scala/xml/parsing/MarkupHandler.scala	/^  var ent: mutable.Map[String, EntityDecl] = new HashMap[String, EntityDecl]()$/;"	l
ent	scala/xml/parsing/MarkupParser.scala	/^              val ent = xName$/;"	l
ent	scala/xml/parsing/MarkupParser.scala	/^      val ent = xName$/;"	l
entList	scala/xml/parsing/XhtmlEntities.scala	/^  val entList = List(("quot",34), ("amp",38), ("lt",60), ("gt",62), ("nbsp",160), ("iexcl",161), ("cent",162), ("pound",163), ("curren",164), ("yen",165),$/;"	l
entMap	scala/xml/parsing/XhtmlEntities.scala	/^  val entMap: Map[String, Char] = Map.empty[String, Char] ++ entList.map { case (name, value) => (name, value.toChar)}$/;"	l
entdef	scala/xml/parsing/MarkupParser.scala	/^    var entdef: EntityDef = null$/;"	l
entities	scala/xml/parsing/XhtmlEntities.scala	/^  val entities = entList.$/;"	l
entityDecl	scala/xml/parsing/MarkupParser.scala	/^  def entityDecl() = {$/;"	m
entityRef	scala/xml/factory/Binder.scala	/^  final def entityRef(pos: Int, n: String) =$/;"	m
entityRef	scala/xml/parsing/ConstructingHandler.scala	/^  def entityRef(pos: Int, n: String)  = EntityRef(n)$/;"	m
entityRef	scala/xml/parsing/DefaultMarkupHandler.scala	/^  def entityRef(pos: Int, n: String) = NodeSeq.Empty$/;"	m
entityRef	scala/xml/parsing/MarkupHandler.scala	/^  def entityRef(pos: Int, n: String): NodeSeq$/;"	m
entityRef	scala/xml/pull/XMLEventReader.scala	/^    def entityRef(pos: Int, n: String)                    = setEvent(EvEntityRef(n))$/;"	m
entry	scala/collection/mutable/FlatHashTable.scala	/^      val entry = oldtable(i)$/;"	l
entry	scala/collection/mutable/FlatHashTable.scala	/^    var entry = table(h)$/;"	l
entry	scala/collection/mutable/LinkedHashMap.scala	/^      val entry = new Entry(key, value)$/;"	l
entry	scala/collection/mutable/OpenHashMap.scala	/^    val entry = table(index);$/;"	l
entry	scala/collection/mutable/OpenHashMap.scala	/^    var entry = table(index);$/;"	l
entry	scala/collection/parallel/mutable/ParHashSet.scala	/^      var entry = table(h)$/;"	l
entry2item	scala/collection/parallel/mutable/ParHashMap.scala	/^    def entry2item(entry: DefaultEntry[K, V]) = (entry.key, entry.value);$/;"	m
entry2item	scala/collection/parallel/mutable/ParHashTable.scala	/^    def entry2item(e: Entry): T$/;"	m
entryExists	scala/collection/mutable/MultiMap.scala	/^  def entryExists(key: A, p: B => Boolean): Boolean = get(key) match {$/;"	m
enum	scala/Enumeration.scala	/^      val enum = thisenum.readResolve().asInstanceOf[Enumeration]$/;"	l
enumerationAsScalaIterator	scala/collection/JavaConversions.scala	/^  implicit def enumerationAsScalaIterator[A](i : ju.Enumeration[A]): Iterator[A] = i match {$/;"	m
enumerationAsScalaIteratorConverter	scala/collection/JavaConverters.scala	/^  implicit def enumerationAsScalaIteratorConverter[A](i : ju.Enumeration[A]): AsScala[Iterator[A]] = $/;"	m
env	scala/sys/package.scala	/^  def env: immutable.Map[String, String] = immutable.Map(System.getenv().asScala.toSeq: _*)$/;"	m
envOrElse	scala/util/Properties.scala	/^  def envOrElse(name: String, alt: String)      = Option(System getenv name) getOrElse alt$/;"	m
envOrNone	scala/util/Properties.scala	/^  def envOrNone(name: String)                   = Option(System getenv name)$/;"	m
environment	scala/collection/parallel/Tasks.scala	/^  var environment: AnyRef = ForkJoinTasks.defaultForkJoinPool$/;"	l
environment	scala/collection/parallel/Tasks.scala	/^  var environment: AnyRef = FutureThreadPoolTasks.defaultThreadPool$/;"	l
environment	scala/collection/parallel/Tasks.scala	/^  var environment: AnyRef = ThreadPoolTasks.defaultThreadPool$/;"	l
environment	scala/collection/parallel/Tasks.scala	/^  var environment: AnyRef$/;"	l
eof	scala/xml/parsing/MarkupParser.scala	/^  var eof: Boolean = false$/;"	l
eof	scala/xml/parsing/MarkupParserCommon.scala	/^  def eof: Boolean$/;"	m
eolPos	scala/util/parsing/input/StreamReader.scala	/^    val eolPos = nextEol$/;"	l
eqElements	scala/xml/factory/NodeFactory.scala	/^  def eqElements(ch1: Seq[Node], ch2: Seq[Node]): Boolean =$/;"	m
eqTypeCode	scala/runtime/BoxesRunTime.java	/^    private static int eqTypeCode(Number a) {$/;"	m	class:BoxesRunTime	file:
equals	scala/Equals.scala	/^  def equals(that: Any): Boolean$/;"	m
equals	scala/actors/threadpool/Arrays.java	/^    public static boolean equals(Object[] a, Object[] a2) {$/;"	m	class:Arrays
equals	scala/actors/threadpool/Arrays.java	/^    public static boolean equals(boolean[] a, boolean[] a2) {$/;"	m	class:Arrays
equals	scala/actors/threadpool/Arrays.java	/^    public static boolean equals(byte[] a, byte[] a2) {$/;"	m	class:Arrays
equals	scala/actors/threadpool/Arrays.java	/^    public static boolean equals(char[] a, char[] a2) {$/;"	m	class:Arrays
equals	scala/actors/threadpool/Arrays.java	/^    public static boolean equals(double[] a, double[] a2) {$/;"	m	class:Arrays
equals	scala/actors/threadpool/Arrays.java	/^    public static boolean equals(float[] a, float[] a2) {$/;"	m	class:Arrays
equals	scala/actors/threadpool/Arrays.java	/^    public static boolean equals(int[] a, int[] a2) {$/;"	m	class:Arrays
equals	scala/actors/threadpool/Arrays.java	/^    public static boolean equals(long[] a, long[] a2) {$/;"	m	class:Arrays
equals	scala/actors/threadpool/Arrays.java	/^    public static boolean equals(short[] a, short a2[]) {$/;"	m	class:Arrays
equals	scala/math/BigDecimal.scala	/^  def equals (that: BigDecimal): Boolean = compare(that) == 0$/;"	m
equals	scala/math/BigInt.scala	/^  def equals (that: BigInt): Boolean = compare(that) == 0$/;"	m
equals	scala/runtime/BoxedUnit.java	/^    public boolean equals(java.lang.Object other) {$/;"	m	class:BoxedUnit
equals	scala/runtime/BoxesRunTime.java	/^    public static boolean equals(Object x, Object y) {      $/;"	m	class:BoxesRunTime
equals2	scala/runtime/BoxesRunTime.java	/^    public static boolean equals2(Object x, Object y) {$/;"	m	class:BoxesRunTime
equalsCharObject	scala/runtime/BoxesRunTime.java	/^    public static boolean equalsCharObject(java.lang.Character xc, Object y) {$/;"	m	class:BoxesRunTime
equalsNumChar	scala/runtime/BoxesRunTime.java	/^    private static boolean equalsNumChar(java.lang.Number xn, java.lang.Character yc) {$/;"	m	class:BoxesRunTime	file:
equalsNumNum	scala/runtime/BoxesRunTime.java	/^    public static boolean equalsNumNum(java.lang.Number xn, java.lang.Number yn) {$/;"	m	class:BoxesRunTime
equalsNumObject	scala/runtime/BoxesRunTime.java	/^    public static boolean equalsNumObject(java.lang.Number xn, Object y) {$/;"	m	class:BoxesRunTime
equalsWith	scala/collection/SeqLike.scala	/^  def equalsWith[B](that: Seq[B])(f: (A,B) => Boolean): Boolean = corresponds(that)(f)$/;"	m
equiv	scala/math/Equiv.scala	/^    def equiv(x: T, y: T) = cmp(x, y)$/;"	m
equiv	scala/math/Equiv.scala	/^    def equiv(x: T, y: T) = cmp.compare(x, y) == 0$/;"	m
equiv	scala/math/Equiv.scala	/^    def equiv(x: T, y: T) = x == y$/;"	m
equiv	scala/math/Equiv.scala	/^    def equiv(x: T, y: T) = x eq y$/;"	m
equiv	scala/math/Equiv.scala	/^  def equiv(x: T, y: T): Boolean $/;"	m
equiv	scala/math/Ordering.scala	/^    def equiv(rhs: T) = Ordering.this.equiv(lhs, rhs)$/;"	m
equiv	scala/math/PartialOrdering.scala	/^  def equiv(x: T, y: T): Boolean = lteq(x,y) && lteq(y,x)$/;"	m
erasure	scala/reflect/ClassManifest.scala	/^      def erasure = clazz$/;"	m
erasure	scala/reflect/ClassManifest.scala	/^      def erasure = upperbound.erasure$/;"	m
erasure	scala/reflect/ClassManifest.scala	/^  def erasure: JClass[_]$/;"	m
erasure	scala/reflect/ClassManifest.scala	/^  val erasure: JClass[_], $/;"	l
erasure	scala/reflect/Manifest.scala	/^                                     val erasure: Predef.Class[_], $/;"	l
erasure	scala/reflect/Manifest.scala	/^      def erasure = clazz$/;"	m
erasure	scala/reflect/Manifest.scala	/^      def erasure = parents.head.erasure$/;"	m
erasure	scala/reflect/Manifest.scala	/^      def erasure = upperBound.erasure$/;"	m
erasure	scala/reflect/Manifest.scala	/^    def erasure = java.lang.Boolean.TYPE$/;"	m
erasure	scala/reflect/Manifest.scala	/^    def erasure = java.lang.Byte.TYPE$/;"	m
erasure	scala/reflect/Manifest.scala	/^    def erasure = java.lang.Character.TYPE$/;"	m
erasure	scala/reflect/Manifest.scala	/^    def erasure = java.lang.Double.TYPE$/;"	m
erasure	scala/reflect/Manifest.scala	/^    def erasure = java.lang.Float.TYPE$/;"	m
erasure	scala/reflect/Manifest.scala	/^    def erasure = java.lang.Integer.TYPE$/;"	m
erasure	scala/reflect/Manifest.scala	/^    def erasure = java.lang.Long.TYPE$/;"	m
erasure	scala/reflect/Manifest.scala	/^    def erasure = java.lang.Short.TYPE$/;"	m
erasure	scala/reflect/Manifest.scala	/^    def erasure = java.lang.Void.TYPE$/;"	m
erasure	scala/reflect/Manifest.scala	/^    lazy val erasure = value.getClass$/;"	l
err	scala/Console.scala	/^  def err = errVar.value$/;"	m
err	scala/sys/process/ProcessLogger.scala	/^    def err(s: => String): Unit = ferr(s)$/;"	m
err	scala/sys/process/ProcessLogger.scala	/^  def err(s: => String): Unit = writer println s$/;"	m
err	scala/sys/process/ProcessLogger.scala	/^  def err(s: => String): Unit$/;"	m
err	scala/util/parsing/combinator/Parsers.scala	/^  def err(msg: String) = Parser{ in => Error(msg, in) }$/;"	m
error	scala/Predef.scala	/^  def error(message: String): Nothing = sys.error(message)$/;"	m
error	scala/actors/Debug.scala	/^  def error(s: String) =$/;"	m
error	scala/sys/package.scala	/^  def error(message: String): Nothing = throw new RuntimeException(message)$/;"	m
errorNoEnd	scala/xml/parsing/MarkupParser.scala	/^  def errorNoEnd(tag: String) = throw FatalError("expected closing tag of " + tag)$/;"	m
errorNoEnd	scala/xml/parsing/MarkupParserCommon.scala	/^  def errorNoEnd(tag: String): Nothing$/;"	m
errorThread	scala/sys/process/ProcessBuilderImpl.scala	/^      val errorThread =$/;"	l
errorToken	scala/util/parsing/combinator/lexical/Scanners.scala	/^  def errorToken(msg: String): Token$/;"	m
errorToken	scala/util/parsing/combinator/token/Tokens.scala	/^  def errorToken(msg: String): Token = new ErrorToken(msg)  $/;"	m
es	scala/collection/mutable/HashTable.scala	/^    var es = iterTable(idx).asInstanceOf[Entry]$/;"	l
es	scala/collection/parallel/mutable/ParHashTable.scala	/^      var es: Entry = null$/;"	l
escMap	scala/xml/Utility.scala	/^    val escMap    = pairs map { case (s, c) => c-> ("&%s;" format s) }$/;"	l
escape	scala/reflect/generic/Constants.scala	/^      def escape(text: String): String = {$/;"	m
escape	scala/xml/Utility.scala	/^  final def escape(text: String): String = sbToString(escape(text, _))$/;"	m
escape	scala/xml/Utility.scala	/^  final def escape(text: String, s: StringBuilder): StringBuilder = {$/;"	m
escapedStringValue	scala/reflect/generic/Constants.scala	/^    def escapedStringValue: String = {$/;"	m
etg	scala/xml/PrettyPrinter.scala	/^          val etg = endTag(node)$/;"	l
eventloop	scala/actors/Actor.scala	/^  def eventloop(f: PartialFunction[Any, Unit]): Nothing =$/;"	m
events	scala/collection/mutable/History.scala	/^  def events: Iterator[Evt] = log.iterator map (_._2)$/;"	m
everywhere	scala/util/parsing/ast/Binders.scala	/^    def everywhere(f: Mapper)(implicit c: T => Mappable[T]): T =$/;"	m
ex	scala/xml/include/sax/XIncludeFilter.scala	/^          val ex = new UnavailableResourceException("Unresolvable URL " + url + getLocation())$/;"	l
ex	scala/xml/include/sax/XIncludeFilter.scala	/^        val ex = new UnavailableResourceException("Unresolvable URL " + url$/;"	l
exception	scala/actors/threadpool/Executors.java	/^        private Exception exception;$/;"	f	class:Executors.PrivilegedCallable	file:
exception	scala/actors/threadpool/Executors.java	/^        private Exception exception;$/;"	f	class:Executors.PrivilegedCallableUsingCurrentClassLoader	file:
exception	scala/actors/threadpool/FutureTask.java	/^    private Throwable exception;$/;"	f	class:FutureTask	file:
exceptionWrapper	scala/Predef.scala	/^  implicit def exceptionWrapper(exc: Throwable) = new runtime.RichException(exc)$/;"	m
excessNanos	scala/actors/threadpool/TimeUnit.java	/^    abstract int excessNanos(long d, long m);$/;"	m	class:TimeUnit
exclusive	scala/collection/immutable/NumericRange.scala	/^    def exclusive: Exclusive[T] = NumericRange(start, end, step)$/;"	m
exclusively	scala/sys/SystemProperties.scala	/^  def exclusively[T](body: => T) = this synchronized body$/;"	m
exec	scala/Responder.scala	/^  def exec[A](x: => Unit): Boolean = { x; true }$/;"	m
exec	scala/concurrent/TaskRunners.scala	/^    val exec = new ThreadPoolExecutor(numCores,$/;"	l
execute	scala/actors/IScheduler.scala	/^  def execute(fun: => Unit): Unit$/;"	m
execute	scala/actors/IScheduler.scala	/^  def execute(task: Runnable): Unit$/;"	m
execute	scala/actors/SchedulerAdapter.scala	/^  def execute(task: Runnable): Unit =$/;"	m
execute	scala/actors/scheduler/DelegatingScheduler.scala	/^  def execute(fun: => Unit) = impl.execute(fun)$/;"	m
execute	scala/actors/scheduler/DelegatingScheduler.scala	/^  def execute(task: Runnable) = impl.execute(task)$/;"	m
execute	scala/actors/scheduler/ExecutorScheduler.scala	/^  def execute(task: Runnable) {$/;"	m
execute	scala/actors/scheduler/ForkJoinScheduler.scala	/^  def execute(fun: => Unit): Unit =$/;"	m
execute	scala/actors/scheduler/ForkJoinScheduler.scala	/^  def execute(task: Runnable) {$/;"	m
execute	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^  def execute(fun: => Unit): Unit =$/;"	m
execute	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^  def execute(task: Runnable): Unit =$/;"	m
execute	scala/actors/scheduler/SingleThreadedScheduler.scala	/^  def execute(fun: => Unit): Unit =$/;"	m
execute	scala/actors/scheduler/SingleThreadedScheduler.scala	/^  def execute(task: Runnable) {$/;"	m
execute	scala/actors/threadpool/Executor.java	/^    void execute(Runnable command);$/;"	m	interface:Executor
execute	scala/actors/threadpool/Executors.java	/^        public void execute(Runnable command) { e.execute(command); }$/;"	m	class:Executors.DelegatedExecutorService
execute	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public void execute(Runnable command) {$/;"	m	class:ThreadPoolExecutor
execute	scala/collection/parallel/Tasks.scala	/^  def execute[R, Tp](fjtask: Task[R, Tp]): () => R$/;"	m
execute	scala/collection/parallel/Tasks.scala	/^  def execute[R, Tp](task: Task[R, Tp]): () => R = {$/;"	m
execute	scala/concurrent/JavaConversions.scala	/^      def execute[S](task: Task[S]) {$/;"	m
execute	scala/concurrent/TaskRunner.scala	/^  def execute[S](task: Task[S]): Unit$/;"	m
execute	scala/concurrent/ThreadPoolRunner.scala	/^  def execute[S](task: Task[S]) {$/;"	m
execute	scala/concurrent/ThreadRunner.scala	/^  def execute[S](task: Task[S]) {$/;"	m
executeAndWaitResult	scala/collection/parallel/Tasks.scala	/^  def executeAndWaitResult[R, Tp](task: Task[R, Tp]): R = {$/;"	m
executeAndWaitResult	scala/collection/parallel/Tasks.scala	/^  def executeAndWaitResult[R, Tp](task: Task[R, Tp]): R$/;"	m
executeFromActor	scala/actors/IScheduler.scala	/^  def executeFromActor(task: Runnable): Unit =$/;"	m
executionStart	scala/App.scala	/^  val executionStart: Long = currentTime$/;"	l
executionStart	scala/Application.scala	/^  val executionStart: Long = currentTime$/;"	l
executor	scala/actors/scheduler/ExecutorScheduler.scala	/^      val executor: ExecutorService = exec$/;"	l
executor	scala/actors/threadpool/ExecutorCompletionService.java	/^    private final Executor executor;$/;"	f	class:ExecutorCompletionService	file:
executor	scala/collection/parallel/Tasks.scala	/^  def executor = environment.asInstanceOf[ThreadPoolExecutor]$/;"	m
exists	scala/Either.scala	/^    def exists(f: A => Boolean) = e match {$/;"	m
exists	scala/Either.scala	/^    def exists(f: B => Boolean) = e match {$/;"	m
exists	scala/Tuple2.scala	/^    def exists(f: (El1, El2) => Boolean): Boolean = {$/;"	m
exists	scala/Tuple3.scala	/^    def exists(f: (El1, El2, El3) => Boolean): Boolean = {$/;"	m
exists	scala/collection/GenTraversableOnce.scala	/^  def exists(pred: A => Boolean): Boolean$/;"	m
exists	scala/collection/IndexedSeqOptimized.scala	/^  def exists(p: A => Boolean): Boolean = prefixLength(!p(_)) != length$/;"	m
exists	scala/collection/Iterator.scala	/^  def exists(p: A => Boolean): Boolean = {$/;"	m
exists	scala/collection/LinearSeqOptimized.scala	/^  def exists(p: A => Boolean): Boolean = {$/;"	m
exists	scala/collection/TraversableLike.scala	/^  def exists(p: A => Boolean): Boolean = {$/;"	m
exists	scala/collection/TraversableOnce.scala	/^  def exists(p: A => Boolean): Boolean$/;"	m
exists	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def exists(p: A => Boolean): Boolean$/;"	m
exists	scala/collection/parallel/ParIterableLike.scala	/^  def exists(pred: T => Boolean): Boolean = {$/;"	m
exists2	scala/collection/immutable/List.scala	/^  def exists2[A,B](xs: List[A], ys: List[B])(f: (A, B) => Boolean): Boolean = {$/;"	m
exit	scala/Predef.scala	/^  def exit(): Nothing = sys.exit()$/;"	m
exit	scala/Predef.scala	/^  def exit(status: Int): Nothing = sys.exit(status)$/;"	m
exit	scala/actors/Actor.scala	/^  def exit(): Nothing = rawSelf.exit()$/;"	m
exit	scala/actors/Actor.scala	/^  def exit(reason: AnyRef): Nothing = self.exit(reason)$/;"	m
exit	scala/actors/remote/Proxy.scala	/^  def exit(from: AbstractActor, reason: AnyRef): Unit =$/;"	m
exit	scala/sys/package.scala	/^  def exit(): Nothing = exit(0)$/;"	m
exit	scala/sys/package.scala	/^  def exit(status: Int): Nothing = {$/;"	m
exit	scala/xml/parsing/MarkupParser.scala	/^    var exit = eof$/;"	l
exit	scala/xml/parsing/MarkupParser.scala	/^    var exit = false;$/;"	l
exit1	scala/sys/process/ProcessImpl.scala	/^          val exit1 = first.exitValue$/;"	l
exit2	scala/sys/process/ProcessImpl.scala	/^          val exit2 = second.exitValue$/;"	l
exitValue	scala/sys/process/Process.scala	/^  def exitValue(): Int$/;"	m
exitValue	scala/sys/process/ProcessImpl.scala	/^    def exitValue() = getExitValue() getOrElse sys.error("No exit code: process destroyed.")$/;"	m
exp	scala/MathCommon.scala	/^  def exp(x: Double): Double = java.lang.Math.exp(x)$/;"	m
expPart	scala/util/parsing/json/Lexer.scala	/^  def expPart = exponent ~ opt(sign) ~ rep1(digit) ^^ { case e ~ s ~ d =>$/;"	m
expandedName	scala/reflect/generic/StdNames.scala	/^    def expandedName(name: TermName, base: Symbol, separator: String = EXPAND_SEPARATOR_STRING): TermName = $/;"	m
expected	scala/collection/parallel/mutable/ParHashMap.scala	/^    val expected = sizemap(i)$/;"	l
expm1	scala/math/package.scala	/^  def expm1(x: Double): Double = java.lang.Math.expm1(x)$/;"	m
exponent	scala/util/parsing/json/Lexer.scala	/^  def exponent = elem("exponent character", d => d == 'e' || d == 'E')$/;"	m
expr	scala/reflect/generic/UnPickler.scala	/^          val expr = readTreeRef()$/;"	l
extID	scala/xml/parsing/MarkupParser.scala	/^        val extID = externalID()$/;"	l
extID	scala/xml/parsing/MarkupParser.scala	/^    val extID = if (ch == 'S') {$/;"	l
extID	scala/xml/parsing/MarkupParser.scala	/^    var extID: ExternalID = null$/;"	l
extIndex	scala/xml/parsing/MarkupParser.scala	/^  var extIndex = -1$/;"	l
extSubset	scala/xml/parsing/MarkupParser.scala	/^  def extSubset(): Unit = {$/;"	m
extend	scala/util/parsing/ast/Binders.scala	/^    def extend[a <: NameElement](v : a, x : Scope[a]) = new BinderEnv { $/;"	m
extendHash	scala/util/MurmurHash.scala	/^  def extendHash(hash: Int, value: Int, magicA: Int, magicB: Int) = {$/;"	m
externalID	scala/xml/dtd/DTD.scala	/^  var externalID: ExternalID            = null$/;"	l
externalID	scala/xml/parsing/MarkupParser.scala	/^  def externalID(): ExternalID = ch match {$/;"	m
externalSource	scala/xml/parsing/ExternalSources.scala	/^  def externalSource(systemId: String): Source = {$/;"	m
externalSource	scala/xml/parsing/MarkupParser.scala	/^  def externalSource(systemLiteral: String): Source$/;"	m
extract	scala/actors/LinkedQueue.java	/^  protected synchronized Object extract() {$/;"	m	class:LinkedQueue
extract	scala/actors/threadpool/SynchronousQueue.java	/^        private Object extract() {$/;"	m	class:SynchronousQueue.Node	file:
extract	scala/actors/threadpool/helpers/FIFOWaitQueue.java	/^    public WaitNode extract() {$/;"	m	class:FIFOWaitQueue
extract	scala/actors/threadpool/helpers/WaitQueue.java	/^    public abstract WaitNode extract(); \/\/ should return null if empty$/;"	m	class:WaitQueue
extract	scala/util/parsing/ast/Binders.scala	/^    def extract(subst: scala.collection.immutable.Map[NameElement, NameElement]): elementT = cloneElementWithSubst(subst)$/;"	m
extract	scala/util/parsing/ast/Binders.scala	/^    def extract: elementT = cloneElementNoBoundElements$/;"	m
extractFirst	scala/actors/MessageQueue.scala	/^  def extractFirst(p: (Msg, OutputChannel[Any]) => Boolean): MQueueElement[Msg] =$/;"	m
extractFirst	scala/actors/MessageQueue.scala	/^  def extractFirst(pf: PartialFunction[Msg, Any]): MQueueElement[Msg] = {$/;"	m
extractFirst	scala/collection/mutable/Queue.scala	/^  def extractFirst(start: LinkedList[A], p: A => Boolean): Option[LinkedList[A]] = {$/;"	m
extractFirst	scala/concurrent/MailBox.scala	/^    def extractFirst(l: T, p: A => Boolean): Option[(A, T)] = {$/;"	m
extractFirst	scala/concurrent/MailBox.scala	/^    def extractFirst(l: T, p: A => Boolean): Option[(A, T)] =$/;"	m
extractFirst	scala/concurrent/MailBox.scala	/^  def extractFirst(l: T, p: A => Boolean): Option[(A, T)]$/;"	m
f	scala/collection/immutable/PagedSeq.scala	/^    var f = first1$/;"	l
f	scala/collection/parallel/ParIterableLike.scala	/^        val f = (from max untilp) - untilp$/;"	l
f	scala/reflect/generic/Flags.scala	/^    def f(flags: Int): Int = {$/;"	m
f	scala/reflect/generic/Flags.scala	/^    var f = flags$/;"	l
f	scala/xml/Utility.scala	/^      val f = it.next$/;"	l
f	scala/xml/factory/XMLLoader.scala	/^    val f = SAXParserFactory.newInstance()$/;"	l
factory	scala/xml/factory/Binder.scala	/^package factory$/;"	p
factory	scala/xml/factory/LoggedNodeFactory.scala	/^package factory$/;"	p
factory	scala/xml/factory/NodeFactory.scala	/^package factory$/;"	p
factory	scala/xml/factory/XMLLoader.scala	/^package factory$/;"	p
factory2ops	scala/collection/parallel/package.scala	/^  implicit def factory2ops[From, Elem, To](bf: CanBuildFrom[From, Elem, To]) = new FactoryOps[From, Elem, To] {$/;"	m
fail	scala/collection/generic/GenericTraversableTemplate.scala	/^    def fail = throw new IllegalArgumentException("transpose requires all collections have the same size")$/;"	m
fail	scala/testing/SUnit.scala	/^    def fail(msg: String) {$/;"	m
fail	scala/testing/SUnit.scala	/^    def fail[A](msg: String, expected: A, actual: A) {$/;"	m
fail	scala/xml/NodeSeq.scala	/^    def fail = throw new IllegalArgumentException(that)$/;"	m
fail	scala/xml/include/sax/Main.scala	/^    def fail(msg: String) = System.err.println(msg)$/;"	m
failAsValue	scala/util/control/Exception.scala	/^  def failAsValue[T](exceptions: Class[_]*)(value: => T): Catch[T] =$/;"	m
failing	scala/util/control/Exception.scala	/^  def failing[T](exceptions: Class[_]*): Catch[Option[T]] =$/;"	m
failure	scala/util/parsing/combinator/Parsers.scala	/^  def failure(msg: String) = Parser{ in => Failure(msg, in) }$/;"	m
failureCount	scala/testing/SUnit.scala	/^    def failureCount() =$/;"	m
failures	scala/testing/SUnit.scala	/^    def failures() =$/;"	m
fallbackCanBuildFrom	scala/Array.scala	/^  implicit def fallbackCanBuildFrom[T](implicit m: DummyImplicit): CanBuildFrom[Array[_], T, ArraySeq[T]] = $/;"	m
fallbackStringCanBuildFrom	scala/LowPriorityImplicits.scala	/^  implicit def fallbackStringCanBuildFrom[T]: CanBuildFrom[String, T, immutable.IndexedSeq[T]] = $/;"	m
fallbackSystemCodec	scala/io/Codec.scala	/^  implicit def fallbackSystemCodec: Codec = defaultCharsetCodec$/;"	m
fbcount	scala/collection/parallel/mutable/package.scala	/^        val fbcount = countElems(from, fbuntil)$/;"	l
fbindex	scala/collection/parallel/mutable/package.scala	/^      val fbindex = from \/ sizeMapBucketSize$/;"	l
fbuntil	scala/collection/parallel/mutable/package.scala	/^        val fbuntil = ((fbindex + 1) * sizeMapBucketSize) min tableLength$/;"	l
fes	scala/collection/parallel/mutable/ParHashTable.scala	/^        val fes = es$/;"	l
fidx	scala/collection/parallel/mutable/ParHashTable.scala	/^        val fidx = idx$/;"	l
field	scala/annotation/target/field.scala	/^final class field extends annotation.StaticAnnotation$/;"	c
fields	scala/Enumeration.scala	/^    val fields = getClass.getDeclaredFields$/;"	l
fileEncodingCodec	scala/io/Codec.scala	/^  def fileEncodingCodec                     = apply(util.Properties.encodingString)$/;"	m
fileStr	scala/xml/parsing/ExternalSources.scala	/^    val fileStr: String = input.descr match {$/;"	l
fileToProcess	scala/sys/process/Process.scala	/^  implicit def fileToProcess(file: File): FileBuilder                     = apply(file)$/;"	m
fill	scala/Array.scala	/^  def fill[T: ClassManifest](n1: Int, n2: Int)(elem: => T): Array[Array[T]] = $/;"	m
fill	scala/Array.scala	/^  def fill[T: ClassManifest](n1: Int, n2: Int, n3: Int)(elem: => T): Array[Array[Array[T]]] = $/;"	m
fill	scala/Array.scala	/^  def fill[T: ClassManifest](n1: Int, n2: Int, n3: Int, n4: Int)(elem: => T): Array[Array[Array[Array[T]]]] = $/;"	m
fill	scala/Array.scala	/^  def fill[T: ClassManifest](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(elem: => T): Array[Array[Array[Array[Array[T]]]]] = $/;"	m
fill	scala/Array.scala	/^  def fill[T: ClassManifest](n: Int)(elem: => T): Array[T] = {$/;"	m
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(Object[] a, Object val) {$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(Object[] a, int fromIndex, int toIndex, Object val) {$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(boolean[] a, boolean val) {$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(boolean[] a, int fromIndex, int toIndex,$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(byte[] a, byte val) {$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(byte[] a, int fromIndex, int toIndex, byte val) {$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(char[] a, char val) {$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(char[] a, int fromIndex, int toIndex, char val) {$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(double[] a, double val) {$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(double[] a, int fromIndex, int toIndex,double val) {$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(float[] a, float val) {$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(float[] a, int fromIndex, int toIndex, float val) {$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(int[] a, int fromIndex, int toIndex, int val) {$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(int[] a, int val) {$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(long[] a, int fromIndex, int toIndex, long val) {$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(long[] a, long val) {$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(short[] a, int fromIndex, int toIndex, short val) {$/;"	m	class:Arrays
fill	scala/actors/threadpool/Arrays.java	/^    public static void fill(short[] a, short val) {$/;"	m	class:Arrays
fill	scala/collection/Iterator.scala	/^  def fill[A](len: Int)(elem: => A) = new Iterator[A] {$/;"	m
fill	scala/collection/generic/GenTraversableFactory.scala	/^  def fill[A](n1: Int, n2: Int)(elem: => A): CC[CC[A]] = $/;"	m
fill	scala/collection/generic/GenTraversableFactory.scala	/^  def fill[A](n1: Int, n2: Int, n3: Int)(elem: => A): CC[CC[CC[A]]] = $/;"	m
fill	scala/collection/generic/GenTraversableFactory.scala	/^  def fill[A](n1: Int, n2: Int, n3: Int, n4: Int)(elem: => A): CC[CC[CC[CC[A]]]] = $/;"	m
fill	scala/collection/generic/GenTraversableFactory.scala	/^  def fill[A](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(elem: => A): CC[CC[CC[CC[CC[A]]]]] = $/;"	m
fill	scala/collection/generic/GenTraversableFactory.scala	/^  def fill[A](n: Int)(elem: => A): CC[A] = {$/;"	m
filled	scala/collection/immutable/PagedSeq.scala	/^  var filled: Int = 0$/;"	l
filt	scala/xml/NodeSeq.scala	/^    def filt(cond: (Node) => Boolean) = this flatMap (_.descendant_or_self) filter cond$/;"	m
filter	scala/Either.scala	/^    def filter[X](p: B => Boolean): Option[Either[X, B]] = e match {$/;"	m
filter	scala/Either.scala	/^    def filter[Y](p: A => Boolean): Option[Either[A, Y]] = e match {$/;"	m
filter	scala/Responder.scala	/^  def filter(p: A => Boolean) = new Responder[A] {$/;"	m
filter	scala/Tuple2.scala	/^    def filter[To1, To2](f: (El1, El2) => Boolean)(implicit cbf1: CBF[Repr1, El1, To1], cbf2: CBF[Repr2, El2, To2]): (To1, To2) = {$/;"	m
filter	scala/Tuple3.scala	/^    def filter[To1, To2, To3](f: (El1, El2, El3) => Boolean)($/;"	m
filter	scala/collection/GenTraversableLike.scala	/^  def filter(pred: A => Boolean): Repr$/;"	m
filter	scala/collection/Iterator.scala	/^  def filter(p: A => Boolean): Iterator[A] = new Iterator[A] {$/;"	m
filter	scala/collection/TraversableLike.scala	/^  def filter(p: A => Boolean): Repr = {$/;"	m
filter	scala/collection/TraversableOnce.scala	/^    def filter(p: A => Boolean): TraversableOnce[A] = withFilter(p)$/;"	m
filter	scala/collection/interfaces/TraversableMethods.scala	/^  def filter(p: A => Boolean): Traversable[A]$/;"	m
filter	scala/collection/parallel/ParIterableLike.scala	/^  def filter(pred: T => Boolean): Repr = {$/;"	m
filter2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def filter2combiner[U >: T, This](pred: T => Boolean, cb: Combiner[U, This]): Combiner[U, This] = {$/;"	m
filterKeys	scala/collection/MapLike.scala	/^  def filterKeys(p: A => Boolean): Map[A, B] = new DefaultMap[A, B] {$/;"	m
filterKeys	scala/collection/interfaces/MapMethods.scala	/^  def filterKeys(p: A => Boolean): Map[A, B]$/;"	m
filterMap	scala/collection/TraversableLike.scala	/^  def filterMap[B, That](f: A => Option[B])(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
filterNot	scala/collection/GenTraversableLike.scala	/^  def filterNot(pred: A => Boolean): Repr$/;"	m
filterNot	scala/collection/Iterator.scala	/^  def filterNot(p: A => Boolean): Iterator[A] = filter(!p(_))$/;"	m
filterNot	scala/collection/TraversableLike.scala	/^  def filterNot(p: A => Boolean): Repr = filter(!p(_))$/;"	m
filterNot	scala/collection/interfaces/TraversableMethods.scala	/^  def filterNot(p: A => Boolean): Traversable[A]$/;"	m
filterNot	scala/collection/parallel/ParIterableLike.scala	/^  def filterNot(pred: T => Boolean): Repr = {$/;"	m
filterNot2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def filterNot2combiner[U >: T, This](pred: T => Boolean, cb: Combiner[U, This]): Combiner[U, This] = {$/;"	m
fin	scala/util/control/Exception.scala	/^    val fin: Option[Finally] = None,$/;"	l
finalString	scala/util/automata/NondetWordAutom.scala	/^    val finalString = Map(finalStates map (j => j -> finals(j)) : _*).toString$/;"	l
finalTag	scala/util/automata/NondetWordAutom.scala	/^  final def finalTag(state: Int) = finals(state)$/;"	m
finalize	scala/actors/threadpool/Executors.java	/^	protected void finalize()  {$/;"	m	class:Executors.FinalizableDelegatedExecutorService
finalize	scala/actors/threadpool/ThreadPoolExecutor.java	/^    protected void finalize() {$/;"	m	class:ThreadPoolExecutor
finalizeHash	scala/util/MurmurHash.scala	/^  def finalizeHash(hash: Int) = {$/;"	m
finalizer	scala/reflect/generic/UnPickler.scala	/^          val finalizer = readTreeRef()$/;"	l
finals	scala/util/automata/DetWordAutom.scala	/^  val finals: Array[Int]$/;"	l
finals	scala/util/automata/NondetWordAutom.scala	/^  val finals: Array[Int] \/\/ 0 means not final$/;"	l
finals	scala/util/automata/SubsetConstruction.scala	/^      val finals = finalsR$/;"	l
finals	scala/util/automata/SubsetConstruction.scala	/^    var finals: mutable.Map[BitSet, Int]  = mutable.Map()$/;"	l
finals	scala/util/automata/WordBerrySethi.scala	/^          val finals   = finalsArr$/;"	l
finalsArr	scala/util/automata/WordBerrySethi.scala	/^        val finalsArr   = 0 until pos map (k => finals.getOrElse(k, 0)) toArray  \/\/ 0 == not final$/;"	l
finalsR	scala/util/automata/SubsetConstruction.scala	/^    val finalsR = new Array[Int](nstatesR)$/;"	l
find	scala/collection/GenTraversableOnce.scala	/^  def find(pred: A => Boolean): Option[A]$/;"	m
find	scala/collection/IndexedSeqOptimized.scala	/^  def find(p: A => Boolean): Option[A] = {$/;"	m
find	scala/collection/Iterator.scala	/^  def find(p: A => Boolean): Option[A] = {$/;"	m
find	scala/collection/LinearSeqOptimized.scala	/^  def find(p: A => Boolean): Option[A] = {$/;"	m
find	scala/collection/TraversableLike.scala	/^  def find(p: A => Boolean): Option[A] = {$/;"	m
find	scala/collection/TraversableOnce.scala	/^  def find(p: A => Boolean): Option[A]$/;"	m
find	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def find(p: A => Boolean): Option[A]$/;"	m
find	scala/collection/parallel/ParIterableLike.scala	/^  def find(pred: T => Boolean): Option[T] = {$/;"	m
find	scala/runtime/MethodCache.scala	/^  def find(forReceiver: JClass[_]): JMethod = findInternal(forReceiver)$/;"	m
find	scala/runtime/MethodCache.scala	/^  def find(forReceiver: JClass[_]): JMethod = null$/;"	m
find	scala/runtime/MethodCache.scala	/^  def find(forReceiver: JClass[_]): JMethod =$/;"	m
find	scala/runtime/MethodCache.scala	/^  def find(forReceiver: JClass[_]): JMethod$/;"	m
find	scala/xml/dtd/ElementValidator.scala	/^      def find(Key: String): Boolean =$/;"	m
find	scala/xml/dtd/ElementValidator.scala	/^      def find(Key: String): Option[AttrDecl] = {$/;"	m
findAllIn	scala/util/matching/Regex.scala	/^  def findAllIn(source: java.lang.CharSequence) = new Regex.MatchIterator(source, this, groupNames)$/;"	m
findDepth	scala/collection/immutable/RedBlack.scala	/^      def  findDepth(zipper: List[NonEmpty[B]], depth: Int): List[NonEmpty[B]] = zipper match {$/;"	m
findEntry	scala/collection/mutable/FlatHashTable.scala	/^  def findEntry(elem: A): Option[A] = {$/;"	m
findFirstIn	scala/util/matching/Regex.scala	/^  def findFirstIn(source: java.lang.CharSequence): Option[String] = {$/;"	m
findFirstMatchIn	scala/util/matching/Regex.scala	/^  def findFirstMatchIn(source: java.lang.CharSequence): Option[Match] = {$/;"	m
findIndexOf	scala/collection/Iterator.scala	/^  def findIndexOf(p: A => Boolean): Int = indexWhere(p)$/;"	m
findIndexOf	scala/collection/SeqLike.scala	/^  def findIndexOf(p: A => Boolean): Int = indexWhere(p)$/;"	m
findLastIndexOf	scala/collection/SeqLike.scala	/^  def findLastIndexOf(p: A => Boolean): Int = lastIndexWhere(p)$/;"	m
findPrefixMatchOf	scala/util/matching/Regex.scala	/^  def findPrefixMatchOf(source: java.lang.CharSequence): Option[Match] = {$/;"	m
findPrefixOf	scala/util/matching/Regex.scala	/^  def findPrefixOf(source: java.lang.CharSequence): Option[String] = {$/;"	m
finish	scala/collection/Iterator.scala	/^      def finish() = {$/;"	m
finishSym	scala/reflect/generic/UnPickler.scala	/^      def finishSym(sym: Symbol): Symbol = {$/;"	m
first	scala/collection/TraversableOnce.scala	/^    var first = true$/;"	l
first	scala/collection/immutable/RedBlack.scala	/^    def first : A$/;"	m
first	scala/collection/immutable/RedBlack.scala	/^    def first = if (left .isEmpty) key else left.first$/;"	m
first	scala/collection/immutable/RedBlack.scala	/^    def first = throw new NoSuchElementException("empty map")$/;"	m
first	scala/sys/process/ProcessImpl.scala	/^      val first = a.run(firstIO)$/;"	l
first	scala/sys/process/ProcessImpl.scala	/^      val first = a.run(io)$/;"	l
first	scala/util/automata/BaseBerrySethi.scala	/^        val first = compFollow1(fol, p)$/;"	l
first	scala/util/parsing/combinator/PackratParsers.scala	/^    def first: T = underlying.first$/;"	m
first	scala/util/parsing/combinator/lexical/Scanners.scala	/^    def first = tok$/;"	m
first	scala/util/parsing/input/CharSequenceReader.scala	/^  def first = $/;"	m
first	scala/util/parsing/input/PagedSeqReader.scala	/^  def first = $/;"	m
first	scala/util/parsing/input/Reader.scala	/^  def first: T$/;"	m
firstIO	scala/sys/process/ProcessImpl.scala	/^      val firstIO =$/;"	l
firstKey	scala/collection/SortedMapLike.scala	/^  def firstKey : A = head._1$/;"	m
firstKey	scala/collection/generic/Sorted.scala	/^  def firstKey: K$/;"	m
firstKey	scala/collection/immutable/IntMap.scala	/^  final def firstKey : Int = this match {$/;"	m
firstMsg	scala/actors/MessageQueue.scala	/^    def firstMsg = if (first eq null) "null" else first.msg$/;"	m
firstSymTag	scala/reflect/generic/PickleFormat.scala	/^  final val firstSymTag = NONEsym$/;"	l
firstTask	scala/actors/threadpool/ThreadPoolExecutor.java	/^        Runnable firstTask;$/;"	f	class:ThreadPoolExecutor.Worker
fits	scala/text/Document.scala	/^    def fits(w: Int, state: List[FmtState]): Boolean = state match {$/;"	m
fitsFlat	scala/text/Document.scala	/^        val fitsFlat = fits(width - k, (i, false, d) :: z)$/;"	l
fixedList	scala/io/BytePickle.scala	/^  def fixedList[a](pa: SPU[a])(n: Int): SPU[List[a]] = {$/;"	m
fjtask	scala/collection/parallel/Tasks.scala	/^    val fjtask = newTaskImpl(task)$/;"	l
flagToString	scala/reflect/generic/Flags.scala	/^  def flagToString(flag: Long): String = ""$/;"	m
flags	scala/reflect/generic/Symbols.scala	/^    def flags: Long$/;"	m
flags	scala/reflect/generic/UnPickler.scala	/^      val flags        = pickledToRawFlags(readLongNat())$/;"	l
flags	scala/reflect/generic/UnPickler.scala	/^      val flags = pickledToRawFlags(pflags)$/;"	l
flags1	scala/reflect/generic/Trees.scala	/^      val flags1 = flags & (~flag)$/;"	l
flags1	scala/reflect/generic/Trees.scala	/^      val flags1 = flags & flag$/;"	l
flags1	scala/reflect/generic/Trees.scala	/^      val flags1 = flags | flag$/;"	l
flagsToString	scala/reflect/generic/Flags.scala	/^  def flagsToString(flags: Long): String =$/;"	m
flagsToString	scala/reflect/generic/Flags.scala	/^  def flagsToString(flags: Long, privateWithin: String): String = {$/;"	m
flags_	scala/reflect/generic/Symbols.scala	/^    def flags_=(flags: Long)         { throw new UnsupportedOperationException("flags_= inapplicable for " + this) }$/;"	m
flatMap	scala/Either.scala	/^    def flatMap[AA >: A, Y](f: B => Either[AA, Y]) = e match {$/;"	m
flatMap	scala/Either.scala	/^    def flatMap[BB >: B, X](f: A => Either[X, BB]) = e match {$/;"	m
flatMap	scala/Option.scala	/^    def flatMap[B](f: A => Option[B]): Option[B] = self filter p flatMap f$/;"	m
flatMap	scala/Responder.scala	/^  def flatMap[B](f: A => Responder[B]) = new Responder[B] {$/;"	m
flatMap	scala/Tuple2.scala	/^    def flatMap[B, To](f: (El1, El2) => TraversableOnce[B])(implicit cbf: CBF[Repr1, B, To]): To = {$/;"	m
flatMap	scala/Tuple3.scala	/^    def flatMap[B, To](f: (El1, El2, El3) => TraversableOnce[B])(implicit cbf: CBF[Repr1, B, To]): To = {$/;"	m
flatMap	scala/collection/GenTraversableLike.scala	/^  def flatMap[B, That](f: A => GenTraversableOnce[B])(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
flatMap	scala/collection/Iterator.scala	/^  def flatMap[B](f: A => GenTraversableOnce[B]): Iterator[B] = new Iterator[B] {$/;"	m
flatMap	scala/collection/TraversableLike.scala	/^    def flatMap[B, That](f: A => GenTraversableOnce[B])(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
flatMap	scala/collection/TraversableLike.scala	/^  def flatMap[B, That](f: A => GenTraversableOnce[B])(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
flatMap	scala/collection/TraversableOnce.scala	/^    def flatMap[B](f: A => GenTraversableOnce[B]): TraversableOnce[B] = trav.toIterator flatMap f$/;"	m
flatMap	scala/collection/generic/FilterMonadic.scala	/^  def flatMap[B, That](f: A => collection.GenTraversableOnce[B])(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
flatMap	scala/collection/interfaces/TraversableMethods.scala	/^  def flatMap[B, That](f: A => GenTraversableOnce[B])(implicit bf: CanBuildFrom[This, B, That]): That$/;"	m
flatMap	scala/collection/parallel/ParIterableLike.scala	/^  def flatMap[S, That](f: T => GenTraversableOnce[S])(implicit bf: CanBuildFrom[Repr, S, That]): That = bf ifParallel { pbf =>$/;"	m
flatMap	scala/util/continuations/ControlContext.scala	/^    final def flatMap[A1,B1<:B](f: (A => ControlContext[A1,B1,B])): ControlContext[A1,B1,C] = {$/;"	m
flatMap	scala/util/parsing/combinator/Parsers.scala	/^    def flatMap[U](f: T => Parser[U]): Parser[U]$/;"	m
flatMapCatch	scala/util/continuations/ControlContext.scala	/^  final def flatMapCatch[A1>:A,B1<:B,C1>:C<:B1](pf: PartialFunction[Exception, ControlContext[A1,B1,C1]]): ControlContext[A1,B1,C1] = {$/;"	m
flatMapWithNext	scala/util/parsing/combinator/Parsers.scala	/^    def flatMapWithNext[U](f: Nothing => Input => ParseResult[U]): ParseResult[U] $/;"	m
flatMapWithNext	scala/util/parsing/combinator/Parsers.scala	/^    def flatMapWithNext[U](f: T => Input => ParseResult[U]): ParseResult[U]     $/;"	m
flatMapWithNext	scala/util/parsing/combinator/Parsers.scala	/^    def flatMapWithNext[U](f: T => Input => ParseResult[U]): ParseResult[U] $/;"	m
flatmap2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def flatmap2combiner[S, That](f: T => GenTraversableOnce[S], cb: Combiner[S, That]): Combiner[S, That] = {$/;"	m
flatten	scala/collection/Iterator.scala	/^  def flatten[T](its: Iterator[Iterator[T]]): Iterator[T] = new Iterator[T] {$/;"	m
flatten	scala/collection/Traversable.scala	/^  def flatten[B](implicit asTraversable: A => \/*<:<!!!*\/ TraversableOnce[B]): Traversable[B] = super.flatten(asTraversable)$/;"	m
flatten	scala/collection/TraversableOnce.scala	/^    def flatten: Iterator[A] = new Iterator[A] {$/;"	m
flatten	scala/collection/generic/GenericTraversableTemplate.scala	/^  def flatten[B](implicit asTraversable: A => \/*<:<!!!*\/ TraversableOnce[B]): CC[B] = {$/;"	m
flatten	scala/collection/immutable/List.scala	/^  def flatten[A](xss: List[List[A]]): List[A] = { $/;"	m
flatten	scala/collection/mutable/ArrayOps.scala	/^  def flatten[U, To](implicit asTrav: T => collection.Traversable[U], m: ClassManifest[U]): Array[U] = {$/;"	m
flatten1	scala/collection/immutable/Stream.scala	/^    def flatten1(t: Traversable[B]): Stream[B] =$/;"	m
flatten2	scala/util/parsing/combinator/ImplicitConversions.scala	/^  implicit def flatten2[A, B, C]         (f: (A, B) => C) = $/;"	m
flatten3	scala/util/parsing/combinator/ImplicitConversions.scala	/^  implicit def flatten3[A, B, C, D]      (f: (A, B, C) => D) = $/;"	m
flatten4	scala/util/parsing/combinator/ImplicitConversions.scala	/^  implicit def flatten4[A, B, C, D, E]   (f: (A, B, C, D) => E) = $/;"	m
flatten5	scala/util/parsing/combinator/ImplicitConversions.scala	/^  implicit def flatten5[A, B, C, D, E, F](f: (A, B, C, D, E) => F) = $/;"	m
flattenTraversableOnce	scala/collection/TraversableOnce.scala	/^  implicit def flattenTraversableOnce[A, CC[_]](travs: TraversableOnce[CC[A]])(implicit ev: CC[A] => TraversableOnce[A]) =$/;"	m
flipBit	scala/math/BigInt.scala	/^  def flipBit (n: Int): BigInt  = new BigInt(this.bigInteger.flipBit(n))$/;"	m
float2Float	scala/Predef.scala	/^  implicit def float2Float(x: Float)        = java.lang.Float.valueOf(x)$/;"	m
float2FloatConflict	scala/Predef.scala	/^  implicit def float2FloatConflict(x: Float)        = new AnyRef$/;"	m
float2double	scala/Predef.scala	/^  implicit def float2double(x: Float): Double = x.toDouble$/;"	m
floatArrayOps	scala/Predef.scala	/^  implicit def floatArrayOps(xs: Array[Float]): ArrayOps[Float] = new ArrayOps.ofFloat(xs)$/;"	m
floatValue	scala/actors/threadpool/AtomicInteger.java	/^    public float floatValue() {$/;"	m	class:AtomicInteger
floatValue	scala/math/BigDecimal.scala	/^  def floatValue  = this.bigDecimal.floatValue$/;"	m
floatValue	scala/math/BigInt.scala	/^  def floatValue  = this.bigInteger.floatValue$/;"	m
floatValue	scala/reflect/generic/Constants.scala	/^    def floatValue: Float = tag match {$/;"	m
floatValue	scala/runtime/ScalaNumberProxy.scala	/^  def floatValue()  = num.toFloat(self)$/;"	m
floatWrapper	scala/LowPriorityImplicits.scala	/^  implicit def floatWrapper(x: Float)     = new runtime.RichFloat(x)$/;"	m
floatingPointNumber	scala/util/parsing/combinator/JavaTokenParsers.scala	/^  def floatingPointNumber: Parser[String] = $/;"	m
floor	scala/MathCommon.scala	/^  def floor(x: Double): Double = java.lang.Math.floor(x)$/;"	m
floor	scala/runtime/RichDouble.scala	/^  def floor: Double = math.floor(self)$/;"	m
floor	scala/runtime/RichFloat.scala	/^  def floor: Float = math.floor(self).toFloat$/;"	m
flush	scala/Console.scala	/^  def flush() { out.flush() }$/;"	m
flush	scala/reflect/generic/Trees.scala	/^    def flush()$/;"	m
flush	scala/sys/process/ProcessLogger.scala	/^  def flush(): Unit = writer.flush()$/;"	m
flush	scala/xml/persistent/CachedFileStorage.scala	/^  def flush() = {$/;"	m
fmt	scala/text/Document.scala	/^    def fmt(k: Int, state: List[FmtState]): Unit = state match {$/;"	m
fold	scala/Either.scala	/^  def fold[X](fa: A => X, fb: B => X) = this match {$/;"	m
fold	scala/collection/GenTraversableOnce.scala	/^  def fold[A1 >: A](z: A1)(op: (A1, A1) => A1): A1$/;"	m
fold	scala/collection/TraversableOnce.scala	/^  def fold[A1 >: A](z: A1)(op: (A1, A1) => A1): A1 = foldLeft(z)(op)$/;"	m
fold	scala/collection/parallel/ParIterableLike.scala	/^  def fold[U >: T](z: U)(op: (U, U) => U): U = {$/;"	m
foldLeft	scala/actors/MessageQueue.scala	/^  def foldLeft[B](z: B)(f: (B, Msg) => B): B = {$/;"	m
foldLeft	scala/collection/GenTraversableOnce.scala	/^  def foldLeft[B](z: B)(op: (B, A) => B): B$/;"	m
foldLeft	scala/collection/IndexedSeqOptimized.scala	/^  def foldLeft[B](z: B)(op: (B, A) => B): B = $/;"	m
foldLeft	scala/collection/LinearSeqOptimized.scala	/^  def foldLeft[B](z: B)(f: (B, A) => B): B = {$/;"	m
foldLeft	scala/collection/TraversableOnce.scala	/^  def foldLeft[B](z: B)(op: (B, A) => B): B = {$/;"	m
foldLeft	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def foldLeft[B](z: B)(op: (B, A) => B): B$/;"	m
foldLeft	scala/collection/parallel/ParIterableLike.scala	/^  def foldLeft[S](z: S)(op: (S, T) => S): S = seq.foldLeft(z)(op)$/;"	m
foldRight	scala/collection/GenTraversableOnce.scala	/^  def foldRight[B](z: B)(op: (A, B) => B): B$/;"	m
foldRight	scala/collection/IndexedSeqOptimized.scala	/^  def foldRight[B](z: B)(op: (A, B) => B): B = $/;"	m
foldRight	scala/collection/LinearSeqOptimized.scala	/^  def foldRight[B](z: B)(f: (A, B) => B): B = $/;"	m
foldRight	scala/collection/TraversableOnce.scala	/^  def foldRight[B](z: B)(op: (A, B) => B): B =$/;"	m
foldRight	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def foldRight[B](z: B)(op: (A, B) => B): B$/;"	m
foldRight	scala/collection/parallel/ParIterableLike.scala	/^  def foldRight[S](z: S)(op: (T, S) => S): S = seq.foldRight(z)(op)$/;"	m
follow	scala/collection/TraversableLike.scala	/^    var follow = false$/;"	l
forall	scala/Either.scala	/^    def forall(f: A => Boolean) = e match {$/;"	m
forall	scala/Either.scala	/^    def forall(f: B => Boolean) = e match {$/;"	m
forall	scala/Tuple2.scala	/^    def forall(f: (El1, El2) => Boolean): Boolean =$/;"	m
forall	scala/Tuple3.scala	/^    def forall(f: (El1, El2, El3) => Boolean): Boolean =$/;"	m
forall	scala/collection/GenTraversableOnce.scala	/^  def forall(pred: A => Boolean): Boolean$/;"	m
forall	scala/collection/IndexedSeqOptimized.scala	/^  def forall(p: A => Boolean): Boolean = prefixLength(p(_)) == length$/;"	m
forall	scala/collection/Iterator.scala	/^  def forall(p: A => Boolean): Boolean = {$/;"	m
forall	scala/collection/LinearSeqOptimized.scala	/^  def forall(p: A => Boolean): Boolean = {$/;"	m
forall	scala/collection/TraversableLike.scala	/^  def forall(p: A => Boolean): Boolean = {$/;"	m
forall	scala/collection/TraversableOnce.scala	/^  def forall(p: A => Boolean): Boolean$/;"	m
forall	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def forall(p: A => Boolean): Boolean$/;"	m
forall	scala/collection/parallel/ParIterableLike.scala	/^  def forall(pred: T => Boolean): Boolean = {$/;"	m
forall2	scala/collection/immutable/List.scala	/^  def forall2[A,B](xs: List[A], ys: List[B])(f: (A, B) => Boolean): Boolean = {$/;"	m
force	scala/collection/GenTraversableViewLike.scala	/^  def force[B >: A, That](implicit bf: CanBuildFrom[Coll, B, That]): That$/;"	m
force	scala/collection/TraversableViewLike.scala	/^  def force[B >: A, That](implicit bf: CanBuildFrom[Coll, B, That]) = {$/;"	m
force	scala/collection/immutable/Stream.scala	/^  def force: Stream[A] = {$/;"	m
force	scala/util/matching/Regex.scala	/^    def force: this.type = { starts; ends; this } $/;"	m
forcedPar	scala/collection/parallel/ParIterableViewLike.scala	/^    def forcedPar: ParIterable[S] = forced.asParIterable$/;"	m
foreach	scala/Either.scala	/^    def foreach[U](f: A => U) = e match {$/;"	m
foreach	scala/Either.scala	/^    def foreach[U](f: B => U) = e match {$/;"	m
foreach	scala/Option.scala	/^    def foreach[U](f: A => U): Unit = self filter p foreach f$/;"	m
foreach	scala/Predef.scala	/^      def foreach[U](f: ((El1, El2)) => U): Unit = zz foreach Function.untupled(f)$/;"	m
foreach	scala/Predef.scala	/^      def foreach[U](f: ((El1, El2, El3)) => U): Unit = zz foreach Function.untupled(f)$/;"	m
foreach	scala/Responder.scala	/^  def foreach(k: A => Unit) { respond(k) }$/;"	m
foreach	scala/Tuple2.scala	/^    def foreach[U](f: (El1, El2) => U): Unit = {$/;"	m
foreach	scala/Tuple3.scala	/^    def foreach[U](f: (El1, El2, El3) => U): Unit = {$/;"	m
foreach	scala/actors/MessageQueue.scala	/^  def foreach(f: (Msg, OutputChannel[Any]) => Unit) {$/;"	m
foreach	scala/collection/GenTraversableLike.scala	/^  def foreach[U](f: A => U): Unit$/;"	m
foreach	scala/collection/GenTraversableOnce.scala	/^  def foreach[U](f: A => U): Unit$/;"	m
foreach	scala/collection/GenTraversableViewLike.scala	/^    def foreach[U](f: A => U) {$/;"	m
foreach	scala/collection/GenTraversableViewLike.scala	/^    def foreach[U](f: B => U) = forced foreach f$/;"	m
foreach	scala/collection/GenTraversableViewLike.scala	/^    def foreach[U](f: B => U) {$/;"	m
foreach	scala/collection/GenTraversableViewLike.scala	/^    def foreach[U](f: B => U): Unit$/;"	m
foreach	scala/collection/IndexedSeqOptimized.scala	/^  def foreach[U](f: A => U): Unit = {$/;"	m
foreach	scala/collection/IterableLike.scala	/^  def foreach[U](f: A => U): Unit = $/;"	m
foreach	scala/collection/Iterator.scala	/^  def foreach[U](f: A =>  U) { while (hasNext) f(next()) }$/;"	m
foreach	scala/collection/LinearSeqOptimized.scala	/^  def foreach[B](f: A => B) {$/;"	m
foreach	scala/collection/TraversableLike.scala	/^    def foreach[U](f: A => U): Unit = $/;"	m
foreach	scala/collection/TraversableLike.scala	/^  def foreach[U](f: A => U): Unit$/;"	m
foreach	scala/collection/TraversableOnce.scala	/^  def foreach[U](f: A => U): Unit$/;"	m
foreach	scala/collection/TraversableViewLike.scala	/^    def foreach[U](f: B => U): Unit$/;"	m
foreach	scala/collection/generic/FilterMonadic.scala	/^  def foreach[U](f: A => U): Unit$/;"	m
foreach	scala/collection/generic/GenericTraversableTemplate.scala	/^  def foreach[U](f: A => U): Unit$/;"	m
foreach	scala/collection/immutable/RedBlack.scala	/^    def foreach[U](f: (A, B) =>  U)$/;"	m
foreach	scala/collection/immutable/RedBlack.scala	/^    def foreach[U](f: (A, B) => U) {$/;"	m
foreach	scala/collection/immutable/RedBlack.scala	/^    def foreach[U](f: (A, Nothing) => U) {}$/;"	m
foreach	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def foreach[U](f: A => U): Unit$/;"	m
foreach	scala/collection/mutable/UnrolledBuffer.scala	/^    def foreach[U](f: T => U) {$/;"	m
foreach	scala/collection/parallel/ParIterableLike.scala	/^  def foreach[U](f: T => U) = {$/;"	m
foreach	scala/util/continuations/ControlContext.scala	/^  final def foreach(f: A => B) = foreachFull(f, throw _)$/;"	m
foreachAppend	scala/actors/MessageQueue.scala	/^  def foreachAppend(target: MQueue[Msg]) {$/;"	m
foreachDequeue	scala/actors/MessageQueue.scala	/^  def foreachDequeue(target: MQueue[Msg]) {$/;"	m
foreachFull	scala/util/continuations/ControlContext.scala	/^  def foreachFull(f: A => B, g: Exception => B): C = {$/;"	m
foreachKey	scala/collection/immutable/IntMap.scala	/^  final def foreachKey(f : Int => Unit) : Unit = this match {$/;"	m
foreachKey	scala/collection/immutable/LongMap.scala	/^  final def foreachKey(f : Long => Unit) : Unit = this match {$/;"	m
foreachValue	scala/collection/immutable/IntMap.scala	/^  final def foreachValue(f : T => Unit) : Unit = this match {$/;"	m
foreachValue	scala/collection/immutable/LongMap.scala	/^  final def foreachValue(f : T => Unit) : Unit = this match {$/;"	m
forkJoinPool	scala/collection/parallel/Tasks.scala	/^  def forkJoinPool: ForkJoinPool = environment.asInstanceOf[ForkJoinPool]$/;"	m
forkJoinPool	scala/collection/parallel/Tasks.scala	/^  def forkJoinPool: ForkJoinPool$/;"	m
format	scala/Predef.scala	/^  def format(text: String, xs: Any*) = augmentString(text).format(xs: _*)$/;"	m
format	scala/collection/immutable/StringLike.scala	/^  def format(args : Any*): String =$/;"	m
format	scala/text/Document.scala	/^  def format(width: Int, writer: Writer) {$/;"	m
format	scala/xml/PrettyPrinter.scala	/^  def format(n: Node, pscope: NamespaceBinding = null): String =$/;"	m
format	scala/xml/PrettyPrinter.scala	/^  def format(n: Node, pscope: NamespaceBinding, sb: StringBuilder): Unit = { \/\/ entry point$/;"	m
format	scala/xml/PrettyPrinter.scala	/^  def format(n: Node, sb: StringBuilder ): Unit = \/\/ entry point$/;"	m
formatLocal	scala/collection/immutable/StringLike.scala	/^  def formatLocal(l: java.util.Locale, args: Any*): String =$/;"	m
formatNodes	scala/xml/PrettyPrinter.scala	/^  def formatNodes(nodes: Seq[Node], pscope: NamespaceBinding = null): String = $/;"	m
formatNodes	scala/xml/PrettyPrinter.scala	/^  def formatNodes(nodes: Seq[Node], pscope: NamespaceBinding, sb: StringBuilder): Unit =$/;"	m
formatted	scala/runtime/StringAdd.scala	/^  def formatted(fmtstr: String): String = fmtstr format self$/;"	m
forward	scala/actors/ActorCanReply.scala	/^        def forward(msg: Any) =$/;"	m
forward	scala/actors/Channel.scala	/^        def forward(msg: Any) =$/;"	m
forward	scala/actors/Channel.scala	/^  def forward(msg: Msg) {$/;"	m
forward	scala/actors/OutputChannel.scala	/^  def forward(msg: Msg): Unit$/;"	m
forward	scala/actors/ReactChannel.scala	/^  def forward(msg: Msg) {$/;"	m
forward	scala/actors/Reactor.scala	/^  def forward(msg: Msg) {$/;"	m
forward	scala/actors/ReactorCanReply.scala	/^      def forward(msg: Any) = {$/;"	m
forward	scala/actors/ReactorCanReply.scala	/^      def forward(msg: Any) =$/;"	m
forward	scala/actors/remote/NetKernel.scala	/^  def forward(from: OutputChannel[Any], node: Node, name: Symbol, msg: AnyRef, session: Symbol) {$/;"	m
forward	scala/actors/remote/Proxy.scala	/^  def forward(msg: Any): Unit =$/;"	m
forwardThrowable	scala/collection/parallel/Tasks.scala	/^    def forwardThrowable() = if (throwable != null) throw throwable$/;"	m
fos	scala/xml/XML.scala	/^    val fos = new FileOutputStream(filename)$/;"	l
fos	scala/xml/persistent/CachedFileStorage.scala	/^    val fos = new FileOutputStream(theFile)$/;"	l
found	scala/collection/Iterator.scala	/^    var found = false$/;"	l
found	scala/collection/parallel/mutable/ParHashMap.scala	/^    val found = ((i * sizeMapBucketSize) until ((i + 1) * sizeMapBucketSize)).foldLeft(0) {$/;"	l
found	scala/util/Marshal.scala	/^    val found = in.readObject.asInstanceOf[ClassManifest[_]]$/;"	l
found	scala/util/parsing/combinator/RegexParsers.scala	/^          val found = if (start == source.length()) "end of source" else "`"+source.charAt(start)+"'" $/;"	l
found	scala/util/parsing/combinator/RegexParsers.scala	/^        val found = if (start == source.length()) "end of source" else "`"+source.charAt(start)+"'" $/;"	l
foundMsg	scala/actors/MessageQueue.scala	/^    def foundMsg(x: MQueueElement[Msg]) = {        $/;"	m
fp	scala/collection/parallel/ParSeqLike.scala	/^      val fp = len \/ 2$/;"	l
fp	scala/collection/parallel/ParSeqLike.scala	/^      val fp = pit.remaining \/ 2$/;"	l
fp	scala/collection/parallel/immutable/ParHashMap.scala	/^      val fp = howmany \/ 2$/;"	l
fp	scala/collection/parallel/immutable/ParHashSet.scala	/^      val fp = howmany \/ 2$/;"	l
fp	scala/collection/parallel/mutable/ParArray.scala	/^      val fp = howmany \/ 2$/;"	l
fp	scala/collection/parallel/mutable/ParHashMap.scala	/^      val fp = howmany \/ 2$/;"	l
fp	scala/collection/parallel/mutable/ParHashSet.scala	/^      val fp = howmany \/ 2$/;"	l
fp	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^      val fp = howmany \/ 2$/;"	l
fp	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^      val fp = howmany \/ 2$/;"	l
fracPart	scala/util/parsing/json/Lexer.scala	/^  def fracPart = '.' ~> rep(digit) ^^ { _ mkString "" }$/;"	m
freeSpace	scala/collection/immutable/Vector.scala	/^        val freeSpace = ((1<<5*(depth)) - endIndex) \/\/ free space at the right given the current tree-structure depth$/;"	l
fresh	scala/actors/remote/Proxy.scala	/^            val fresh = FreshNameCreator.newName(node+"@"+name)$/;"	l
freshName	scala/actors/remote/NetKernel.scala	/^      val freshName = FreshNameCreator.newName("remotesender")$/;"	l
from	scala/collection/Iterator.scala	/^  def from(start: Int): Iterator[Int] = from(start, 1)$/;"	m
from	scala/collection/Iterator.scala	/^  def from(start: Int, step: Int => Int): Iterator[Int] = new Iterator[Int] {$/;"	m
from	scala/collection/Iterator.scala	/^  def from(start: Int, step: Int): Iterator[Int] = new Iterator[Int] {$/;"	m
from	scala/collection/SeqViewLike.scala	/^    val from = _from$/;"	l
from	scala/collection/generic/Sorted.scala	/^  def from(from: K): This = rangeImpl(Some(from), None)$/;"	m
from	scala/collection/immutable/Stream.scala	/^  def from(start: Int): Stream[Int] = from(start, 1)$/;"	m
from	scala/collection/immutable/Stream.scala	/^  def from(start: Int, step: Int): Stream[Int] =$/;"	m
from	scala/collection/parallel/ParIterableLike.scala	/^    val from = unc_from min size max 0$/;"	l
from	scala/collection/parallel/ParSeqLike.scala	/^    val from = 0 max fromarg$/;"	l
from	scala/collection/parallel/ParSeqViewLike.scala	/^    val from = _from;$/;"	l
from	scala/reflect/generic/UnPickler.scala	/^            val from = readNameRef()$/;"	l
fromArray	scala/collection/Iterator.scala	/^  def fromArray[a](xs: Array[a]): Iterator[a] =$/;"	m
fromArray	scala/collection/Iterator.scala	/^  def fromArray[a](xs: Array[a], start: Int, length: Int): Iterator[a] =$/;"	m
fromArray	scala/collection/immutable/BitSet.scala	/^  def fromArray(elems: Array[Long]): BitSet = BitSet.fromArray(elems)$/;"	m
fromArray	scala/collection/immutable/BitSet.scala	/^  def fromArray(elems: Array[Long]): BitSet = {$/;"	m
fromArray	scala/collection/immutable/List.scala	/^  def fromArray[A](arr: Array[A]): List[A] = fromArray(arr, 0, arr.length)$/;"	m
fromArray	scala/collection/immutable/List.scala	/^  def fromArray[A](arr: Array[A], start: Int, len: Int): List[A] = {$/;"	m
fromBytes	scala/io/Source.scala	/^  def fromBytes(bytes: Array[Byte])(implicit codec: Codec): Source =$/;"	m
fromBytes	scala/io/Source.scala	/^  def fromBytes(bytes: Array[Byte], enc: String): Source =$/;"	m
fromChar	scala/io/Source.scala	/^  def fromChar(c: Char): Source = fromIterable(Array(c))$/;"	m
fromChars	scala/io/Source.scala	/^  def fromChars(chars: Array[Char]): Source = fromIterable(chars)$/;"	m
fromClass	scala/reflect/ClassManifest.scala	/^  def fromClass[T](clazz: JClass[T]): ClassManifest[T] = clazz match {$/;"	m
fromComparator	scala/math/Equiv.scala	/^  def fromComparator[T](cmp: Comparator[T]): Equiv[T] = new Equiv[T] {$/;"	m
fromEnum	scala/io/BytePickle.scala	/^    def fromEnum(n: Int) = if (n == 0) false else true$/;"	m
fromFile	scala/collection/immutable/PagedSeq.scala	/^  def fromFile(source: File): PagedSeq[Char] = $/;"	m
fromFile	scala/collection/immutable/PagedSeq.scala	/^  def fromFile(source: String): PagedSeq[Char] = $/;"	m
fromFile	scala/io/Source.scala	/^  def fromFile(file: JFile)(implicit codec: Codec): BufferedSource =$/;"	m
fromFile	scala/io/Source.scala	/^  def fromFile(file: JFile, bufferSize: Int)(implicit codec: Codec): BufferedSource = {$/;"	m
fromFile	scala/io/Source.scala	/^  def fromFile(file: JFile, enc: String): BufferedSource = $/;"	m
fromFile	scala/io/Source.scala	/^  def fromFile(file: JFile, enc: String, bufferSize: Int): BufferedSource =$/;"	m
fromFile	scala/io/Source.scala	/^  def fromFile(name: String)(implicit codec: Codec): BufferedSource =$/;"	m
fromFile	scala/io/Source.scala	/^  def fromFile(name: String, enc: String): BufferedSource =$/;"	m
fromFile	scala/io/Source.scala	/^  def fromFile(uri: URI)(implicit codec: Codec): BufferedSource =$/;"	m
fromFile	scala/io/Source.scala	/^  def fromFile(uri: URI, enc: String): BufferedSource =$/;"	m
fromFile	scala/xml/XML.scala	/^  def fromFile(fd: FileDescriptor)      = new InputSource(new FileInputStream(fd))$/;"	m
fromFile	scala/xml/XML.scala	/^  def fromFile(file: File)              = new InputSource(new FileInputStream(file))$/;"	m
fromFile	scala/xml/XML.scala	/^  def fromFile(name: String)            = new InputSource(new FileInputStream(name))$/;"	m
fromFile	scala/xml/parsing/ConstructingParser.scala	/^  def fromFile(inp: File, preserveWS: Boolean) =$/;"	m
fromFixedAttribute	scala/xml/dtd/ValidationException.scala	/^  def fromFixedAttribute(k: String, value: String, actual: String) =$/;"	m
fromFunction	scala/Array.scala	/^  def fromFunction[T: ClassManifest](f: (Int, Int) => T)(n1: Int, n2: Int): Array[Array[T]] =$/;"	m
fromFunction	scala/Array.scala	/^  def fromFunction[T: ClassManifest](f: (Int, Int, Int) => T)(n1: Int, n2: Int, n3: Int): Array[Array[Array[T]]] = $/;"	m
fromFunction	scala/Array.scala	/^  def fromFunction[T: ClassManifest](f: (Int, Int, Int, Int) => T)(n1: Int, n2: Int, n3: Int, n4: Int): Array[Array[Array[Array[T]]]] = $/;"	m
fromFunction	scala/Array.scala	/^  def fromFunction[T: ClassManifest](f: (Int, Int, Int, Int, Int) => T)(n1: Int, n2: Int, n3: Int, n4: Int, n5: Int): Array[Array[Array[Array[Array[T]]]]] = $/;"	m
fromFunction	scala/Array.scala	/^  def fromFunction[T: ClassManifest](f: Int => T)(n: Int): Array[T] = {$/;"	m
fromFunction	scala/math/Equiv.scala	/^  def fromFunction[T](cmp: (T, T) => Boolean): Equiv[T] = new Equiv[T] {$/;"	m
fromInputStream	scala/io/Source.scala	/^  def fromInputStream(is: InputStream)(implicit codec: Codec): BufferedSource =$/;"	m
fromInputStream	scala/io/Source.scala	/^  def fromInputStream(is: InputStream, enc: String): BufferedSource =$/;"	m
fromInputStream	scala/xml/XML.scala	/^  def fromInputStream(is: InputStream)  = new InputSource(is)$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): BigDecimal = BigDecimal(x)$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): BigInt = BigInt(x)$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): Byte = x.toByte$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): Char = x.toChar$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): Double = x$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): Float = x$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): Int = x$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): Long = x$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): Short = x.toShort$/;"	m
fromInt	scala/math/Numeric.scala	/^  def fromInt(x: Int): T$/;"	m
fromIterable	scala/collection/immutable/PagedSeq.scala	/^  def fromIterable[T: ClassManifest](source: Iterable[T]): PagedSeq[T] = $/;"	m
fromIterable	scala/io/Source.scala	/^  def fromIterable(iterable: Iterable[Char]): Source = new Source {$/;"	m
fromIterator	scala/collection/immutable/List.scala	/^  def fromIterator[A](it: Iterator[A]): List[A] = it.toList$/;"	m
fromIterator	scala/collection/immutable/PagedSeq.scala	/^  def fromIterator[T: ClassManifest](source: Iterator[T]): PagedSeq[T] = $/;"	m
fromIterator	scala/collection/immutable/Stream.scala	/^  def fromIterator[A](it: Iterator[A]): Stream[A] = it.toStream$/;"	m
fromLessThan	scala/math/Ordering.scala	/^  def fromLessThan[T](cmp: (T, T) => Boolean): Ordering[T] = new Ordering[T] {$/;"	m
fromLines	scala/collection/immutable/PagedSeq.scala	/^  def fromLines(source: Iterable[String]): PagedSeq[Char] =$/;"	m
fromLines	scala/collection/immutable/PagedSeq.scala	/^  def fromLines(source: Iterator[String]): PagedSeq[Char] = {$/;"	m
fromMissingAttribute	scala/xml/dtd/ValidationException.scala	/^  def fromMissingAttribute(allKeys: Set[String]) = {$/;"	m
fromMissingAttribute	scala/xml/dtd/ValidationException.scala	/^  def fromMissingAttribute(key: String, tpe: String) =$/;"	m
fromName	scala/reflect/generic/UnPickler.scala	/^        def fromName(name: Name) = mkTermName(name) match {$/;"	m
fromNonEmptyElement	scala/xml/dtd/ValidationException.scala	/^  def fromNonEmptyElement() =$/;"	m
fromProduct	scala/collection/Iterator.scala	/^  def fromProduct(n: Product): Iterator[Any] = new Iterator[Any] {$/;"	m
fromRawBytes	scala/io/Source.scala	/^  def fromRawBytes(bytes: Array[Byte]): Source =$/;"	m
fromReader	scala/collection/immutable/PagedSeq.scala	/^  def fromReader(source: Reader): PagedSeq[Char] =$/;"	m
fromReader	scala/xml/XML.scala	/^  def fromReader(reader: Reader)        = new InputSource(reader)$/;"	m
fromSeq	scala/xml/NodeSeq.scala	/^  def fromSeq(s: Seq[Node]): NodeSeq = new NodeSeq {$/;"	m
fromSource	scala/collection/immutable/PagedSeq.scala	/^  def fromSource(source: io.Source) = $/;"	m
fromSource	scala/xml/parsing/ConstructingParser.scala	/^  def fromSource(inp: Source, preserveWS: Boolean) =$/;"	m
fromString	scala/collection/immutable/List.scala	/^  def fromString(str: String, separator: Char): List[String] = {$/;"	m
fromString	scala/io/Source.scala	/^  def fromString(s: String): Source = fromIterable(s)$/;"	m
fromString	scala/xml/TextBuffer.scala	/^  def fromString(str: String): TextBuffer = new TextBuffer() append str$/;"	m
fromString	scala/xml/XML.scala	/^  def fromString(string: String)        = fromReader(new StringReader(string))$/;"	m
fromStrings	scala/collection/immutable/PagedSeq.scala	/^  def fromStrings(source: Iterable[String]): PagedSeq[Char] = $/;"	m
fromStrings	scala/collection/immutable/PagedSeq.scala	/^  def fromStrings(source: Iterator[String]): PagedSeq[Char] = {$/;"	m
fromSysId	scala/xml/XML.scala	/^  def fromSysId(sysID: String)          = new InputSource(sysID)$/;"	m
fromTraversables	scala/collection/parallel/mutable/ParArray.scala	/^  def fromTraversables[T](xss: GenTraversableOnce[T]*) = {$/;"	m
fromTrie	scala/collection/parallel/immutable/ParHashMap.scala	/^  def fromTrie[K, V](t: HashMap[K, V]) = new ParHashMap(t)$/;"	m
fromTrie	scala/collection/parallel/immutable/ParHashSet.scala	/^  def fromTrie[T](t: HashSet[T]) = new ParHashSet(t)$/;"	m
fromURI	scala/io/Source.scala	/^  def fromURI(uri: URI)(implicit codec: Codec): BufferedSource =$/;"	m
fromURL	scala/io/Source.scala	/^  def fromURL(s: String)(implicit codec: Codec): BufferedSource =$/;"	m
fromURL	scala/io/Source.scala	/^  def fromURL(s: String, enc: String): BufferedSource =$/;"	m
fromURL	scala/io/Source.scala	/^  def fromURL(url: URL)(implicit codec: Codec): BufferedSource =$/;"	m
fromURL	scala/io/Source.scala	/^  def fromURL(url: URL, enc: String): BufferedSource =$/;"	m
fromUTF8	scala/io/Codec.scala	/^  def fromUTF8(bytes: Array[Byte]): Array[Char] = {$/;"	m
fromUndefinedAttribute	scala/xml/dtd/ValidationException.scala	/^  def fromUndefinedAttribute(key: String) = $/;"	m
fromUndefinedElement	scala/xml/dtd/ValidationException.scala	/^  def fromUndefinedElement(label: String) = $/;"	m
fromValues	scala/collection/Iterator.scala	/^  def fromValues[a](xs: a*) = xs.iterator$/;"	m
front	scala/collection/immutable/Queue.scala	/^  def front: A = head$/;"	m
front	scala/collection/mutable/Queue.scala	/^  def front: A = head$/;"	m
front	scala/reflect/generic/Flags.scala	/^    val front = rawFlags map (_.toLong)$/;"	l
fronttaken	scala/collection/parallel/immutable/ParRange.scala	/^        val fronttaken = rleft.take(sz)$/;"	l
fst	scala/io/BytePickle.scala	/^    def fst(p: (a,b)): a = p._1$/;"	m
fst	scala/io/BytePickle.scala	/^    def fst(p: (a,b,c)): a = p._1$/;"	m
fstidx	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val fstidx = idx$/;"	l
fstit	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val fstit = newIterator(fstidx, fstuntil, fsttotal)$/;"	l
fsttotal	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val fsttotal = calcNumElems(idx, divpt, itertable.length, sizeMapBucketSize)$/;"	l
fstuntil	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val fstuntil = divpt$/;"	l
ft	scala/actors/Future.scala	/^      val ft = this !! Eval$/;"	l
ftch	scala/actors/ActorCanReply.scala	/^      val ftch = new Channel[A](Actor.self(scheduler))$/;"	l
ftch	scala/actors/Channel.scala	/^      val ftch = new Channel[A](Actor.self(receiver.scheduler))$/;"	l
ftch	scala/actors/ReactorCanReply.scala	/^    val ftch = new ReactChannel[A](myself)$/;"	l
ftfuture	scala/collection/parallel/ParIterableLike.scala	/^      val ftfuture = execute(ft)$/;"	l
ftotal	scala/collection/parallel/mutable/ParHashTable.scala	/^        val ftotal = totalsize - stotal$/;"	l
fullName	scala/reflect/generic/Symbols.scala	/^    final def fullName(separator: Char): String = stripLocalSuffix {$/;"	m
fullName	scala/reflect/generic/Symbols.scala	/^    final def fullName: String = fullName('.')$/;"	m
fullyLock	scala/actors/threadpool/LinkedBlockingQueue.java	/^    void fullyLock() {$/;"	m	class:LinkedBlockingQueue
fullyUnlock	scala/actors/threadpool/LinkedBlockingQueue.java	/^    void fullyUnlock() {$/;"	m	class:LinkedBlockingQueue
fun	scala/actors/ActorCanReply.scala	/^    val fun = (res: SyncVar[A]) => {$/;"	l
fun	scala/actors/Channel.scala	/^    val fun = (res: SyncVar[A]) => {$/;"	l
fun	scala/actors/Future.scala	/^    val fun = (res: SyncVar[Unit]) => {$/;"	l
fun	scala/actors/ReactorTask.scala	/^                                               var fun: () => Any,$/;"	l
fun	scala/reflect/generic/Trees.scala	/^    val fun: Tree$/;"	l
fun	scala/reflect/generic/UnPickler.scala	/^          val fun = readTreeRef()$/;"	l
fun	scala/util/control/Exception.scala	/^    def fun(f: Throwable => T) = catching(exceptions: _*) withApply f    $/;"	m
fun1	scala/util/continuations/ControlContext.scala	/^      val fun1 = (ret1: A => B, thr1: Exception => B) => {$/;"	l
fun1	scala/util/continuations/ControlContext.scala	/^      val fun1 = (ret1: A1 => B1, thr1: Exception => B1) => {$/;"	l
functionAsTask	scala/concurrent/JavaConversions.scala	/^      implicit def functionAsTask[T](fun: () => T): Task[T] = new Runnable {$/;"	m
functionAsTask	scala/concurrent/TaskRunner.scala	/^  implicit def functionAsTask[S](fun: () => S): Task[S]$/;"	m
functionAsTask	scala/concurrent/ThreadPoolRunner.scala	/^  implicit def functionAsTask[S](fun: () => S): Task[S] =$/;"	m
functionAsTask	scala/concurrent/ThreadRunner.scala	/^  implicit def functionAsTask[S](fun: () => S): Task[S] = fun$/;"	m
funtil	scala/collection/parallel/mutable/ParHashTable.scala	/^        val funtil = idx + divsz$/;"	l
future	scala/actors/Future.scala	/^  def future[T](body: => T): Future[T] = {$/;"	m
future	scala/concurrent/ops.scala	/^  def future[A](p: => A)(implicit runner: FutureTaskRunner = defaultRunner): () => A = {$/;"	m
futureAsFunction	scala/concurrent/FutureTaskRunner.scala	/^  implicit def futureAsFunction[S](x: Future[S]): () => S$/;"	m
futureAsFunction	scala/concurrent/ThreadPoolRunner.scala	/^  implicit def futureAsFunction[S](x: Future[S]): () => S =$/;"	m
futureAsFunction	scala/concurrent/ThreadRunner.scala	/^  implicit def futureAsFunction[S](x: Future[S]): () => S = x$/;"	m
fv	scala/runtime/ScalaRunTime.scala	/^    val fv = dv.toFloat$/;"	l
gap	scala/collection/Iterator.scala	/^    val gap = new scala.collection.mutable.Queue[A]$/;"	l
gcd	scala/actors/threadpool/helpers/Utils.java	/^    private static long gcd(long a, long b) {$/;"	m	class:Utils	file:
gcd	scala/math/BigInt.scala	/^  def gcd (that: BigInt): BigInt = new BigInt(this.bigInteger.gcd(that.bigInteger))$/;"	m
generatePort	scala/actors/remote/TcpService.scala	/^  def generatePort: Int = {$/;"	m
generic	scala/collection/generic/Addable.scala	/^package generic$/;"	p
generic	scala/collection/generic/BitOperations.scala	/^package generic$/;"	p
generic	scala/collection/generic/BitSetFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/CanBuildFrom.scala	/^package generic$/;"	p
generic	scala/collection/generic/CanCombineFrom.scala	/^package generic$/;"	p
generic	scala/collection/generic/ClassManifestTraversableFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenMapFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenSeqFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenSetFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenTraversableFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenericClassManifestCompanion.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenericClassManifestTraversableTemplate.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenericCompanion.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenericOrderedCompanion.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenericOrderedTraversableTemplate.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenericSeqCompanion.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenericSetTemplate.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenericTraversableTemplate.scala	/^package generic$/;"	p
generic	scala/collection/generic/Growable.scala	/^package generic $/;"	p
generic	scala/collection/generic/HasNewBuilder.scala	/^package generic$/;"	p
generic	scala/collection/generic/ImmutableMapFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/ImmutableSetFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/ImmutableSortedMapFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/ImmutableSortedSetFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/MapFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/MutableMapFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/MutableSetFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/OrderedTraversableFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/SeqFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/SetFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/Shrinkable.scala	/^package generic$/;"	p
generic	scala/collection/generic/SliceInterval.scala	/^package generic$/;"	p
generic	scala/collection/generic/Sorted.scala	/^package generic$/;"	p
generic	scala/collection/generic/SortedMapFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/SortedSetFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/Subtractable.scala	/^package generic$/;"	p
generic	scala/collection/generic/TraversableFactory.scala	/^package generic$/;"	p
generic	scala/reflect/generic/AnnotationInfos.scala	/^package generic$/;"	p
generic	scala/reflect/generic/Constants.scala	/^package generic$/;"	p
generic	scala/reflect/generic/Flags.scala	/^package generic$/;"	p
generic	scala/reflect/generic/HasFlags.scala	/^package generic$/;"	p
generic	scala/reflect/generic/Names.scala	/^package generic$/;"	p
generic	scala/reflect/generic/PickleBuffer.scala	/^package generic$/;"	p
generic	scala/reflect/generic/PickleFormat.scala	/^package generic$/;"	p
generic	scala/reflect/generic/Scopes.scala	/^package generic$/;"	p
generic	scala/reflect/generic/StandardDefinitions.scala	/^package generic$/;"	p
generic	scala/reflect/generic/StdNames.scala	/^package generic$/;"	p
generic	scala/reflect/generic/Symbols.scala	/^package generic$/;"	p
generic	scala/reflect/generic/Trees.scala	/^package generic$/;"	p
generic	scala/reflect/generic/Types.scala	/^package generic$/;"	p
generic	scala/reflect/generic/UnPickler.scala	/^package generic$/;"	p
generic	scala/reflect/generic/Universe.scala	/^package generic$/;"	p
genericArrayOps	scala/Predef.scala	/^  implicit def genericArrayOps[T](xs: Array[T]): ArrayOps[T] = xs match {$/;"	m
genericBuilder	scala/collection/generic/GenericTraversableTemplate.scala	/^  def genericBuilder[B]: Builder[B, CC[B]] = companion.newBuilder[B]$/;"	m
genericClassManifestBuilder	scala/collection/generic/GenericClassManifestTraversableTemplate.scala	/^  def genericClassManifestBuilder[B](implicit man: ClassManifest[B]): Builder[B, CC[B]] = classManifestCompanion.newBuilder[B]$/;"	m
genericCombiner	scala/collection/generic/GenericParTemplate.scala	/^  def genericCombiner[B]: Combiner[B, CC[B]] = {$/;"	m
genericMapCombiner	scala/collection/generic/GenericParTemplate.scala	/^  def genericMapCombiner[P, Q]: Combiner[(P, Q), CC[P, Q]] = {$/;"	m
genericOrderedBuilder	scala/collection/generic/GenericOrderedTraversableTemplate.scala	/^  def genericOrderedBuilder[B](implicit ord: Ordering[B]): Builder[B, CC[B]] = orderedCompanion.newBuilder[B]$/;"	m
genericWrapArray	scala/LowPriorityImplicits.scala	/^  implicit def genericWrapArray[T](xs: Array[T]): WrappedArray[T] =$/;"	m
get	scala/Either.scala	/^    def get = e match {$/;"	m
get	scala/Option.scala	/^  def get = throw new NoSuchElementException("None.get")$/;"	m
get	scala/Option.scala	/^  def get = x$/;"	m
get	scala/Option.scala	/^  def get: A$/;"	m
get	scala/actors/MessageQueue.scala	/^  def get(n: Int)(p: Msg => Boolean): Option[Msg] = {$/;"	m
get	scala/actors/threadpool/AtomicInteger.java	/^    public final int get() {$/;"	m	class:AtomicInteger
get	scala/actors/threadpool/Future.java	/^    Object get() throws InterruptedException, ExecutionException;$/;"	m	interface:Future
get	scala/actors/threadpool/Future.java	/^    Object get(long timeout, TimeUnit unit)$/;"	m	interface:Future
get	scala/actors/threadpool/FutureTask.java	/^    public synchronized Object get()$/;"	m	class:FutureTask
get	scala/actors/threadpool/FutureTask.java	/^    public synchronized Object get(long timeout, TimeUnit unit)$/;"	m	class:FutureTask
get	scala/collection/GenMapLike.scala	/^  def get(key: A): Option[B]$/;"	m
get	scala/collection/JavaConversions.scala	/^    def get(i : Int) = underlying(i)$/;"	m
get	scala/collection/JavaConversions.scala	/^    def get(k : A) = {$/;"	m
get	scala/collection/JavaConversions.scala	/^    def get(k : String) = {$/;"	m
get	scala/collection/JavaConversions.scala	/^    def get(key: AnyRef) = try {$/;"	m
get	scala/collection/Map.scala	/^    def get(key: A)                 = underlying.get(key) \/\/ removed in 2.9: orElse Some(default(key))$/;"	m
get	scala/collection/MapLike.scala	/^    def get(key: A) = if (!p(key)) None else self.get(key)$/;"	m
get	scala/collection/MapLike.scala	/^    def get(key: A) = self.get(key).map(f)$/;"	m
get	scala/collection/MapLike.scala	/^  def get(key: A): Option[B]$/;"	m
get	scala/collection/immutable/HashMap.scala	/^  def get(key: A): Option[B] =$/;"	m
get	scala/collection/immutable/IntMap.scala	/^  final def get(key : Int) : Option[T] = this match {$/;"	m
get	scala/collection/immutable/ListMap.scala	/^  def get(key: A): Option[B] = None$/;"	m
get	scala/collection/immutable/LongMap.scala	/^  final def get(key : Long) : Option[T] = this match {$/;"	m
get	scala/collection/immutable/Map.scala	/^    def get(key: A): Option[B] = $/;"	m
get	scala/collection/immutable/Map.scala	/^    def get(key: A): Option[B] = None$/;"	m
get	scala/collection/immutable/Map.scala	/^    def get(key: Any): Option[Nothing] = None$/;"	m
get	scala/collection/immutable/MapLike.scala	/^    def get(key: A) = if (!p(key)) None else self.get(key)$/;"	m
get	scala/collection/immutable/MapLike.scala	/^    def get(key: A) = self.get(key).map(f)$/;"	m
get	scala/collection/interfaces/MapMethods.scala	/^  def get(key: A): Option[B]$/;"	m
get	scala/collection/mutable/DefaultMapModel.scala	/^  def get(key: A): Option[B] = {$/;"	m
get	scala/collection/mutable/HashMap.scala	/^  def get(key: A): Option[B] = {$/;"	m
get	scala/collection/mutable/ImmutableMapAdaptor.scala	/^  def get(key: A): Option[B] = imap.get(key)$/;"	m
get	scala/collection/mutable/LinkedHashMap.scala	/^  def get(key: A): Option[B] = {$/;"	m
get	scala/collection/mutable/LinkedListLike.scala	/^  def get(n: Int): Option[A] = {$/;"	m
get	scala/collection/mutable/ListMap.scala	/^  def get(key: A): Option[B] = elems find (_._1 == key) map (_._2)$/;"	m
get	scala/collection/mutable/Map.scala	/^    def get(key: A) = self.get(key)$/;"	m
get	scala/collection/mutable/MutableList.scala	/^  def get(n: Int): Option[A] = first0.get(n)$/;"	m
get	scala/collection/mutable/OpenHashMap.scala	/^  def get(key : Key) : Option[Value] = {$/;"	m
get	scala/collection/parallel/immutable/ParHashMap.scala	/^  def get(k: K) = trie.get(k)$/;"	m
get	scala/collection/parallel/mutable/ParHashMap.scala	/^  def get(key: K): Option[V] = {$/;"	m
get	scala/concurrent/SyncVar.scala	/^  def get = synchronized {$/;"	m
get	scala/concurrent/SyncVar.scala	/^  def get(timeout: Long): Option[A] = synchronized {$/;"	m
get	scala/ref/Reference.scala	/^  def get: Option[T]$/;"	m
get	scala/sys/BooleanProp.scala	/^    def get: String = "" + value$/;"	m
get	scala/sys/Prop.scala	/^  def get: String$/;"	m
get	scala/sys/PropImpl.scala	/^  def get: String =$/;"	m
get	scala/sys/SystemProperties.scala	/^  def get(key: String) =$/;"	m
get	scala/util/parsing/combinator/Parsers.scala	/^    def get: Nothing = sys.error("No result when parsing failed")$/;"	m
get	scala/util/parsing/combinator/Parsers.scala	/^    def get: T = result$/;"	m
get	scala/util/parsing/combinator/Parsers.scala	/^    def get: T$/;"	m
get	scala/xml/MetaData.scala	/^  final def get(key: String): Option[Seq[Node]] = Option(apply(key))$/;"	m
get	scala/xml/MetaData.scala	/^  final def get(uri: String, owner: Node, key: String): Option[Seq[Node]] =$/;"	m
get	scala/xml/MetaData.scala	/^  final def get(uri: String, scope: NamespaceBinding, key: String): Option[Seq[Node]] =$/;"	m
getActiveCount	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public int getActiveCount() {$/;"	m	class:ThreadPoolExecutor
getAndAdd	scala/actors/threadpool/AtomicInteger.java	/^    public final synchronized int getAndAdd(int delta) {$/;"	m	class:AtomicInteger
getAndDecrement	scala/actors/threadpool/AtomicInteger.java	/^    public final synchronized int getAndDecrement() {$/;"	m	class:AtomicInteger
getAndIncrement	scala/actors/threadpool/AtomicInteger.java	/^    public final synchronized int getAndIncrement() {$/;"	m	class:AtomicInteger
getAndSet	scala/actors/threadpool/AtomicInteger.java	/^    public final synchronized int getAndSet(int newValue) {$/;"	m	class:AtomicInteger
getClass	scala/Boolean.scala	/^  def getClass(): Class[Boolean] = sys.error("stub")$/;"	m
getClass	scala/Byte.scala	/^  def getClass(): Class[Byte] = sys.error("stub")$/;"	m
getClass	scala/Char.scala	/^  def getClass(): Class[Char] = sys.error("stub")$/;"	m
getClass	scala/Double.scala	/^  def getClass(): Class[Double] = sys.error("stub")$/;"	m
getClass	scala/Float.scala	/^  def getClass(): Class[Float] = sys.error("stub")$/;"	m
getClass	scala/Int.scala	/^  def getClass(): Class[Int] = sys.error("stub")$/;"	m
getClass	scala/Long.scala	/^  def getClass(): Class[Long] = sys.error("stub")$/;"	m
getClass	scala/Short.scala	/^  def getClass(): Class[Short] = sys.error("stub")$/;"	m
getClass	scala/Unit.scala	/^  def getClass(): Class[Unit] = sys.error("stub")$/;"	m
getClassForName	scala/compat/Platform.scala	/^  def getClassForName(name: String): Class[_] = java.lang.Class.forName(name)$/;"	m
getCompletedTaskCount	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public long getCompletedTaskCount() {$/;"	m	class:ThreadPoolExecutor
getConnection	scala/actors/remote/TcpService.scala	/^  def getConnection(n: Node) = synchronized {$/;"	m
getContentModel	scala/xml/dtd/ElementValidator.scala	/^  def getContentModel = contentModel$/;"	m
getCorePoolSize	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public int getCorePoolSize() {$/;"	m	class:ThreadPoolExecutor
getDirectionality	scala/runtime/RichChar.scala	/^  def getDirectionality: Byte           = Character.getDirectionality(self)$/;"	m
getElementFor	scala/util/parsing/ast/Binders.scala	/^    def getElementFor(b: binderType): Element = substitution(b)    $/;"	m
getErr	scala/sys/process/BasicIO.scala	/^  def getErr(log: Option[ProcessLogger]) = log match {$/;"	m
getHead	scala/util/parsing/combinator/PackratParsers.scala	/^    def getHead = headParser$/;"	m
getHoldCount	scala/actors/threadpool/locks/CondVar.java	/^        int getHoldCount();$/;"	m	interface:CondVar.ExclusiveLock
getHoldCount	scala/actors/threadpool/locks/ReentrantLock.java	/^        public synchronized int getHoldCount() {$/;"	m	class:ReentrantLock.Sync
getHoldCount	scala/actors/threadpool/locks/ReentrantLock.java	/^    public int getHoldCount() {$/;"	m	class:ReentrantLock
getHoldCount	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        public int getHoldCount() {$/;"	m	class:ReentrantReadWriteLock.WriteLock
getItem	scala/actors/threadpool/SynchronousQueue.java	/^        synchronized Object getItem() {$/;"	m	class:SynchronousQueue.Node
getIterable	scala/xml/dtd/ElementValidator.scala	/^  def getIterable(nodes: Seq[Node], skipPCDATA: Boolean): Iterable[ElemName] = {$/;"	m
getKeepAliveTime	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public long getKeepAliveTime(TimeUnit unit) {$/;"	m	class:ThreadPoolExecutor
getKey	scala/collection/JavaConversions.scala	/^            def getKey = k$/;"	m
getLabels	scala/xml/dtd/ContentModel.scala	/^  def getLabels(r: RegExp): Set[String] = {    $/;"	m
getLargestPoolSize	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public int getLargestPoolSize() {$/;"	m	class:ThreadPoolExecutor
getLength	scala/actors/threadpool/helpers/FIFOWaitQueue.java	/^    public int getLength() {$/;"	m	class:FIFOWaitQueue
getLength	scala/actors/threadpool/helpers/WaitQueue.java	/^    public abstract int getLength();$/;"	m	class:WaitQueue
getLine	scala/io/Source.scala	/^  def getLine(line: Int): String = lineNum(line)$/;"	m
getLines	scala/io/Source.scala	/^  def getLines(): Iterator[String] = new LineIterator()$/;"	m
getLock	scala/actors/threadpool/locks/CondVar.java	/^    protected ExclusiveLock getLock() { return lock; }$/;"	m	class:CondVar
getMaximumPoolSize	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public int getMaximumPoolSize() {$/;"	m	class:ThreadPoolExecutor
getName	scala/xml/Utility.scala	/^  def getName(s: String, index: Int): String = {$/;"	m
getNamespace	scala/xml/Attribute.scala	/^  def getNamespace(owner: Node): String$/;"	m
getNamespace	scala/xml/MetaData.scala	/^  def getNamespace(owner: Node): String $/;"	m
getNamespace	scala/xml/Node.scala	/^  def getNamespace(pre: String): String = if (scope eq null) null else scope.getURI(pre)$/;"	m
getNamespace	scala/xml/Null.scala	/^  def getNamespace(owner: Node) = null$/;"	m
getNamespace	scala/xml/PrefixedAttribute.scala	/^  def getNamespace(owner: Node) = $/;"	m
getNamespace	scala/xml/UnprefixedAttribute.scala	/^  final def getNamespace(owner: Node): String = null$/;"	m
getNumericValue	scala/runtime/RichChar.scala	/^  def getNumericValue: Int              = Character.getNumericValue(self)$/;"	m
getOrCreateName	scala/actors/remote/NetKernel.scala	/^  def getOrCreateName(from: OutputChannel[Any]) = names.get(from) match {$/;"	m
getOrCreateProxy	scala/actors/remote/NetKernel.scala	/^  def getOrCreateProxy(senderNode: Node, senderName: Symbol): Proxy =$/;"	m
getOrElse	scala/Either.scala	/^    def getOrElse[AA >: A](or: => AA) = e match {$/;"	m
getOrElse	scala/Either.scala	/^    def getOrElse[BB >: B](or: => BB) = e match {$/;"	m
getOrElse	scala/collection/MapLike.scala	/^  def getOrElse[B1 >: B](key: A, default: => B1): B1 = get(key) match {$/;"	m
getOrElse	scala/collection/interfaces/MapMethods.scala	/^  def getOrElse[B1 >: B](key: A, default: => B1): B1$/;"	m
getOrElse	scala/util/parsing/combinator/Parsers.scala	/^    def getOrElse[B >: T](default: => B): B = $/;"	m
getOrElseUpdate	scala/collection/mutable/MapLike.scala	/^  def getOrElseUpdate(key: A, op: => B): B =$/;"	m
getOwner	scala/actors/threadpool/helpers/WaitQueue.java	/^        public Thread getOwner() {$/;"	m	class:WaitQueue.WaitNode
getOwner	scala/actors/threadpool/locks/ReentrantLock.java	/^        protected synchronized Thread getOwner() {$/;"	m	class:ReentrantLock.Sync
getOwner	scala/actors/threadpool/locks/ReentrantLock.java	/^    protected Thread getOwner() {$/;"	m	class:ReentrantLock
getOwner	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized Thread getOwner() {$/;"	m	class:ReentrantReadWriteLock.Sync
getOwner	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    protected Thread getOwner() {$/;"	m	class:ReentrantReadWriteLock
getPerf	scala/actors/threadpool/Perf.java	/^    public static Perf getPerf() { return perf; }$/;"	m	class:Perf
getPoolSize	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public int getPoolSize() {$/;"	m	class:ThreadPoolExecutor
getPos	scala/util/parsing/combinator/PackratParsers.scala	/^    def getPos: Position = getPosFromResult(seed)$/;"	m
getPrefix	scala/xml/NamespaceBinding.scala	/^  def getPrefix(_uri: String): String =$/;"	m
getProperty	scala/collection/JavaConversions.scala	/^    def getProperty(key: String) = underlying.getProperty(key)$/;"	m
getProperty	scala/collection/JavaConversions.scala	/^    def getProperty(key: String, defaultValue: String) = underlying.getProperty(key, defaultValue)$/;"	m
getQueue	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public BlockingQueue getQueue() {$/;"	m	class:ThreadPoolExecutor
getQueueLength	scala/actors/threadpool/locks/ReentrantLock.java	/^        public int getQueueLength() {$/;"	m	class:ReentrantLock.Sync
getQueueLength	scala/actors/threadpool/locks/ReentrantLock.java	/^        public synchronized int getQueueLength() {$/;"	m	class:ReentrantLock.FairSync
getQueueLength	scala/actors/threadpool/locks/ReentrantLock.java	/^    public final int getQueueLength() {$/;"	m	class:ReentrantLock
getQueueLength	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        final synchronized int getQueueLength() {$/;"	m	class:ReentrantReadWriteLock.Sync
getQueueLength	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    public final int getQueueLength() {$/;"	m	class:ReentrantReadWriteLock
getQueuedThreads	scala/actors/threadpool/locks/ReentrantLock.java	/^        public Collection getQueuedThreads() {$/;"	m	class:ReentrantLock.Sync
getQueuedThreads	scala/actors/threadpool/locks/ReentrantLock.java	/^        public synchronized Collection getQueuedThreads() {$/;"	m	class:ReentrantLock.FairSync
getQueuedThreads	scala/actors/threadpool/locks/ReentrantLock.java	/^    protected Collection getQueuedThreads() {$/;"	m	class:ReentrantLock
getReadHoldCount	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized int getReadHoldCount() {$/;"	m	class:ReentrantReadWriteLock.Sync
getReadHoldCount	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    public int getReadHoldCount() {$/;"	m	class:ReentrantReadWriteLock
getReadLockCount	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized int getReadLockCount() {$/;"	m	class:ReentrantReadWriteLock.Sync
getReadLockCount	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    public int getReadLockCount() {$/;"	m	class:ReentrantReadWriteLock
getRejectedExecutionHandler	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public RejectedExecutionHandler getRejectedExecutionHandler() {$/;"	m	class:ThreadPoolExecutor
getResult	scala/actors/threadpool/FutureTask.java	/^    private Object getResult() throws ExecutionException {$/;"	m	class:FutureTask	file:
getResult	scala/util/parsing/combinator/PackratParsers.scala	/^    def getResult: ParseResult[T] = r match {$/;"	m
getRootCause	scala/xml/include/XIncludeException.scala	/^  def getRootCause(): Throwable = this.rootCause$/;"	m
getSignallee	scala/actors/threadpool/locks/ReentrantLock.java	/^        protected synchronized WaitQueue.WaitNode getSignallee(Thread caller) {$/;"	m	class:ReentrantLock.FairSync
getStackTraceString	scala/runtime/RichException.scala	/^  def getStackTraceString = exc.getStackTrace().mkString("", EOL, EOL)$/;"	m
getState	scala/actors/Reactor.scala	/^  def getState: Actor.State.Value = synchronized {$/;"	m
getTask	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private Runnable getTask() {$/;"	m	class:ThreadPoolExecutor	file:
getTaskCount	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public long getTaskCount() {$/;"	m	class:ThreadPoolExecutor
getThreadFactory	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public ThreadFactory getThreadFactory() {$/;"	m	class:ThreadPoolExecutor
getTrivialValue	scala/util/continuations/ControlContext.scala	/^  final def getTrivialValue = x.asInstanceOf[A]$/;"	m
getType	scala/runtime/RichChar.scala	/^  def getType: Int                      = Character.getType(self)$/;"	m
getURI	scala/xml/NamespaceBinding.scala	/^  def getURI(_prefix: String): String =$/;"	m
getUniversalKey	scala/xml/MetaData.scala	/^  def getUniversalKey(attrib: MetaData, scope: NamespaceBinding) = attrib match {$/;"	m
getValue	scala/collection/JavaConversions.scala	/^            def getValue = v$/;"	m
getWaitQueueLength	scala/actors/threadpool/locks/CondVar.java	/^    protected int getWaitQueueLength() {$/;"	m	class:CondVar
getWaitQueueLength	scala/actors/threadpool/locks/FIFOCondVar.java	/^    protected int getWaitQueueLength() {$/;"	m	class:FIFOCondVar
getWaitQueueLength	scala/actors/threadpool/locks/ReentrantLock.java	/^    public int getWaitQueueLength(Condition condition) {$/;"	m	class:ReentrantLock
getWaitingThreads	scala/actors/threadpool/helpers/FIFOWaitQueue.java	/^    public Collection getWaitingThreads() {$/;"	m	class:FIFOWaitQueue
getWaitingThreads	scala/actors/threadpool/helpers/WaitQueue.java	/^    public abstract Collection getWaitingThreads();$/;"	m	class:WaitQueue
getWaitingThreads	scala/actors/threadpool/locks/CondVar.java	/^    protected Collection getWaitingThreads() {$/;"	m	class:CondVar
getWaitingThreads	scala/actors/threadpool/locks/FIFOCondVar.java	/^    protected Collection getWaitingThreads() {$/;"	m	class:FIFOCondVar
getWaitingThreads	scala/actors/threadpool/locks/ReentrantLock.java	/^    protected Collection getWaitingThreads(Condition condition) {$/;"	m	class:ReentrantLock
getWriteHoldCount	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized int getWriteHoldCount() {$/;"	m	class:ReentrantReadWriteLock.Sync
getWriteHoldCount	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    public int getWriteHoldCount() {$/;"	m	class:ReentrantReadWriteLock
getc	scala/io/Source.scala	/^    def getc() = iter.hasNext && {$/;"	m
getter	scala/annotation/target/getter.scala	/^final class getter extends annotation.StaticAnnotation$/;"	c
global	scala/reflect/generic/UnPickler.scala	/^  val global: Universe$/;"	l
globalNumberParser	scala/util/parsing/json/JSON.scala	/^  def globalNumberParser : NumericParser = defaultNumberParser$/;"	m
globalNumberParser_	scala/util/parsing/json/JSON.scala	/^  def globalNumberParser_=(f: NumericParser) { defaultNumberParser = f }$/;"	m
gmap	scala/util/parsing/ast/Binders.scala	/^      def gmap(f: Mapper): List[t] = (for (x <- xs) yield f(x)).toList$/;"	m
gmap	scala/util/parsing/ast/Binders.scala	/^      def gmap(f: Mapper): Option[t] = (for (x <- xs) yield f(x))$/;"	m
gmap	scala/util/parsing/ast/Binders.scala	/^      def gmap(f: Mapper): Scope[bt] = { val newScope = new Scope[bt]()$/;"	m
gmap	scala/util/parsing/ast/Binders.scala	/^      def gmap(f: Mapper): String = f(s) $/;"	m
gmap	scala/util/parsing/ast/Binders.scala	/^      def gmap(f: Mapper): UnderBinder[bt, st] = UnderBinder(f(ub.scope), f(ub.element))$/;"	m
gmap	scala/util/parsing/ast/Binders.scala	/^    def gmap(f: Mapper): NameElement = self match {$/;"	m
gmap	scala/util/parsing/ast/Binders.scala	/^    def gmap(f: Mapper): T$/;"	m
go	scala/collection/GenTraversableViewLike.scala	/^      var go = false$/;"	l
go	scala/collection/IterableLike.scala	/^    var go = false$/;"	l
go	scala/collection/TraversableLike.scala	/^    var go = false$/;"	l
got	scala/sys/package.scala	/^    val got    = Thread.enumerate(tarray)$/;"	l
greater	scala/xml/Utility.scala	/^    val greater = sort(md.filter { m => m.key > key })$/;"	l
group	scala/actors/threadpool/Executors.java	/^        final ThreadGroup group;$/;"	f	class:Executors.DefaultThreadFactory
group	scala/text/Document.scala	/^  def group(d: Document): Document = DocGroup(d)$/;"	m
group	scala/util/matching/Regex.scala	/^    def group(i: Int): String =$/;"	m
group	scala/util/matching/Regex.scala	/^    def group(id: String): String = nameToIndex.get(id) match {$/;"	m
groupBy	scala/collection/GenTraversableLike.scala	/^  def groupBy[K](f: A => K): GenMap[K, Repr]$/;"	m
groupBy	scala/collection/TraversableLike.scala	/^  def groupBy[K](f: A => K): immutable.Map[K, Repr] = {$/;"	m
groupBy	scala/collection/interfaces/TraversableMethods.scala	/^  def groupBy[K](f: A => K): Map[K, Traversable[A]]$/;"	m
groupBy	scala/collection/parallel/ParIterableLike.scala	/^  def groupBy[K](f: T => K): immutable.ParMap[K, Repr] = {$/;"	m
groupByKey	scala/collection/parallel/immutable/ParHashMap.scala	/^  def groupByKey[Repr](cbf: () => Combiner[V, Repr]): ParHashMap[K, Repr] = {$/;"	m
groupCount	scala/util/matching/Regex.scala	/^    def groupCount = matcher.groupCount     $/;"	m
groupCount	scala/util/matching/Regex.scala	/^    def groupCount: Int     $/;"	m
groupNames	scala/util/matching/Regex.scala	/^              val groupNames: Seq[String]) extends MatchData {$/;"	l
groupNames	scala/util/matching/Regex.scala	/^    val groupNames: Seq[String]$/;"	l
grouped	scala/collection/IterableLike.scala	/^  def grouped(size: Int): Iterator[Repr] =$/;"	m
grouped	scala/collection/Iterator.scala	/^  def grouped[B >: A](size: Int): GroupedIterator[B] =$/;"	m
grouped	scala/collection/interfaces/IterableMethods.scala	/^  def grouped(size: Int): Iterator[Iterable[A]]$/;"	m
gt	scala/math/PartialOrdering.scala	/^  def gt(x: T, y: T): Boolean = gteq(x, y) && !equiv(x, y)$/;"	m
gteq	scala/math/PartialOrdering.scala	/^  def gteq(x: T, y: T): Boolean = lteq(y, x)$/;"	m
guard	scala/reflect/generic/UnPickler.scala	/^          val guard = readTreeRef()$/;"	l
guard	scala/util/parsing/combinator/Parsers.scala	/^  def guard[T](p: => Parser[T]): Parser[T] = Parser { in =>$/;"	m
h	scala/collection/GenSeqLike.scala	/^    val h = new util.MurmurHash[A](Seq.hashSeed)$/;"	l
h	scala/collection/immutable/HashMap.scala	/^    var h: Int = hcode + ~(hcode << 9)$/;"	l
h	scala/collection/immutable/HashSet.scala	/^    var h: Int = hcode + ~(hcode << 9)$/;"	l
h	scala/collection/mutable/FlatHashTable.scala	/^    var h = index(elemHashCode(elem))$/;"	l
h	scala/collection/mutable/HashTable.scala	/^        val h = index(elemHashCode(e.key))$/;"	l
h	scala/collection/mutable/HashTable.scala	/^    val h = index(elemHashCode(e.key))$/;"	l
h	scala/collection/mutable/HashTable.scala	/^    val h = index(elemHashCode(key))$/;"	l
h	scala/collection/mutable/OpenHashMap.scala	/^    var h = key.##$/;"	l
h	scala/collection/mutable/PriorityQueue.scala	/^        val h = as(k)$/;"	l
h	scala/collection/mutable/ResizableArray.scala	/^    val h = array(a)$/;"	l
h	scala/collection/parallel/mutable/ParHashMap.scala	/^      var h = index(elemHashCode(e.key))$/;"	l
h	scala/collection/parallel/mutable/ParHashSet.scala	/^      var h = insertAt$/;"	l
h	scala/runtime/ScalaRunTime.scala	/^      var h = startHash(arr)$/;"	l
h	scala/util/MurmurHash.scala	/^      val h = i.##$/;"	l
h	scala/util/MurmurHash.scala	/^    var h = startHash(a.length * seedArray)$/;"	l
h	scala/util/MurmurHash.scala	/^    var h = startHash(s.length * seedString)$/;"	l
h	scala/util/MurmurHash.scala	/^    var h = startHash(seed * n)$/;"	l
h	scala/xml/Utility.scala	/^    val h = new util.MurmurHash[Node](pre.##)$/;"	l
h0	scala/collection/mutable/FlatHashTable.scala	/^        var h0 = h$/;"	l
h1	scala/collection/mutable/FlatHashTable.scala	/^        var h1 = (h0 + 1) % table.length$/;"	l
h2	scala/collection/mutable/FlatHashTable.scala	/^          val h2 = index(elemHashCode(table(h1).asInstanceOf[A]))$/;"	l
hStack	scala/xml/parsing/FactoryAdapter.scala	/^  val hStack      = new mutable.Stack[Node]   \/\/ [ element ] contains siblings$/;"	l
half	scala/collection/parallel/ParIterableLike.scala	/^      val half = howmany \/ 2$/;"	l
halt	scala/actors/remote/TcpService.scala	/^  def halt() = synchronized {$/;"	m
handleOutOrError	scala/sys/process/ProcessImpl.scala	/^      def handleOutOrError(fromOutput: InputStream) = currentSource put Some(fromOutput)$/;"	m
handler	scala/actors/ReactorTask.scala	/^                                               var handler: PartialFunction[Msg, Any],$/;"	l
handler	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private volatile RejectedExecutionHandler handler;$/;"	f	class:ThreadPoolExecutor	file:
handling	scala/util/control/Exception.scala	/^  def handling[T](exceptions: Class[_]*) = {$/;"	m
handoff	scala/collection/parallel/mutable/ParArray.scala	/^  def handoff[T](arr: Array[T]): ParArray[T] = wrapOrRebuild(arr, arr.length)$/;"	m
handoff	scala/collection/parallel/mutable/ParArray.scala	/^  def handoff[T](arr: Array[T], sz: Int): ParArray[T] = wrapOrRebuild(arr, sz)$/;"	m
hasAbstractFlag	scala/reflect/generic/HasFlags.scala	/^  def hasAbstractFlag      = hasFlag(ABSTRACT)$/;"	m
hasAccessBoundary	scala/reflect/generic/HasFlags.scala	/^  def hasAccessBoundary: Boolean$/;"	m
hasAccessBoundary	scala/reflect/generic/Symbols.scala	/^    final def hasAccessBoundary = (privateWithin != null) && (privateWithin != NoSymbol)$/;"	m
hasAccessBoundary	scala/reflect/generic/Trees.scala	/^    def hasAccessBoundary = privateWithin != tpnme.EMPTY$/;"	m
hasAccessorFlag	scala/reflect/generic/HasFlags.scala	/^  def hasAccessorFlag      = hasFlag(ACCESSOR)$/;"	m
hasAllFlags	scala/reflect/generic/HasFlags.scala	/^  def hasAllFlags(mask: Long): Boolean$/;"	m
hasAllFlags	scala/reflect/generic/Symbols.scala	/^    final def hasAllFlags(mask: Long): Boolean = (flags & mask) == mask$/;"	m
hasAllFlags	scala/reflect/generic/Trees.scala	/^    def hasAllFlags(mask: Long): Boolean = (flags & mask) == mask$/;"	m
hasContravariantFlag	scala/reflect/generic/HasFlags.scala	/^  def hasContravariantFlag = hasFlag(CONTRAVARIANT)$/;"	m
hasDefault	scala/reflect/generic/HasFlags.scala	/^  def hasDefault     = hasAllFlags(DEFAULTPARAM | PARAM)$/;"	m
hasDefaultFlag	scala/reflect/generic/HasFlags.scala	/^  def hasDefaultFlag = hasFlag(DEFAULTPARAM)$/;"	m
hasDefiniteSize	scala/collection/GenTraversableOnce.scala	/^  def hasDefiniteSize: Boolean$/;"	m
hasDefiniteSize	scala/collection/Iterator.scala	/^  def hasDefiniteSize = isEmpty$/;"	m
hasDefiniteSize	scala/collection/TraversableLike.scala	/^  def hasDefiniteSize = true$/;"	m
hasDefiniteSize	scala/collection/TraversableOnce.scala	/^  def hasDefiniteSize: Boolean$/;"	m
hasDefiniteSize	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def hasDefiniteSize: Boolean$/;"	m
hasDefiniteSize	scala/collection/parallel/ParIterableLike.scala	/^  def hasDefiniteSize = true$/;"	m
hasExitValue	scala/sys/process/ProcessBuilder.scala	/^  def hasExitValue: Boolean$/;"	m
hasExitValue	scala/sys/process/ProcessBuilderImpl.scala	/^    def hasExitValue = true$/;"	m
hasFlag	scala/reflect/generic/HasFlags.scala	/^  def hasFlag(flag: Long): Boolean$/;"	m
hasFlag	scala/reflect/generic/Symbols.scala	/^    final def hasFlag(mask: Long): Boolean = (flags & mask) != 0L$/;"	m
hasFlag	scala/reflect/generic/Trees.scala	/^    def hasFlag(flag: Long) = (flag & flags) != 0L$/;"	m
hasFlagsToString	scala/reflect/generic/HasFlags.scala	/^  def hasFlagsToString(mask: FlagsType): String$/;"	m
hasFlagsToString	scala/reflect/generic/Trees.scala	/^    def hasFlagsToString(mask: Long): String = flagsToString($/;"	m
hasInConstructorFlag	scala/reflect/generic/HasFlags.scala	/^  def hasInConstructorFlag = hasFlag(INCONSTRUCTOR)$/;"	m
hasLocalFlag	scala/reflect/generic/HasFlags.scala	/^  def hasLocalFlag         = hasFlag(LOCAL)$/;"	m
hasMatch	scala/collection/generic/BitOperations.scala	/^    def hasMatch(key: Int, prefix: Int, m: Int) = mask(key, m) == prefix$/;"	m
hasMatch	scala/collection/generic/BitOperations.scala	/^    def hasMatch(key: Long, prefix: Long, m: Long) = mask(key, m) == prefix$/;"	m
hasModuleFlag	scala/reflect/generic/HasFlags.scala	/^  def hasModuleFlag        = hasFlag(MODULE)$/;"	m
hasMoreElements	scala/collection/JavaConversions.scala	/^    def hasMoreElements = underlying.hasNext$/;"	m
hasNext	scala/Product.scala	/^    def hasNext = c < cmax$/;"	m
hasNext	scala/actors/threadpool/LinkedBlockingQueue.java	/^        public boolean hasNext() {$/;"	m	class:LinkedBlockingQueue.Itr
hasNext	scala/actors/threadpool/SynchronousQueue.java	/^        public boolean hasNext() {$/;"	m	class:SynchronousQueue.EmptyIterator
hasNext	scala/collection/BitSetLike.scala	/^    def hasNext: Boolean = {$/;"	m
hasNext	scala/collection/IndexedSeqLike.scala	/^    def hasNext: Boolean = index < end$/;"	m
hasNext	scala/collection/IndexedSeqOptimized.scala	/^    def hasNext: Boolean = 0 < i$/;"	m
hasNext	scala/collection/Iterator.scala	/^      def hasNext = !lookahead.isEmpty || { skip(); self.hasNext }$/;"	m
hasNext	scala/collection/Iterator.scala	/^      def hasNext = it.hasNext$/;"	m
hasNext	scala/collection/Iterator.scala	/^      def hasNext = lookahead.nonEmpty || advance() $/;"	m
hasNext	scala/collection/Iterator.scala	/^      def hasNext = remaining > 0 && self.hasNext$/;"	m
hasNext	scala/collection/Iterator.scala	/^      def hasNext = { skip(); self.hasNext }$/;"	m
hasNext	scala/collection/Iterator.scala	/^      def hasNext: Boolean = self.synchronized {$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = $/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = c < cmax$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = cur.hasNext || ((cur eq self) && {$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = filled || fill()$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = hdDefined || tail.hasNext && {$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = self.hasNext && that.hasNext$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = self.hasNext || count < len $/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = self.hasNext || that.hasNext$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = self.hasNext$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = true$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = $/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = (!up || i < end) && (!down || i > end)$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = (step <= 0 || i < end) && (step >= 0 || i > end)$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = false$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = hasnext$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = hdDefined || {$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = i < end$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = i < len$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = self.hasNext$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = true$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = {$/;"	m
hasNext	scala/collection/Iterator.scala	/^    var hasNext = true$/;"	l
hasNext	scala/collection/Iterator.scala	/^  def hasNext: Boolean$/;"	m
hasNext	scala/collection/JavaConversions.scala	/^        def hasNext = ui.hasNext$/;"	m
hasNext	scala/collection/JavaConversions.scala	/^      def hasNext = ui.hasNext$/;"	m
hasNext	scala/collection/JavaConversions.scala	/^    def hasNext = underlying.hasMoreElements$/;"	m
hasNext	scala/collection/JavaConversions.scala	/^    def hasNext = underlying.hasNext$/;"	m
hasNext	scala/collection/LinearSeqLike.scala	/^    def hasNext: Boolean = !these.isEmpty$/;"	m
hasNext	scala/collection/MapLike.scala	/^    def hasNext = iter.hasNext$/;"	m
hasNext	scala/collection/SeqLike.scala	/^    def hasNext = _hasNext$/;"	m
hasNext	scala/collection/SetLike.scala	/^    def hasNext = _hasNext$/;"	m
hasNext	scala/collection/SetLike.scala	/^    def hasNext = len <= elms.size || itr.hasNext$/;"	m
hasNext	scala/collection/TraversableOnce.scala	/^      def hasNext: Boolean = it.hasNext || its.hasNext && { it = its.next.toIterator; hasNext }$/;"	m
hasNext	scala/collection/immutable/IntMap.scala	/^  def hasNext = index != 0; $/;"	m
hasNext	scala/collection/immutable/ListMap.scala	/^      def hasNext = !self.isEmpty$/;"	m
hasNext	scala/collection/immutable/ListSet.scala	/^    def hasNext = that.nonEmpty$/;"	m
hasNext	scala/collection/immutable/LongMap.scala	/^  def hasNext = index != 0; $/;"	m
hasNext	scala/collection/immutable/Stream.scala	/^  def hasNext: Boolean = these.v.nonEmpty$/;"	m
hasNext	scala/collection/immutable/StringLike.scala	/^    def hasNext: Boolean = index < len$/;"	m
hasNext	scala/collection/immutable/TrieIterator.scala	/^  def hasNext = (subIter ne null) || depth >= 0$/;"	m
hasNext	scala/collection/immutable/Vector.scala	/^    def hasNext: Boolean = 0 < i$/;"	m
hasNext	scala/collection/immutable/Vector.scala	/^  def hasNext = _hasNext$/;"	m
hasNext	scala/collection/mutable/ArrayStack.scala	/^    def hasNext = currentIndex > 0$/;"	m
hasNext	scala/collection/mutable/FlatHashTable.scala	/^    def hasNext: Boolean = {$/;"	m
hasNext	scala/collection/mutable/HashMap.scala	/^    def hasNext = iter.hasNext$/;"	m
hasNext	scala/collection/mutable/HashTable.scala	/^    def hasNext = es != null$/;"	m
hasNext	scala/collection/mutable/LinkedHashMap.scala	/^    def hasNext = cur ne null$/;"	m
hasNext	scala/collection/mutable/LinkedListLike.scala	/^    def hasNext = elems.nonEmpty$/;"	m
hasNext	scala/collection/mutable/ListBuffer.scala	/^    def hasNext: Boolean = delivered < ListBuffer.this.length$/;"	m
hasNext	scala/collection/mutable/OpenHashMap.scala	/^    def hasNext = {advance; index <= mask; }$/;"	m
hasNext	scala/collection/mutable/PriorityQueue.scala	/^    def hasNext: Boolean = i < resarr.p_size0$/;"	m
hasNext	scala/collection/mutable/PriorityQueue.scala	/^    def hasNext: Boolean = i >= 1$/;"	m
hasNext	scala/collection/mutable/UnrolledBuffer.scala	/^    def hasNext = node ne null$/;"	m
hasNext	scala/collection/parallel/ParSeqLike.scala	/^    def hasNext = i < end$/;"	m
hasNext	scala/collection/parallel/RemainsIterator.scala	/^    def hasNext = if (curr.hasNext) true else if (curr eq self) {$/;"	m
hasNext	scala/collection/parallel/RemainsIterator.scala	/^    def hasNext = remaining > 0$/;"	m
hasNext	scala/collection/parallel/RemainsIterator.scala	/^    def hasNext = self.hasNext && that.hasNext$/;"	m
hasNext	scala/collection/parallel/RemainsIterator.scala	/^    def hasNext = self.hasNext || that.hasNext$/;"	m
hasNext	scala/collection/parallel/RemainsIterator.scala	/^    def hasNext = self.hasNext$/;"	m
hasNext	scala/collection/parallel/RemainsIterator.scala	/^    def hasNext = trio.hasNext$/;"	m
hasNext	scala/collection/parallel/Splitter.scala	/^    def hasNext = false$/;"	m
hasNext	scala/collection/parallel/immutable/ParHashMap.scala	/^    def hasNext: Boolean = {$/;"	m
hasNext	scala/collection/parallel/immutable/ParHashSet.scala	/^    def hasNext: Boolean = {$/;"	m
hasNext	scala/collection/parallel/immutable/ParRange.scala	/^    final def hasNext = ind < len$/;"	m
hasNext	scala/collection/parallel/immutable/package.scala	/^      def hasNext = i < until$/;"	m
hasNext	scala/collection/parallel/mutable/ParArray.scala	/^    def hasNext = i < until$/;"	m
hasNext	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^    def hasNext = traversed < totalsize$/;"	m
hasNext	scala/collection/parallel/mutable/ParHashTable.scala	/^    def hasNext = {$/;"	m
hasNext	scala/collection/parallel/package.scala	/^    def hasNext = index < until$/;"	m
hasNext	scala/io/Source.scala	/^    def hasNext = iter.hasNext$/;"	m
hasNext	scala/io/Source.scala	/^  def hasNext = iter.hasNext$/;"	m
hasNext	scala/util/matching/Regex.scala	/^      def hasNext = self.hasNext$/;"	m
hasNext	scala/util/matching/Regex.scala	/^    def hasNext: Boolean = {$/;"	m
hasNext	scala/xml/MetaData.scala	/^  def hasNext = (Null != next)$/;"	m
hasNext	scala/xml/parsing/MarkupParser.scala	/^        def hasNext = underlying.hasNext$/;"	m
hasNext	scala/xml/parsing/MarkupParser.scala	/^      def hasNext = underlying.hasNext || !queue.isEmpty$/;"	m
hasNext	scala/xml/pull/XMLEventReader.scala	/^  def hasNext = !eos && (buffer != null || fillBuffer)$/;"	m
hasNoFlags	scala/reflect/generic/HasFlags.scala	/^  def hasNoFlags(mask: Long): Boolean = !hasFlag(mask)$/;"	m
hasNodes	scala/actors/threadpool/helpers/FIFOWaitQueue.java	/^    public boolean hasNodes() {$/;"	m	class:FIFOWaitQueue
hasNodes	scala/actors/threadpool/helpers/WaitQueue.java	/^    public abstract boolean hasNodes();$/;"	m	class:WaitQueue
hasPackageFlag	scala/reflect/generic/HasFlags.scala	/^  def hasPackageFlag       = hasFlag(PACKAGE)$/;"	m
hasPreSuperFlag	scala/reflect/generic/HasFlags.scala	/^  def hasPreSuperFlag      = hasFlag(PRESUPER)$/;"	m
hasQueuedThread	scala/actors/threadpool/locks/ReentrantLock.java	/^    public final boolean hasQueuedThread(Thread thread) {$/;"	m	class:ReentrantLock
hasQueuedThreads	scala/actors/threadpool/locks/ReentrantLock.java	/^        public boolean hasQueuedThreads() {$/;"	m	class:ReentrantLock.Sync
hasQueuedThreads	scala/actors/threadpool/locks/ReentrantLock.java	/^        public synchronized boolean hasQueuedThreads() {$/;"	m	class:ReentrantLock.FairSync
hasQueuedThreads	scala/actors/threadpool/locks/ReentrantLock.java	/^    public final boolean hasQueuedThreads() {$/;"	m	class:ReentrantLock
hasQueuedThreads	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        final synchronized boolean hasQueuedThreads() {$/;"	m	class:ReentrantReadWriteLock.Sync
hasQueuedThreads	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    public final boolean hasQueuedThreads() {$/;"	m	class:ReentrantReadWriteLock
hasStableFlag	scala/reflect/generic/HasFlags.scala	/^  def hasStableFlag        = hasFlag(STABLE)$/;"	m
hasStaticFlag	scala/reflect/generic/HasFlags.scala	/^  def hasStaticFlag        = hasFlag(STATIC)$/;"	m
hasSymbol	scala/reflect/generic/Trees.scala	/^    def hasSymbol = false$/;"	m
hasSymbolWhich	scala/reflect/generic/Trees.scala	/^    def hasSymbolWhich(f: Symbol => Boolean) = hasSymbol && f(symbol)$/;"	m
hasTraitFlag	scala/reflect/generic/HasFlags.scala	/^  def hasTraitFlag   = hasFlag(TRAIT)$/;"	m
hasWaiters	scala/actors/threadpool/locks/CondVar.java	/^    protected boolean hasWaiters() {$/;"	m	class:CondVar
hasWaiters	scala/actors/threadpool/locks/FIFOCondVar.java	/^    protected boolean hasWaiters() {$/;"	m	class:FIFOCondVar
hasWaiters	scala/actors/threadpool/locks/ReentrantLock.java	/^    public boolean hasWaiters(Condition condition) {$/;"	m	class:ReentrantLock
hash	scala/collection/mutable/OpenHashMap.scala	/^                                            val hash: Int,$/;"	l
hash	scala/collection/mutable/OpenHashMap.scala	/^    val hash = hashOf(key);$/;"	l
hash	scala/util/MurmurHash.scala	/^  def hash = {$/;"	m
hash	scala/xml/factory/LoggedNodeFactory.scala	/^    val hash = Utility.hashCode(pre, label, attrSeq.##, scope.##, children)$/;"	l
hash	scala/xml/factory/NodeFactory.scala	/^    val hash = Utility.hashCode( pre, name, attrSeq.##, scope.##, children)$/;"	l
hashCode	scala/actors/threadpool/Arrays.java	/^    public static int hashCode(Object a[]) {$/;"	m	class:Arrays
hashCode	scala/actors/threadpool/Arrays.java	/^    public static int hashCode(boolean a[]) {$/;"	m	class:Arrays
hashCode	scala/actors/threadpool/Arrays.java	/^    public static int hashCode(byte a[]) {$/;"	m	class:Arrays
hashCode	scala/actors/threadpool/Arrays.java	/^    public static int hashCode(char a[]) {$/;"	m	class:Arrays
hashCode	scala/actors/threadpool/Arrays.java	/^    public static int hashCode(double a[]) {$/;"	m	class:Arrays
hashCode	scala/actors/threadpool/Arrays.java	/^    public static int hashCode(float a[]) {$/;"	m	class:Arrays
hashCode	scala/actors/threadpool/Arrays.java	/^    public static int hashCode(int a[]) {$/;"	m	class:Arrays
hashCode	scala/actors/threadpool/Arrays.java	/^    public static int hashCode(long a[]) {$/;"	m	class:Arrays
hashCode	scala/actors/threadpool/Arrays.java	/^    public static int hashCode(short a[]) {$/;"	m	class:Arrays
hashCode	scala/runtime/BoxedUnit.java	/^    public int hashCode() {$/;"	m	class:BoxedUnit
hashCode	scala/xml/Utility.scala	/^  def hashCode(pre: String, label: String, attribHashCode: Int, scpeHash: Int, children: Seq[Node]) = {$/;"	m
hashFromDouble	scala/runtime/BoxesRunTime.java	/^    public static int hashFromDouble(java.lang.Double n) {$/;"	m	class:BoxesRunTime
hashFromFloat	scala/runtime/BoxesRunTime.java	/^    public static int hashFromFloat(java.lang.Float n) {$/;"	m	class:BoxesRunTime
hashFromLong	scala/runtime/BoxesRunTime.java	/^    public static int hashFromLong(java.lang.Long n) {$/;"	m	class:BoxesRunTime
hashFromNumber	scala/runtime/BoxesRunTime.java	/^    public static int hashFromNumber(java.lang.Number n) {$/;"	m	class:BoxesRunTime
hashFromObject	scala/runtime/BoxesRunTime.java	/^    public static int hashFromObject(Object a) {$/;"	m	class:BoxesRunTime
hc	scala/collection/parallel/immutable/ParHashMap.scala	/^          val hc = trie.computeHash(kv._1)$/;"	l
hc	scala/collection/parallel/immutable/ParHashMap.scala	/^    val hc = emptyTrie.computeHash(elem._1)$/;"	l
hc	scala/collection/parallel/immutable/ParHashSet.scala	/^          val hc = trie.computeHash(v)$/;"	l
hc	scala/collection/parallel/immutable/ParHashSet.scala	/^    val hc = emptyTrie.computeHash(elem)$/;"	l
hc	scala/collection/parallel/mutable/ParHashMap.scala	/^      val hc = improve(elemHashCode(k))$/;"	l
hc	scala/collection/parallel/mutable/ParHashMap.scala	/^    val hc = improve(elemHashCode(elem._1))$/;"	l
hc	scala/collection/parallel/mutable/ParHashSet.scala	/^    val hc = improve(elemHashCode(elem))$/;"	l
head	scala/actors/threadpool/LinkedBlockingQueue.java	/^    private transient Node<E> head;$/;"	f	class:LinkedBlockingQueue	file:
head	scala/actors/threadpool/SynchronousQueue.java	/^        private transient Node head;$/;"	f	class:SynchronousQueue.FifoWaitQueue	file:
head	scala/actors/threadpool/SynchronousQueue.java	/^        private transient Node head;$/;"	f	class:SynchronousQueue.LifoWaitQueue	file:
head	scala/collection/BufferedIterator.scala	/^  def head: A$/;"	m
head	scala/collection/GenIterableLike.scala	/^  def head = iterator.next$/;"	m
head	scala/collection/GenTraversableLike.scala	/^  def head: A$/;"	m
head	scala/collection/IndexedSeqLike.scala	/^    def head = {$/;"	m
head	scala/collection/IndexedSeqOptimized.scala	/^  def head: A = if (isEmpty) super.head else this(0)$/;"	m
head	scala/collection/Iterator.scala	/^    def head: A = {$/;"	m
head	scala/collection/LinearSeqOptimized.scala	/^  def head: A$/;"	m
head	scala/collection/TraversableLike.scala	/^  def head: A = {$/;"	m
head	scala/collection/generic/GenericTraversableTemplate.scala	/^  def head: A$/;"	m
head	scala/collection/immutable/List.scala	/^  def head: A$/;"	m
head	scala/collection/immutable/Stream.scala	/^  def head: A$/;"	m
head	scala/collection/interfaces/TraversableMethods.scala	/^  def head: A$/;"	m
head	scala/collection/parallel/ParSeqLike.scala	/^    def head = self(i)$/;"	m
head	scala/collection/parallel/Tasks.scala	/^      var head: TaskImpl[R, Tp] = this$/;"	l
head	scala/util/parsing/combinator/PackratParsers.scala	/^    val head = in.recursionHeads.get(in.pos)$/;"	l
head	scala/xml/parsing/MarkupParserCommon.scala	/^    val head = until.head$/;"	l
head0	scala/collection/immutable/List.scala	/^        val head0 = pending.head$/;"	l
head0	scala/collection/immutable/List.scala	/^        val head0 = ys.head$/;"	l
head1	scala/collection/immutable/List.scala	/^        val head1 = f(head0)$/;"	l
headOption	scala/collection/TraversableLike.scala	/^  def headOption: Option[A] = if (isEmpty) None else Some(head)$/;"	m
headOption	scala/collection/interfaces/TraversableMethods.scala	/^  def headOption: Option[A]$/;"	m
headOptionTailToFunList	scala/util/parsing/combinator/ImplicitConversions.scala	/^  implicit def headOptionTailToFunList[A, T] (f: List[A] => T)= $/;"	m
headSize	scala/collection/generic/GenericTraversableTemplate.scala	/^    val headSize = asTraversable(head).size$/;"	l
head_	scala/actors/LinkedQueue.java	/^  protected LinkedNode head_;         $/;"	f	class:LinkedQueue
head_	scala/actors/threadpool/helpers/FIFOWaitQueue.java	/^    protected transient WaitNode head_ = null;$/;"	f	class:FIFOWaitQueue
headless	scala/sys/SystemProperties.scala	/^  lazy val headless            = bool("java.awt.headless", "system should not utilize a display device")$/;"	l
help	scala/sys/SystemProperties.scala	/^  def help(key: String) = propertyHelp.getOrElse(key, "")$/;"	m
hex	scala/reflect/NameTransformer.scala	/^            val hex = name.substring(i+2, i+6)$/;"	l
hex	scala/xml/Utility.scala	/^    val hex  = (ch() == 'x') && { nextch(); true }$/;"	l
hexDigit	scala/util/parsing/json/Lexer.scala	/^  def hexDigit = elem("hex digit", hexDigits.contains(_))$/;"	m
hexDigits	scala/util/parsing/json/Lexer.scala	/^  val hexDigits = Set[Char]() ++ "0123456789abcdefABCDEF".toArray$/;"	l
hi	scala/collection/IndexedSeqOptimized.scala	/^    val hi    = math.min(until, length)$/;"	l
hi	scala/collection/generic/SliceInterval.scala	/^    val hi = until max 0$/;"	l
hi	scala/reflect/generic/UnPickler.scala	/^          val hi = readTreeRef()$/;"	l
hi	scala/util/parsing/input/OffsetPosition.scala	/^    var hi = index.length - 1$/;"	l
high	scala/runtime/ScalaRunTime.scala	/^    val high = (lv >>> 32).toInt$/;"	l
high	scala/util/Random.scala	/^    val high = 127$/;"	l
highResCounter	scala/actors/threadpool/Perf.java	/^    public long highResCounter() {$/;"	m	class:Perf
highResFrequency	scala/actors/threadpool/Perf.java	/^    public long highResFrequency() {$/;"	m	class:Perf
highestOneBit	scala/collection/generic/BitOperations.scala	/^    def highestOneBit(j: Int) = {$/;"	m
highestOneBit	scala/collection/generic/BitOperations.scala	/^    def highestOneBit(j: Long) = {$/;"	m
hm1	scala/collection/immutable/HashMap.scala	/^        val hm1 = new HashTrieMap(bm1, e1, e1.foldLeft(0)(_ + _.size))$/;"	l
hm2	scala/collection/immutable/HashMap.scala	/^        val hm2 = new HashTrieMap(bm2, e2, e2.foldLeft(0)(_ + _.size))$/;"	l
holds_	scala/actors/threadpool/locks/ReentrantLock.java	/^        protected transient int holds_ = 0;$/;"	f	class:ReentrantLock.Sync
href	scala/xml/include/sax/XIncludeFilter.scala	/^        val href = atts.getValue("href")$/;"	l
hypot	scala/math/package.scala	/^  def hypot(x: Double, y: Double): Double = java.lang.Math.hypot(x, y)$/;"	m
i	scala/Array.scala	/^      var i = 1$/;"	l
i	scala/Array.scala	/^    var i = 0$/;"	l
i	scala/Array.scala	/^    var i = 1$/;"	l
i	scala/Array.scala	/^    var i = srcPos$/;"	l
i	scala/Array.scala	/^    var i = start$/;"	l
i	scala/Console.scala	/^    var i: Int = a.length - 1$/;"	l
i	scala/collection/BitSetLike.scala	/^    var i = nwords$/;"	l
i	scala/collection/IndexedSeqOptimized.scala	/^        var i = 0$/;"	l
i	scala/collection/IndexedSeqOptimized.scala	/^      var i = 0$/;"	l
i	scala/collection/IndexedSeqOptimized.scala	/^      var i = length - 1$/;"	l
i	scala/collection/IndexedSeqOptimized.scala	/^      var i = offset$/;"	l
i	scala/collection/IndexedSeqOptimized.scala	/^    val i = prefixLength(!p(_))$/;"	l
i	scala/collection/IndexedSeqOptimized.scala	/^    var i = 0$/;"	l
i	scala/collection/IndexedSeqOptimized.scala	/^    var i = end$/;"	l
i	scala/collection/IndexedSeqOptimized.scala	/^    var i = from$/;"	l
i	scala/collection/IndexedSeqOptimized.scala	/^    var i = length$/;"	l
i	scala/collection/IndexedSeqOptimized.scala	/^    var i = lo$/;"	l
i	scala/collection/IterableLike.scala	/^      var i = 0$/;"	l
i	scala/collection/IterableLike.scala	/^    var i = 0$/;"	l
i	scala/collection/IterableLike.scala	/^    var i = start$/;"	l
i	scala/collection/Iterator.scala	/^      var i = 0$/;"	l
i	scala/collection/Iterator.scala	/^    var i = 0$/;"	l
i	scala/collection/Iterator.scala	/^    var i = start$/;"	l
i	scala/collection/LinearSeqOptimized.scala	/^    var i = 0$/;"	l
i	scala/collection/LinearSeqOptimized.scala	/^    var i = from$/;"	l
i	scala/collection/SeqLike.scala	/^      var i = from$/;"	l
i	scala/collection/SeqLike.scala	/^      var i = idxs.length - 2$/;"	l
i	scala/collection/SeqLike.scala	/^    val i = this.iterator drop offset$/;"	l
i	scala/collection/SeqLike.scala	/^    val i = this.iterator$/;"	l
i	scala/collection/SeqLike.scala	/^    val i = this.iterator.drop(length - that.length)$/;"	l
i	scala/collection/SeqLike.scala	/^    var i = 0$/;"	l
i	scala/collection/SeqLike.scala	/^    var i = from$/;"	l
i	scala/collection/SeqLike.scala	/^    var i = length - 1$/;"	l
i	scala/collection/SetLike.scala	/^      var i = len - 1$/;"	l
i	scala/collection/TraversableLike.scala	/^    var i = 0$/;"	l
i	scala/collection/TraversableLike.scala	/^    var i = start$/;"	l
i	scala/collection/generic/BitOperations.scala	/^      var i = j$/;"	l
i	scala/collection/generic/GenTraversableFactory.scala	/^      var i = 1$/;"	l
i	scala/collection/generic/GenTraversableFactory.scala	/^    var i = 0$/;"	l
i	scala/collection/generic/GenTraversableFactory.scala	/^    var i = start$/;"	l
i	scala/collection/generic/GenericTraversableTemplate.scala	/^      var i = 0$/;"	l
i	scala/collection/generic/Sorted.scala	/^    val i = keySet.from(to).iterator$/;"	l
i	scala/collection/generic/Sorted.scala	/^    val i = keySet.iterator$/;"	l
i	scala/collection/immutable/HashMap.scala	/^        var i = 0$/;"	l
i	scala/collection/immutable/HashMap.scala	/^      var i = -1$/;"	l
i	scala/collection/immutable/HashMap.scala	/^      var i = 0;$/;"	l
i	scala/collection/immutable/HashSet.scala	/^      var i = 0;$/;"	l
i	scala/collection/immutable/List.scala	/^    var i = 0$/;"	l
i	scala/collection/immutable/List.scala	/^    var i = start + len$/;"	l
i	scala/collection/immutable/List.scala	/^    var i = start$/;"	l
i	scala/collection/immutable/PagedSeq.scala	/^      var i = 0$/;"	l
i	scala/collection/immutable/Range.scala	/^      var i = start$/;"	l
i	scala/collection/immutable/Vector.scala	/^    var i = 0; while (i < index) { array(i) = null; i+=1 }$/;"	l
i	scala/collection/immutable/Vector.scala	/^    var i = index; while (i < array.length) { array(i) = null; i+=1 }$/;"	l
i	scala/collection/immutable/package.scala	/^      var i = start$/;"	l
i	scala/collection/mutable/ArrayOps.scala	/^      var i = 0$/;"	l
i	scala/collection/mutable/ArraySeq.scala	/^    var i = 0$/;"	l
i	scala/collection/mutable/BufferLike.scala	/^    val i = indexOf(x)$/;"	l
i	scala/collection/mutable/BufferLike.scala	/^    var i = start$/;"	l
i	scala/collection/mutable/FlatHashTable.scala	/^      var i = hcode * 0x9e3775cd$/;"	l
i	scala/collection/mutable/FlatHashTable.scala	/^    var i = 0$/;"	l
i	scala/collection/mutable/FlatHashTable.scala	/^    var i = table.length - 1$/;"	l
i	scala/collection/mutable/HashSet.scala	/^    var i = 0$/;"	l
i	scala/collection/mutable/HashTable.scala	/^      var i = hcode * 0x9e3775cd$/;"	l
i	scala/collection/mutable/HashTable.scala	/^    var i = oldTable.length - 1$/;"	l
i	scala/collection/mutable/HashTable.scala	/^    var i = table.length - 1$/;"	l
i	scala/collection/mutable/LinkedListLike.scala	/^    var i = 0$/;"	l
i	scala/collection/mutable/ListBuffer.scala	/^        var i = 1$/;"	l
i	scala/collection/mutable/ListBuffer.scala	/^      var i = 1$/;"	l
i	scala/collection/mutable/ResizableArray.scala	/^    var i = 0$/;"	l
i	scala/collection/mutable/SeqLike.scala	/^    var i = 0$/;"	l
i	scala/collection/mutable/UnrolledBuffer.scala	/^      var i = 0$/;"	l
i	scala/collection/mutable/UnrolledBuffer.scala	/^      var i = leftb$/;"	l
i	scala/collection/mutable/UnrolledBuffer.scala	/^      var i = size - 1$/;"	l
i	scala/collection/mutable/UnrolledBuffer.scala	/^    var i = 0$/;"	l
i	scala/collection/parallel/ParIterableLike.scala	/^      var i = from$/;"	l
i	scala/collection/parallel/RemainsIterator.scala	/^    var i = 0$/;"	l
i	scala/collection/parallel/RemainsIterator.scala	/^    var i = from$/;"	l
i	scala/collection/parallel/RemainsIterator.scala	/^    var i = howmany - 1$/;"	l
i	scala/collection/parallel/immutable/ParHashMap.scala	/^      var i = 0$/;"	l
i	scala/collection/parallel/immutable/ParHashMap.scala	/^      var i = offset$/;"	l
i	scala/collection/parallel/immutable/ParHashMap.scala	/^    var i = 0$/;"	l
i	scala/collection/parallel/immutable/ParHashSet.scala	/^      var i = 0$/;"	l
i	scala/collection/parallel/immutable/ParHashSet.scala	/^      var i = offset$/;"	l
i	scala/collection/parallel/immutable/ParHashSet.scala	/^    var i = 0$/;"	l
i	scala/collection/parallel/mutable/ParArray.scala	/^      var i = from$/;"	l
i	scala/collection/parallel/mutable/ParArray.scala	/^      var i = offset$/;"	l
i	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      var i = from$/;"	l
i	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      var i = frombucket$/;"	l
i	scala/collection/parallel/mutable/ParHashMap.scala	/^      var i = 0$/;"	l
i	scala/collection/parallel/mutable/ParHashMap.scala	/^      var i = offset$/;"	l
i	scala/collection/parallel/mutable/ParHashMap.scala	/^    var i = 0$/;"	l
i	scala/collection/parallel/mutable/ParHashSet.scala	/^      var i = 0$/;"	l
i	scala/collection/parallel/mutable/ParHashSet.scala	/^      var i = offset$/;"	l
i	scala/collection/parallel/package.scala	/^        var i = 0$/;"	l
i	scala/collection/script/Message.scala	/^    var i = 1$/;"	l
i	scala/reflect/NameTransformer.scala	/^    var i = 0$/;"	l
i	scala/reflect/ScalaBeanInfo.scala	/^    var i = 0;$/;"	l
i	scala/reflect/generic/ByteCodecs.scala	/^    var i = 0$/;"	l
i	scala/reflect/generic/Flags.scala	/^    var i      = 0$/;"	l
i	scala/reflect/generic/PickleBuffer.scala	/^    var i = 0$/;"	l
i	scala/reflect/generic/UnPickler.scala	/^      var i = 0$/;"	l
i	scala/runtime/ScalaRunTime.scala	/^      var i = 0$/;"	l
i	scala/runtime/ScalaRunTime.scala	/^    var i = 0$/;"	l
i	scala/testing/Benchmark.scala	/^      var i = 0; while (i < multiplier) {$/;"	l
i	scala/util/MurmurHash.scala	/^      val i = (s.charAt(j)<<16) + s.charAt(j+1);$/;"	l
i	scala/util/MurmurHash.scala	/^    var i = (hash ^ (hash>>>16))$/;"	l
i	scala/util/Sorting.scala	/^        var i = off$/;"	l
i	scala/util/Sorting.scala	/^      var i = 0$/;"	l
i	scala/util/parsing/combinator/RegexParsers.scala	/^      var i = 0$/;"	l
i	scala/util/parsing/input/StreamReader.scala	/^    var i = off$/;"	l
i	scala/xml/NodeSeq.scala	/^          val i = that indexOf '}'$/;"	l
i	scala/xml/PrettyPrinter.scala	/^    var i = 0$/;"	l
i	scala/xml/PrettyPrinter.scala	/^    var i = s.indexOf(' ')$/;"	l
i	scala/xml/Utility.scala	/^    var i = 0$/;"	l
i	scala/xml/include/sax/XIncluder.scala	/^      var  i = 0; while (i < length) {$/;"	l
i	scala/xml/include/sax/XIncluder.scala	/^      var i = 0; while (i < atts.getLength()) {$/;"	l
id	scala/Enumeration.scala	/^        val id = Int.unbox(classOf[Val] getMethod "id" invoke value)$/;"	l
id	scala/Enumeration.scala	/^    def id = i$/;"	m
id	scala/Enumeration.scala	/^    def id: Int$/;"	m
id	scala/reflect/generic/Trees.scala	/^    val id = nodeCount$/;"	l
id	scala/util/parsing/ast/Binders.scala	/^    val id: Int = _Binder.genId$/;"	l
id	scala/xml/include/sax/XIncluder.scala	/^      var id = ""$/;"	l
ident	scala/util/parsing/combinator/JavaTokenParsers.scala	/^  def ident: Parser[String] = $/;"	m
ident	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^  def ident: Parser[String] = $/;"	m
ident	scala/util/parsing/combinator/testing/RegexTest.scala	/^  val ident: Parser[Any] = """[a-zA-Z_]\\w*""".r ^^ (s => Ident(s))$/;"	l
identChar	scala/util/parsing/combinator/lexical/StdLexical.scala	/^  def identChar = letter | elem('_')$/;"	m
identity	scala/Predef.scala	/^  def identity[A](x: A): A         = x    \/\/ @see `conforms` for the implicit version$/;"	m
idx	scala/collection/Iterator.scala	/^    var idx = 0$/;"	l
idx	scala/collection/SeqLike.scala	/^      var idx = nums.length - 1$/;"	l
idx	scala/collection/immutable/BitSet.scala	/^      val idx = elem >> LogWL$/;"	l
idx	scala/collection/immutable/Vector.scala	/^    val idx = checkRangeConvert(index)$/;"	l
idx	scala/collection/immutable/Vector.scala	/^    val idx = index + startIndex$/;"	l
idx	scala/collection/mutable/BitSet.scala	/^      val idx = elem >> LogWL$/;"	l
idx	scala/collection/mutable/HashTable.scala	/^    var idx = table.length - 1$/;"	l
idx	scala/collection/mutable/UnrolledBuffer.scala	/^      var idx = from$/;"	l
idx	scala/collection/parallel/mutable/ParHashTable.scala	/^      var idx = from$/;"	l
idx	scala/collection/parallel/mutable/ParHashTable.scala	/^      var idx = fromBucket$/;"	l
idx	scala/xml/parsing/FactoryAdapter.scala	/^    val idx = s indexOf ':'$/;"	l
idx1	scala/collection/TraversableLike.scala	/^    val idx1 = string.lastIndexOf('.' : Int)$/;"	l
idx1	scala/collection/immutable/HashMap.scala	/^        val idx1 = (m1.hash >>> level) & 0x1f$/;"	l
idx2	scala/collection/TraversableLike.scala	/^    val idx2 = string.indexOf('$')$/;"	l
idx2	scala/collection/immutable/HashMap.scala	/^        val idx2 = (m2.hash >>> level) & 0x1f$/;"	l
ifIs	scala/collection/parallel/ParIterableLike.scala	/^    def ifIs[Cmb](isbody: Cmb => Unit) = new Otherwise[Cmb] {$/;"	m
ifIs	scala/collection/parallel/ParIterableLike.scala	/^    def ifIs[Cmb](isbody: Cmb => Unit): Otherwise[Cmb]$/;"	m
ifParSeq	scala/collection/parallel/package.scala	/^    def ifParSeq[R](isbody: ParSeq[T] => R) = new Otherwise[R] {$/;"	m
ifParSeq	scala/collection/parallel/package.scala	/^    def ifParSeq[R](isbody: ParSeq[T] => R): Otherwise[R]$/;"	m
ifParallel	scala/collection/parallel/package.scala	/^    def ifParallel[R](isbody: CanCombineFrom[From, Elem, To] => R) = new Otherwise[R] {$/;"	m
ifParallel	scala/collection/parallel/package.scala	/^    def ifParallel[R](isbody: CanCombineFrom[From, Elem, To] => R): Otherwise[R]$/;"	m
ifaces	scala/actors/remote/JavaSerializer.scala	/^      val ifaces = interfaces map { iface => cl.loadClass(iface) }$/;"	l
ignorableWhitespace	scala/xml/include/sax/XIncluder.scala	/^  def  ignorableWhitespace(ch: Array[Char], start: Int , length: Int) {$/;"	m
ignoreComments	scala/xml/factory/NodeFactory.scala	/^  val ignoreComments  = false$/;"	l
ignoreProcInstr	scala/xml/factory/NodeFactory.scala	/^  val ignoreProcInstr = false$/;"	l
ignoring	scala/util/control/Exception.scala	/^  def ignoring(exceptions: Class[_]*): Catch[Unit] =$/;"	m
ilen	scala/xml/parsing/MarkupParser.scala	/^      val ilen = inpStack.length;$/;"	l
illegalArgument	scala/collection/package.scala	/^    def illegalArgument(msg: String) = throw new IllegalArgumentException(msg)$/;"	m
immutable	scala/collection/immutable/BitSet.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/DefaultMap.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/HashMap.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/HashSet.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/IndexedSeq.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/IntMap.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Iterable.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/LinearSeq.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/List.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/ListMap.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/ListSet.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/LongMap.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Map.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/MapLike.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/MapProxy.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/NumericRange.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/PagedSeq.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Queue.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/RedBlack.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Seq.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Set.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/SetProxy.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/SortedMap.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/SortedSet.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Stack.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Stream.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/StreamView.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/StreamViewLike.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/StringLike.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/StringOps.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Traversable.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/TreeMap.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/TreeSet.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/TrieIterator.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Vector.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/WrappedString.scala	/^package immutable$/;"	p
impl	scala/actors/scheduler/DelegatingScheduler.scala	/^  final def impl = synchronized {$/;"	m
impl	scala/reflect/generic/Trees.scala	/^    def impl: Template$/;"	m
impl	scala/reflect/generic/UnPickler.scala	/^          val impl = readTemplateRef()$/;"	l
impl_	scala/actors/scheduler/DelegatingScheduler.scala	/^  final def impl_= (scheduler: IScheduler): Unit = synchronized {$/;"	m
implicitBuilder	scala/collection/immutable/TreeSet.scala	/^  implicit def implicitBuilder[A](implicit ordering: Ordering[A]): Builder[A, TreeSet[A]] = newBuilder[A](ordering)$/;"	m
implicitNotFound	scala/annotation/implicitNotFound.scala	/^final class implicitNotFound(msg: String) extends annotation.StaticAnnotation {}/;"	c
implicitSbToString	scala/xml/Utility.scala	/^  implicit def implicitSbToString(sb: StringBuilder) = sb.toString()$/;"	m
implicitly	scala/Predef.scala	/^  def implicitly[T](implicit e: T) = e    \/\/ for summoning implicit values from the nether world$/;"	m
improved	scala/collection/mutable/FlatHashTable.scala	/^    val improved = improve(hcode)$/;"	l
improved	scala/collection/mutable/HashTable.scala	/^    val improved = improve(hcode)$/;"	l
in	scala/Console.scala	/^  def in = inVar.value$/;"	m
in	scala/actors/remote/JavaSerializer.scala	/^    val in = if (cl != null)$/;"	l
in	scala/collection/generic/Sorted.scala	/^    var in = i.next;$/;"	l
in	scala/reflect/generic/ByteCodecs.scala	/^        var in: Byte = src(i + 1)$/;"	l
in	scala/reflect/generic/ByteCodecs.scala	/^      val in = src(i)$/;"	l
in	scala/reflect/generic/ByteCodecs.scala	/^      val in: Int = src(i) & 0xff$/;"	l
in	scala/reflect/generic/ByteCodecs.scala	/^      var in: Byte = src(i + 1)$/;"	l
in	scala/reflect/generic/ByteCodecs.scala	/^      var in: Int = src(i) & 0xff$/;"	l
in	scala/util/Marshal.scala	/^    val in = new ObjectInputStream(new ByteArrayInputStream(buffer))$/;"	l
in	scala/util/parsing/combinator/testing/RegexTest.scala	/^    val in = args mkString " "$/;"	l
in	scala/xml/include/sax/XIncludeFilter.scala	/^      val in = new BufferedInputStream(uc.getInputStream())$/;"	l
inMem	scala/util/parsing/combinator/PackratParsers.scala	/^        val inMem = in.asInstanceOf[PackratReader[Elem]]$/;"	l
inThread	scala/sys/process/ProcessBuilderImpl.scala	/^      val inThread  = Spawn(writeInput(process.getOutputStream), true)$/;"	l
inbetween	scala/collection/parallel/mutable/package.scala	/^        val inbetween = countBucketSizes(fbindex + 1, lbindex)$/;"	l
incHolds	scala/actors/threadpool/locks/ReentrantLock.java	/^        final void incHolds() {$/;"	m	class:ReentrantLock.Sync
inclast	scala/collection/immutable/package.scala	/^        val inclast = inclusiveLast$/;"	l
include	scala/xml/include/CircularIncludeException.scala	/^package include$/;"	p
include	scala/xml/include/UnavailableResourceException.scala	/^package include$/;"	p
include	scala/xml/include/XIncludeException.scala	/^package include$/;"	p
include.sax	scala/xml/include/sax/EncodingHeuristics.scala	/^package include.sax$/;"	p
include.sax	scala/xml/include/sax/Main.scala	/^package include.sax$/;"	p
include.sax	scala/xml/include/sax/XIncludeFilter.scala	/^package include.sax$/;"	p
include.sax	scala/xml/include/sax/XIncluder.scala	/^package include.sax$/;"	p
includer	scala/xml/include/sax/Main.scala	/^        val includer = new XIncludeFilter()$/;"	l
inclusion	scala/util/automata/Inclusion.scala	/^  def inclusion(dfa1: DetWordAutom[A], dfa2: DetWordAutom[A]) = {$/;"	m
inclusive	scala/collection/immutable/NumericRange.scala	/^    def inclusive: Inclusive[T] = NumericRange.inclusive(start, end, step)$/;"	m
inclusive	scala/collection/immutable/NumericRange.scala	/^  def inclusive[T](start: T, end: T, step: T)(implicit num: Integral[T]): Inclusive[T] = $/;"	m
inclusive	scala/collection/immutable/Range.scala	/^    def inclusive(start: BigDecimal, end: BigDecimal, step: BigDecimal) = $/;"	m
inclusive	scala/collection/immutable/Range.scala	/^    def inclusive(start: BigInt, end: BigInt, step: BigInt) = NumericRange.inclusive(start, end, step)$/;"	m
inclusive	scala/collection/immutable/Range.scala	/^    def inclusive(start: Double, end: Double, step: Double) =$/;"	m
inclusive	scala/collection/immutable/Range.scala	/^    def inclusive(start: Int, end: Int, step: Int) = NumericRange.inclusive(start, end, step)$/;"	m
inclusive	scala/collection/immutable/Range.scala	/^    def inclusive(start: Long, end: Long, step: Long) = NumericRange.inclusive(start, end, step)$/;"	m
inclusive	scala/collection/immutable/Range.scala	/^  def inclusive = $/;"	m
inclusive	scala/collection/immutable/package.scala	/^    def inclusive: Boolean$/;"	m
incomplete	scala/collection/Iterator.scala	/^      lazy val incomplete = len < count$/;"	l
incr	scala/collection/parallel/ParSeqLike.scala	/^      val incr = sizes.scanLeft(0)(_ + _)$/;"	l
incr	scala/collection/parallel/immutable/package.scala	/^        val incr = sizes.scanLeft(0)(_ + _)$/;"	l
incrementAndGet	scala/actors/threadpool/AtomicInteger.java	/^    public final synchronized int incrementAndGet() {$/;"	m	class:AtomicInteger
ind	scala/collection/immutable/HashMap.scala	/^          val ind = if (thisindex < thatindex) 1 else 0$/;"	l
ind	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^      var ind = stind$/;"	l
index	scala/actors/threadpool/TimeUnit.java	/^    private final int index;$/;"	f	class:TimeUnit	file:
index	scala/collection/GenSeqViewLike.scala	/^      val index = new Array[Int](self.length + 1)$/;"	l
index	scala/collection/GenTraversableViewLike.scala	/^      var index = 0$/;"	l
index	scala/collection/immutable/HashMap.scala	/^      val index = (hash >>> level) & 0x1f$/;"	l
index	scala/collection/immutable/HashSet.scala	/^      val index = (hash >>> level) & 0x1f$/;"	l
index	scala/collection/immutable/IntMap.scala	/^  var index = 0;$/;"	l
index	scala/collection/immutable/LongMap.scala	/^  var index = 0;$/;"	l
index	scala/collection/immutable/StringLike.scala	/^      var index = 0$/;"	l
index	scala/collection/mutable/FlatHashTable.scala	/^    var index = 0$/;"	l
index	scala/collection/mutable/HashTable.scala	/^    var index = 0$/;"	l
index	scala/collection/mutable/OpenHashMap.scala	/^    val index = findIndex(key);$/;"	l
index	scala/collection/mutable/OpenHashMap.scala	/^    val index = findIndex(key, hash);$/;"	l
index	scala/collection/mutable/OpenHashMap.scala	/^    var index = 0;$/;"	l
index	scala/collection/mutable/OpenHashMap.scala	/^    var index = hash & mask;$/;"	l
index	scala/reflect/generic/PickleBuffer.scala	/^    val index = new Array[Int](readNat()) \/\/ nbEntries_Nat$/;"	l
indexFlag	scala/collection/generic/Signalling.scala	/^  def indexFlag = -1$/;"	m
indexFlag	scala/collection/generic/Signalling.scala	/^  def indexFlag = signalDelegate.indexFlag$/;"	m
indexFlag	scala/collection/generic/Signalling.scala	/^  def indexFlag: Int$/;"	m
indexFor	scala/util/parsing/ast/Binders.scala	/^    def indexFor(b: binderType): Option[Int] = {$/;"	m
indexMap	scala/util/automata/SubsetConstruction.scala	/^    var indexMap    = collection.Map[BitSet, Int]()$/;"	l
indexOf	scala/collection/GenSeqLike.scala	/^  def indexOf[B >: A](elem: B): Int = indexOf(elem, 0)$/;"	m
indexOf	scala/collection/GenSeqLike.scala	/^  def indexOf[B >: A](elem: B, from: Int): Int = indexWhere(elem ==, from)$/;"	m
indexOf	scala/collection/Iterator.scala	/^  def indexOf[B >: A](elem: B): Int = {$/;"	m
indexOf	scala/collection/SeqLike.scala	/^  def indexOf[B]($/;"	m
indexOf	scala/collection/interfaces/SeqMethods.scala	/^  def indexOf[B >: A](elem: B): Int$/;"	m
indexOf	scala/collection/interfaces/SeqMethods.scala	/^  def indexOf[B >: A](elem: B, from: Int): Int$/;"	m
indexOf	scala/collection/mutable/StringBuilder.scala	/^  def indexOf(str: String): Int = underlying.indexOf(str)$/;"	m
indexOf	scala/collection/mutable/StringBuilder.scala	/^  def indexOf(str: String, fromIndex: Int): Int = underlying.indexOf(str, fromIndex)$/;"	m
indexOfSlice	scala/collection/SeqLike.scala	/^  def indexOfSlice[B >: A](that: GenSeq[B]): Int = indexOfSlice(that, 0)$/;"	m
indexOfSlice	scala/collection/SeqLike.scala	/^  def indexOfSlice[B >: A](that: GenSeq[B], from: Int): Int = $/;"	m
indexOfSlice	scala/collection/SeqLike.scala	/^  def indexOfSlice[B >: A](that: Seq[B]): Int = indexOfSlice(that: GenSeq[B])$/;"	m
indexOfSlice	scala/collection/SeqLike.scala	/^  def indexOfSlice[B >: A](that: Seq[B], from: Int): Int = indexOfSlice(that: GenSeq[B], from)$/;"	m
indexOfSlice	scala/collection/interfaces/SeqMethods.scala	/^  def indexOfSlice[B >: A](that: Seq[B]): Int$/;"	m
indexOfSlice	scala/collection/interfaces/SeqMethods.scala	/^  def indexOfSlice[B >: A](that: Seq[B], fromIndex: Int): Int$/;"	m
indexOutOfBounds	scala/collection/package.scala	/^    def indexOutOfBounds(index: Int) = throw new IndexOutOfBoundsException(index.toString)$/;"	m
indexWhere	scala/collection/GenSeqLike.scala	/^  def indexWhere(p: A => Boolean): Int = indexWhere(p, 0)$/;"	m
indexWhere	scala/collection/GenSeqLike.scala	/^  def indexWhere(p: A => Boolean, from: Int): Int$/;"	m
indexWhere	scala/collection/IndexedSeqOptimized.scala	/^  def indexWhere(p: A => Boolean, from: Int): Int = {$/;"	m
indexWhere	scala/collection/Iterator.scala	/^  def indexWhere(p: A => Boolean): Int = {$/;"	m
indexWhere	scala/collection/LinearSeqOptimized.scala	/^  def indexWhere(p: A => Boolean, from: Int): Int = {$/;"	m
indexWhere	scala/collection/SeqLike.scala	/^  def indexWhere(p: A => Boolean, from: Int): Int = {$/;"	m
indexWhere	scala/collection/interfaces/SeqMethods.scala	/^  def indexWhere(p: A => Boolean): Int$/;"	m
indexWhere	scala/collection/interfaces/SeqMethods.scala	/^  def indexWhere(p: A => Boolean, from: Int): Int$/;"	m
indexWhere	scala/collection/parallel/ParSeqLike.scala	/^  def indexWhere(p: T => Boolean, from: Int): Int = if (from >= length) -1 else {$/;"	m
indices	scala/collection/SeqLike.scala	/^  def indices: Range = 0 until length$/;"	m
indices	scala/collection/interfaces/SeqMethods.scala	/^  def indices: Range$/;"	m
inferMethodAlternative	scala/reflect/generic/UnPickler.scala	/^    def inferMethodAlternative(fun: Tree, argtpes: List[Type], restpe: Type)$/;"	m
infixFractionalOps	scala/math/Fractional.scala	/^    implicit def infixFractionalOps[T](x: T)(implicit num: Fractional[T]): Fractional[T]#FractionalOps = new num.FractionalOps(x)$/;"	m
infixIntegralOps	scala/math/Integral.scala	/^    implicit def infixIntegralOps[T](x: T)(implicit num: Integral[T]): Integral[T]#IntegralOps = new num.IntegralOps(x)$/;"	m
infixNumericOps	scala/math/Numeric.scala	/^    implicit def infixNumericOps[T](x: T)(implicit num: Numeric[T]): Numeric[T]#Ops = new num.Ops(x)    $/;"	m
infixOrderingOps	scala/math/Ordering.scala	/^    implicit def infixOrderingOps[T](x: T)(implicit ord: Ordering[T]): Ordering[T]#Ops = new ord.Ops(x) $/;"	m
info	scala/actors/Debug.scala	/^  def info(s: String) =$/;"	m
info	scala/reflect/generic/Symbols.scala	/^    def info: Type = {$/;"	m
info_	scala/reflect/generic/Symbols.scala	/^    def info_=(tp: Type)             { throw new UnsupportedOperationException("info_= inapplicable for " + this) }$/;"	m
info_enc	scala/xml/parsing/MarkupParser.scala	/^    var info_enc: Option[String] = None$/;"	l
info_prolog	scala/xml/parsing/MarkupParser.scala	/^    var info_prolog: Tuple3[Option[String], Option[String], Option[Boolean]] = Tuple3(None, None, None);$/;"	l
info_stdl	scala/xml/parsing/MarkupParser.scala	/^    var info_stdl: Option[Boolean] = None$/;"	l
info_ver	scala/xml/parsing/MarkupParser.scala	/^    var info_ver: Option[String] = None$/;"	l
inforef	scala/reflect/generic/UnPickler.scala	/^      var inforef      = readNat()$/;"	l
init	scala/collection/IndexedSeqOptimized.scala	/^  def init: Repr = if (length > 0) slice(0, length - 1) else super.init$/;"	m
init	scala/collection/TraversableLike.scala	/^  def init: Repr = {$/;"	m
init	scala/collection/interfaces/TraversableMethods.scala	/^  def init: Traversable[A]$/;"	m
initArrayD	scala/collection/immutable/TrieIterator.scala	/^  def initArrayD: Array[Iterable[T @uV]]            = elems$/;"	m
initArrayStack	scala/collection/immutable/TrieIterator.scala	/^  def initArrayStack: Array[Array[Iterable[T @uV]]] = new Array[Array[Iterable[T]]](6)$/;"	m
initDepth	scala/collection/immutable/TrieIterator.scala	/^  def initDepth                                     = 0$/;"	m
initPosD	scala/collection/immutable/TrieIterator.scala	/^  def initPosD                                      = 0$/;"	m
initPosStack	scala/collection/immutable/TrieIterator.scala	/^  def initPosStack                                  = new Array[Int](6)$/;"	m
initScanner	scala/xml/dtd/Scanner.scala	/^  final def initScanner(s: String) {$/;"	m
initSubIter	scala/collection/immutable/TrieIterator.scala	/^  def initSubIter: Iterator[T]                      = null \/\/ to traverse collision nodes$/;"	m
initialModCount	scala/collection/mutable/OpenHashMap.scala	/^    val initialModCount = modCount;$/;"	l
initialize	scala/xml/parsing/MarkupParser.scala	/^  def initialize: this.type = {$/;"	m
initialized	scala/concurrent/pilib.scala	/^    var initialized = false$/;"	l
initials	scala/util/automata/WordBerrySethi.scala	/^          val initials = initialsArr$/;"	l
initialsArr	scala/util/automata/WordBerrySethi.scala	/^        val initialsArr = initials.toArray$/;"	l
inits	scala/collection/TraversableLike.scala	/^  def inits: Iterator[Repr] = iterateUntilEmpty(_.init)$/;"	m
inits	scala/collection/interfaces/TraversableMethods.scala	/^  def inits: Iterator[This]$/;"	m
inline	scala/inline.scala	/^class inline extends annotation.StaticAnnotation$/;"	c
inline	scala/package.scala	/^  type inline = annotation.inline$/;"	T
inner	scala/runtime/ScalaRunTime.scala	/^    def inner(arg: Any): String = arg match {$/;"	m
inpStack	scala/xml/parsing/MarkupParser.scala	/^  var inpStack: List[Source] = Nil$/;"	l
input	scala/concurrent/pilib.scala	/^    def input[B](c: A => B) =$/;"	m
input	scala/sys/process/BasicIO.scala	/^  def input(connect: Boolean): OutputStream => Unit = if (connect) connectToIn else _ => ()$/;"	m
input	scala/xml/parsing/MarkupParser.scala	/^  val input: Source$/;"	l
inputChannel	scala/actors/Future.scala	/^  def inputChannel: InputChannel[T] = {$/;"	m
inputChannel	scala/actors/Future.scala	/^  def inputChannel: InputChannel[T]$/;"	m
inputChannel	scala/actors/ReactorCanReply.scala	/^      def inputChannel = ftch$/;"	m
inputStream	scala/io/Source.scala	/^    val inputStream = new FileInputStream(file)$/;"	l
insert	scala/actors/LinkedQueue.java	/^  protected void insert(Object x) { $/;"	m	class:LinkedQueue
insert	scala/actors/threadpool/helpers/FIFOWaitQueue.java	/^    public void insert(WaitNode w) {$/;"	m	class:FIFOWaitQueue
insert	scala/actors/threadpool/helpers/WaitQueue.java	/^    public abstract void insert(WaitNode w); \/\/ assumed not to block$/;"	m	class:WaitQueue
insert	scala/collection/immutable/TreeMap.scala	/^  def insert [B1 >: B](key: A, value: B1): TreeMap[A, B1] = {$/;"	m
insert	scala/collection/immutable/TreeSet.scala	/^  def insert(elem: A): TreeSet[A] = {$/;"	m
insert	scala/collection/mutable/BufferLike.scala	/^  def insert(n: Int, elems: A*) { insertAll(n, elems) } $/;"	m
insert	scala/collection/mutable/LinkedListLike.scala	/^  def insert(that: This): Unit = {$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(at: Int, x: Array[Char]): StringBuilder = insertAll(at, x)$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(at: Int, x: Seq[Char]): StringBuilder = insertAll(at, x)$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, str: Array[Char], offset: Int, len: Int): StringBuilder = $/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Any): StringBuilder = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Boolean): StringBuilder = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Byte): StringBuilder    = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Char): StringBuilder    = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Double): StringBuilder  = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Float): StringBuilder   = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Int): StringBuilder     = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Long): StringBuilder    = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Short): StringBuilder   = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: String): StringBuilder = {$/;"	m
insertAll	scala/collection/JavaConversions.scala	/^    def insertAll(i : Int, elems : Traversable[A]) = { val ins = underlying.subList(0, i) ;  elems.seq.foreach(ins.add(_)) }$/;"	m
insertAll	scala/collection/mutable/ArrayBuffer.scala	/^  def insertAll(n: Int, seq: Traversable[A]) {$/;"	m
insertAll	scala/collection/mutable/BufferLike.scala	/^  def insertAll(n: Int, elems: collection.Traversable[A])$/;"	m
insertAll	scala/collection/mutable/BufferProxy.scala	/^  def insertAll(n: Int, iter: scala.collection.Iterable[A]) {$/;"	m
insertAll	scala/collection/mutable/ListBuffer.scala	/^  def insertAll(n: Int, seq: Traversable[A]) {$/;"	m
insertAll	scala/collection/mutable/StringBuilder.scala	/^  def insertAll(index: Int, str: Array[Char], offset: Int, len: Int): StringBuilder = {$/;"	m
insertAll	scala/collection/mutable/StringBuilder.scala	/^  def insertAll(index: Int, xs: Array[Char]): StringBuilder = {$/;"	m
insertAll	scala/collection/mutable/StringBuilder.scala	/^  def insertAll(index: Int, xs: TraversableOnce[Char]): StringBuilder = insertAll(index, xs.toArray)$/;"	m
insertAll	scala/collection/mutable/UnrolledBuffer.scala	/^  def insertAll(idx: Int, elems: collection.Traversable[T]) =$/;"	m
insertEntry	scala/collection/parallel/mutable/ParHashMap.scala	/^      def insertEntry(e: DefaultEntry[K, V]) = if (super.findEntry(e.key) eq null) super.addEntry(e)$/;"	m
insertEntry	scala/collection/parallel/mutable/ParHashMap.scala	/^    def insertEntry(\/*block: Int, *\/e: DefaultEntry[K, V]) = {$/;"	m
insertEntry	scala/collection/parallel/mutable/ParHashSet.scala	/^    def insertEntry(insertAt: Int, comesBefore: Int, elem: T): Int = {$/;"	m
insertcount	scala/collection/parallel/mutable/ParHashMap.scala	/^      var insertcount = 0$/;"	l
insertcount	scala/collection/parallel/mutable/ParHashMap.scala	/^    val insertcount = executeAndWaitResult(new FillBlocks(bucks, table, 0, bucks.length))$/;"	l
inserted	scala/collection/parallel/mutable/ParHashSet.scala	/^      var inserted = 0$/;"	l
insideIncludeElement	scala/xml/include/sax/XIncludeFilter.scala	/^  def insideIncludeElement(): Boolean = level != 0$/;"	m
int2Integer	scala/Predef.scala	/^  implicit def int2Integer(x: Int)          = java.lang.Integer.valueOf(x)$/;"	m
int2IntegerConflict	scala/Predef.scala	/^  implicit def int2IntegerConflict(x: Int)          = new AnyRef$/;"	m
int2bigDecimal	scala/math/BigDecimal.scala	/^  implicit def int2bigDecimal(i: Int): BigDecimal = apply(i)$/;"	m
int2bigInt	scala/math/BigInt.scala	/^  implicit def int2bigInt(i: Int): BigInt = apply(i)$/;"	m
int2double	scala/Predef.scala	/^  implicit def int2double(x: Int): Double = x.toDouble$/;"	m
int2float	scala/Predef.scala	/^  implicit def int2float(x: Int): Float = x.toFloat$/;"	m
int2long	scala/Predef.scala	/^  implicit def int2long(x: Int): Long = x.toLong$/;"	m
intArrayOps	scala/Predef.scala	/^  implicit def intArrayOps(xs: Array[Int]): ArrayOps[Int] = new ArrayOps.ofInt(xs)$/;"	m
intList	scala/util/parsing/json/Lexer.scala	/^  def intList = nonzero ~ rep(digit) ^^ {case x ~ y => (x :: y) mkString ""}$/;"	m
intPart	scala/util/parsing/json/Lexer.scala	/^  def intPart = zero | intList$/;"	m
intString	scala/xml/dtd/DocType.scala	/^    def intString = $/;"	m
intSubset	scala/xml/parsing/MarkupParser.scala	/^  def intSubset() {$/;"	m
intValue	scala/actors/threadpool/AtomicInteger.java	/^    public int intValue() {$/;"	m	class:AtomicInteger
intValue	scala/math/BigDecimal.scala	/^  def intValue    = this.bigDecimal.intValue$/;"	m
intValue	scala/math/BigInt.scala	/^  def intValue    = this.bigInteger.intValue$/;"	m
intValue	scala/reflect/generic/Constants.scala	/^    def intValue: Int = tag match {$/;"	m
intValue	scala/runtime/ScalaNumberProxy.scala	/^  def intValue()    = num.toInt(self)$/;"	m
intWrapper	scala/LowPriorityImplicits.scala	/^  implicit def intWrapper(x: Int)         = new runtime.RichInt(x)$/;"	m
interfaces	scala/collection/interfaces/IterableMethods.scala	/^package interfaces$/;"	p
interfaces	scala/collection/interfaces/MapMethods.scala	/^package interfaces$/;"	p
interfaces	scala/collection/interfaces/SeqMethods.scala	/^package interfaces$/;"	p
interfaces	scala/collection/interfaces/SetMethods.scala	/^package interfaces$/;"	p
interfaces	scala/collection/interfaces/TraversableMethods.scala	/^package interfaces$/;"	p
interfaces	scala/collection/interfaces/TraversableOnceMethods.scala	/^package interfaces$/;"	p
internal	scala/collection/parallel/Tasks.scala	/^    def internal() = {$/;"	m
internalArray	scala/collection/parallel/mutable/package.scala	/^    def internalArray = array$/;"	m
interruptIdleWorkers	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private void interruptIdleWorkers() {$/;"	m	class:ThreadPoolExecutor	file:
interruptIdleWorkers	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private void interruptIdleWorkers(boolean onlyOne) {$/;"	m	class:ThreadPoolExecutor	file:
interruptWorkers	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private void interruptWorkers() {$/;"	m	class:ThreadPoolExecutor	file:
interruptibly	scala/xml/pull/XMLEventReader.scala	/^  def interruptibly[T](body: => T): Option[T] = try Some(body) catch {$/;"	m
intersect	scala/collection/GenSeqLike.scala	/^  def intersect[B >: A](that: GenSeq[B]): Repr$/;"	m
intersect	scala/collection/GenSetLike.scala	/^  def intersect(that: GenSet[A]): Repr = this filter that$/;"	m
intersect	scala/collection/GenSetLike.scala	/^  def intersect(that: Set[A]): Repr = intersect(that: GenSet[A])$/;"	m
intersect	scala/collection/SeqLike.scala	/^  def intersect[B >: A](that: GenSeq[B]): Repr = {$/;"	m
intersect	scala/collection/SeqLike.scala	/^  def intersect[B >: A](that: Seq[B]): Repr = intersect(that: GenSeq[B])    $/;"	m
intersect	scala/collection/interfaces/SeqMethods.scala	/^  def intersect[B >: A, That](that: Seq[B]): This$/;"	m
intersect	scala/collection/interfaces/SetMethods.scala	/^  def intersect(that: Set[A]): This$/;"	m
intersect	scala/collection/parallel/ParSeqLike.scala	/^  def intersect[U >: T](that: GenSeq[U]) = sequentially {$/;"	m
intersection	scala/collection/immutable/IntMap.scala	/^  def intersection[R](that : IntMap[R]) : IntMap[T] = this.intersectionWith(that, (key : Int, value : T, value2 : R) => value);$/;"	m
intersection	scala/collection/immutable/LongMap.scala	/^  def intersection[R](that : LongMap[R]) : LongMap[T] = this.intersectionWith(that, (key : Long, value : T, value2 : R) => value);$/;"	m
intersectionType	scala/reflect/Manifest.scala	/^  def intersectionType[T](parents: Manifest[_]*): Manifest[T] =$/;"	m
intersectionWith	scala/collection/immutable/IntMap.scala	/^  def intersectionWith[S, R](that : IntMap[S], f : (Int, T, S) => R) : IntMap[R] = (this, that) match {$/;"	m
intersectionWith	scala/collection/immutable/LongMap.scala	/^  def intersectionWith[S, R](that : LongMap[S], f : (Long, T, S) => R) : LongMap[R] = (this, that) match {$/;"	m
into	scala/util/parsing/combinator/Parsers.scala	/^    def into[U](fq: T => Parser[U]): Parser[U] = flatMap(fq)$/;"	m
invIndexMap	scala/util/automata/SubsetConstruction.scala	/^    var invIndexMap = collection.Map[Int, BitSet]()$/;"	l
invoke	scala/util/control/Exception.scala	/^    def invoke(): Unit = { body }$/;"	m
invokeAll	scala/actors/threadpool/AbstractExecutorService.java	/^    public List<Future> invokeAll(Collection tasks) throws InterruptedException {$/;"	m	class:AbstractExecutorService
invokeAll	scala/actors/threadpool/AbstractExecutorService.java	/^    public List<Future> invokeAll(Collection tasks,$/;"	m	class:AbstractExecutorService
invokeAll	scala/actors/threadpool/ExecutorService.java	/^    List invokeAll(Collection tasks)$/;"	m	interface:ExecutorService
invokeAll	scala/actors/threadpool/ExecutorService.java	/^    List invokeAll(Collection tasks, long timeout, TimeUnit unit)$/;"	m	interface:ExecutorService
invokeAll	scala/actors/threadpool/Executors.java	/^        public List<Future> invokeAll(Collection tasks)$/;"	m	class:Executors.DelegatedExecutorService
invokeAll	scala/actors/threadpool/Executors.java	/^        public List<Future> invokeAll(Collection tasks,$/;"	m	class:Executors.DelegatedExecutorService
invokeAny	scala/actors/threadpool/AbstractExecutorService.java	/^    public Object invokeAny(Collection tasks)$/;"	m	class:AbstractExecutorService
invokeAny	scala/actors/threadpool/AbstractExecutorService.java	/^    public Object invokeAny(Collection tasks,$/;"	m	class:AbstractExecutorService
invokeAny	scala/actors/threadpool/ExecutorService.java	/^    Object invokeAny(Collection tasks)$/;"	m	interface:ExecutorService
invokeAny	scala/actors/threadpool/ExecutorService.java	/^    Object invokeAny(Collection tasks, long timeout, TimeUnit unit)$/;"	m	interface:ExecutorService
invokeAny	scala/actors/threadpool/Executors.java	/^        public Object invokeAny(Collection tasks)$/;"	m	class:Executors.DelegatedExecutorService
invokeAny	scala/actors/threadpool/Executors.java	/^        public Object invokeAny(Collection tasks,$/;"	m	class:Executors.DelegatedExecutorService
ioFailure	scala/sys/process/package.scala	/^      def ioFailure[T](handler: IOException => T): Throwable =?> T = {$/;"	m
isAborted	scala/collection/generic/Signalling.scala	/^  def isAborted = signalDelegate.isAborted$/;"	m
isAborted	scala/collection/generic/Signalling.scala	/^  def isAborted: Boolean$/;"	m
isAbstract	scala/reflect/generic/HasFlags.scala	/^  def isAbstract = hasFlag(ABSTRACT)$/;"	m
isAbstractClass	scala/reflect/generic/Symbols.scala	/^    final def isAbstractClass = isClass && hasFlag(ABSTRACT)$/;"	m
isAbstractOverride	scala/reflect/generic/HasFlags.scala	/^  def isAbstractOverride = hasFlag(ABSOVERRIDE)$/;"	m
isAbstractType	scala/reflect/generic/Symbols.scala	/^    def isAbstractType = false  \/\/ to be overridden$/;"	m
isActive	scala/actors/IScheduler.scala	/^  def isActive: Boolean$/;"	m
isActive	scala/actors/SchedulerAdapter.scala	/^  def isActive: Boolean =$/;"	m
isActive	scala/actors/scheduler/DelegatingScheduler.scala	/^  def isActive: Boolean = true$/;"	m
isActive	scala/actors/scheduler/ExecutorScheduler.scala	/^  def isActive =$/;"	m
isActive	scala/actors/scheduler/ForkJoinScheduler.scala	/^  def isActive = synchronized {$/;"	m
isActive	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^  def isActive = synchronized {$/;"	m
isActive	scala/actors/scheduler/SingleThreadedScheduler.scala	/^  def isActive =$/;"	m
isAliasType	scala/reflect/generic/Symbols.scala	/^    def isAliasType    = false  \/\/ to be overridden$/;"	m
isAllWhitespace	scala/xml/dtd/ElementValidator.scala	/^    def isAllWhitespace(a: Atom[_]) = cond(a.data) { case s: String if s.trim == "" => true }$/;"	m
isAlpha	scala/xml/parsing/TokenTests.scala	/^  def isAlpha(c: Char) = (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')$/;"	m
isAlphaDigit	scala/xml/parsing/TokenTests.scala	/^  def isAlphaDigit(c: Char) = isAlpha(c) || (c >= '0' && c <= '9')$/;"	m
isAlphaNum	scala/util/Random.scala	/^    def isAlphaNum(c: Char) = (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')$/;"	m
isApproxSubType	scala/reflect/Manifest.scala	/^  def isApproxSubType[T: Manifest, U: Manifest] = manifest[T] <:< manifest[U]$/;"	m
isArray	scala/runtime/ScalaRunTime.scala	/^  def isArray(x: Any, atLevel: Int): Boolean = $/;"	m
isArray	scala/runtime/ScalaRunTime.scala	/^  def isArray(x: AnyRef): Boolean = isArray(x, 1)$/;"	m
isAtom	scala/xml/Node.scala	/^  def isAtom = this.isInstanceOf[Atom[_]]$/;"	m
isBefore	scala/collection/parallel/RemainsIterator.scala	/^    var isBefore = true$/;"	l
isBlack	scala/collection/immutable/RedBlack.scala	/^    def isBlack = false$/;"	m
isBlack	scala/collection/immutable/RedBlack.scala	/^    def isBlack = true$/;"	m
isBlack	scala/collection/immutable/RedBlack.scala	/^    def isBlack: Boolean$/;"	m
isBridge	scala/reflect/generic/Symbols.scala	/^    final def isBridge = hasFlag(BRIDGE)$/;"	m
isByNameParam	scala/reflect/generic/HasFlags.scala	/^  def isByNameParam      = hasAllFlags(BYNAMEPARAM | PARAM)$/;"	m
isByteRange	scala/reflect/generic/Constants.scala	/^    def isByteRange: Boolean  = isIntRange && Byte.MinValue <= intValue && intValue <= Byte.MaxValue$/;"	m
isCancelled	scala/actors/threadpool/Future.java	/^    boolean isCancelled();$/;"	m	interface:Future
isCancelled	scala/actors/threadpool/FutureTask.java	/^    public synchronized boolean isCancelled() {$/;"	m	class:FutureTask
isCase	scala/reflect/generic/HasFlags.scala	/^  def isCase      = hasFlag(CASE     )$/;"	m
isCaseAccessor	scala/reflect/generic/HasFlags.scala	/^  def isCaseAccessor   = hasFlag(CASEACCESSOR)$/;"	m
isCharRange	scala/reflect/generic/Constants.scala	/^    def isCharRange: Boolean  = isIntRange && Char.MinValue <= intValue && intValue <= Char.MaxValue$/;"	m
isClass	scala/reflect/generic/Symbols.scala	/^    def isClass        = false  \/\/ to be overridden$/;"	m
isClassRoot	scala/reflect/generic/UnPickler.scala	/^      def isClassRoot  = (name == classRoot.name) && (owner == classRoot.owner)$/;"	m
isComplete	scala/reflect/generic/Types.scala	/^    def isComplete: Boolean = true$/;"	m
isConnected	scala/actors/remote/TcpService.scala	/^  def isConnected(n: Node): Boolean = synchronized {$/;"	m
isContravariant	scala/reflect/generic/HasFlags.scala	/^    final def isContravariant = isType && hasFlag(CONTRAVARIANT)$/;"	m
isContravariant	scala/reflect/generic/Symbols.scala	/^    final def isContravariant = isType && hasFlag(CONTRAVARIANT)$/;"	m
isControl	scala/runtime/RichChar.scala	/^  def isControl: Boolean                = Character.isISOControl(self)$/;"	m
isCovariant	scala/reflect/generic/HasFlags.scala	/^    final def isCovariant = isType && hasFlag(COVARIANT)$/;"	m
isCovariant	scala/reflect/generic/Symbols.scala	/^    final def isCovariant = isType && hasFlag(COVARIANT)$/;"	m
isDef	scala/reflect/generic/Trees.scala	/^    def isDef = false$/;"	m
isDefaultInit	scala/reflect/generic/HasFlags.scala	/^  def isDefaultInit = hasFlag(DEFAULTINIT)$/;"	m
isDeferred	scala/reflect/generic/HasFlags.scala	/^  def isDeferred = hasFlag(DEFERRED )$/;"	m
isDefined	scala/Option.scala	/^  def isDefined: Boolean = !isEmpty$/;"	m
isDefinedAt	scala/Function.scala	/^    def isDefinedAt(x: T): Boolean = f(x).isDefined$/;"	m
isDefinedAt	scala/PartialFunction.scala	/^    def isDefinedAt(x: A): Boolean = PartialFunction.this.isDefinedAt(x)$/;"	m
isDefinedAt	scala/PartialFunction.scala	/^    def isDefinedAt(x: A1): Boolean = $/;"	m
isDefinedAt	scala/PartialFunction.scala	/^  def isDefinedAt(x: A): Boolean$/;"	m
isDefinedAt	scala/actors/Actor.scala	/^    def isDefinedAt(m: Any): Boolean =$/;"	m
isDefinedAt	scala/actors/Future.scala	/^        def isDefinedAt(msg: Any) = msg match {$/;"	m
isDefinedAt	scala/actors/Reactor.scala	/^    def isDefinedAt(x: Any) = false$/;"	m
isDefinedAt	scala/collection/GenSeqLike.scala	/^  def isDefinedAt(idx: Int): Boolean = (idx >= 0) && (idx < length)$/;"	m
isDefinedAt	scala/collection/LinearSeqOptimized.scala	/^  def isDefinedAt(x: Int): Boolean = x >= 0 && lengthCompare(x) > 0$/;"	m
isDefinedAt	scala/collection/MapLike.scala	/^  def isDefinedAt(key: A) = contains(key)$/;"	m
isDefinedAt	scala/collection/interfaces/MapMethods.scala	/^  def isDefinedAt(key: A): Boolean$/;"	m
isDefinedAt	scala/collection/interfaces/SeqMethods.scala	/^  def isDefinedAt(x: Int): Boolean$/;"	m
isDefinedAt	scala/concurrent/MailBox.scala	/^    def isDefinedAt(msg: Message) = receiver.isDefinedAt(msg)$/;"	m
isDefinedAt	scala/concurrent/MailBox.scala	/^    def isDefinedAt(msg: Message): Boolean$/;"	m
isDefinedAt	scala/util/control/Exception.scala	/^        def isDefinedAt(x: Throwable) = pf isDefinedAt x$/;"	m
isDefinedAt	scala/util/control/Exception.scala	/^      def isDefinedAt(x: Throwable) = wouldMatch(x, exceptions)$/;"	m
isDefinedAt	scala/util/control/Exception.scala	/^    def isDefinedAt(x: Throwable) = downcast(x) exists isDef$/;"	m
isDigit	scala/runtime/RichChar.scala	/^  def isDigit: Boolean                  = Character.isDigit(self)$/;"	m
isDone	scala/actors/threadpool/Future.java	/^    boolean isDone();$/;"	m	interface:Future
isDone	scala/actors/threadpool/FutureTask.java	/^    public synchronized boolean isDone() {$/;"	m	class:FutureTask
isDone	scala/concurrent/DelayedLazyVal.scala	/^  def isDone = _isDone$/;"	m
isDone	scala/parallel/Future.scala	/^  def isDone(): Boolean$/;"	m
isEarlyInitialized	scala/reflect/generic/Symbols.scala	/^    final def isEarlyInitialized: Boolean = isTerm && hasFlag(PRESUPER)$/;"	m
isEffectiveRoot	scala/reflect/generic/Symbols.scala	/^    def isEffectiveRoot = isRoot || isEmptyPackageClass$/;"	m
isEmpty	scala/Option.scala	/^  def isEmpty = false$/;"	m
isEmpty	scala/Option.scala	/^  def isEmpty = true$/;"	m
isEmpty	scala/Option.scala	/^  def isEmpty: Boolean$/;"	m
isEmpty	scala/actors/LinkedQueue.java	/^  public boolean isEmpty() {$/;"	m	class:LinkedQueue
isEmpty	scala/actors/MessageQueue.scala	/^  final def isEmpty = last eq null$/;"	m
isEmpty	scala/actors/threadpool/SynchronousQueue.java	/^    public boolean isEmpty() {$/;"	m	class:SynchronousQueue
isEmpty	scala/collection/GenIterableLike.scala	/^  def isEmpty = iterator.isEmpty$/;"	m
isEmpty	scala/collection/GenTraversableOnce.scala	/^  def isEmpty: Boolean$/;"	m
isEmpty	scala/collection/IndexedSeqOptimized.scala	/^  def isEmpty: Boolean = { length == 0 }$/;"	m
isEmpty	scala/collection/Iterator.scala	/^  def isEmpty: Boolean = !hasNext$/;"	m
isEmpty	scala/collection/JavaConversions.scala	/^    def isEmpty: Boolean = underlying.isEmpty$/;"	m
isEmpty	scala/collection/LinearSeqOptimized.scala	/^  def isEmpty: Boolean$/;"	m
isEmpty	scala/collection/TraversableLike.scala	/^  def isEmpty: Boolean = {$/;"	m
isEmpty	scala/collection/TraversableOnce.scala	/^  def isEmpty: Boolean$/;"	m
isEmpty	scala/collection/generic/GenericTraversableTemplate.scala	/^  def isEmpty: Boolean$/;"	m
isEmpty	scala/collection/immutable/List.scala	/^  def isEmpty: Boolean$/;"	m
isEmpty	scala/collection/immutable/RedBlack.scala	/^    def isEmpty = false$/;"	m
isEmpty	scala/collection/immutable/RedBlack.scala	/^    def isEmpty = true$/;"	m
isEmpty	scala/collection/immutable/RedBlack.scala	/^    def isEmpty: Boolean$/;"	m
isEmpty	scala/collection/immutable/Stream.scala	/^  def isEmpty: Boolean$/;"	m
isEmpty	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def isEmpty: Boolean$/;"	m
isEmpty	scala/reflect/generic/Trees.scala	/^    def isEmpty = false$/;"	m
isEmpty	scala/util/automata/NondetWordAutom.scala	/^  final def isEmpty = (0 until nstates) forall (x => !isFinal(x))$/;"	m
isEmpty	scala/util/parsing/combinator/Parsers.scala	/^    def isEmpty = !successful$/;"	m
isEmptyPackage	scala/reflect/generic/Symbols.scala	/^    final def isEmptyPackage = isPackage && name == nme.EMPTY_PACKAGE_NAME$/;"	m
isEmptyPackageClass	scala/reflect/generic/Symbols.scala	/^    final def isEmptyPackageClass = isPackageClass && name == tpnme.EMPTY_PACKAGE_NAME$/;"	m
isEnqueued	scala/ref/Reference.scala	/^  def isEnqueued(): Boolean$/;"	m
isEnqueued	scala/ref/ReferenceWrapper.scala	/^  def isEnqueued = underlying.isEnqueued$/;"	m
isExistentiallyBound	scala/reflect/generic/Symbols.scala	/^    final def isExistentiallyBound = isType && hasFlag(EXISTENTIAL)$/;"	m
isFair	scala/actors/threadpool/locks/ReentrantLock.java	/^        public abstract boolean isFair();$/;"	m	class:ReentrantLock.Sync
isFair	scala/actors/threadpool/locks/ReentrantLock.java	/^        public final boolean isFair() {$/;"	m	class:ReentrantLock.FairSync
isFair	scala/actors/threadpool/locks/ReentrantLock.java	/^        public final boolean isFair() {$/;"	m	class:ReentrantLock.NonfairSync
isFair	scala/actors/threadpool/locks/ReentrantLock.java	/^    public final boolean isFair() {$/;"	m	class:ReentrantLock
isFair	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    public final boolean isFair() {$/;"	m	class:ReentrantReadWriteLock
isFinal	scala/reflect/generic/HasFlags.scala	/^  def isFinal     = hasFlag(FINAL    )$/;"	m
isFinal	scala/util/automata/DetWordAutom.scala	/^  def isFinal(q: Int)        = finals(q) != 0$/;"	m
isFinal	scala/util/automata/NondetWordAutom.scala	/^  final def isFinal(state: Int) = finals(state) > 0$/;"	m
isFirst	scala/collection/Iterator.scala	/^      def isFirst = prevSize == 0$/;"	m
isFirst	scala/collection/immutable/PagedSeq.scala	/^    var isFirst = true$/;"	l
isFloatRange	scala/reflect/generic/Constants.scala	/^    def isFloatRange: Boolean = ByteTag <= tag && tag <= FloatTag$/;"	m
isHeldByCurrentThread	scala/actors/threadpool/locks/CondVar.java	/^        boolean isHeldByCurrentThread();$/;"	m	interface:CondVar.ExclusiveLock
isHeldByCurrentThread	scala/actors/threadpool/locks/ReentrantLock.java	/^        public synchronized boolean isHeldByCurrentThread() {$/;"	m	class:ReentrantLock.Sync
isHeldByCurrentThread	scala/actors/threadpool/locks/ReentrantLock.java	/^    public boolean isHeldByCurrentThread() {$/;"	m	class:ReentrantLock
isHeldByCurrentThread	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        public boolean isHeldByCurrentThread() {$/;"	m	class:ReentrantReadWriteLock.WriteLock
isHighSurrogate	scala/runtime/RichChar.scala	/^  def isHighSurrogate: Boolean          = Character.isHighSurrogate(self)$/;"	m
isIdentChar	scala/xml/dtd/Scanner.scala	/^  final def isIdentChar = ( ('a' <= c && c <= 'z') $/;"	m
isIdentifierIgnorable	scala/runtime/RichChar.scala	/^  def isIdentifierIgnorable: Boolean    = Character.isIdentifierIgnorable(self)$/;"	m
isImplClass	scala/reflect/generic/Symbols.scala	/^    final def isImplClass = isClass && hasFlag(IMPLCLASS) \/\/ Is this symbol an implementation class for a mixin?$/;"	m
isImplicit	scala/reflect/generic/HasFlags.scala	/^  def isImplicit  = hasFlag(IMPLICIT )$/;"	m
isInclusive	scala/collection/immutable/Range.scala	/^  def isInclusive = false$/;"	m
isInfinity	scala/runtime/RichDouble.scala	/^  def isInfinity: Boolean = java.lang.Double.isInfinite(self)$/;"	m
isInfinity	scala/runtime/RichFloat.scala	/^  def isInfinity: Boolean = java.lang.Float.isInfinite(self)$/;"	m
isIntRange	scala/reflect/generic/Constants.scala	/^    def isIntRange: Boolean   = ByteTag <= tag && tag <= IntTag$/;"	m
isInterface	scala/reflect/generic/HasFlags.scala	/^  def isInterface = hasFlag(INTERFACE)$/;"	m
isJavaAtLeast	scala/util/Properties.scala	/^  def isJavaAtLeast(version: String) = {$/;"	m
isJavaDefined	scala/reflect/generic/HasFlags.scala	/^  def isJavaDefined = hasFlag(JAVA)$/;"	m
isLabel	scala/reflect/generic/HasFlags.scala	/^    final def isLabel = isMethod && !hasAccessorFlag && hasFlag(LABEL)$/;"	m
isLabel	scala/reflect/generic/HasFlags.scala	/^  def isLabel = hasAllFlags(LABEL | METHOD) && !hasAccessorFlag$/;"	m
isLast	scala/collection/immutable/PagedSeq.scala	/^  var isLast: Boolean = false$/;"	l
isLazy	scala/reflect/generic/HasFlags.scala	/^  def isLazy      = hasFlag(LAZY     )$/;"	m
isLazyAccessor	scala/reflect/generic/Symbols.scala	/^    final def isLazyAccessor = isLazy && lazyAccessor != NoSymbol$/;"	m
isLeaf	scala/xml/PrettyPrinter.scala	/^    def isLeaf(l: Node) = l match {$/;"	m
isLeft	scala/Either.scala	/^  def isLeft = false$/;"	m
isLeft	scala/Either.scala	/^  def isLeft = true$/;"	m
isLeft	scala/Either.scala	/^  def isLeft: Boolean$/;"	m
isLetter	scala/runtime/RichChar.scala	/^  def isLetter: Boolean                 = Character.isLetter(self)$/;"	m
isLetterOrDigit	scala/runtime/RichChar.scala	/^  def isLetterOrDigit: Boolean          = Character.isLetterOrDigit(self)$/;"	m
isLifted	scala/reflect/generic/HasFlags.scala	/^  def isLifted         = hasFlag(LIFTED)$/;"	m
isLocal	scala/reflect/generic/HasFlags.scala	/^    final def isLocal: Boolean = owner.isTerm$/;"	m
isLocked	scala/actors/threadpool/locks/ReentrantLock.java	/^        public synchronized boolean isLocked() {$/;"	m	class:ReentrantLock.Sync
isLocked	scala/actors/threadpool/locks/ReentrantLock.java	/^    public boolean isLocked() {$/;"	m	class:ReentrantLock
isLongRange	scala/reflect/generic/Constants.scala	/^    def isLongRange: Boolean  = ByteTag <= tag && tag <= LongTag$/;"	m
isLowSurrogate	scala/runtime/RichChar.scala	/^  def isLowSurrogate: Boolean           = Character.isLowSurrogate(self)$/;"	m
isLower	scala/runtime/RichChar.scala	/^  def isLower: Boolean                  = Character.isLowerCase(self)$/;"	m
isLowerCase	scala/runtime/RichChar.scala	/^  def isLowerCase: Boolean = isLower$/;"	m
isMac	scala/util/Properties.scala	/^  def isMac                 = javaVendor startsWith "Apple"$/;"	m
isMethod	scala/reflect/generic/HasFlags.scala	/^    final def isMethod = isTerm && hasFlag(METHOD)$/;"	m
isMethod	scala/reflect/generic/Symbols.scala	/^    final def isMethod = isTerm && hasFlag(METHOD)$/;"	m
isMethodFlag	scala/reflect/generic/UnPickler.scala	/^      def isMethodFlag = (flags & METHOD) != 0L$/;"	m
isMirrored	scala/runtime/RichChar.scala	/^  def isMirrored: Boolean               = Character.isMirrored(self)$/;"	m
isMixed	scala/xml/dtd/ContentModel.scala	/^  def isMixed(cm: ContentModel) = cond(cm) { case _: MIXED => true }$/;"	m
isModule	scala/reflect/generic/HasFlags.scala	/^    final def isModule = isTerm && hasFlag(MODULE)$/;"	m
isModule	scala/reflect/generic/Symbols.scala	/^    final def isModule = isTerm && hasFlag(MODULE)$/;"	m
isModuleClass	scala/reflect/generic/Symbols.scala	/^    final def isModuleClass = isClass && hasFlag(MODULE)$/;"	m
isModuleFlag	scala/reflect/generic/UnPickler.scala	/^      def isModuleFlag = (flags & MODULE) != 0L$/;"	m
isModuleRoot	scala/reflect/generic/UnPickler.scala	/^      def isModuleRoot = (name == moduleRoot.name) && (owner == moduleRoot.owner)$/;"	m
isModuleVar	scala/reflect/generic/HasFlags.scala	/^    final def isModuleVar: Boolean = isVariable && hasFlag(MODULEVAR)$/;"	m
isMutable	scala/reflect/generic/HasFlags.scala	/^  def isMutable   = hasFlag(MUTABLE  )  \/\/ in Modifiers, formerly isVariable$/;"	m
isNaN	scala/reflect/generic/Constants.scala	/^    def isNaN = value match {$/;"	m
isName	scala/xml/parsing/TokenTests.scala	/^  def isName(s: String) =$/;"	m
isNameChar	scala/xml/parsing/TokenTests.scala	/^  def isNameChar(ch: Char) = {$/;"	m
isNameStart	scala/xml/parsing/TokenTests.scala	/^  def isNameStart(ch: Char) = {$/;"	m
isNegInfinity	scala/runtime/RichDouble.scala	/^  def isNegInfinity: Boolean = isInfinity && self < 0.0$/;"	m
isNegInfinity	scala/runtime/RichFloat.scala	/^  def isNegInfinity: Boolean = isInfinity && self < 0.0f$/;"	m
isNewline	scala/io/Source.scala	/^    def isNewline(ch: Char) = ch == '\\r' || ch == '\\n'$/;"	m
isNullable	scala/util/regexp/Base.scala	/^    final lazy val isNullable = true$/;"	l
isNullable	scala/util/regexp/Base.scala	/^    final val isNullable = r1.isNullable$/;"	l
isNullable	scala/util/regexp/Base.scala	/^    final val isNullable = rs exists (_.isNullable)$/;"	l
isNullable	scala/util/regexp/Base.scala	/^    final val isNullable = rs forall (_.isNullable)$/;"	l
isNullable	scala/util/regexp/Base.scala	/^    val isNullable: Boolean$/;"	l
isNullable	scala/util/regexp/PointedHedgeExp.scala	/^    final val isNullable = false$/;"	l
isNullable	scala/util/regexp/PointedHedgeExp.scala	/^    final val isNullable = r1.isNullable && r2.isNullable \/\/?$/;"	l
isNullable	scala/util/regexp/WordExp.scala	/^    final lazy val isNullable = false$/;"	l
isNumeric	scala/reflect/generic/Constants.scala	/^    def isNumeric: Boolean    = ByteTag <= tag && tag <= DoubleTag$/;"	m
isNumericValueClass	scala/reflect/generic/StandardDefinitions.scala	/^    def isNumericValueClass(sym: Symbol): Boolean$/;"	m
isOkToRun	scala/collection/parallel/Tasks.scala	/^      var isOkToRun = false$/;"	l
isOverflow	scala/collection/immutable/NumericRange.scala	/^      val isOverflow = longCount == 0 && num.lt(num.plus(start, step), end) == upward$/;"	l
isOverloaded	scala/reflect/generic/Symbols.scala	/^    final def isOverloaded = hasFlag(OVERLOADED)$/;"	m
isOverride	scala/reflect/generic/HasFlags.scala	/^  def isOverride  = hasFlag(OVERRIDE )$/;"	m
isPackage	scala/reflect/generic/HasFlags.scala	/^    final def isPackage = isModule && hasFlag(PACKAGE)    $/;"	m
isPackage	scala/reflect/generic/Symbols.scala	/^    final def isPackage = isModule && hasFlag(PACKAGE)$/;"	m
isPackageClass	scala/reflect/generic/Symbols.scala	/^    final def isPackageClass = isClass && hasFlag(PACKAGE)$/;"	m
isParIterable	scala/collection/parallel/package.scala	/^    def isParIterable = t.isInstanceOf[ParIterable[_]]$/;"	m
isParIterable	scala/collection/parallel/package.scala	/^    def isParIterable: Boolean$/;"	m
isParSeq	scala/collection/parallel/package.scala	/^    def isParSeq = t.isInstanceOf[ParSeq[_]]$/;"	m
isParSeq	scala/collection/parallel/package.scala	/^    def isParSeq: Boolean$/;"	m
isParallel	scala/collection/parallel/package.scala	/^    def isParallel = bf.isInstanceOf[Parallel]$/;"	m
isParallel	scala/collection/parallel/package.scala	/^    def isParallel = t.isInstanceOf[Parallel]$/;"	m
isParallel	scala/collection/parallel/package.scala	/^    def isParallel: Boolean$/;"	m
isParamAccessor	scala/reflect/generic/HasFlags.scala	/^  def isParamAccessor  = hasFlag(PARAMACCESSOR)$/;"	m
isParameter	scala/reflect/generic/HasFlags.scala	/^  def isParameter = hasFlag(PARAM)$/;"	m
isParameterEntity	scala/xml/parsing/MarkupParser.scala	/^    var isParameterEntity = false$/;"	l
isPosInfinity	scala/runtime/RichDouble.scala	/^  def isPosInfinity: Boolean = isInfinity && self > 0.0$/;"	m
isPosInfinity	scala/runtime/RichFloat.scala	/^  def isPosInfinity: Boolean = isInfinity && self > 0.0f$/;"	m
isPrefixed	scala/xml/Attribute.scala	/^  def isPrefixed: Boolean = pre != null$/;"	m
isPrefixed	scala/xml/MetaData.scala	/^  def isPrefixed: Boolean$/;"	m
isPrefixed	scala/xml/Null.scala	/^  def isPrefixed = false$/;"	m
isPrivate	scala/reflect/generic/HasFlags.scala	/^  def isPrivate   = hasFlag(PRIVATE  )$/;"	m
isPrivateLocal	scala/reflect/generic/HasFlags.scala	/^  def isPrivateLocal   = hasAllFlags(PRIVATE | LOCAL)$/;"	m
isProbablePrime	scala/math/BigInt.scala	/^  def isProbablePrime(certainty: Int) = this.bigInteger.isProbablePrime(certainty)$/;"	m
isProtected	scala/reflect/generic/HasFlags.scala	/^  def isProtected = hasFlag(PROTECTED)$/;"	m
isProtectedLocal	scala/reflect/generic/HasFlags.scala	/^  def isProtectedLocal = hasAllFlags(PROTECTED | LOCAL)$/;"	m
isPubIDChar	scala/xml/parsing/TokenTests.scala	/^  def isPubIDChar(ch: Char): Boolean =$/;"	m
isPublic	scala/reflect/generic/HasFlags.scala	/^  def isPublic = hasNoFlags(PRIVATE | PROTECTED) && !hasAccessBoundary$/;"	m
isQueued	scala/actors/threadpool/locks/ReentrantLock.java	/^        public boolean isQueued(Thread thread) {$/;"	m	class:ReentrantLock.Sync
isQueued	scala/actors/threadpool/locks/ReentrantLock.java	/^        public synchronized boolean isQueued(Thread thread) {$/;"	m	class:ReentrantLock.FairSync
isReachable	scala/actors/remote/TcpService.scala	/^  def isReachable(node: Node): Boolean =$/;"	m
isRefinementClass	scala/reflect/generic/Symbols.scala	/^    final def isRefinementClass = isClass && name == tpnme.REFINE_CLASS_NAME$/;"	m
isReleasable	scala/actors/Actor.scala	/^    def isReleasable =$/;"	m
isReleasable	scala/actors/scheduler/ForkJoinScheduler.scala	/^      def isReleasable() = blocker.isReleasable$/;"	m
isReleasable	scala/concurrent/ManagedBlocker.scala	/^  def isReleasable: Boolean$/;"	m
isRight	scala/Either.scala	/^  def isRight = false$/;"	m
isRight	scala/Either.scala	/^  def isRight = true$/;"	m
isRight	scala/Either.scala	/^  def isRight: Boolean$/;"	m
isRoot	scala/reflect/generic/Symbols.scala	/^    final def isRoot = isPackageClass && owner == NoSymbol $/;"	m
isRootPackage	scala/reflect/generic/Symbols.scala	/^    final def isRootPackage = isPackage && owner == NoSymbol$/;"	m
isRunning	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private static boolean isRunning(int c) {$/;"	m	class:ThreadPoolExecutor	file:
isRunningOrShutdown	scala/actors/threadpool/ThreadPoolExecutor.java	/^    final boolean isRunningOrShutdown(boolean shutdownOK) {$/;"	m	class:ThreadPoolExecutor
isScalaClass	scala/runtime/ScalaRunTime.scala	/^    def isScalaClass(x: AnyRef) =$/;"	m
isSealed	scala/reflect/generic/HasFlags.scala	/^  def isSealed = hasFlag(SEALED)$/;"	m
isSet	scala/actors/Future.scala	/^  def isSet = !fvalue.isEmpty$/;"	m
isSet	scala/actors/Future.scala	/^  def isSet: Boolean$/;"	m
isSet	scala/actors/ReactorCanReply.scala	/^      def isSet =$/;"	m
isSet	scala/concurrent/SyncVar.scala	/^  def isSet: Boolean = synchronized {$/;"	m
isSet	scala/sys/BooleanProp.scala	/^    val isSet = value$/;"	l
isSet	scala/sys/Prop.scala	/^  def isSet: Boolean$/;"	m
isSet	scala/sys/PropImpl.scala	/^  def isSet    = underlying contains key$/;"	m
isShortRange	scala/reflect/generic/Constants.scala	/^    def isShortRange: Boolean = isIntRange && Short.MinValue <= intValue && intValue <= Short.MaxValue$/;"	m
isShutdown	scala/actors/threadpool/ExecutorService.java	/^    boolean isShutdown();$/;"	m	interface:ExecutorService
isShutdown	scala/actors/threadpool/Executors.java	/^        public boolean isShutdown() { return e.isShutdown(); }$/;"	m	class:Executors.DelegatedExecutorService
isShutdown	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public boolean isShutdown() {$/;"	m	class:ThreadPoolExecutor
isSink	scala/util/automata/DetWordAutom.scala	/^  def isSink(q: Int)         = delta(q).isEmpty && default(q) == q$/;"	m
isSmaller	scala/collection/immutable/RedBlack.scala	/^  def isSmaller(x: A, y: A): Boolean$/;"	m
isSmaller	scala/collection/immutable/TreeMap.scala	/^  def isSmaller(x: A, y: A) = ordering.lt(x, y)$/;"	m
isSmaller	scala/collection/immutable/TreeSet.scala	/^  def isSmaller(x: A, y: A) = compare(x,y) < 0$/;"	m
isSourceMethod	scala/reflect/generic/Symbols.scala	/^    final def isSourceMethod = isMethod && !hasFlag(STABLE) \/\/ exclude all accessors!!!$/;"	m
isSpace	scala/xml/parsing/FactoryAdapter.scala	/^        val isSpace = c.isWhitespace$/;"	l
isSpace	scala/xml/parsing/TokenTests.scala	/^  final def isSpace(ch: Char): Boolean = ch match {$/;"	m
isSpace	scala/xml/parsing/TokenTests.scala	/^  final def isSpace(cs: Seq[Char]): Boolean = cs.nonEmpty && (cs forall isSpace)$/;"	m
isSpaceChar	scala/runtime/RichChar.scala	/^  def isSpaceChar: Boolean              = Character.isSpaceChar(self)$/;"	m
isStable	scala/reflect/generic/HasFlags.scala	/^    final def isStable =$/;"	m
isStatic	scala/reflect/generic/HasFlags.scala	/^    final def isStatic: Boolean =$/;"	m
isStrictSplitterCollection	scala/collection/parallel/ParIterableLike.scala	/^  def isStrictSplitterCollection = true$/;"	m
isSuperAccessor	scala/reflect/generic/HasFlags.scala	/^  def isSuperAccessor  = hasFlag(SUPERACCESSOR)$/;"	m
isSurrogate	scala/runtime/RichChar.scala	/^  def isSurrogate: Boolean              = isHighSurrogate || isLowSurrogate$/;"	m
isSynthetic	scala/reflect/generic/HasFlags.scala	/^  def isSynthetic = hasFlag(SYNTHETIC)$/;"	m
isTerm	scala/reflect/generic/Symbols.scala	/^    def isTerm         = false  \/\/ to be overridden$/;"	m
isTermName	scala/reflect/generic/Names.scala	/^  def isTermName(name: Name): Boolean$/;"	m
isTerminated	scala/actors/threadpool/ExecutorService.java	/^    boolean isTerminated();$/;"	m	interface:ExecutorService
isTerminated	scala/actors/threadpool/Executors.java	/^        public boolean isTerminated() { return e.isTerminated(); }$/;"	m	class:Executors.DelegatedExecutorService
isTerminated	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public boolean isTerminated() {$/;"	m	class:ThreadPoolExecutor
isTerminating	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public boolean isTerminating() {$/;"	m	class:ThreadPoolExecutor
isTitleCase	scala/runtime/RichChar.scala	/^  def isTitleCase: Boolean              = Character.isTitleCase(self)$/;"	m
isTrait	scala/reflect/generic/HasFlags.scala	/^          def isTrait: Boolean = isClass && hasFlag(TRAIT) \/\/ refined later for virtual classes.$/;"	m
isTrait	scala/reflect/generic/HasFlags.scala	/^  def isTrait        = hasFlag(TRAIT) && !hasFlag(PARAM)$/;"	m
isTraversableAgain	scala/collection/GenTraversableLike.scala	/^  final def isTraversableAgain = true$/;"	m
isTraversableAgain	scala/collection/GenTraversableOnce.scala	/^  def isTraversableAgain: Boolean$/;"	m
isTraversableAgain	scala/collection/Iterator.scala	/^  def isTraversableAgain = false$/;"	m
isTraversableAgain	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def isTraversableAgain: Boolean$/;"	m
isTrivial	scala/util/continuations/ControlContext.scala	/^  final def isTrivial = fun eq null$/;"	m
isTuple	scala/runtime/ScalaRunTime.scala	/^    def isTuple(x: AnyRef) =$/;"	m
isType	scala/reflect/generic/Symbols.scala	/^    def isType         = false  \/\/ to be overridden$/;"	m
isTypeName	scala/reflect/generic/Names.scala	/^  def isTypeName(name: Name): Boolean$/;"	m
isTypeParameter	scala/reflect/generic/Symbols.scala	/^    final def isTypeParameter = isType && isParameter && !isSkolem$/;"	m
isUnicodeIdentifierPart	scala/runtime/RichChar.scala	/^  def isUnicodeIdentifierPart: Boolean  = Character.isUnicodeIdentifierPart(self)$/;"	m
isUnicodeIdentifierStart	scala/runtime/RichChar.scala	/^  def isUnicodeIdentifierStart: Boolean = Character.isUnicodeIdentifierStart(self)$/;"	m
isUpper	scala/runtime/RichChar.scala	/^  def isUpper: Boolean                  = Character.isUpperCase(self)$/;"	m
isUpperCase	scala/runtime/RichChar.scala	/^  def isUpperCase: Boolean = isUpper$/;"	m
isValDef	scala/Enumeration.scala	/^    def isValDef(m: JMethod) = fields exists (fd => fd.getName == m.getName && fd.getType == m.getReturnType)$/;"	m
isValidByte	scala/math/ScalaNumericConversions.scala	/^  def isValidByte  = isWhole && (toInt == toByte)$/;"	m
isValidChar	scala/math/ScalaNumericConversions.scala	/^  def isValidChar  = isWhole && (toInt >= Char.MinValue && toInt <= Char.MaxValue)$/;"	m
isValidIANAEncoding	scala/xml/parsing/TokenTests.scala	/^  def isValidIANAEncoding(ianaEncoding: Seq[Char]) = {$/;"	m
isValidInt	scala/math/ScalaNumericConversions.scala	/^  def isValidInt   = isWhole && (toLong == toInt)$/;"	m
isValidShort	scala/math/ScalaNumericConversions.scala	/^  def isValidShort = isWhole && (toInt == toShort)$/;"	m
isValidating	scala/xml/parsing/MarkupHandler.scala	/^  val isValidating: Boolean = false$/;"	l
isValueClass	scala/reflect/generic/StandardDefinitions.scala	/^    def isValueClass(sym: Symbol): Boolean$/;"	m
isValueClass	scala/runtime/ScalaRunTime.scala	/^  def isValueClass(clazz: Class[_]) = clazz.isPrimitive() $/;"	m
isVarargsMethod	scala/reflect/generic/Symbols.scala	/^    final def isVarargsMethod = isMethod && hasFlag(VARARGS)$/;"	m
isWaiting	scala/actors/threadpool/helpers/FIFOWaitQueue.java	/^    public boolean isWaiting(Thread thread) {$/;"	m	class:FIFOWaitQueue
isWaiting	scala/actors/threadpool/helpers/WaitQueue.java	/^    public abstract boolean isWaiting(Thread thread);$/;"	m	class:WaitQueue
isWhitespace	scala/runtime/RichChar.scala	/^  def isWhitespace: Boolean             = Character.isWhitespace(self)$/;"	m
isWhole	scala/math/ScalaNumber.java	/^  protected abstract boolean isWhole();$/;"	m	class:ScalaNumber
isWhole	scala/runtime/RichInt.scala	/^  def isWhole() = true$/;"	m
isWhole	scala/runtime/ScalaNumberProxy.scala	/^  def isWhole() = false$/;"	m
isWhole	scala/runtime/ScalaNumberProxy.scala	/^  def isWhole() = true$/;"	m
isWin	scala/util/Properties.scala	/^  def isWin                 = osName startsWith "Windows"$/;"	m
isWriteLocked	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized boolean isWriteLocked() {$/;"	m	class:ReentrantReadWriteLock.Sync
isWriteLocked	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    public boolean isWriteLocked() {$/;"	m	class:ReentrantReadWriteLock
isWriteLockedByCurrentThread	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized boolean isWriteLockedByCurrentThread() {$/;"	m	class:ReentrantReadWriteLock.Sync
isWriteLockedByCurrentThread	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    public boolean isWriteLockedByCurrentThread() {$/;"	m	class:ReentrantReadWriteLock
it	scala/collection/IterableLike.scala	/^      val it = iterator drop lo$/;"	l
it	scala/collection/IterableLike.scala	/^      val it = iterator$/;"	l
it	scala/collection/IterableLike.scala	/^    val it = iterator$/;"	l
it	scala/collection/Iterator.scala	/^    lazy val it = that.toIterator$/;"	l
it	scala/collection/SeqLike.scala	/^    val it = iterator$/;"	l
it	scala/collection/SeqLike.scala	/^    val it = reverseIterator$/;"	l
it	scala/collection/SeqLike.scala	/^    var it = iterator.drop(from)$/;"	l
it	scala/collection/TraversableLike.scala	/^    val it = Iterator.iterate(thisCollection)(f) takeWhile (x => !x.isEmpty)$/;"	l
it	scala/collection/mutable/OpenHashMap.scala	/^    val it = new OpenHashMap[Key, Value]$/;"	l
it	scala/collection/parallel/ParIterableLike.scala	/^    val it = splitter drop from$/;"	l
it	scala/collection/parallel/ParIterableLike.scala	/^    val it = splitter drop n$/;"	l
it	scala/collection/parallel/ParIterableLike.scala	/^    val it = splitter$/;"	l
it	scala/collection/parallel/package.scala	/^      val it = t.toIterator$/;"	l
it	scala/collection/script/Message.scala	/^    var it = this.iterator$/;"	l
it	scala/util/matching/Regex.scala	/^    val it = new Regex.MatchIterator(target, this, groupNames).replacementData$/;"	l
it	scala/xml/PrettyPrinter.scala	/^             val it = sq.iterator;$/;"	l
it	scala/xml/Utility.scala	/^      val it = children.iterator$/;"	l
it	scala/xml/Utility.scala	/^    val it = value.iterator$/;"	l
it	scala/xml/parsing/FactoryAdapter.scala	/^      var it = ch.slice(offset, offset + length).iterator$/;"	l
it	scala/xml/parsing/MarkupParserCommon.scala	/^    val it = attval.iterator.buffered$/;"	l
it	scala/xml/persistent/SetStorage.scala	/^    val it = super.initialNodes$/;"	l
item	scala/actors/threadpool/LinkedBlockingQueue.java	/^        E item;$/;"	f	class:LinkedBlockingQueue.Node
item	scala/actors/threadpool/SynchronousQueue.java	/^        Object item;$/;"	f	class:SynchronousQueue.Node
iter	scala/actors/scheduler/ForkJoinScheduler.scala	/^    val iter = drainedTasks.iterator()$/;"	l
iter	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^    val iter = drainedTasks.iterator()$/;"	l
iter	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^    val iter = executor.workers.iterator()$/;"	l
iter	scala/collection/MapLike.scala	/^    val iter = self.iterator$/;"	l
iter	scala/collection/mutable/HashMap.scala	/^    val iter = entriesIterator$/;"	l
iter	scala/io/Source.scala	/^    lazy val iter: BufferedIterator[Char] = Source.this.iter.buffered$/;"	l
iter	scala/io/Source.scala	/^    val iter = iterable.iterator$/;"	l
iter	scala/util/parsing/ast/Binders.scala	/^      val iter = this.iterator.zipWithIndex$/;"	l
iter	scala/xml/parsing/MarkupParser.scala	/^      val iter = queue.iterator ++ new Iterator[Char] {$/;"	l
iter	scala/xml/parsing/MarkupParser.scala	/^    val iter = new Iterator[Char] {$/;"	l
iterTable	scala/collection/mutable/HashTable.scala	/^    val iterTable = table$/;"	l
iterableAsScalaIterable	scala/collection/JavaConversions.scala	/^  implicit def iterableAsScalaIterable[A](i : jl.Iterable[A]): Iterable[A] = i match {$/;"	m
iterableAsScalaIterableConverter	scala/collection/JavaConverters.scala	/^  implicit def iterableAsScalaIterableConverter[A](i : jl.Iterable[A]): AsScala[Iterable[A]] = $/;"	m
iterate	scala/Array.scala	/^  def iterate[T: ClassManifest](start: T, len: Int)(f: T => T): Array[T] = {$/;"	m
iterate	scala/collection/Iterator.scala	/^  def iterate[T](start: T)(f: T => T): Iterator[T] = new Iterator[T] {$/;"	m
iterate	scala/collection/generic/GenTraversableFactory.scala	/^  def iterate[A](start: A, len: Int)(f: A => A): CC[A] = {$/;"	m
iterate	scala/collection/immutable/Stream.scala	/^  def iterate[A](start: A)(f: A => A): Stream[A] = cons(start, iterate(f(start))(f))$/;"	m
iterate	scala/xml/MetaData.scala	/^    def iterate(md: MetaData, normalized_attribs: MetaData, set: Set[String]): MetaData = {$/;"	m
iterator	scala/Enumeration.scala	/^    def iterator = ids.iterator map thisenum.apply$/;"	m
iterator	scala/Option.scala	/^  def iterator: Iterator[A] = $/;"	m
iterator	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public Iterator<E> iterator() {$/;"	m	class:LinkedBlockingQueue
iterator	scala/actors/threadpool/SynchronousQueue.java	/^    public Iterator iterator() {$/;"	m	class:SynchronousQueue
iterator	scala/collection/BitSetLike.scala	/^  def iterator = new Iterator[Int] {$/;"	m
iterator	scala/collection/GenIterableLike.scala	/^  def iterator: Iterator[A]$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator = forced.iterator$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator = self.iterator ++ rest$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator = self.iterator dropWhile pred$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator = self.iterator filter pred$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator = self.iterator map mapping$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator = self.iterator takeWhile pred$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator: Iterator[(A, B)] = self.iterator zip other.iterator$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator: Iterator[(A1, B)] = $/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator: Iterator[A] = self.iterator.slice(from, until)$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator: Iterator[B] = self.iterator flatMap mapping$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator: Iterator[B]$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    final def iterator: Iterator[Nothing] = Iterator.empty$/;"	m
iterator	scala/collection/GenSetLike.scala	/^  def iterator: Iterator[A]$/;"	m
iterator	scala/collection/IndexedSeqLike.scala	/^  def iterator: Iterator[A] = new Elements(0, length)$/;"	m
iterator	scala/collection/IterableLike.scala	/^  def iterator: Iterator[A]$/;"	m
iterator	scala/collection/IterableViewLike.scala	/^    def iterator: Iterator[B]$/;"	m
iterator	scala/collection/JavaConversions.scala	/^      def iterator = new ju.Iterator[ju.Map.Entry[A, B]] {$/;"	m
iterator	scala/collection/JavaConversions.scala	/^    def iterator = enumerationAsScalaIterator(underlying.keys) map (k => (k, underlying get k))$/;"	m
iterator	scala/collection/JavaConversions.scala	/^    def iterator = new Iterator[(A, B)] {$/;"	m
iterator	scala/collection/JavaConversions.scala	/^    def iterator = new Iterator[(String, String)] {$/;"	m
iterator	scala/collection/JavaConversions.scala	/^    def iterator = new ju.Iterator[A] {$/;"	m
iterator	scala/collection/JavaConversions.scala	/^    def iterator = underlying.iterator$/;"	m
iterator	scala/collection/LinearSeqLike.scala	/^  def iterator: Iterator[A] = new Iterator[A] {$/;"	m
iterator	scala/collection/Map.scala	/^    def iterator                    = underlying.iterator$/;"	m
iterator	scala/collection/MapLike.scala	/^    def iterator = for ((k, v) <- self.iterator) yield (k, f(v))$/;"	m
iterator	scala/collection/MapLike.scala	/^    def iterator = keysIterator$/;"	m
iterator	scala/collection/MapLike.scala	/^    def iterator = self.iterator.filter(kv => p(kv._1))$/;"	m
iterator	scala/collection/MapLike.scala	/^    def iterator = valuesIterator$/;"	m
iterator	scala/collection/MapLike.scala	/^  def iterator: Iterator[(A, B)]$/;"	m
iterator	scala/collection/TraversableView.scala	/^    def iterator: Iterator[A] = Iterator.empty$/;"	m
iterator	scala/collection/immutable/HashMap.scala	/^  def iterator: Iterator[(A,B)] = Iterator.empty$/;"	m
iterator	scala/collection/immutable/HashSet.scala	/^  def iterator: Iterator[A] = Iterator.empty$/;"	m
iterator	scala/collection/immutable/IntMap.scala	/^  def iterator : Iterator[(Int, T)] = this match {$/;"	m
iterator	scala/collection/immutable/ListMap.scala	/^  def iterator: Iterator[(A,B)] =$/;"	m
iterator	scala/collection/immutable/ListSet.scala	/^  def iterator: Iterator[A] = new Iterator[A] {$/;"	m
iterator	scala/collection/immutable/LongMap.scala	/^  def iterator: Iterator[(Long, T)] = this match {$/;"	m
iterator	scala/collection/immutable/Map.scala	/^    def iterator = Iterator((key1, value1))$/;"	m
iterator	scala/collection/immutable/Map.scala	/^    def iterator = Iterator((key1, value1), (key2, value2))$/;"	m
iterator	scala/collection/immutable/Map.scala	/^    def iterator = Iterator((key1, value1), (key2, value2), (key3, value3))$/;"	m
iterator	scala/collection/immutable/Map.scala	/^    def iterator = Iterator((key1, value1), (key2, value2), (key3, value3), (key4, value4))$/;"	m
iterator	scala/collection/immutable/Map.scala	/^    def iterator: Iterator[(A, B)] = Iterator.empty$/;"	m
iterator	scala/collection/immutable/Map.scala	/^    def iterator: Iterator[(Any, Nothing)] = Iterator.empty$/;"	m
iterator	scala/collection/immutable/MapLike.scala	/^    def iterator = for ((k, v) <- self.iterator) yield (k, f(v))$/;"	m
iterator	scala/collection/immutable/MapLike.scala	/^    def iterator = self.iterator.filter(kv => p(kv._1))$/;"	m
iterator	scala/collection/immutable/RedBlack.scala	/^    def iterator: Iterator[(A, B)] = $/;"	m
iterator	scala/collection/immutable/RedBlack.scala	/^    def iterator: Iterator[(A, B)]$/;"	m
iterator	scala/collection/immutable/RedBlack.scala	/^    def iterator: Iterator[(A, Nothing)] = Iterator.empty$/;"	m
iterator	scala/collection/immutable/Set.scala	/^    def iterator: Iterator[A] = $/;"	m
iterator	scala/collection/immutable/Set.scala	/^    def iterator: Iterator[A] = Iterator.empty$/;"	m
iterator	scala/collection/immutable/Set.scala	/^    def iterator: Iterator[Any] = Iterator.empty$/;"	m
iterator	scala/collection/immutable/TreeMap.scala	/^  def iterator: Iterator[(A, B)] = tree.toStream.iterator$/;"	m
iterator	scala/collection/immutable/TreeSet.scala	/^  def iterator: Iterator[A] = tree.toStream.iterator map (_._1)$/;"	m
iterator	scala/collection/interfaces/IterableMethods.scala	/^  def iterator: Iterator[A]$/;"	m
iterator	scala/collection/interfaces/MapMethods.scala	/^  def iterator: Iterator[(A, B)]$/;"	m
iterator	scala/collection/mutable/ArrayStack.scala	/^  def iterator: Iterator[T] = new Iterator[T] {$/;"	m
iterator	scala/collection/mutable/DefaultMapModel.scala	/^  def iterator = entries map {e => (e.key, e.value)}$/;"	m
iterator	scala/collection/mutable/FlatHashTable.scala	/^  def iterator = new Iterator[A] {$/;"	m
iterator	scala/collection/mutable/HashMap.scala	/^  def iterator = entriesIterator map {e => (e.key, e.value)}$/;"	m
iterator	scala/collection/mutable/History.scala	/^  def iterator: Iterator[(Pub, Evt)] = log.iterator$/;"	m
iterator	scala/collection/mutable/ImmutableMapAdaptor.scala	/^  def iterator: Iterator[(A, B)] = imap.iterator$/;"	m
iterator	scala/collection/mutable/ImmutableSetAdaptor.scala	/^  def iterator: Iterator[A] = set.iterator$/;"	m
iterator	scala/collection/mutable/LinkedHashMap.scala	/^  def iterator: Iterator[(A, B)] = new Iterator[(A, B)] {$/;"	m
iterator	scala/collection/mutable/ListMap.scala	/^  def iterator: Iterator[(A, B)] = elems.iterator$/;"	m
iterator	scala/collection/mutable/OpenHashMap.scala	/^  def iterator = new Iterator[(Key, Value)]{$/;"	m
iterator	scala/collection/mutable/UnrolledBuffer.scala	/^  def iterator = new Iterator[T] {$/;"	m
iterator	scala/collection/parallel/ParIterableLike.scala	/^  def iterator: Splitter[T] = splitter$/;"	m
iterator	scala/collection/parallel/ParIterableView.scala	/^    def iterator: Iterator[T] = Iterator.empty$/;"	m
iterator	scala/collection/parallel/ParSeqView.scala	/^    def iterator: Iterator[T] = Iterator.empty$/;"	m
iterator	scala/sys/SystemProperties.scala	/^  def iterator: Iterator[(String, String)] =$/;"	m
iterator	scala/util/parsing/ast/Binders.scala	/^    def iterator = substitution.keysIterator$/;"	m
iterator	scala/xml/MetaData.scala	/^  def iterator: Iterator[MetaData] = Iterator.single(this) ++ next.iterator$/;"	m
iters	scala/collection/parallel/mutable/ParHashMap.scala	/^  var iters = 0$/;"	l
its	scala/collection/TraversableOnce.scala	/^      val its = travs.toIterator$/;"	l
itsize	scala/collection/parallel/ParSeqLike.scala	/^      val itsize = pit.remaining$/;"	l
iv	scala/runtime/ScalaRunTime.scala	/^    val iv = dv.toInt$/;"	l
iv	scala/runtime/ScalaRunTime.scala	/^    val iv = fv.toInt$/;"	l
ix	scala/util/automata/SubsetConstruction.scala	/^    var ix = 0$/;"	l
ix	scala/xml/dtd/Decl.scala	/^    var ix  = tmp.indexOf('%');$/;"	l
iz	scala/xml/dtd/Decl.scala	/^      val iz = tmp.indexOf(';', ix);$/;"	l
j	scala/Array.scala	/^    var j = destPos$/;"	l
j	scala/collection/IndexedSeqOptimized.scala	/^      var j = 0$/;"	l
j	scala/collection/IndexedSeqOptimized.scala	/^      var j = that.length - 1$/;"	l
j	scala/collection/IndexedSeqOptimized.scala	/^    var j = start$/;"	l
j	scala/collection/SeqLike.scala	/^        var j = idxs.length - 1$/;"	l
j	scala/collection/SeqLike.scala	/^    val j = that.iterator$/;"	l
j	scala/collection/mutable/OpenHashMap.scala	/^    var j = hash;$/;"	l
j	scala/collection/mutable/PriorityQueue.scala	/^      var j = 2 * k$/;"	l
j	scala/collection/parallel/RemainsIterator.scala	/^    var j = 0$/;"	l
j	scala/collection/parallel/mutable/ParArray.scala	/^        var j = from$/;"	l
j	scala/collection/parallel/mutable/ParArray.scala	/^      var j = from$/;"	l
j	scala/collection/parallel/mutable/ParArray.scala	/^      var j = i$/;"	l
j	scala/collection/parallel/mutable/ParArray.scala	/^      var j = ntil - 1$/;"	l
j	scala/collection/parallel/mutable/ParArray.scala	/^      var j = srcfrom$/;"	l
j	scala/collection/parallel/mutable/ParArray.scala	/^      var j = start$/;"	l
j	scala/collection/parallel/mutable/ParArray.scala	/^      var j = startpos$/;"	l
j	scala/reflect/generic/ByteCodecs.scala	/^    var j = 0$/;"	l
j	scala/util/MurmurHash.scala	/^    var j = 0$/;"	l
j	scala/util/Sorting.scala	/^          var j = i$/;"	l
j	scala/util/parsing/combinator/RegexParsers.scala	/^      var j = start$/;"	l
j	scala/xml/dtd/ElementValidator.scala	/^      val j = exc.length$/;"	l
javaBigDecimal2bigDecimal	scala/math/BigDecimal.scala	/^  implicit def javaBigDecimal2bigDecimal(x: BigDec): BigDecimal = apply(x)$/;"	m
javaClassPath	scala/util/Properties.scala	/^  def javaClassPath         = propOrEmpty("java.class.path")$/;"	m
javaHome	scala/util/Properties.scala	/^  def javaHome              = propOrEmpty("java.home")$/;"	m
javaVendor	scala/util/Properties.scala	/^  def javaVendor            = propOrEmpty("java.vendor")$/;"	m
javaVersion	scala/util/Properties.scala	/^  def javaVersion           = propOrEmpty("java.version")$/;"	m
javaVmArguments	scala/sys/process/package.scala	/^    def javaVmArguments: List[String] = {$/;"	m
javaVmInfo	scala/util/Properties.scala	/^  def javaVmInfo            = propOrEmpty("java.vm.info")$/;"	m
javaVmName	scala/util/Properties.scala	/^  def javaVmName            = propOrEmpty("java.vm.name")$/;"	m
javaVmVendor	scala/util/Properties.scala	/^  def javaVmVendor          = propOrEmpty("java.vm.vendor")$/;"	m
javaVmVersion	scala/util/Properties.scala	/^  def javaVmVersion         = propOrEmpty("java.vm.version")$/;"	m
jn	scala/collection/generic/Sorted.scala	/^      val jn = j.next;$/;"	l
join	scala/collection/immutable/IntMap.scala	/^  def join[T](p1 : Int, t1 : IntMap[T], p2 : Int, t2 : IntMap[T]) : IntMap[T] = {$/;"	m
join	scala/collection/immutable/LongMap.scala	/^  def join[T](p1 : Long, t1 : LongMap[T], p2 : Long, t2 : LongMap[T]) : LongMap[T] = {$/;"	m
joinLeft	scala/Either.scala	/^  def joinLeft[A, B](es: Either[Either[A, B], B]) =$/;"	m
joinLeft	scala/Either.scala	/^  def joinLeft[A1 >: A, B1 >: B, C](implicit ev: A1 <:< Either[C, B1]): Either[C, B1] = this match {$/;"	m
joinRight	scala/Either.scala	/^  def joinRight[A, B](es: Either[A, Either[A, B]]) =$/;"	m
joinRight	scala/Either.scala	/^  def joinRight[A1 >: A, B1 >: B, C](implicit ev: B1 <:< Either[A1, C]): Either[A1, C] = this match {$/;"	m
jpb	scala/sys/process/Process.scala	/^    val jpb = new JProcessBuilder(command.toArray: _*)$/;"	l
jsonArray	scala/util/parsing/json/Parser.scala	/^  def jsonArray  = "[" ~> repsep(value, ",") <~ "]" ^^ { case vals : List[_] => JSONArray(vals) }$/;"	m
jsonObj	scala/util/parsing/json/Parser.scala	/^  def jsonObj    = "{" ~> repsep(objEntry, ",") <~ "}" ^^ { case vals : List[_] => JSONObject(Map(vals : _*)) }$/;"	m
jumps	scala/collection/immutable/NumericRange.scala	/^      val jumps     = num.toLong(num.quot(diff, step))$/;"	l
k	scala/collection/SeqLike.scala	/^        var k = 1$/;"	l
k	scala/collection/mutable/PriorityQueue.scala	/^    var k: Int = m$/;"	l
k	scala/collection/parallel/mutable/ParArray.scala	/^      var k = destfrom$/;"	l
k	scala/collection/parallel/mutable/ParArray.scala	/^      var k = targfrom + srcuntil - srcfrom - 1$/;"	l
k	scala/runtime/ScalaRunTime.scala	/^      var k = startMagicB$/;"	l
k	scala/util/MurmurHash.scala	/^    var k = hiddenMagicB$/;"	l
k	scala/util/Random.scala	/^      val k = nextInt(n)$/;"	l
k	scala/util/Sorting.scala	/^      var k, t_lo = lo$/;"	l
k	scala/xml/dtd/ContentModelParser.scala	/^    var k = List( p );$/;"	l
k	scala/xml/dtd/ContentModelParser.scala	/^    var k = List(p);$/;"	l
keepAliveTime	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private volatile long keepAliveTime;$/;"	f	class:ThreadPoolExecutor	file:
keepAliveTime	scala/concurrent/TaskRunners.scala	/^    val keepAliveTime = 60000L$/;"	l
kern	scala/actors/remote/RemoteActor.scala	/^    val kern = serv.kernel$/;"	l
kernel	scala/actors/remote/RemoteActor.scala	/^    val kernel = kernels.get(Actor.self) match {$/;"	l
kernel	scala/actors/remote/Service.scala	/^  val kernel = new NetKernel(this)$/;"	l
key	scala/collection/TraversableLike.scala	/^      val key = f(elem)$/;"	l
key	scala/collection/immutable/HashMap.scala	/^        val key = in.readObject().asInstanceOf[A]$/;"	l
key	scala/collection/immutable/RedBlack.scala	/^    def key: A$/;"	m
key	scala/collection/mutable/HashEntry.scala	/^  val key: A$/;"	l
key	scala/sys/Prop.scala	/^  def key: String$/;"	m
key	scala/xml/Attribute.scala	/^  val key: String$/;"	l
key	scala/xml/MetaData.scala	/^      lazy val key = getUniversalKey(md, scope)$/;"	l
key	scala/xml/MetaData.scala	/^  def key: String$/;"	m
key	scala/xml/Null.scala	/^  def key = null$/;"	m
key	scala/xml/PrefixedAttribute.scala	/^  val key: String,$/;"	l
key	scala/xml/UnprefixedAttribute.scala	/^  val key: String,$/;"	l
key	scala/xml/Utility.scala	/^    val key = md.key$/;"	l
key	scala/xml/parsing/MarkupParser.scala	/^          val key = qname.substring(prefix.length+1, qname.length);$/;"	l
keyExists	scala/sys/BooleanProp.scala	/^  def keyExists[T](key: String): BooleanProp = new BooleanPropImpl(key, _ => true)$/;"	m
keySet	scala/collection/MapLike.scala	/^  def keySet: Set[A] = new DefaultKeySet$/;"	m
keySet	scala/collection/generic/Sorted.scala	/^  def keySet: SortedSet[K]$/;"	m
keySet	scala/collection/interfaces/MapMethods.scala	/^  def keySet: Set[A]$/;"	m
keys	scala/collection/JavaConversions.scala	/^    def keys: ju.Enumeration[A] = asJavaEnumeration(underlying.keysIterator)$/;"	m
keys	scala/collection/MapLike.scala	/^  def keys: Iterable[A] = keySet$/;"	m
keys	scala/collection/interfaces/MapMethods.scala	/^  def keys: Iterable[A]$/;"	m
keysIterator	scala/collection/MapLike.scala	/^  def keysIterator: Iterator[A] = new Iterator[A] {$/;"	m
keysIterator	scala/collection/interfaces/MapMethods.scala	/^  def keysIterator: Iterator[A]$/;"	m
keyword	scala/reflect/generic/Trees.scala	/^    def keyword: String = this match {$/;"	m
keyword	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^    implicit def keyword(chars: String): Parser[String] = $/;"	m
killNext	scala/actors/Reactor.scala	/^    val killNext = this.kill$/;"	l
ks1	scala/collection/immutable/HashSet.scala	/^        val ks1 = ks - key$/;"	l
kv	scala/collection/parallel/immutable/ParHashMap.scala	/^          val kv = chunkarr(i)$/;"	l
kvs1	scala/collection/immutable/HashMap.scala	/^        val kvs1 = kvs - key$/;"	l
l	scala/collection/Iterator.scala	/^    val l = new PartitionIterator(p)$/;"	l
l	scala/collection/TraversableLike.scala	/^    val l, r = newBuilder$/;"	l
l	scala/collection/mutable/ArrayOps.scala	/^    var l = math.min(len, repr.length)$/;"	l
l	scala/concurrent/MailBox.scala	/^      val l = new LinkedList[A](null, null)$/;"	l
l	scala/io/BytePickle.scala	/^          val l = pe.nextLoc()$/;"	l
l	scala/io/BytePickle.scala	/^          val l = upe.nextLoc$/;"	l
l	scala/util/Sorting.scala	/^          var l = off$/;"	l
l1s	scala/collection/immutable/List.scala	/^          val l1s = ms(l1)$/;"	l
l2s	scala/collection/immutable/List.scala	/^          val l2s = ms(l2)$/;"	l
label	scala/xml/Atom.scala	/^  def label = "#PCDATA"$/;"	m
label	scala/xml/Comment.scala	/^  def label = "#REM"$/;"	m
label	scala/xml/Elem.scala	/^  val label: String,$/;"	l
label	scala/xml/EntityRef.scala	/^  def label = "#ENTITY"$/;"	m
label	scala/xml/Group.scala	/^  def label                           = fail("label")$/;"	m
label	scala/xml/Node.scala	/^  def label: String$/;"	m
label	scala/xml/ProcInstr.scala	/^  final def label   = "#PI"  $/;"	m
label	scala/xml/dtd/ExternalID.scala	/^  def label = "#PI"$/;"	m
labels	scala/util/automata/Inclusion.scala	/^  val labels: Seq[A]$/;"	l
labels	scala/util/automata/NondetWordAutom.scala	/^  val labels: Seq[T]$/;"	l
labels	scala/util/automata/WordBerrySethi.scala	/^          val labels   = WordBerrySethi.this.labels.toList$/;"	l
lang	scala/util/automata/BaseBerrySethi.scala	/^  val lang: Base$/;"	l
lang	scala/xml/XML.scala	/^  val lang      = "lang"$/;"	l
largestPoolSize	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private int largestPoolSize;$/;"	f	class:ThreadPoolExecutor	file:
last	scala/actors/threadpool/LinkedBlockingQueue.java	/^    private transient Node<E> last;$/;"	f	class:LinkedBlockingQueue	file:
last	scala/actors/threadpool/SynchronousQueue.java	/^        private transient Node last;$/;"	f	class:SynchronousQueue.FifoWaitQueue	file:
last	scala/collection/IndexedSeqOptimized.scala	/^  def last: A = if (length > 0) this(length - 1) else super.last$/;"	m
last	scala/collection/LinearSeqOptimized.scala	/^    var last = -1$/;"	l
last	scala/collection/LinearSeqOptimized.scala	/^  def last: A = {$/;"	m
last	scala/collection/TraversableLike.scala	/^  def last: A = {$/;"	m
last	scala/collection/immutable/Range.scala	/^      val last = this.last$/;"	l
last	scala/collection/immutable/RedBlack.scala	/^    def last  = if (right.isEmpty) key else right.last$/;"	m
last	scala/collection/immutable/RedBlack.scala	/^    def last : A$/;"	m
last	scala/collection/immutable/RedBlack.scala	/^    def last = throw new NoSuchElementException("empty map")$/;"	m
last	scala/collection/immutable/StringLike.scala	/^      val last = apply(len - 1)$/;"	l
last	scala/collection/immutable/package.scala	/^      val last = _last$/;"	l
last	scala/collection/interfaces/TraversableMethods.scala	/^  def last: A$/;"	m
last	scala/collection/parallel/RemainsIterator.scala	/^    var last = z$/;"	l
last	scala/collection/parallel/Tasks.scala	/^      var last = spawnSubtasks()$/;"	l
last	scala/collection/parallel/Tasks.scala	/^      var last: TaskImpl[R, Tp] = null$/;"	l
last	scala/collection/parallel/mutable/ParArray.scala	/^      var last = z$/;"	l
last	scala/util/automata/Inclusion.scala	/^    var last = current$/;"	l
last	scala/xml/PrettyPrinter.scala	/^    var last: List[Int] = Nil$/;"	l
last1	scala/collection/mutable/ListBuffer.scala	/^      val last1 = last0$/;"	l
lastExtSymTag	scala/reflect/generic/PickleFormat.scala	/^  final val lastExtSymTag = EXTMODCLASSref$/;"	l
lastIndexOf	scala/collection/GenSeqLike.scala	/^  def lastIndexOf[B >: A](elem: B): Int = lastIndexWhere(elem ==)$/;"	m
lastIndexOf	scala/collection/GenSeqLike.scala	/^  def lastIndexOf[B >: A](elem: B, end: Int): Int = lastIndexWhere(elem ==, end)$/;"	m
lastIndexOf	scala/collection/SeqLike.scala	/^  def lastIndexOf[B]($/;"	m
lastIndexOf	scala/collection/interfaces/SeqMethods.scala	/^  def lastIndexOf[B >: A](elem: B): Int$/;"	m
lastIndexOf	scala/collection/interfaces/SeqMethods.scala	/^  def lastIndexOf[B >: A](elem: B, end: Int): Int$/;"	m
lastIndexOf	scala/collection/mutable/StringBuilder.scala	/^  def lastIndexOf(str: String): Int = underlying.lastIndexOf(str)$/;"	m
lastIndexOf	scala/collection/mutable/StringBuilder.scala	/^  def lastIndexOf(str: String, fromIndex: Int): Int = underlying.lastIndexOf(str, fromIndex)$/;"	m
lastIndexOfSlice	scala/collection/SeqLike.scala	/^  def lastIndexOfSlice[B >: A](that: GenSeq[B]): Int = lastIndexOfSlice(that, length)$/;"	m
lastIndexOfSlice	scala/collection/SeqLike.scala	/^  def lastIndexOfSlice[B >: A](that: GenSeq[B], end: Int): Int = $/;"	m
lastIndexOfSlice	scala/collection/SeqLike.scala	/^  def lastIndexOfSlice[B >: A](that: Seq[B]): Int = lastIndexOfSlice(that: GenSeq[B])$/;"	m
lastIndexOfSlice	scala/collection/SeqLike.scala	/^  def lastIndexOfSlice[B >: A](that: Seq[B], end: Int): Int = lastIndexOfSlice(that: GenSeq[B], end)$/;"	m
lastIndexOfSlice	scala/collection/interfaces/SeqMethods.scala	/^  def lastIndexOfSlice[B >: A](that: Seq[B]): Int$/;"	m
lastIndexOfSlice	scala/collection/interfaces/SeqMethods.scala	/^  def lastIndexOfSlice[B >: A](that: Seq[B], fromIndex: Int): Int$/;"	m
lastIndexWhere	scala/collection/GenSeqLike.scala	/^  def lastIndexWhere(p: A => Boolean): Int = lastIndexWhere(p, length - 1)$/;"	m
lastIndexWhere	scala/collection/GenSeqLike.scala	/^  def lastIndexWhere(p: A => Boolean, end: Int): Int$/;"	m
lastIndexWhere	scala/collection/IndexedSeqOptimized.scala	/^  def lastIndexWhere(p: A => Boolean, end: Int): Int = {$/;"	m
lastIndexWhere	scala/collection/LinearSeqOptimized.scala	/^  def lastIndexWhere(p: A => Boolean, end: Int): Int = {$/;"	m
lastIndexWhere	scala/collection/SeqLike.scala	/^  def lastIndexWhere(p: A => Boolean, end: Int): Int = {$/;"	m
lastIndexWhere	scala/collection/interfaces/SeqMethods.scala	/^  def lastIndexWhere(p: A => Boolean): Int$/;"	m
lastIndexWhere	scala/collection/interfaces/SeqMethods.scala	/^  def lastIndexWhere(p: A => Boolean, end: Int): Int$/;"	m
lastIndexWhere	scala/collection/parallel/ParSeqLike.scala	/^  def lastIndexWhere(p: T => Boolean, end: Int): Int = if (end < 0) -1 else {$/;"	m
lastIndexWhere	scala/collection/parallel/RemainsIterator.scala	/^  def lastIndexWhere(pred: T => Boolean): Int = {$/;"	m
lastKey	scala/collection/SortedMapLike.scala	/^  def lastKey : A = last._1$/;"	m
lastKey	scala/collection/generic/Sorted.scala	/^  def lastKey: K$/;"	m
lastKey	scala/collection/immutable/IntMap.scala	/^  final def lastKey : Int = this match {$/;"	m
lastMsg	scala/actors/MessageQueue.scala	/^    def lastMsg = if (last eq null) "null" else last.msg$/;"	m
lastNoSuccess	scala/util/parsing/combinator/Parsers.scala	/^  var lastNoSuccess: NoSuccess = null$/;"	l
lastOption	scala/collection/TraversableLike.scala	/^  def lastOption: Option[A] = if (isEmpty) None else Some(last)$/;"	m
lastOption	scala/collection/interfaces/TraversableMethods.scala	/^  def lastOption: Option[A]$/;"	m
lastRet	scala/actors/threadpool/LinkedBlockingQueue.java	/^        private Node<E> lastRet;$/;"	f	class:LinkedBlockingQueue.Itr	file:
lastSymTag	scala/reflect/generic/PickleFormat.scala	/^  final val lastSymTag = VALsym$/;"	l
last_	scala/actors/LinkedQueue.java	/^  protected LinkedNode last_;         $/;"	f	class:LinkedQueue
lastbuff	scala/collection/parallel/mutable/LazyCombiner.scala	/^  val lastbuff = chain.last$/;"	l
lastwasbreak	scala/xml/PrettyPrinter.scala	/^    var lastwasbreak = false$/;"	l
later	scala/collection/immutable/PagedSeq.scala	/^  var later : Page[T] = this$/;"	l
later	scala/collection/mutable/LinkedEntry.scala	/^  var later: LinkedEntry[A, B] = null$/;"	l
latest	scala/collection/immutable/PagedSeq.scala	/^  final def latest: Page[T] = {$/;"	m
lazyAccessor	scala/reflect/generic/Symbols.scala	/^    def lazyAccessor: Symbol$/;"	m
lazySet	scala/actors/threadpool/AtomicInteger.java	/^    public final synchronized void lazySet(int newValue) {$/;"	m	class:AtomicInteger
lazy_	scala/collection/immutable/Stream.scala	/^  lazy val lazy_:: = #::$/;"	l
lbcount	scala/collection/parallel/mutable/package.scala	/^        val lbcount = countElems(lbstart, until)$/;"	l
lbindex	scala/collection/parallel/mutable/package.scala	/^      val lbindex = until \/ sizeMapBucketSize$/;"	l
lbstart	scala/collection/parallel/mutable/package.scala	/^        val lbstart = lbindex * sizeMapBucketSize$/;"	l
lbuff	scala/collection/mutable/Stack.scala	/^    val lbuff = new ListBuffer[A]$/;"	l
lead	scala/collection/IterableLike.scala	/^    val lead = iterator drop n$/;"	l
lead	scala/collection/IterableLike.scala	/^    val lead = this.iterator drop n$/;"	l
lead	scala/collection/LinearSeqOptimized.scala	/^    var lead = this drop n$/;"	l
lead	scala/collection/immutable/Stream.scala	/^    var lead = this drop n$/;"	l
leading	scala/collection/Iterator.scala	/^    val leading = new Leading$/;"	l
leading	scala/reflect/generic/PickleBuffer.scala	/^    val leading = 64 - (len << 3)$/;"	l
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[(Combiner[U, This], Boolean)]) = if (pos < pit.indexFlag) {$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[(Combiner[U, This], Combiner[U, This])]) = if (pos < pit.indexFlag) {$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[(Combiner[U, This], Combiner[U, This])]) = result = pit.partition2combiners(pred, reuse(prev.map(_._1), cbf()), reuse(prev.map(_._2), cbf()))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[(Combiner[U, This], Combiner[U, This])]) = result = pit.splitAt2combiners(at, reuse(prev.map(_._1), cbf()), reuse(prev.map(_._2), cbf()))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Boolean]) = { if (!pit.isAborted) result = pit.exists(pred); if (result == true) pit.abort }$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Boolean]) = { if (!pit.isAborted) result = pit.forall(pred); if (result == false) pit.abort }$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[(K, V), That]]) {$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[S, That]]) = result = pit.collect2combiner[S, That](pf, pbf(self.repr))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[S, That]]) = result = pit.flatmap2combiner(f, pbf(self.repr))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[S, That]]) = result = pit.map2combiner(f, reuse(prev, pbf(self.repr)))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[U, That]]) = result = pit.copy2builder[U, That, Combiner[U, That]](reuse(prev, cfactory()))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[U, That]]) {$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[U, This]]) = result = pit.drop2combiner(n, reuse(prev, cbf()))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[U, This]]) = result = pit.slice2combiner(from, until, reuse(prev, cbf()))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[U, This]]) = {$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Option[U]]) = { if (!pit.isAborted) result = pit.find(pred); if (result != None) pit.abort }$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Result]) = result = pit.zip2combiner[U, S, That](othpit, pbf(self.repr))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Result]) = result = pit.zipAll2combiner[U, S, That](othpit, thiselem, thatelem, pbf(self.repr))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[ScanTree[U]]) = if (pit.remaining > 0) {$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Unit]) = pit.copyToArray(array, from, len)$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[Int]) = result = pit.count(pred)$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[Option[U]]) = if (pit.remaining > 0) result = Some(pit.max(ord))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[Option[U]]) = if (pit.remaining > 0) result = Some(pit.min(ord))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[Option[U]]) = if (pit.remaining > 0) result = Some(pit.reduce(op))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[R1]) = {$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[R]) = result = body$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[R]) = {$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[S]) = result = pit.foldLeft(z)(seqop)$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[U]) = result = pit.fold(z)(op)$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[U]) = result = pit.product(num)$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[U]) = result = pit.sum(num)$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[Unit]) = pit.foreach(op)$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    final def leaf(prev: Option[Result]) = {$/;"	m
leaf	scala/collection/parallel/ParIterableViewLike.scala	/^    def leaf(prev: Option[Combiner[U, That]]) = result = pit.copy2builder[U, That, Combiner[U, That]](reuse(prev, cbf(self.underlying)))$/;"	m
leaf	scala/collection/parallel/ParSeqLike.scala	/^    def leaf(prev: Option[(Int, Boolean)]) = if (from < pit.indexFlag) {$/;"	m
leaf	scala/collection/parallel/ParSeqLike.scala	/^    def leaf(prev: Option[Boolean]) = if (!pit.isAborted) {$/;"	m
leaf	scala/collection/parallel/ParSeqLike.scala	/^    def leaf(prev: Option[Combiner[S, That]]) = result = pit.reverseMap2combiner(f, pbf(self.repr))$/;"	m
leaf	scala/collection/parallel/ParSeqLike.scala	/^    def leaf(prev: Option[Combiner[U, That]]) = result = pit.updated2combiner(pos, elem, pbf(self.repr))$/;"	m
leaf	scala/collection/parallel/ParSeqLike.scala	/^    def leaf(prev: Option[Combiner[U, This]]) = result = pit.reverse2combiner(reuse(prev, cbf()))$/;"	m
leaf	scala/collection/parallel/ParSeqLike.scala	/^    def leaf(prev: Option[Int]) = if (from < pit.indexFlag) {$/;"	m
leaf	scala/collection/parallel/ParSeqLike.scala	/^    def leaf(prev: Option[Int]) = if (pos > pit.indexFlag) {$/;"	m
leaf	scala/collection/parallel/ParSeqLike.scala	/^    def leaf(prev: Option[Result]) = result = pit.zip2combiner[U, S, That](otherpit, pbf(self.repr))$/;"	m
leaf	scala/collection/parallel/ParSeqViewLike.scala	/^    def leaf(prev: Option[Combiner[U, That]]) = result = pit.copy2builder[U, That, Combiner[U, That]](reuse(prev, cbf(self.underlying)))$/;"	m
leaf	scala/collection/parallel/Tasks.scala	/^    def leaf(result: Option[R])    $/;"	m
leaf	scala/collection/parallel/immutable/ParHashMap.scala	/^    def leaf(prev: Option[Unit]) = {$/;"	m
leaf	scala/collection/parallel/immutable/ParHashSet.scala	/^    def leaf(prev: Option[Unit]) = {$/;"	m
leaf	scala/collection/parallel/mutable/ParArray.scala	/^    def leaf(prev: Option[Unit]) = iterate(tree)$/;"	m
leaf	scala/collection/parallel/mutable/ParArray.scala	/^    def leaf(prev: Option[Unit]) = {$/;"	m
leaf	scala/collection/parallel/mutable/ParHashMap.scala	/^    def leaf(prev: Option[Int]) = {$/;"	m
leaf	scala/collection/parallel/mutable/ParHashSet.scala	/^    def leaf(prev: Option[(Int, UnrolledBuffer[Any])]) {$/;"	m
leaf	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^    def leaf(prev: Option[Unit]) = if (howmany > 0) {$/;"	m
leaf	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^    def leaf(prev: Option[Unit]) = if (howmany > 0) {$/;"	m
left	scala/Either.scala	/^  def left = Either.LeftProjection(this)$/;"	m
left	scala/collection/immutable/HashMap.scala	/^      var left = n$/;"	l
left	scala/collection/immutable/List.scala	/^      var left = lst$/;"	l
left	scala/collection/immutable/RedBlack.scala	/^      val left = this.left.visit(input)(f)$/;"	l
left	scala/collection/immutable/RedBlack.scala	/^    def left: Tree[B]$/;"	m
left	scala/collection/immutable/Stream.scala	/^      var left = this.tail$/;"	l
left	scala/collection/immutable/Stream.scala	/^    var left = this$/;"	l
left	scala/collection/mutable/DoubleLinkedListLike.scala	/^    var left = n$/;"	l
left	scala/collection/parallel/ParIterableLike.scala	/^    var left = n$/;"	l
left	scala/collection/parallel/ParIterableLike.scala	/^    var left = until - from$/;"	l
left	scala/collection/parallel/RemainsIterator.scala	/^    var left = at$/;"	l
left	scala/collection/parallel/RemainsIterator.scala	/^    var left = howmany$/;"	l
left	scala/collection/parallel/RemainsIterator.scala	/^    var left = math.max(until - from, 0)$/;"	l
left	scala/collection/parallel/RemainsIterator.scala	/^    var left = n$/;"	l
left	scala/collection/parallel/mutable/ParArray.scala	/^      val left = remaining$/;"	l
left	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^      var left = pos$/;"	l
left	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^      var left = pos$/;"	l
left1	scala/collection/immutable/List.scala	/^      var left1 = l1$/;"	l
left2	scala/collection/immutable/List.scala	/^      var left2 = l2$/;"	l
leftMost	scala/collection/immutable/RedBlack.scala	/^          val leftMost = false$/;"	l
leftMost	scala/collection/immutable/RedBlack.scala	/^          val leftMost = true$/;"	l
lefthere	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^        val lefthere = math.min(totalleft, curr.size - pos)$/;"	l
leftinserts	scala/collection/parallel/mutable/ParHashSet.scala	/^    var leftinserts = 0$/;"	l
leftlst	scala/collection/mutable/Queue.scala	/^    var leftlst = first0$/;"	l
leftmost	scala/collection/parallel/ParIterableLike.scala	/^    def leftmost = this$/;"	m
leftmost	scala/collection/parallel/ParIterableLike.scala	/^    def leftmost: ScanLeaf[U]$/;"	m
leftmost	scala/collection/parallel/ParIterableLike.scala	/^    val leftmost = left.leftmost$/;"	l
leftover	scala/collection/parallel/mutable/ParHashSet.scala	/^      var leftover = new UnrolledBuffer[Any]()$/;"	l
leftovers	scala/collection/parallel/mutable/ParHashSet.scala	/^      var leftovers = new UnrolledBuffer[Any]$/;"	l
lefts	scala/collection/immutable/List.scala	/^  def lefts[A, B](es: Iterable[Either[A, B]]) = $/;"	m
len	scala/collection/BitSetLike.scala	/^    val len = this.nwords max other.nwords$/;"	l
len	scala/collection/BitSetLike.scala	/^    val len = this.nwords min other.nwords$/;"	l
len	scala/collection/BitSetLike.scala	/^    val len = this.nwords$/;"	l
len	scala/collection/BitSetLike.scala	/^    var len = elems.length$/;"	l
len	scala/collection/GenSeqViewLike.scala	/^      var len = 0$/;"	l
len	scala/collection/IndexedSeqOptimized.scala	/^      val len = length$/;"	l
len	scala/collection/IndexedSeqOptimized.scala	/^      val len = this.length min that.length$/;"	l
len	scala/collection/IndexedSeqOptimized.scala	/^    val len = length$/;"	l
len	scala/collection/Iterator.scala	/^      lazy val len = xs.length$/;"	l
len	scala/collection/LinearSeqOptimized.scala	/^    var len = 0$/;"	l
len	scala/collection/SeqLike.scala	/^        val len = (idxs.length - i) \/ 2$/;"	l
len	scala/collection/SeqLike.scala	/^    val len = this.length$/;"	l
len	scala/collection/immutable/BitSet.scala	/^    val len = elems.length$/;"	l
len	scala/collection/immutable/Queue.scala	/^    val len = out.length$/;"	l
len	scala/collection/immutable/Stream.scala	/^    var len = 0$/;"	l
len	scala/collection/immutable/StringLike.scala	/^      val len = line.length$/;"	l
len	scala/collection/immutable/StringLike.scala	/^    val len = toString.length$/;"	l
len	scala/collection/mutable/ArrayBuffer.scala	/^    val len = xs.length$/;"	l
len	scala/collection/mutable/HashSet.scala	/^    val len = table.length$/;"	l
len	scala/reflect/NameTransformer.scala	/^    val len = name.length()$/;"	l
len	scala/reflect/generic/ByteCodecs.scala	/^    val len = regenerateZero(xs)$/;"	l
len	scala/reflect/generic/PickleBuffer.scala	/^      val len = readNat()$/;"	l
len	scala/reflect/generic/UnPickler.scala	/^      val len = readNat()$/;"	l
len	scala/xml/Utility.scala	/^    val len = text.length$/;"	l
len	scala/xml/dtd/ElementValidator.scala	/^    val len: Int = exc.length$/;"	l
len1	scala/collection/mutable/ArraySeq.scala	/^    val len1 = len min (xs.length - start) min length$/;"	l
len1	scala/collection/mutable/ResizableArray.scala	/^     val len1 = len min (xs.length - start) min length$/;"	l
length	scala/Array.scala	/^  def length: Int = throw new Error()$/;"	m
length	scala/Predef.scala	/^    def length: Int = xs.length$/;"	m
length	scala/actors/remote/Serializer.scala	/^      val length = inputStream.readInt()$/;"	l
length	scala/actors/remote/Serializer.scala	/^    val length = bytes.length;$/;"	l
length	scala/collection/GenSeqLike.scala	/^  def length: Int$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = forced.length$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = if ((thatSeq lengthCompare self.length) <= 0) thatSeq.length else self.length$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = index(self.length)$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = index.length$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = iterator.size$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = len$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = self.length + restSeq.length$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = self.length - start$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = self.length$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length: Int = 1 + self.length$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length: Int = self.length + plen - replaced$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length: Int = self.length max thatSeq.length$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length: Int = self.length$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length: Int$/;"	m
length	scala/collection/Iterator.scala	/^  def length: Int = this.size$/;"	m
length	scala/collection/JavaConversions.scala	/^    def length = underlying.size$/;"	m
length	scala/collection/LinearSeqOptimized.scala	/^  def length: Int = {$/;"	m
length	scala/collection/SeqLike.scala	/^  def length: Int$/;"	m
length	scala/collection/SeqViewLike.scala	/^    def length: Int$/;"	m
length	scala/collection/immutable/IndexedSeq.scala	/^    def length = buf.length$/;"	m
length	scala/collection/immutable/PagedSeq.scala	/^  def length: Int = {$/;"	m
length	scala/collection/immutable/StringLike.scala	/^  def length: Int = toString.length$/;"	m
length	scala/collection/immutable/Vector.scala	/^  def length = endIndex - startIndex$/;"	m
length	scala/collection/interfaces/SeqMethods.scala	/^  def length: Int$/;"	m
length	scala/collection/mutable/ArrayLike.scala	/^    def length = self.length$/;"	m
length	scala/collection/mutable/ArrayOps.scala	/^    def length: Int = repr.length$/;"	m
length	scala/collection/mutable/ArrayStack.scala	/^  def length = index$/;"	m
length	scala/collection/mutable/BufferLike.scala	/^  def length: Int$/;"	m
length	scala/collection/mutable/BufferProxy.scala	/^  def length: Int = self.length$/;"	m
length	scala/collection/mutable/PriorityQueue.scala	/^  def length: Int = resarr.length - 1  \/\/ adjust length accordingly$/;"	m
length	scala/collection/mutable/ResizableArray.scala	/^  def length: Int = size0$/;"	m
length	scala/collection/mutable/UnrolledBuffer.scala	/^  def length = sz$/;"	m
length	scala/collection/mutable/WrappedArray.scala	/^    def length: Int = array.length$/;"	m
length	scala/collection/mutable/WrappedArray.scala	/^  def length: Int$/;"	m
length	scala/collection/parallel/ParSeqLike.scala	/^    def length = self.length$/;"	m
length	scala/collection/parallel/immutable/ParVector.scala	/^  def length = vector.length$/;"	m
length	scala/collection/parallel/mutable/ParArray.scala	/^  def length = arrayseq.length$/;"	m
length	scala/runtime/ScalaRunTime.scala	/^    val length = array_length(src)$/;"	l
length	scala/xml/MetaData.scala	/^  def length(i: Int): Int = next.length(i + 1)$/;"	m
length	scala/xml/MetaData.scala	/^  def length: Int = length(0)$/;"	m
length	scala/xml/NodeSeq.scala	/^  def length = theSeq.length$/;"	m
length	scala/xml/include/sax/EncodingHeuristics.scala	/^      val length = in.read(data, 0, bytesToRead - 4)$/;"	l
lengthCompare	scala/collection/IndexedSeqOptimized.scala	/^  def lengthCompare(len: Int): Int = length - len$/;"	m
lengthCompare	scala/collection/LinearSeqOptimized.scala	/^  def lengthCompare(len: Int): Int =  {$/;"	m
lengthCompare	scala/collection/SeqLike.scala	/^  def lengthCompare(len: Int): Int = {$/;"	m
lengthCompare	scala/collection/interfaces/SeqMethods.scala	/^  def lengthCompare(len: Int): Int$/;"	m
length_	scala/collection/mutable/StringBuilder.scala	/^  def length_=(n: Int) { underlying.setLength(n) }$/;"	m
letter	scala/util/parsing/combinator/lexical/Lexical.scala	/^  def letter = elem("letter", _.isLetter)$/;"	m
level	scala/actors/Debug.scala	/^  def level = lev$/;"	m
level_	scala/actors/Debug.scala	/^  def level_= (lev: Int) = { this.lev = lev }$/;"	m
lexical	scala/util/parsing/combinator/lexical/Lexical.scala	/^package lexical$/;"	p
lexical	scala/util/parsing/combinator/lexical/Scanners.scala	/^package lexical$/;"	p
lexical	scala/util/parsing/combinator/lexical/StdLexical.scala	/^package lexical$/;"	p
lexical	scala/util/parsing/combinator/syntactical/StandardTokenParsers.scala	/^  val lexical = new StdLexical$/;"	l
lexical	scala/util/parsing/combinator/syntactical/TokenParsers.scala	/^  val lexical: Tokens$/;"	l
lexical	scala/util/parsing/json/Parser.scala	/^  val lexical = new Tokens$/;"	l
lf	scala/collection/mutable/FlatHashTable.scala	/^    val lf = _loadFactor$/;"	l
lhs	scala/reflect/generic/UnPickler.scala	/^          val lhs = readTreeRef()$/;"	l
lift	scala/PartialFunction.scala	/^  def lift: A => Option[B] = new (A => Option[B]) {$/;"	m
lift	scala/io/BytePickle.scala	/^  def lift[t](x: t): SPU[t] = new SPU[t] {$/;"	m
lift	scala/reflect/Code.scala	/^  def lift[A](tree: A): Code[A] =$/;"	m
limit	scala/collection/mutable/ListBuffer.scala	/^    val limit = last0.tail$/;"	l
line	scala/io/Position.scala	/^  final def line(pos: Int): Int = (pos >> COLUMN_BITS) & LINE_MASK$/;"	m
line	scala/io/Source.scala	/^    val line  = Position line pos$/;"	l
line	scala/sys/process/BasicIO.scala	/^      val line = readLine()$/;"	l
line	scala/util/parsing/input/NoPosition.scala	/^  def line = 0$/;"	m
line	scala/util/parsing/input/OffsetPosition.scala	/^  def line: Int = {$/;"	m
line	scala/util/parsing/input/Position.scala	/^  def line: Int$/;"	m
line	scala/util/parsing/input/StreamReader.scala	/^    def line = lnum$/;"	m
line	scala/xml/include/sax/XIncludeFilter.scala	/^    var line = -1$/;"	l
lineContents	scala/util/parsing/input/NoPosition.scala	/^  def lineContents = ""$/;"	m
lineContents	scala/util/parsing/input/OffsetPosition.scala	/^  def lineContents: String =$/;"	m
lineContents	scala/util/parsing/input/StreamReader.scala	/^    def lineContents = seq.slice(0, nextEol).toString$/;"	m
lineSeparator	scala/util/Properties.scala	/^  def lineSeparator         = propOrElse("line.separator", "\\n")$/;"	m
lineStarts	scala/util/parsing/input/OffsetPosition.scala	/^    var lineStarts = new ArrayBuffer[Int]$/;"	l
lines	scala/collection/immutable/StringLike.scala	/^  def lines: Iterator[String] = $/;"	m
lines	scala/sys/process/ProcessBuilder.scala	/^  def lines(log: ProcessLogger): Stream[String]$/;"	m
lines	scala/sys/process/ProcessBuilder.scala	/^  def lines: Stream[String]$/;"	m
lines	scala/sys/process/ProcessBuilderImpl.scala	/^    def lines(log: ProcessLogger): Stream[String]   = lines(false, true, Some(log))$/;"	m
lines	scala/sys/process/ProcessBuilderImpl.scala	/^    def lines: Stream[String]                       = lines(false, true, None)$/;"	m
linesIterator	scala/collection/immutable/StringLike.scala	/^  def linesIterator: Iterator[String] = $/;"	m
linesWithSeparators	scala/collection/immutable/StringLike.scala	/^  def linesWithSeparators: Iterator[String] = new Iterator[String] {$/;"	m
lines_	scala/sys/process/ProcessBuilder.scala	/^  def lines_! : Stream[String]$/;"	m
lines_	scala/sys/process/ProcessBuilder.scala	/^  def lines_!(log: ProcessLogger): Stream[String]$/;"	m
lines_	scala/sys/process/ProcessBuilderImpl.scala	/^    def lines_! : Stream[String]                    = lines(false, false, None)$/;"	m
lines_	scala/sys/process/ProcessBuilderImpl.scala	/^    def lines_!(log: ProcessLogger): Stream[String] = lines(false, false, Some(log))$/;"	m
link	scala/actors/Actor.scala	/^  def link(body: => Unit): Actor = self.link(body)$/;"	m
link	scala/actors/Actor.scala	/^  def link(body: => Unit): Actor = {$/;"	m
link	scala/actors/Actor.scala	/^  def link(to: AbstractActor): AbstractActor = self.link(to)$/;"	m
link	scala/actors/Actor.scala	/^  def link(to: AbstractActor): AbstractActor = {$/;"	m
linkTo	scala/actors/remote/Proxy.scala	/^  def linkTo(to: AbstractActor): Unit =$/;"	m
linkedClassOfClass	scala/reflect/generic/Symbols.scala	/^    def linkedClassOfClass: Symbol$/;"	m
list	scala/actors/scheduler/ForkJoinScheduler.scala	/^            val list = new ArrayList[ForkJoinTask[_]]$/;"	l
list	scala/collection/immutable/List.scala	/^        val list : ::[B] = new ::(a.asInstanceOf[B], Nil)$/;"	l
list	scala/io/BytePickle.scala	/^  def list[a](pa: SPU[a]): SPU[List[a]] =$/;"	m
listToPair	scala/io/BytePickle.scala	/^    def listToPair(l: List[A]): (A, List[A]) =$/;"	m
listToPair	scala/io/BytePickle.scala	/^    def listToPair(l: List[a]): (a,List[a]) =$/;"	m
literal	scala/util/parsing/combinator/RegexParsers.scala	/^  implicit def literal(s: String): Parser[String] = new Parser[String] {$/;"	m
littleUCS4	scala/xml/include/sax/EncodingHeuristics.scala	/^    val littleUCS4    = "UCS-4"$/;"	l
littleUTF16	scala/xml/include/sax/EncodingHeuristics.scala	/^    val littleUTF16   = "UTF-16LE"$/;"	l
lo	scala/collection/IndexedSeqOptimized.scala	/^    val lo    = math.max(from, 0)$/;"	l
lo	scala/collection/IterableLike.scala	/^    val lo = math.max(0, n)$/;"	l
lo	scala/collection/IterableLike.scala	/^    val lo = math.max(from, 0)$/;"	l
lo	scala/collection/Iterator.scala	/^    val lo = from max 0$/;"	l
lo	scala/collection/generic/SliceInterval.scala	/^    val lo    = _from max 0$/;"	l
lo	scala/collection/generic/SliceInterval.scala	/^    val lo = from max 0$/;"	l
lo	scala/collection/immutable/List.scala	/^    val lo = math.max(from, 0)$/;"	l
lo	scala/collection/immutable/Stream.scala	/^    val lo = from max 0$/;"	l
lo	scala/collection/immutable/Vector.scala	/^      var lo = (startIndex - 1) & 31$/;"	l
lo	scala/collection/immutable/Vector.scala	/^      var lo = endIndex & 31$/;"	l
lo	scala/collection/immutable/Vector.scala	/^    var lo = ((cutIndex - 1) & 31) + 1$/;"	l
lo	scala/collection/immutable/Vector.scala	/^    var lo = cutIndex & 31$/;"	l
lo	scala/reflect/generic/UnPickler.scala	/^          val lo = readTreeRef()$/;"	l
lo	scala/util/parsing/input/OffsetPosition.scala	/^    var lo = 0$/;"	l
load	scala/util/Marshal.scala	/^  def load[A](buffer: Array[Byte])(implicit expected: ClassManifest[A]): A = {$/;"	m
load	scala/xml/factory/XMLLoader.scala	/^  def load(is: InputStream): T         = loadXML(fromInputStream(is), parser)$/;"	m
load	scala/xml/factory/XMLLoader.scala	/^  def load(reader: Reader): T          = loadXML(fromReader(reader), parser)$/;"	m
load	scala/xml/factory/XMLLoader.scala	/^  def load(source: InputSource): T     = loadXML(source, parser)$/;"	m
load	scala/xml/factory/XMLLoader.scala	/^  def load(sysID: String): T           = loadXML(fromSysId(sysID), parser)$/;"	m
load	scala/xml/factory/XMLLoader.scala	/^  def load(url: URL): T                = loadXML(fromInputStream(url.openStream()), parser)$/;"	m
loadFactor	scala/collection/mutable/FlatHashTable.scala	/^    val loadFactor: Int,$/;"	l
loadFactor	scala/collection/mutable/HashTable.scala	/^    val loadFactor: Int,$/;"	l
loadFile	scala/xml/factory/XMLLoader.scala	/^  def loadFile(fd: FileDescriptor): T  = loadXML(fromFile(fd), parser)$/;"	m
loadFile	scala/xml/factory/XMLLoader.scala	/^  def loadFile(file: File): T          = loadXML(fromFile(file), parser)$/;"	m
loadFile	scala/xml/factory/XMLLoader.scala	/^  def loadFile(name: String): T        = loadXML(fromFile(name), parser)$/;"	m
loadString	scala/xml/factory/XMLLoader.scala	/^  def loadString(string: String): T    = loadXML(fromString(string), parser)$/;"	m
loadXML	scala/xml/factory/XMLLoader.scala	/^  def loadXML(source: InputSource, parser: SAXParser): T = {$/;"	m
loc	scala/collection/mutable/DoubleLinkedListLike.scala	/^    var loc = repr$/;"	l
loc	scala/collection/mutable/LinkedListLike.scala	/^    val loc = drop(n)$/;"	l
local	scala/collection/parallel/Tasks.scala	/^      val local = result \/\/ ensure that any effects of modifying `result` are detected$/;"	l
localName	scala/xml/parsing/FactoryAdapter.scala	/^    val localName = splitName(qname)._2$/;"	l
locationString	scala/xml/include/sax/XIncludeFilter.scala	/^    var locationString = ""$/;"	l
locator	scala/xml/include/sax/XIncludeFilter.scala	/^    val locator = locators.peek().asInstanceOf[Locator]$/;"	l
lock	scala/actors/threadpool/locks/CondVar.java	/^    protected final ExclusiveLock lock;$/;"	f	class:CondVar
lock	scala/actors/threadpool/locks/Lock.java	/^    void lock();$/;"	m	interface:Lock
lock	scala/actors/threadpool/locks/ReentrantLock.java	/^        public abstract void lock();$/;"	m	class:ReentrantLock.Sync
lock	scala/actors/threadpool/locks/ReentrantLock.java	/^        public void lock() {$/;"	m	class:ReentrantLock.FairSync
lock	scala/actors/threadpool/locks/ReentrantLock.java	/^        public void lock() {$/;"	m	class:ReentrantLock.NonfairSync
lock	scala/actors/threadpool/locks/ReentrantLock.java	/^    public void lock() {$/;"	m	class:ReentrantLock
lock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        final ReentrantReadWriteLock lock;$/;"	f	class:ReentrantReadWriteLock.ReadLock
lock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        final ReentrantReadWriteLock lock;$/;"	f	class:ReentrantReadWriteLock.WriteLock
lock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        public void lock() {$/;"	m	class:ReentrantReadWriteLock.ReadLock
lock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        public void lock() {$/;"	m	class:ReentrantReadWriteLock.WriteLock
lockInterruptibly	scala/actors/threadpool/locks/Lock.java	/^    void lockInterruptibly() throws InterruptedException;$/;"	m	interface:Lock
lockInterruptibly	scala/actors/threadpool/locks/ReentrantLock.java	/^        public abstract void lockInterruptibly() throws InterruptedException;$/;"	m	class:ReentrantLock.Sync
lockInterruptibly	scala/actors/threadpool/locks/ReentrantLock.java	/^        public void lockInterruptibly() throws InterruptedException {$/;"	m	class:ReentrantLock.FairSync
lockInterruptibly	scala/actors/threadpool/locks/ReentrantLock.java	/^        public void lockInterruptibly() throws InterruptedException {$/;"	m	class:ReentrantLock.NonfairSync
lockInterruptibly	scala/actors/threadpool/locks/ReentrantLock.java	/^    public void lockInterruptibly() throws InterruptedException {$/;"	m	class:ReentrantLock
lockInterruptibly	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        public void lockInterruptibly() throws InterruptedException {$/;"	m	class:ReentrantReadWriteLock.ReadLock
lockInterruptibly	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        public void lockInterruptibly() throws InterruptedException {$/;"	m	class:ReentrantReadWriteLock.WriteLock
log	scala/MathCommon.scala	/^  def log(x: Double): Double = java.lang.Math.log(x)$/;"	m
log	scala/concurrent/pilib.scala	/^    var log = (x: Any) => ()$/;"	l
log	scala/util/logging/Logged.scala	/^  def log(msg: String): Unit = {}$/;"	m
log	scala/util/parsing/combinator/Parsers.scala	/^  def log[T](p: => Parser[T])(name: String): Parser[T] = Parser{ in =>$/;"	m
log10	scala/math/package.scala	/^  def log10(x: Double): Double = java.lang.Math.log10(x)$/;"	m
log1p	scala/math/package.scala	/^  def log1p(x: Double): Double = java.lang.Math.log1p(x)$/;"	m
logComment	scala/xml/factory/LoggedNodeFactory.scala	/^  val logComment   = false$/;"	l
logCompressLevel	scala/xml/factory/LoggedNodeFactory.scala	/^  val logCompressLevel  = 1$/;"	l
logFile	scala/testing/Benchmark.scala	/^      val logFile = new java.io.OutputStreamWriter(System.out)$/;"	l
logNode	scala/xml/factory/LoggedNodeFactory.scala	/^  val logNode      = true$/;"	l
logProcInstr	scala/xml/factory/LoggedNodeFactory.scala	/^  val logProcInstr = false$/;"	l
logText	scala/xml/factory/LoggedNodeFactory.scala	/^  val logText      = false$/;"	l
long2Long	scala/Predef.scala	/^  implicit def long2Long(x: Long)           = java.lang.Long.valueOf(x)$/;"	m
long2LongConflict	scala/Predef.scala	/^  implicit def long2LongConflict(x: Long)           = new AnyRef$/;"	m
long2bigDecimal	scala/math/BigDecimal.scala	/^  implicit def long2bigDecimal(l: Long): BigDecimal = apply(l)$/;"	m
long2bigInt	scala/math/BigInt.scala	/^  implicit def long2bigInt(l: Long): BigInt = apply(l)$/;"	m
long2double	scala/Predef.scala	/^  implicit def long2double(x: Long): Double = x.toDouble$/;"	m
long2float	scala/Predef.scala	/^  implicit def long2float(x: Long): Float = x.toFloat$/;"	m
longArrayOps	scala/Predef.scala	/^  implicit def longArrayOps(xs: Array[Long]): ArrayOps[Long] = new ArrayOps.ofLong(xs)$/;"	m
longCount	scala/collection/immutable/NumericRange.scala	/^      val longCount = jumps + ($/;"	l
longString	scala/util/parsing/input/Position.scala	/^  def longString = lineContents+"\\n"+lineContents.take(column-1).map{x => if (x == '\\t') x else ' ' } + "^"$/;"	m
longValue	scala/actors/threadpool/AtomicInteger.java	/^    public long longValue() {$/;"	m	class:AtomicInteger
longValue	scala/math/BigDecimal.scala	/^  def longValue   = this.bigDecimal.longValue$/;"	m
longValue	scala/math/BigInt.scala	/^  def longValue   = this.bigInteger.longValue$/;"	m
longValue	scala/reflect/generic/Constants.scala	/^    def longValue: Long = tag match {$/;"	m
longValue	scala/runtime/ScalaNumberProxy.scala	/^  def longValue()   = num.toLong(self)$/;"	m
longWrapper	scala/LowPriorityImplicits.scala	/^  implicit def longWrapper(x: Long)       = new runtime.RichLong(x)$/;"	m
lookahead	scala/collection/Iterator.scala	/^      val lookahead = new mutable.Queue[A]$/;"	l
lookahead	scala/xml/parsing/MarkupParser.scala	/^    def lookahead(): BufferedIterator[Char] = {$/;"	m
lookahead	scala/xml/parsing/MarkupParser.scala	/^  def lookahead(): BufferedIterator[Char] = curInput match {$/;"	m
lookahead	scala/xml/parsing/MarkupParserCommon.scala	/^  def lookahead(): BufferedIterator[Char]$/;"	m
lookup	scala/collection/immutable/RedBlack.scala	/^    def lookup(k: A): Tree[B] = $/;"	m
lookup	scala/collection/immutable/RedBlack.scala	/^    def lookup(k: A): Tree[Nothing] = this$/;"	m
lookup	scala/collection/immutable/RedBlack.scala	/^    def lookup(x: A): Tree[B]$/;"	m
lookupElemDecl	scala/xml/parsing/MarkupHandler.scala	/^  def lookupElemDecl(Label: String): ElemDecl = {$/;"	m
loop	scala/Responder.scala	/^  def loop[A](r: Responder[Unit]): Responder[Nothing] = $/;"	m
loop	scala/actors/Combinators.scala	/^  def loop(body: => Unit): Unit = body andThen loop(body)$/;"	m
loop	scala/collection/generic/Signalling.scala	/^    var loop = true$/;"	l
loop	scala/collection/immutable/List.scala	/^    def loop(lead: List[A], lag: List[A]): List[A] = lead match {$/;"	m
loop	scala/collection/immutable/List.scala	/^    def loop(mapped: ListBuffer[B], unchanged: List[A], pending: List[A]): List[B] =$/;"	m
loop	scala/collection/immutable/List.scala	/^    def loop(xs: List[A]): List[A] =$/;"	m
loop	scala/collection/immutable/List.scala	/^    def loop(ys: List[A]): List[A] =$/;"	m
loop	scala/collection/immutable/Stream.scala	/^    def loop(i: Int): Stream[A] =$/;"	m
loop	scala/collection/immutable/Stream.scala	/^    def loop(len: Int, these: Stream[A]): Stream[B] = $/;"	m
loop	scala/collection/immutable/Stream.scala	/^    def loop(pre: String, these: Stream[A]) {$/;"	m
loop	scala/collection/immutable/Stream.scala	/^    def loop(s: Stream[A]): Boolean = s.isEmpty || s.tailDefined && loop(s.tail)$/;"	m
loop	scala/collection/immutable/Stream.scala	/^    def loop(these: Stream[A], start: String) {$/;"	m
loop	scala/collection/mutable/LinkedListLike.scala	/^    def loop(x: This) {$/;"	m
loop	scala/collection/parallel/RemainsIterator.scala	/^    var loop = true$/;"	l
loop	scala/reflect/ClassManifest.scala	/^    def loop(left: Set[JClass[_]], seen: Set[JClass[_]]): Boolean = {$/;"	m
loop	scala/sys/process/BasicIO.scala	/^    def loop() {$/;"	m
loop	scala/util/control/TailCalls.scala	/^      def loop(body: TailRec[A]): A = body match {$/;"	m
loopWhile	scala/Responder.scala	/^  def loopWhile[A](cond: => Boolean)(r: Responder[Unit]): Responder[Unit] = $/;"	m
loopWhile	scala/actors/Combinators.scala	/^  def loopWhile(cond: => Boolean)(body: => Unit): Unit =$/;"	m
low	scala/runtime/ScalaRunTime.scala	/^    val low = lv.toInt$/;"	l
low	scala/util/Random.scala	/^    val low  = 33$/;"	l
lowSign	scala/runtime/ScalaRunTime.scala	/^    val lowSign = low >>> 31$/;"	l
lowestSetBit	scala/math/BigInt.scala	/^  def lowestSetBit: Int         = this.bigInteger.getLowestSetBit()$/;"	m
lst	scala/collection/GenSeqViewLike.scala	/^      var lst = List[A]()$/;"	l
lst	scala/collection/TraversableLike.scala	/^    var lst = head$/;"	l
lst	scala/collection/immutable/ListMap.scala	/^      var lst: List[(A, B1)] = Nil$/;"	l
lst	scala/collection/mutable/Stack.scala	/^      val lst = lbuff.result$/;"	l
lst	scala/collection/parallel/RemainsIterator.scala	/^    var lst = List[S]()$/;"	l
lst	scala/collection/parallel/RemainsIterator.scala	/^    var lst = List[T]()$/;"	l
lt	scala/math/PartialOrdering.scala	/^  def lt(x: T, y: T): Boolean = lteq(x, y) && !equiv(x, y)$/;"	m
lteq	scala/math/PartialOrdering.scala	/^    def lteq(x: T, y: T) = outer.lteq(y, x)$/;"	m
lteq	scala/math/PartialOrdering.scala	/^  def lteq(x: T, y: T): Boolean$/;"	m
lv	scala/math/ScalaNumericConversions.scala	/^    val lv = toLong$/;"	l
lv	scala/runtime/ScalaRunTime.scala	/^    val lv = dv.toLong$/;"	l
lv	scala/runtime/ScalaRunTime.scala	/^    val lv = fv.toLong$/;"	l
lvl	scala/collection/immutable/HashMap.scala	/^          var lvl = level$/;"	l
m	scala/collection/SeqLike.scala	/^      val m = mutable.HashMap[A, Int]()$/;"	l
m	scala/collection/SeqLike.scala	/^    var m, i = 0$/;"	l
m	scala/collection/SortedMapLike.scala	/^    var m = this + elem1 + elem2;$/;"	l
m	scala/collection/TraversableLike.scala	/^    val m = mutable.Map.empty[K, Builder[A, Repr]]$/;"	l
m	scala/collection/immutable/HashMap.scala	/^              val m = thatelems(thati)$/;"	l
m	scala/collection/immutable/HashMap.scala	/^              val m = thiselems(thisi)$/;"	l
m	scala/collection/immutable/HashMap.scala	/^            val m = thiselems(thisi).merge0(thatelems(thati), level + 5, merger)$/;"	l
m	scala/collection/immutable/HashMap.scala	/^        var m: HashMap[A,B1] = new HashTrieMap[A,B1](0,new Array[HashMap[A,B1]](0),0)$/;"	l
m	scala/collection/immutable/HashMap.scala	/^      var m = that$/;"	l
m	scala/collection/immutable/HashSet.scala	/^          val m = new HashTrieSet[A](0,new Array[HashSet[A]](0),0) \/\/ TODO: could save array alloc$/;"	l
m	scala/collection/immutable/HashSet.scala	/^        var m: HashSet[A] = new HashTrieSet[A](0,new Array[HashSet[A]](0),0)$/;"	l
m	scala/collection/immutable/IntMap.scala	/^    val m = branchMask(p1, p2);$/;"	l
m	scala/collection/immutable/ListMap.scala	/^      val m = if (contains(k)) this - k else this$/;"	l
m	scala/collection/immutable/LongMap.scala	/^    val m = branchMask(p1, p2);$/;"	l
m	scala/collection/immutable/Queue.scala	/^      val m = n - len$/;"	l
m	scala/collection/immutable/TrieIterator.scala	/^          val m = arrayD(posD)$/;"	l
m	scala/collection/immutable/TrieIterator.scala	/^    val m = elems(i)$/;"	l
m	scala/reflect/generic/HasFlags.scala	/^   val m = new ModuleSymbol(this, pos, name).setFlag(MODULE | FINAL)$/;"	l
m	scala/reflect/generic/UnPickler.scala	/^            val m = owner.newModule(name, clazz)$/;"	l
m	scala/util/Sorting.scala	/^        var m = off + (len >> 1)        \/\/ Small arrays, middle element$/;"	l
m	scala/util/matching/Regex.scala	/^      val m = pattern.matcher(s)$/;"	l
m	scala/util/matching/Regex.scala	/^    val m = pattern.matcher(source)$/;"	l
m	scala/util/matching/Regex.scala	/^    val m = pattern.matcher(target)$/;"	l
m	scala/util/parsing/combinator/PackratParsers.scala	/^        val m = recall(p, inMem)$/;"	l
m	scala/xml/parsing/FactoryAdapter.scala	/^    var m: MetaData = Null$/;"	l
m	scala/xml/parsing/MarkupParser.scala	/^    var m = xmlProcInstr()$/;"	l
mNew	scala/collection/immutable/HashMap.scala	/^var mNew = HashMap.empty[Int,Int]$/;"	l
mNew	scala/collection/immutable/HashSet.scala	/^var mNew = HashSet.empty[Int]$/;"	l
mOld	scala/collection/immutable/HashMap.scala	/^var mOld = OldHashMap.empty[Int,Int]$/;"	l
mOld	scala/collection/immutable/HashSet.scala	/^var mOld = OldHashSet.empty[Int]$/;"	l
mailboxSize	scala/actors/Actor.scala	/^  def mailboxSize: Int = rawSelf.mailboxSize$/;"	m
main	scala/App.scala	/^  def main(args: Array[String]) = {$/;"	m
main	scala/Application.scala	/^  def main(args: Array[String]) {$/;"	m
main	scala/testing/Benchmark.scala	/^  def main(args: Array[String]) {$/;"	m
main	scala/testing/SUnit.scala	/^    def main(args: Array[String]) {$/;"	m
main	scala/util/Properties.scala	/^  def main(args: Array[String]) {$/;"	m
main	scala/util/parsing/combinator/testing/RegexTest.scala	/^  def main(args: Array[String]) = {$/;"	m
main	scala/xml/include/sax/Main.scala	/^  def main(args: Array[String]) {$/;"	m
mainLock	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public final ReentrantLock mainLock = new ReentrantLock();$/;"	f	class:ThreadPoolExecutor
major	scala/reflect/generic/UnPickler.scala	/^      val major = readNat()$/;"	l
make	scala/Array.scala	/^  def make[T: ClassManifest](n: Int, elem: T): Array[T] = {$/;"	m
make	scala/collection/immutable/List.scala	/^  def make[A](n: Int, elem: A): List[A] = {$/;"	m
make	scala/collection/immutable/Stream.scala	/^  def make[A](n: Int, elem: A): Stream[A] = fill(n)(elem)$/;"	m
make	scala/collection/mutable/ArrayBuilder.scala	/^  def make[T: ClassManifest](): ArrayBuilder[T] =$/;"	m
make	scala/collection/mutable/WrappedArray.scala	/^  def make[T](x: AnyRef): WrappedArray[T] = (x match {$/;"	m
make	scala/concurrent/MailBox.scala	/^    def make: T = Nil$/;"	m
make	scala/concurrent/MailBox.scala	/^    def make: T = {$/;"	m
make	scala/concurrent/MailBox.scala	/^  def make: T$/;"	m
makeComment	scala/xml/factory/NodeFactory.scala	/^  def makeComment(s: String): Seq[Comment]  = $/;"	m
makeNewScheduler	scala/actors/Reactor.scala	/^    def makeNewScheduler: IScheduler = {$/;"	m
makeNewScheduler	scala/actors/Scheduler.scala	/^  def makeNewScheduler: IScheduler = {$/;"	m
makeNode	scala/xml/factory/NodeFactory.scala	/^  def makeNode(pre: String, name: String, attrSeq: MetaData, scope: NamespaceBinding, children: Seq[Node]): A = {$/;"	m
makeProcInstr	scala/xml/factory/NodeFactory.scala	/^  def makeProcInstr(t: String, s: String): Seq[ProcInstr] =$/;"	m
makeSeq	scala/xml/NodeSeq.scala	/^    def makeSeq(cond: (Node) => Boolean) =$/;"	m
makeText	scala/xml/factory/NodeFactory.scala	/^  def makeText(s: String) = Text(s)$/;"	m
managedBlock	scala/actors/IScheduler.scala	/^  def managedBlock(blocker: scala.concurrent.ManagedBlocker): Unit$/;"	m
managedBlock	scala/actors/SchedulerAdapter.scala	/^  def managedBlock(blocker: scala.concurrent.ManagedBlocker) {$/;"	m
managedBlock	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^  def managedBlock(blocker: ManagedBlocker) {$/;"	m
managedBlock	scala/actors/scheduler/SingleThreadedScheduler.scala	/^  def managedBlock(blocker: scala.concurrent.ManagedBlocker) {$/;"	m
managedBlock	scala/concurrent/FutureTaskRunner.scala	/^  def managedBlock(blocker: ManagedBlocker): Unit$/;"	m
managedBlock	scala/concurrent/JavaConversions.scala	/^      def managedBlock(blocker: ManagedBlocker) {$/;"	m
managedBlock	scala/concurrent/ThreadPoolRunner.scala	/^  def managedBlock(blocker: ManagedBlocker) {$/;"	m
managedBlock	scala/concurrent/ThreadRunner.scala	/^  def managedBlock(blocker: ManagedBlocker) {$/;"	m
manifest	scala/Predef.scala	/^  def manifest[T](implicit m: Manifest[T])           = m$/;"	m
map	scala/Either.scala	/^    def map[X](f: A => X) = e match {$/;"	m
map	scala/Either.scala	/^    def map[Y](f: B => Y) = e match {$/;"	m
map	scala/Option.scala	/^    def map[B](f: A => B): Option[B] = self filter p map f$/;"	m
map	scala/Responder.scala	/^  def map[B](f: A => B) = new Responder[B] {$/;"	m
map	scala/Tuple2.scala	/^    def map[B, To](f: (El1, El2) => B)(implicit cbf: CBF[Repr1, B, To]): To = {$/;"	m
map	scala/Tuple3.scala	/^    def map[B, To](f: (El1, El2, El3) => B)(implicit cbf: CBF[Repr1, B, To]): To = {$/;"	m
map	scala/collection/GenTraversableLike.scala	/^  def map[B, That](f: A => B)(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
map	scala/collection/Iterator.scala	/^  def map[B](f: A => B): Iterator[B] = new Iterator[B] {$/;"	m
map	scala/collection/SortedMapLike.scala	/^      val map = self.rangeImpl(from, until)$/;"	l
map	scala/collection/TraversableLike.scala	/^    def map[B, That](f: A => B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
map	scala/collection/TraversableLike.scala	/^  def map[B, That](f: A => B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
map	scala/collection/TraversableOnce.scala	/^    def map[B](f: A => B): TraversableOnce[B] = trav.toIterator map f$/;"	m
map	scala/collection/generic/FilterMonadic.scala	/^  def map[B, That](f: A => B)(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
map	scala/collection/immutable/SortedMap.scala	/^      val map = self.rangeImpl(from, until)$/;"	l
map	scala/collection/interfaces/TraversableMethods.scala	/^  def map[B, That](f: A => B)(implicit bf: CanBuildFrom[This, B, That]): That$/;"	m
map	scala/collection/parallel/ParIterableLike.scala	/^      def map(r: R): R1 = mapping(r)$/;"	m
map	scala/collection/parallel/ParIterableLike.scala	/^    def map(r: R): R1$/;"	m
map	scala/collection/parallel/ParIterableLike.scala	/^  def map[S, That](f: T => S)(implicit bf: CanBuildFrom[Repr, S, That]): That = bf ifParallel { pbf =>$/;"	m
map	scala/util/automata/DetWordAutom.scala	/^    val map = Map(finals.zipWithIndex map (_.swap): _*)$/;"	l
map	scala/util/continuations/ControlContext.scala	/^    final def map[A1](f: A => A1): ControlContext[A1,B,C] = {$/;"	m
map	scala/util/parsing/combinator/Parsers.scala	/^    def map[U](f: Nothing => U) = this$/;"	m
map	scala/util/parsing/combinator/Parsers.scala	/^    def map[U](f: T => U) = Success(f(result), next)$/;"	m
map	scala/util/parsing/combinator/Parsers.scala	/^    def map[U](f: T => U): ParseResult[U]$/;"	m
map	scala/util/parsing/combinator/Parsers.scala	/^    def map[U](f: T => U): Parser[U] \/\/= flatMap{x => success(f(x))}$/;"	m
map2	scala/collection/immutable/List.scala	/^  def map2[A,B,C](xs: List[A], ys: List[B])(f: (A, B) => C): List[C] = {$/;"	m
map2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def map2combiner[S, That](f: T => S, cb: Combiner[S, That]): Combiner[S, That] = {$/;"	m
map3	scala/collection/immutable/List.scala	/^  def map3[A,B,C,D](xs: List[A], ys: List[B], zs: List[C])(f: (A, B, C) => D): List[D] = {$/;"	m
mapAsJavaMap	scala/collection/JavaConversions.scala	/^  implicit def mapAsJavaMap[A, B](m : Map[A, B]): ju.Map[A, B] = m match {$/;"	m
mapAsJavaMapConverter	scala/collection/JavaConverters.scala	/^  implicit def mapAsJavaMapConverter[A, B](m : Map[A, B]): AsJava[ju.Map[A, B]] = $/;"	m
mapAsScalaMap	scala/collection/JavaConversions.scala	/^  implicit def mapAsScalaMap[A, B](m : ju.Map[A, B]): mutable.Map[A, B] = m match {$/;"	m
mapAsScalaMapConverter	scala/collection/JavaConverters.scala	/^  implicit def mapAsScalaMapConverter[A, B](m : ju.Map[A, B]): AsScala[mutable.Map[A, B]] = $/;"	m
mapCompanion	scala/collection/generic/GenericParTemplate.scala	/^  def mapCompanion: GenericParMapCompanion[CC]$/;"	m
mapCompanion	scala/collection/parallel/ParMap.scala	/^  def mapCompanion: GenericParMapCompanion[ParMap] = ParMap$/;"	m
mapConserve	scala/collection/immutable/List.scala	/^  def mapConserve[A <: AnyRef](xs: List[A])(f: A => A): List[A] = {$/;"	m
mapConserve	scala/collection/immutable/List.scala	/^  def mapConserve[B >: A <: AnyRef](f: A => B): List[B] = {$/;"	m
mapElements	scala/collection/MapLike.scala	/^  def mapElements[C](f: B => C) = mapValues(f)$/;"	m
mapFinally	scala/util/continuations/ControlContext.scala	/^  final def mapFinally(f: () => Unit): ControlContext[A,B,C] = {$/;"	m
mapInner	scala/runtime/ScalaRunTime.scala	/^    def mapInner(arg: Any): String = arg match {$/;"	m
mapPartial	scala/util/parsing/combinator/Parsers.scala	/^    def mapPartial[U](f: PartialFunction[Nothing, U], error: Nothing => String): ParseResult[U] = this$/;"	m
mapPartial	scala/util/parsing/combinator/Parsers.scala	/^    def mapPartial[U](f: PartialFunction[T, U], error: T => String): ParseResult[U]   $/;"	m
mapPartial	scala/util/parsing/combinator/Parsers.scala	/^    def mapPartial[U](f: PartialFunction[T, U], error: T => String): ParseResult[U] $/;"	m
mapResult	scala/collection/mutable/Builder.scala	/^  def mapResult[NewTo](f: To => NewTo): Builder[Elem, NewTo] = $/;"	m
mapResult	scala/collection/parallel/ParIterableLike.scala	/^    def mapResult[R1](mapping: R => R1): ResultMapping[R, Tp, R1] = new ResultMapping[R, Tp, R1](tsk) {$/;"	m
mapResult	scala/collection/parallel/ParIterableLike.scala	/^    def mapResult[R1](mapping: R => R1): ResultMapping[R, Tp, R1]$/;"	m
mapValues	scala/collection/MapLike.scala	/^  def mapValues[C](f: B => C): Map[A, C] = new DefaultMap[A, C] {$/;"	m
mapValues	scala/collection/interfaces/MapMethods.scala	/^  def mapValues[C](f: B => C): Map[A, C]$/;"	m
mappedFts	scala/actors/Future.scala	/^    val mappedFts = fts.map(ft =>$/;"	l
mark	scala/util/automata/Inclusion.scala	/^    val mark = new Array[Int](max)$/;"	l
markupDecl	scala/xml/parsing/MarkupParser.scala	/^  def markupDecl(): Unit = ch match {$/;"	m
markupDecl1	scala/xml/parsing/MarkupParser.scala	/^  def markupDecl1() = {$/;"	m
mask	scala/collection/generic/BitOperations.scala	/^    def mask(i: Int, mask: Int)                 = i & (complement(mask - 1) ^ mask)$/;"	m
mask	scala/collection/generic/BitOperations.scala	/^    def mask(i: Long, mask: Long)                  = i & (complement(mask - 1) ^ mask)$/;"	m
mask	scala/collection/immutable/HashMap.scala	/^      val mask = (1 << index)$/;"	l
mask	scala/collection/immutable/HashSet.scala	/^      val mask = (1 << index)$/;"	l
matchData	scala/util/matching/Regex.scala	/^    def matchData = new Iterator[Match] {$/;"	m
matched	scala/util/matching/Regex.scala	/^    def matched: String = $/;"	m
matcher	scala/util/matching/Regex.scala	/^      def matcher = self.matcher$/;"	m
matches	scala/actors/Actor.scala	/^        val matches = f.isDefinedAt(m)$/;"	l
max	scala/MathCommon.scala	/^  def max(x: Double, y: Double): Double = java.lang.Math.max(x, y)$/;"	m
max	scala/MathCommon.scala	/^  def max(x: Float, y: Float): Float = java.lang.Math.max(x, y)$/;"	m
max	scala/MathCommon.scala	/^  def max(x: Int, y: Int): Int = java.lang.Math.max(x, y)$/;"	m
max	scala/MathCommon.scala	/^  def max(x: Long, y: Long): Long = java.lang.Math.max(x, y)$/;"	m
max	scala/collection/GenTraversableOnce.scala	/^  def max[A1 >: A](implicit ord: Ordering[A1]): A$/;"	m
max	scala/collection/Iterable.scala	/^  def max[A](seq: Iterable[A])(implicit ord: Ordering[A]): A = seq.max$/;"	m
max	scala/collection/TraversableOnce.scala	/^  def max[B >: A](implicit cmp: Ordering[B]): A = {$/;"	m
max	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def max[B >: A](implicit cmp: Ordering[B]): A$/;"	m
max	scala/collection/mutable/PriorityQueue.scala	/^  def max: A = if (resarr.p_size0 > 1) toA(resarr.p_array(1)) else throw new NoSuchElementException("queue is empty")$/;"	m
max	scala/collection/parallel/ParIterableLike.scala	/^  def max[U >: T](implicit ord: Ordering[U]): T = {$/;"	m
max	scala/math/BigDecimal.scala	/^  def max (that: BigDecimal): BigDecimal = this.bigDecimal max that.bigDecimal$/;"	m
max	scala/math/BigInt.scala	/^  def max (that: BigInt): BigInt = new BigInt(this.bigInteger.max(that.bigInteger))$/;"	m
max	scala/math/Ordering.scala	/^    def max(rhs: T): T = Ordering.this.max(lhs, rhs)$/;"	m
max	scala/math/Ordering.scala	/^  def max(x: T, y: T): T = if (gteq(x, y)) x else y$/;"	m
max	scala/runtime/ScalaNumberProxy.scala	/^  def max(that: T): T = num.max(self, that)$/;"	m
max	scala/util/automata/Inclusion.scala	/^    val max = 1 + dfa1.nstates * dfa2.nstates$/;"	l
maxBy	scala/collection/GenTraversableOnce.scala	/^  def maxBy[B](f: A => B)(implicit cmp: Ordering[B]): A$/;"	m
maxBy	scala/collection/TraversableOnce.scala	/^  def maxBy[B](f: A => B)(implicit cmp: Ordering[B]): A = {$/;"	m
maxBy	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def maxBy[B](f: A => B)(implicit cmp: Ordering[B]): A$/;"	m
maxBy	scala/collection/parallel/ParIterableLike.scala	/^  def maxBy[S](f: T => S)(implicit cmp: Ordering[S]): T = {$/;"	m
maxHistory	scala/collection/mutable/History.scala	/^  val maxHistory: Int = 1000$/;"	l
maxId	scala/Enumeration.scala	/^  final def maxId = topId$/;"	m
maxPoolSize	scala/actors/scheduler/ThreadPoolConfig.scala	/^  val maxPoolSize = {$/;"	l
maxTostringRecursions	scala/reflect/generic/Types.scala	/^  final val maxTostringRecursions = 50$/;"	l
maximumPoolSize	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private volatile int maximumPoolSize;$/;"	f	class:ThreadPoolExecutor	file:
maybeSuffix	scala/xml/dtd/ContentModelParser.scala	/^  def maybeSuffix(s: RegExp) = token match {	$/;"	m
mc	scala/math/BigDecimal.scala	/^  val mc: MathContext)$/;"	l
med3	scala/util/Sorting.scala	/^    def med3(a: Int, b: Int, c: Int) = {$/;"	m
memo	scala/util/parsing/combinator/PackratParsers.scala	/^  def memo[T](p: super.Parser[T]): PackratParser[T] = {$/;"	m
merge	scala/Either.scala	/^    def merge: A = x match {$/;"	m
merge	scala/Either.scala	/^  def merge[T](e: Either[T, T]) = e match {$/;"	m
merge	scala/collection/immutable/HashMap.scala	/^  def merge[B1 >: B](that: HashMap[A, B1], merger: Merger[B1] = null): HashMap[A, B1] = merge0(that, 0, merger)$/;"	m
merge	scala/collection/immutable/List.scala	/^    def merge(l1: List[A], l2: List[A]): List[A] = {$/;"	m
merged	scala/collection/immutable/HashMap.scala	/^        val merged = new Array[HashMap[A, B1]](subcount)$/;"	l
metaData	scala/xml/parsing/FactoryAdapter.scala	/^    val metaData = attribStack.pop$/;"	l
methods	scala/Enumeration.scala	/^    val methods = getClass.getMethods filter (m => m.getParameterTypes.isEmpty &&$/;"	l
methods	scala/reflect/Manifest.scala	/^  def methods[T: ClassManifest] = classManifest[T].erasure.getMethods$/;"	m
mi	scala/collection/SeqLike.scala	/^    def mi = m + i$/;"	m
mid	scala/collection/GenSeqViewLike.scala	/^      val mid = (lo + hi) \/ 2$/;"	l
mid	scala/concurrent/ops.scala	/^      val mid = (start + end) \/ 2$/;"	l
mid	scala/util/Sorting.scala	/^      val mid = (lo+hi) \/ 2$/;"	l
mid	scala/util/parsing/input/OffsetPosition.scala	/^      val mid = (hi + lo) \/ 2$/;"	l
middle	scala/collection/immutable/RedBlack.scala	/^      val middle = f(left._2, key, value)$/;"	l
min	scala/MathCommon.scala	/^  def min(x: Double, y: Double): Double = java.lang.Math.min(x, y)$/;"	m
min	scala/MathCommon.scala	/^  def min(x: Float, y: Float): Float  = java.lang.Math.min(x, y)$/;"	m
min	scala/MathCommon.scala	/^  def min(x: Int, y: Int): Int = java.lang.Math.min(x, y)$/;"	m
min	scala/MathCommon.scala	/^  def min(x: Long, y: Long): Long  = java.lang.Math.min(x, y)$/;"	m
min	scala/collection/GenTraversableOnce.scala	/^  def min[A1 >: A](implicit ord: Ordering[A1]): A$/;"	m
min	scala/collection/Iterable.scala	/^  def min[A](seq: Iterable[A])(implicit ord: Ordering[A]): A = seq.min$/;"	m
min	scala/collection/TraversableOnce.scala	/^  def min[B >: A](implicit cmp: Ordering[B]): A = {$/;"	m
min	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def min[B >: A](implicit cmp: Ordering[B]): A$/;"	m
min	scala/collection/parallel/ParIterableLike.scala	/^  def min[U >: T](implicit ord: Ordering[U]): T = {$/;"	m
min	scala/math/BigDecimal.scala	/^  def min (that: BigDecimal): BigDecimal = this.bigDecimal min that.bigDecimal$/;"	m
min	scala/math/BigInt.scala	/^  def min (that: BigInt): BigInt = new BigInt(this.bigInteger.min(that.bigInteger))$/;"	m
min	scala/math/Ordering.scala	/^    def min(rhs: T): T = Ordering.this.min(lhs, rhs)$/;"	m
min	scala/math/Ordering.scala	/^  def min(x: T, y: T): T = if (lteq(x, y)) x else y$/;"	m
min	scala/runtime/ScalaNumberProxy.scala	/^  def min(that: T): T = num.min(self, that)$/;"	m
minBy	scala/collection/GenTraversableOnce.scala	/^  def minBy[B](f: A => B)(implicit cmp: Ordering[B]): A$/;"	m
minBy	scala/collection/TraversableOnce.scala	/^  def minBy[B](f: A => B)(implicit cmp: Ordering[B]): A = {$/;"	m
minBy	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def minBy[B](f: A => B)(implicit cmp: Ordering[B]): A$/;"	m
minBy	scala/collection/parallel/ParIterableLike.scala	/^  def minBy[S](f: T => S)(implicit cmp: Ordering[S]): T = {$/;"	m
minor	scala/reflect/generic/UnPickler.scala	/^      val minor = readNat()$/;"	l
minus	scala/math/Numeric.scala	/^    def minus(x: BigDecimal, y: BigDecimal): BigDecimal = x - y$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: BigInt, y: BigInt): BigInt = x - y$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: Byte, y: Byte): Byte = (x - y).toByte$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: Char, y: Char): Char = (x - y).toChar$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: Double, y: Double): Double = x - y$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: Float, y: Float): Float = x - y$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: Int, y: Int): Int = x - y$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: Long, y: Long): Long = x - y$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: Short, y: Short): Short = (x - y).toShort$/;"	m
minus	scala/math/Numeric.scala	/^  def minus(x: T, y: T): T$/;"	m
mix	scala/reflect/generic/UnPickler.scala	/^          val mix = readTypeNameRef()$/;"	l
mkAttributes	scala/xml/parsing/MarkupParser.scala	/^  def mkAttributes(name: String, pscope: NamespaceBinding) =$/;"	m
mkAttributes	scala/xml/parsing/MarkupParserCommon.scala	/^  def mkAttributes(name: String, pscope: NamespaceType): AttributesType$/;"	m
mkBody	scala/actors/Actor.scala	/^  implicit def mkBody[a](body: => a) = new Body[a] {$/;"	m
mkBody	scala/actors/Combinators.scala	/^  implicit def mkBody[a](body: => a): Actor.Body[a]$/;"	m
mkBody	scala/actors/Reactor.scala	/^  implicit def mkBody[A](body: => A) = new Actor.Body[A] {$/;"	m
mkCatcher	scala/util/control/Exception.scala	/^  def mkCatcher[Ex <: Throwable: ClassManifest, T](isDef: Ex => Boolean, f: Ex => T) = new Catcher[T] {$/;"	m
mkEnd	scala/xml/PrettyPrinter.scala	/^    def mkEnd(sb: StringBuilder) {$/;"	m
mkLeaf	scala/xml/PrettyPrinter.scala	/^    def mkLeaf(sb: StringBuilder) {$/;"	m
mkList	scala/util/parsing/combinator/Parsers.scala	/^  def mkList[T] = (_: ~[T, List[T]]) match { case x ~ xs => x :: xs }$/;"	m
mkNumericOps	scala/math/Numeric.scala	/^  implicit def mkNumericOps(lhs: T): Ops = new Ops(lhs)$/;"	m
mkOrderingOps	scala/math/Ordering.scala	/^  implicit def mkOrderingOps(lhs: T): Ops = new Ops(lhs)$/;"	m
mkProcInstr	scala/xml/parsing/MarkupParser.scala	/^  def mkProcInstr(position: Int, name: String, text: String): NodeSeq =$/;"	m
mkProcInstr	scala/xml/parsing/MarkupParserCommon.scala	/^  def mkProcInstr(position: PositionType, name: String, text: String): ElementType$/;"	m
mkResult	scala/xml/parsing/MarkupParser.scala	/^    def mkResult(pos: Int, s: String): NodeSeq = {$/;"	m
mkStart	scala/xml/PrettyPrinter.scala	/^    def mkStart(sb: StringBuilder) {$/;"	m
mkString	scala/collection/GenTraversableOnce.scala	/^  def mkString(sep: String): String$/;"	m
mkString	scala/collection/GenTraversableOnce.scala	/^  def mkString(start: String, sep: String, end: String): String$/;"	m
mkString	scala/collection/GenTraversableOnce.scala	/^  def mkString: String$/;"	m
mkString	scala/collection/TraversableOnce.scala	/^  def mkString(sep: String): String = mkString("", sep, "")$/;"	m
mkString	scala/collection/TraversableOnce.scala	/^  def mkString(start: String, sep: String, end: String): String =$/;"	m
mkString	scala/collection/TraversableOnce.scala	/^  def mkString: String = mkString("")$/;"	m
mkString	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def mkString(sep: String): String$/;"	m
mkString	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def mkString(start: String, sep: String, end: String): String$/;"	m
mkString	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def mkString: String$/;"	m
mkString	scala/collection/parallel/ParIterableLike.scala	/^  def mkString(sep: String): String = seq.mkString("", sep, "")$/;"	m
mkString	scala/collection/parallel/ParIterableLike.scala	/^  def mkString(start: String, sep: String, end: String): String = seq.mkString(start, sep, end)$/;"	m
mkString	scala/collection/parallel/ParIterableLike.scala	/^  def mkString: String = seq.mkString("")$/;"	m
mkTermName	scala/reflect/generic/Names.scala	/^  def mkTermName(name: Name): TermName$/;"	m
mkThrowableCatcher	scala/util/control/Exception.scala	/^  def mkThrowableCatcher[T](isDef: Throwable => Boolean, f: Throwable => T) = mkCatcher(isDef, f)$/;"	m
mkTypeName	scala/reflect/generic/Names.scala	/^  def mkTypeName(name: Name): TypeName$/;"	m
mod	scala/math/BigInt.scala	/^  def mod (that: BigInt): BigInt = new BigInt(this.bigInteger.mod(that.bigInteger))$/;"	m
modInverse	scala/math/BigInt.scala	/^  def modInverse (m: BigInt): BigInt = new BigInt(this.bigInteger.modInverse(m.bigInteger))$/;"	m
modPow	scala/math/BigInt.scala	/^  def modPow (exp: BigInt, m: BigInt): BigInt =$/;"	m
modifyOrRemove	scala/collection/immutable/IntMap.scala	/^  def modifyOrRemove[S](f : (Int, T) => Option[S]) : IntMap[S] = this match {$/;"	m
modifyOrRemove	scala/collection/immutable/LongMap.scala	/^  def modifyOrRemove[S](f : (Long, T) => Option[S]) : LongMap[S] = this match {$/;"	m
mods	scala/reflect/generic/Trees.scala	/^    def mods = NoMods$/;"	m
mods	scala/reflect/generic/Trees.scala	/^    def mods: Modifiers$/;"	m
mods	scala/reflect/generic/UnPickler.scala	/^      var mods: Modifiers = null$/;"	l
moduleClass	scala/reflect/generic/Symbols.scala	/^    def moduleClass: Symbol$/;"	m
moduleVar	scala/reflect/generic/UnPickler.scala	/^            val moduleVar = owner.info.decl(nme.moduleVarName(name))$/;"	l
moduleVarName	scala/reflect/generic/StdNames.scala	/^    def moduleVarName(name: TermName): TermName = newTermName("" + name + MODULE_SUFFIX)$/;"	m
more	scala/collection/immutable/PagedSeq.scala	/^    def more(data: Array[Char], start: Int, len: Int): Int =$/;"	m
move	scala/collection/immutable/Vector.scala	/^          val move = (1 << 5*(depth+1)) - (1 << 5*(depth))$/;"	l
ms	scala/collection/immutable/List.scala	/^    def ms(lst: List[A]): List[A] =$/;"	m
msg	scala/actors/ReactorTask.scala	/^                                               var msg: Msg)$/;"	l
msg	scala/actors/remote/NetKernel.scala	/^              val msg = service.serializer.deserialize(data)$/;"	l
msg	scala/actors/remote/Proxy.scala	/^              val msg = resp.asInstanceOf[AnyRef]$/;"	l
msg	scala/actors/remote/TcpService.scala	/^        val msg = parent.serializer.readObject(datain);$/;"	l
msg	scala/concurrent/MailBox.scala	/^    var msg: Message = null$/;"	l
msg1	scala/actors/ReactorCanReply.scala	/^        val msg1 = handler(msg)$/;"	l
multiplier	scala/actors/threadpool/helpers/Utils.java	/^        final long multiplier, divisor;$/;"	f	class:Utils.SunPerfProvider
multiplier	scala/testing/Benchmark.scala	/^  var multiplier = 1$/;"	l
multiply	scala/runtime/BoxesRunTime.java	/^    public static Object multiply(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
mutable	scala/collection/mutable/AddingBuilder.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ArrayBuffer.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ArrayBuilder.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ArrayLike.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ArrayOps.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ArraySeq.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ArrayStack.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/BitSet.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Buffer.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/BufferLike.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/BufferProxy.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Builder.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Cloneable.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ConcurrentMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/DefaultEntry.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/DefaultMapModel.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/DoubleLinkedList.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/DoubleLinkedListLike.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/FlatHashTable.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/GrowingBuilder.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/HashEntry.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/HashMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/HashSet.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/HashTable.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/History.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ImmutableMapAdaptor.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ImmutableSetAdaptor.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/IndexedSeq.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/IndexedSeqLike.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/IndexedSeqOptimized.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/IndexedSeqView.scala	/^package mutable $/;"	p
mutable	scala/collection/mutable/Iterable.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/LazyBuilder.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/LinearSeq.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/LinkedEntry.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/LinkedHashMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/LinkedHashSet.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/LinkedList.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/LinkedListLike.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ListBuffer.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ListMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Map.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/MapBuilder.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/MapLike.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/MapProxy.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/MultiMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/MutableList.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ObservableBuffer.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ObservableMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ObservableSet.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/OpenHashMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/PriorityQueue.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/PriorityQueueProxy.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Publisher.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Queue.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/QueueProxy.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ResizableArray.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/RevertibleHistory.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Seq.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SeqLike.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Set.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SetBuilder.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SetLike.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SetProxy.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Stack.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/StackProxy.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/StringBuilder.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Subscriber.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SynchronizedBuffer.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SynchronizedMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SynchronizedPriorityQueue.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SynchronizedQueue.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SynchronizedSet.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SynchronizedStack.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Traversable.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Undoable.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/WeakHashMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/WrappedArray.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/WrappedArrayBuilder.scala	/^package mutable$/;"	p
mutable	scala/collection/parallel/mutable/ParHashMap.scala	/^package mutable$/;"	p
mutable	scala/collection/parallel/mutable/ParMapLike.scala	/^package mutable$/;"	p
mutableMapAsJavaMap	scala/collection/JavaConversions.scala	/^  implicit def mutableMapAsJavaMap[A, B](m : mutable.Map[A, B]): ju.Map[A, B] = m match {$/;"	m
mutableMapAsJavaMapConverter	scala/collection/JavaConverters.scala	/^  implicit def mutableMapAsJavaMapConverter[A, B](m : mutable.Map[A, B]): AsJava[ju.Map[A, B]] = $/;"	m
mutableSeqAsJavaList	scala/collection/JavaConversions.scala	/^  implicit def mutableSeqAsJavaList[A](b : mutable.Seq[A]): ju.List[A] = b match {$/;"	m
mutableSeqAsJavaListConverter	scala/collection/JavaConverters.scala	/^  implicit def mutableSeqAsJavaListConverter[A](b : mutable.Seq[A]): AsJava[ju.List[A]] = $/;"	m
mutableSetAsJavaSet	scala/collection/JavaConversions.scala	/^  implicit def mutableSetAsJavaSet[A](s : mutable.Set[A]): ju.Set[A] = s match {$/;"	m
mutableSetAsJavaSetConverter	scala/collection/JavaConverters.scala	/^  implicit def mutableSetAsJavaSetConverter[A](s : mutable.Set[A]): AsJava[ju.Set[A]] =$/;"	m
mylinks	scala/actors/Actor.scala	/^    val mylinks = links.filterNot(this.==)$/;"	l
myself	scala/actors/ReactorCanReply.scala	/^    val myself = Actor.rawSelf(this.scheduler)$/;"	l
n	scala/collection/generic/Sorted.scala	/^        val n = compare(jn, in);$/;"	l
n	scala/collection/mutable/ArrayBuffer.scala	/^      val n = v.length$/;"	l
n	scala/collection/mutable/PriorityQueue.scala	/^      val n = resarr.p_array(i)$/;"	l
n	scala/math/BigDecimal.scala	/^      var n = cache(offset)$/;"	l
n	scala/math/BigInt.scala	/^      var n = cache(offset)$/;"	l
n	scala/util/Sorting.scala	/^          var n = off + len - 1$/;"	l
n	scala/util/Sorting.scala	/^        val n = off + len$/;"	l
n	scala/xml/Utility.scala	/^          val n = getName(value, i+1)$/;"	l
n	scala/xml/dtd/Decl.scala	/^        val n = tmp.substring(ix, iz);$/;"	l
n	scala/xml/parsing/MarkupParser.scala	/^              val n = xName$/;"	l
n	scala/xml/parsing/MarkupParser.scala	/^    val n = xName$/;"	l
n	scala/xml/parsing/MarkupParser.scala	/^    var n = 0$/;"	l
n	scala/xml/parsing/MarkupParserCommon.scala	/^    val n = xName$/;"	l
n1	scala/collection/mutable/ListBuffer.scala	/^    val n1 = n max 0$/;"	l
name	scala/Enumeration.scala	/^      val name = m.getName$/;"	l
name	scala/actors/threadpool/TimeUnit.java	/^    private final String name;$/;"	f	class:TimeUnit	file:
name	scala/actors/threadpool/TimeUnit.java	/^    public String name() {$/;"	m	class:TimeUnit
name	scala/io/Codec.scala	/^  def name = charSet.name$/;"	m
name	scala/reflect/NameTransformer.scala	/^    val name = if (name0.endsWith("<init>")) name0.substring(0, name0.length() - ("<init>").length()) + "this"$/;"	l
name	scala/reflect/Symbol.scala	/^  val name = "<root>"$/;"	l
name	scala/reflect/Symbol.scala	/^  val name = null$/;"	l
name	scala/reflect/Symbol.scala	/^  val name: String =$/;"	l
name	scala/reflect/Symbol.scala	/^  val name: String$/;"	l
name	scala/reflect/generic/Symbols.scala	/^    def name: Name$/;"	m
name	scala/reflect/generic/Trees.scala	/^    def name = pid.name$/;"	m
name	scala/reflect/generic/Trees.scala	/^    def name: Name$/;"	m
name	scala/reflect/generic/Trees.scala	/^    def name: TermName$/;"	m
name	scala/reflect/generic/UnPickler.scala	/^          val name = at(argref, readName)$/;"	l
name	scala/reflect/generic/UnPickler.scala	/^        val name  = readNameRef()$/;"	l
name	scala/reflect/generic/UnPickler.scala	/^      val name         = at(nameref, readName)$/;"	l
name	scala/reflect/generic/UnPickler.scala	/^      var name: Name = null$/;"	l
name	scala/util/parsing/ast/AbstractSyntax.scala	/^    def name: String$/;"	m
name	scala/util/parsing/ast/Binders.scala	/^    def name = el.name+"@??"$/;"	m
name	scala/util/parsing/ast/Binders.scala	/^    def name = self.asInstanceOf[NameElement].name \/\/ TODO: this is only safe when substituted to a NameElement, which certainly isn't required -- I want dynamic inheritance! :)$/;"	m
name	scala/xml/dtd/Scanner.scala	/^  final def name = {$/;"	m
name	scala/xml/parsing/MarkupParserCommon.scala	/^    val name = xName$/;"	l
name	scala/xml/transform/RewriteRule.scala	/^  val name = this.toString()$/;"	l
namePrefix	scala/actors/threadpool/Executors.java	/^        final String namePrefix;$/;"	f	class:Executors.DefaultThreadFactory
nameToString	scala/xml/Node.scala	/^  def nameToString(sb: StringBuilder): StringBuilder = {$/;"	m
named	scala/util/parsing/combinator/Parsers.scala	/^    def named(n: String): this.type = {name=n; this}$/;"	m
namedSend	scala/actors/remote/NetKernel.scala	/^  def namedSend(senderLoc: Locator, receiverLoc: Locator,$/;"	m
nameref	scala/reflect/generic/UnPickler.scala	/^      val nameref      = readNat()$/;"	l
namespace	scala/xml/Node.scala	/^  def namespace = getNamespace(this.prefix)$/;"	m
namespace	scala/xml/XML.scala	/^  val namespace = "http:\/\/www.w3.org\/XML\/1998\/namespace"$/;"	l
nanoTime	scala/actors/threadpool/helpers/NanoTimer.java	/^    long nanoTime();$/;"	m	interface:NanoTimer
nanoTime	scala/actors/threadpool/helpers/Utils.java	/^        public long nanoTime() {$/;"	m	class:Utils.MillisProvider
nanoTime	scala/actors/threadpool/helpers/Utils.java	/^        public long nanoTime() {$/;"	m	class:Utils.SunPerfProvider
nanoTime	scala/actors/threadpool/helpers/Utils.java	/^    public static long nanoTime() {$/;"	m	class:Utils
nanoTimer	scala/actors/threadpool/helpers/Utils.java	/^    private final static NanoTimer nanoTimer;$/;"	f	class:Utils	file:
nat	scala/io/BytePickle.scala	/^  def nat: SPU[Int] = new SPU[Int] {$/;"	m
nat2Bytes	scala/io/BytePickle.scala	/^  def nat2Bytes(x: Int): Array[Byte] = {$/;"	m
native	scala/native.scala	/^class native extends annotation.StaticAnnotation {}$/;"	c
native	scala/package.scala	/^  type native = annotation.native$/;"	T
nb	scala/xml/Utility.scala	/^    val nb = new NodeBuffer()$/;"	l
nch	scala/xml/transform/BasicTransformer.scala	/^        val nch = transform(ch)$/;"	l
ncurrent	scala/util/automata/Inclusion.scala	/^      val ncurrent = mark(current)$/;"	l
negate	scala/math/Numeric.scala	/^    def negate(x: BigDecimal): BigDecimal = -x$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: BigInt): BigInt = -x$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: Byte): Byte = (-x).toByte$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: Char): Char = (-x).toChar$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: Double): Double = -x$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: Float): Float = -x$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: Int): Int = -x$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: Long): Long = -x$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: Short): Short = (-x).toShort$/;"	m
negate	scala/math/Numeric.scala	/^  def negate(x: T): T$/;"	m
negate	scala/runtime/BoxesRunTime.java	/^    public static Object negate(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
nerrors	scala/io/Source.scala	/^  var nerrors = 0$/;"	l
nest	scala/text/Document.scala	/^  def nest(i: Int, d: Document): Document = DocNest(i, d)$/;"	m
nested	scala/util/parsing/ast/Binders.scala	/^    def nested: Scope[binderType] = this \/\/ TODO$/;"	m
nestedObjectSymbol	scala/reflect/generic/UnPickler.scala	/^        def nestedObjectSymbol: Symbol = {$/;"	m
newAbstractType	scala/reflect/generic/Symbols.scala	/^    def newAbstractType(name: TypeName, pos: Position = NoPosition): Symbol$/;"	m
newActor	scala/actors/IScheduler.scala	/^  def newActor(a: TrackedReactor): Unit$/;"	m
newActor	scala/actors/SchedulerAdapter.scala	/^  def newActor(a: TrackedReactor) =$/;"	m
newActor	scala/actors/scheduler/DelegatingScheduler.scala	/^  def newActor(actor: TrackedReactor) = synchronized {$/;"	m
newActor	scala/actors/scheduler/SingleThreadedScheduler.scala	/^  def newActor(actor: TrackedReactor) {}$/;"	m
newActor	scala/actors/scheduler/TerminationMonitor.scala	/^  def newActor(a: TrackedReactor) = synchronized {$/;"	m
newAdapter	scala/xml/factory/XMLLoader.scala	/^    val newAdapter = adapter$/;"	l
newAliasType	scala/reflect/generic/Symbols.scala	/^    def newAliasType(name: TypeName, pos: Position = NoPosition): Symbol$/;"	m
newAlt	scala/xml/dtd/ContentModel.scala	/^    val newAlt = r match { case Alt(rs @ _*) => Alt(rs drop 1: _*) }$/;"	l
newArray	scala/reflect/ClassManifest.scala	/^  def newArray(len: Int): Array[T] =$/;"	m
newArray2	scala/reflect/ClassManifest.scala	/^  def newArray2(len: Int): Array[Array[T]] =$/;"	m
newArray3	scala/reflect/ClassManifest.scala	/^  def newArray3(len: Int): Array[Array[Array[T]]] =$/;"	m
newArray4	scala/reflect/ClassManifest.scala	/^  def newArray4(len: Int): Array[Array[Array[Array[T]]]] =$/;"	m
newArray5	scala/reflect/ClassManifest.scala	/^  def newArray5(len: Int): Array[Array[Array[Array[Array[T]]]]] =$/;"	m
newArrayBuilder	scala/reflect/ClassManifest.scala	/^  def newArrayBuilder(): ArrayBuilder[T] = $/;"	m
newBlockIndex	scala/collection/immutable/Vector.scala	/^            val newBlockIndex = blockIndex + 32$/;"	l
newBlockIndex	scala/collection/immutable/Vector.scala	/^            val newBlockIndex = blockIndex + shift$/;"	l
newBlockIndex	scala/collection/immutable/Vector.scala	/^            val newBlockIndex = blockIndex - 32$/;"	l
newBlockIndex	scala/collection/immutable/Vector.scala	/^            val newBlockIndex = blockIndex - shift$/;"	l
newBlockIndex	scala/collection/immutable/Vector.scala	/^          val newBlockIndex = blockIndex + move$/;"	l
newBlockIndex	scala/collection/immutable/Vector.scala	/^          val newBlockIndex = blockIndex$/;"	l
newBlockIndex	scala/collection/immutable/Vector.scala	/^        val newBlockIndex = blockIndex+32$/;"	l
newBlockIndex	scala/collection/immutable/Vector.scala	/^      val newBlockIndex = blockIndex+32$/;"	l
newBuilder	scala/Array.scala	/^  def newBuilder[T](implicit m: ClassManifest[T]): ArrayBuilder[T] = ArrayBuilder.make[T]()(m)$/;"	m
newBuilder	scala/Enumeration.scala	/^    def newBuilder: Builder[Value, ValueSet] = new SetBuilder(empty)$/;"	m
newBuilder	scala/collection/BitSet.scala	/^  def newBuilder = immutable.BitSet.newBuilder$/;"	m
newBuilder	scala/collection/GenIterable.scala	/^  def newBuilder[A] = Iterable.newBuilder$/;"	m
newBuilder	scala/collection/GenSeq.scala	/^  def newBuilder[A] = Seq.newBuilder$/;"	m
newBuilder	scala/collection/GenSet.scala	/^  def newBuilder[A] = Set.newBuilder$/;"	m
newBuilder	scala/collection/GenTraversable.scala	/^  def newBuilder[A] = Traversable.newBuilder$/;"	m
newBuilder	scala/collection/IndexedSeq.scala	/^  def newBuilder[A]: Builder[A, IndexedSeq[A]] = immutable.IndexedSeq.newBuilder[A]$/;"	m
newBuilder	scala/collection/Iterable.scala	/^  def newBuilder[A]: Builder[A, Iterable[A]] = immutable.Iterable.newBuilder[A]$/;"	m
newBuilder	scala/collection/JavaConversions.scala	/^    def newBuilder[B] = new mutable.ArrayBuffer[B]$/;"	m
newBuilder	scala/collection/LinearSeq.scala	/^  def newBuilder[A]: Builder[A, LinearSeq[A]] = immutable.LinearSeq.newBuilder[A]$/;"	m
newBuilder	scala/collection/Seq.scala	/^  def newBuilder[A]: Builder[A, Seq[A]] = immutable.Seq.newBuilder[A]$/;"	m
newBuilder	scala/collection/Set.scala	/^  def newBuilder[A] = immutable.Set.newBuilder[A]$/;"	m
newBuilder	scala/collection/Traversable.scala	/^  def newBuilder[A]: Builder[A, Traversable[A]] = immutable.Traversable.newBuilder[A]$/;"	m
newBuilder	scala/collection/generic/BitSetFactory.scala	/^  def newBuilder: Builder[Int, Coll]$/;"	m
newBuilder	scala/collection/generic/GenMapFactory.scala	/^  def newBuilder[A, B]: Builder[(A, B), CC[A, B]] = new MapBuilder[A, B, CC[A, B]](empty[A, B])$/;"	m
newBuilder	scala/collection/generic/GenSetFactory.scala	/^  def newBuilder[A]: Builder[A, CC[A]]$/;"	m
newBuilder	scala/collection/generic/GenericClassManifestCompanion.scala	/^  def newBuilder[A](implicit ord: ClassManifest[A]): Builder[A, CC[A]]$/;"	m
newBuilder	scala/collection/generic/GenericCompanion.scala	/^  def newBuilder[A]: Builder[A, CC[A]]$/;"	m
newBuilder	scala/collection/generic/GenericOrderedCompanion.scala	/^  def newBuilder[A](implicit ord: Ordering[A]): Builder[A, CC[A]]$/;"	m
newBuilder	scala/collection/generic/GenericParCompanion.scala	/^  def newBuilder[A]: Combiner[A, CC[A]]$/;"	m
newBuilder	scala/collection/generic/ImmutableSetFactory.scala	/^  def newBuilder[A]: Builder[A, CC[A]] = new SetBuilder[A, CC[A]](empty[A])$/;"	m
newBuilder	scala/collection/generic/MutableSetFactory.scala	/^  def newBuilder[A]: Builder[A, CC[A]] = new GrowingBuilder[A, CC[A]](empty[A])$/;"	m
newBuilder	scala/collection/generic/ParSetFactory.scala	/^  def newBuilder[A]: Combiner[A, CC[A]] = newCombiner[A]$/;"	m
newBuilder	scala/collection/generic/SortedMapFactory.scala	/^  def newBuilder[A, B](implicit ord: Ordering[A]): Builder[(A, B), CC[A, B]] =$/;"	m
newBuilder	scala/collection/generic/SortedSetFactory.scala	/^  def newBuilder[A](implicit ord: Ordering[A]): Builder[A, CC[A]] = new SetBuilder[A, CC[A]](empty)$/;"	m
newBuilder	scala/collection/immutable/BitSet.scala	/^  def newBuilder: Builder[Int, BitSet] = new SetBuilder[Int, BitSet](empty)$/;"	m
newBuilder	scala/collection/immutable/IndexedSeq.scala	/^  def newBuilder[A]: Builder[A, IndexedSeq[A]] = Vector.newBuilder[A]$/;"	m
newBuilder	scala/collection/immutable/Iterable.scala	/^  def newBuilder[A]: Builder[A, Iterable[A]] = new mutable.ListBuffer$/;"	m
newBuilder	scala/collection/immutable/LinearSeq.scala	/^  def newBuilder[A]: Builder[A, LinearSeq[A]] = new mutable.ListBuffer$/;"	m
newBuilder	scala/collection/immutable/List.scala	/^  def newBuilder[A]: Builder[A, List[A]] = new ListBuffer[A]$/;"	m
newBuilder	scala/collection/immutable/Queue.scala	/^  def newBuilder[A]: Builder[A, Queue[A]] = new ListBuffer[A] mapResult (x => new Queue[A](Nil, x.toList))$/;"	m
newBuilder	scala/collection/immutable/Seq.scala	/^  def newBuilder[A]: Builder[A, Seq[A]] = new mutable.ListBuffer$/;"	m
newBuilder	scala/collection/immutable/Stack.scala	/^  def newBuilder[A]: Builder[A, Stack[A]] = new ArrayBuffer[A] mapResult (buf => new Stack(buf.toList))$/;"	m
newBuilder	scala/collection/immutable/Stream.scala	/^  def newBuilder[A]: Builder[A, Stream[A]] = new StreamBuilder[A]$/;"	m
newBuilder	scala/collection/immutable/Traversable.scala	/^  def newBuilder[A]: Builder[A, Traversable[A]] = new mutable.ListBuffer$/;"	m
newBuilder	scala/collection/immutable/Vector.scala	/^  def newBuilder[A]: Builder[A, Vector[A]] = new VectorBuilder[A]$/;"	m
newBuilder	scala/collection/immutable/WrappedString.scala	/^  def newBuilder: Builder[Char, WrappedString] = StringBuilder.newBuilder mapResult (x => new WrappedString(x))$/;"	m
newBuilder	scala/collection/mutable/ArrayBuffer.scala	/^  def newBuilder[A]: Builder[A, ArrayBuffer[A]] = new ArrayBuffer[A]$/;"	m
newBuilder	scala/collection/mutable/ArraySeq.scala	/^  def newBuilder[A]: Builder[A, ArraySeq[A]] = $/;"	m
newBuilder	scala/collection/mutable/ArrayStack.scala	/^  def newBuilder[A]: Builder[A, ArrayStack[A]] = new ArrayStack[A]$/;"	m
newBuilder	scala/collection/mutable/BitSet.scala	/^  def newBuilder: Builder[Int, BitSet] = new GrowingBuilder[Int, BitSet](empty)$/;"	m
newBuilder	scala/collection/mutable/Buffer.scala	/^  def newBuilder[A]: Builder[A, Buffer[A]] = new ArrayBuffer$/;"	m
newBuilder	scala/collection/mutable/DoubleLinkedList.scala	/^  def newBuilder[A]: Builder[A, DoubleLinkedList[A]] =$/;"	m
newBuilder	scala/collection/mutable/IndexedSeq.scala	/^  def newBuilder[A]: Builder[A, IndexedSeq[A]] = new ArrayBuffer[A]$/;"	m
newBuilder	scala/collection/mutable/Iterable.scala	/^  def newBuilder[A]: Builder[A, Iterable[A]] = new ArrayBuffer$/;"	m
newBuilder	scala/collection/mutable/LinearSeq.scala	/^  def newBuilder[A]: Builder[A, LinearSeq[A]] = new MutableList[A]$/;"	m
newBuilder	scala/collection/mutable/LinkedList.scala	/^  def newBuilder[A]: Builder[A, LinkedList[A]] =$/;"	m
newBuilder	scala/collection/mutable/ListBuffer.scala	/^  def newBuilder[A]: Builder[A, ListBuffer[A]] = new GrowingBuilder(new ListBuffer[A])$/;"	m
newBuilder	scala/collection/mutable/MutableList.scala	/^  def newBuilder[A]: Builder[A, MutableList[A]] = new MutableList[A]$/;"	m
newBuilder	scala/collection/mutable/PriorityQueue.scala	/^  def newBuilder[A](implicit ord: Ordering[A]) = new PriorityQueue[A]$/;"	m
newBuilder	scala/collection/mutable/Queue.scala	/^  def newBuilder[A]: Builder[A, Queue[A]] = new MutableList[A] mapResult { _.toQueue }$/;"	m
newBuilder	scala/collection/mutable/ResizableArray.scala	/^  def newBuilder[A]: Builder[A, ResizableArray[A]] = new ArrayBuffer[A]$/;"	m
newBuilder	scala/collection/mutable/Seq.scala	/^  def newBuilder[A]: Builder[A, Seq[A]] = new ArrayBuffer$/;"	m
newBuilder	scala/collection/mutable/Stack.scala	/^  def newBuilder[A]: Builder[A, Stack[A]] = new StackBuilder[A]$/;"	m
newBuilder	scala/collection/mutable/StringBuilder.scala	/^  def newBuilder = new StringBuilder$/;"	m
newBuilder	scala/collection/mutable/Traversable.scala	/^  def newBuilder[A]: Builder[A, Traversable[A]] = new ArrayBuffer$/;"	m
newBuilder	scala/collection/mutable/UnrolledBuffer.scala	/^  def newBuilder[T](implicit m: ClassManifest[T]): Builder[T, UnrolledBuffer[T]] = new UnrolledBuffer[T]$/;"	m
newBuilder	scala/collection/mutable/WrappedArray.scala	/^  def newBuilder[A]: Builder[A, IndexedSeq[A]] = new ArrayBuffer$/;"	m
newBuilder	scala/collection/parallel/ParIterable.scala	/^  def newBuilder[T]: Combiner[T, ParIterable[T]] = ParArrayCombiner[T]$/;"	m
newBuilder	scala/collection/parallel/ParSeq.scala	/^  def newBuilder[T]: Combiner[T, ParSeq[T]] = ParArrayCombiner[T]$/;"	m
newBuilder	scala/collection/parallel/immutable/ParIterable.scala	/^  def newBuilder[T]: Combiner[T, ParIterable[T]] = ParVector.newBuilder[T]$/;"	m
newBuilder	scala/collection/parallel/immutable/ParSeq.scala	/^  def newBuilder[T]: Combiner[T, ParSeq[T]] = ParVector.newBuilder[T]$/;"	m
newBuilder	scala/collection/parallel/immutable/ParVector.scala	/^  def newBuilder[T]: Combiner[T, ParVector[T]] = newCombiner[T]$/;"	m
newBuilder	scala/collection/parallel/mutable/ParArray.scala	/^  def newBuilder[T]: Combiner[T, ParArray[T]] = newCombiner$/;"	m
newBuilder	scala/collection/parallel/mutable/ParIterable.scala	/^  def newBuilder[T]: Combiner[T, ParIterable[T]] = ParArrayCombiner[T]$/;"	m
newBuilder	scala/collection/parallel/mutable/ParSeq.scala	/^  def newBuilder[T]: Combiner[T, ParSeq[T]] = ParArrayCombiner[T]$/;"	m
newBuilder	scala/xml/NodeSeq.scala	/^  def newBuilder: Builder[Node, NodeSeq] = new ListBuffer[Node] mapResult fromSeq$/;"	m
newCachedThreadPool	scala/actors/threadpool/Executors.java	/^    public static ExecutorService newCachedThreadPool() {$/;"	m	class:Executors
newCachedThreadPool	scala/actors/threadpool/Executors.java	/^    public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) {$/;"	m	class:Executors
newCanBuildFrom	scala/collection/generic/SortedSetFactory.scala	/^  implicit def newCanBuildFrom[A](implicit ord : Ordering[A]) : CanBuildFrom[Coll, A, CC[A]] = new SortedSetCanBuildFrom()(ord);$/;"	m
newClass	scala/reflect/generic/Symbols.scala	/^    def newClass(name: TypeName, pos: Position = NoPosition): Symbol$/;"	m
newCombiner	scala/collection/generic/GenericParCompanion.scala	/^  def newCombiner[A]: Combiner[A, CC[A]]$/;"	m
newCombiner	scala/collection/generic/GenericParCompanion.scala	/^  def newCombiner[P, Q]: Combiner[(P, Q), CC[P, Q]]$/;"	m
newCombiner	scala/collection/generic/ParMapFactory.scala	/^  def newCombiner[K, V]: Combiner[(K, V), CC[K, V]]$/;"	m
newCombiner	scala/collection/generic/ParSetFactory.scala	/^  def newCombiner[A]: Combiner[A, CC[A]]$/;"	m
newCombiner	scala/collection/parallel/ParIterable.scala	/^  def newCombiner[T]: Combiner[T, ParIterable[T]] = ParArrayCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/ParMap.scala	/^  def newCombiner[K, V]: Combiner[(K, V), ParMap[K, V]] = mutable.ParHashMapCombiner[K, V]$/;"	m
newCombiner	scala/collection/parallel/ParSeq.scala	/^  def newCombiner[T]: Combiner[T, ParSeq[T]] = ParArrayCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/ParSet.scala	/^  def newCombiner[T]: Combiner[T, ParSet[T]] = mutable.ParHashSetCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/immutable/ParHashMap.scala	/^  def newCombiner[K, V]: Combiner[(K, V), ParHashMap[K, V]] = HashMapCombiner[K, V]$/;"	m
newCombiner	scala/collection/parallel/immutable/ParHashSet.scala	/^  def newCombiner[T]: Combiner[T, ParHashSet[T]] = HashSetCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/immutable/ParIterable.scala	/^  def newCombiner[T]: Combiner[T, ParIterable[T]] = ParVector.newCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/immutable/ParMap.scala	/^  def newCombiner[K, V]: Combiner[(K, V), ParMap[K, V]] = HashMapCombiner[K, V]$/;"	m
newCombiner	scala/collection/parallel/immutable/ParSeq.scala	/^  def newCombiner[T]: Combiner[T, ParSeq[T]] = ParVector.newCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/immutable/ParSet.scala	/^  def newCombiner[T]: Combiner[T, ParSet[T]] = HashSetCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/immutable/ParVector.scala	/^  def newCombiner[T]: Combiner[T, ParVector[T]] = new LazyParVectorCombiner[T] \/\/ was: with EPC[T, ParVector[T]]$/;"	m
newCombiner	scala/collection/parallel/mutable/ParArray.scala	/^  def newCombiner[T]: Combiner[T, ParArray[T]] = ParArrayCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/mutable/ParHashMap.scala	/^  def newCombiner[K, V]: Combiner[(K, V), ParHashMap[K, V]] = ParHashMapCombiner.apply[K, V]$/;"	m
newCombiner	scala/collection/parallel/mutable/ParIterable.scala	/^  def newCombiner[T]: Combiner[T, ParIterable[T]] = ParArrayCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/mutable/ParMap.scala	/^  def newCombiner[K, V]: Combiner[(K, V), ParMap[K, V]] = ParHashMapCombiner.apply[K, V]$/;"	m
newCombiner	scala/collection/parallel/mutable/ParSeq.scala	/^  def newCombiner[T]: Combiner[T, ParSeq[T]] = ParArrayCombiner[T]$/;"	m
newCondition	scala/actors/threadpool/locks/Lock.java	/^    Condition newCondition();$/;"	m	interface:Lock
newCondition	scala/actors/threadpool/locks/ReentrantLock.java	/^    public Condition newCondition() {$/;"	m	class:ReentrantLock
newCondition	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        public Condition newCondition() {$/;"	m	class:ReentrantReadWriteLock.ReadLock
newCondition	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        public Condition newCondition() {$/;"	m	class:ReentrantReadWriteLock.WriteLock
newElem	scala/collection/mutable/ListBuffer.scala	/^          val newElem = new :: (elems.head, cursor.tail)$/;"	l
newElem	scala/collection/mutable/ListBuffer.scala	/^          val newElem = new :: (elems.head, start)$/;"	l
newElem	scala/collection/mutable/ListBuffer.scala	/^        val newElem = new :: (x, cursor.tail.tail)$/;"	l
newElem	scala/collection/mutable/ListBuffer.scala	/^        val newElem = new :: (x, start.tail);$/;"	l
newElem	scala/collection/mutable/ListBuffer.scala	/^    val newElem = new :: (x, start)$/;"	l
newFixedThreadPool	scala/actors/threadpool/Executors.java	/^    public static ExecutorService newFixedThreadPool(int nThreads) {$/;"	m	class:Executors
newFixedThreadPool	scala/actors/threadpool/Executors.java	/^    public static ExecutorService newFixedThreadPool(int nThreads, ThreadFactory threadFactory) {$/;"	m	class:Executors
newFocus	scala/collection/immutable/Vector.scala	/^            val newFocus = focus + shift$/;"	l
newFocus	scala/collection/immutable/Vector.scala	/^            val newFocus = focus - shift$/;"	l
newFocus	scala/collection/immutable/Vector.scala	/^            val newFocus = focus$/;"	l
newFocus	scala/collection/immutable/Vector.scala	/^          val newFocus = focus + move$/;"	l
newFocus	scala/collection/immutable/Vector.scala	/^          val newFocus = focus$/;"	l
newInput	scala/xml/parsing/MarkupParser.scala	/^      val newInput = new WithLookAhead(curInput)$/;"	l
newIterator	scala/collection/TraversableOnce.scala	/^    def newIterator = new ArrayBuffer[A] mapResult (_.iterator)$/;"	m
newIterator	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^    def newIterator(index: Int, until: Int, totalsize: Int): IterableSplitter[T]$/;"	m
newIterator	scala/collection/parallel/mutable/ParHashMap.scala	/^    def newIterator(idxFrom: Int, idxUntil: Int, totalSz: Int, es: DefaultEntry[K, V]) =$/;"	m
newIterator	scala/collection/parallel/mutable/ParHashSet.scala	/^    def newIterator(start: Int, until: Int, total: Int) = new ParHashSetIterator(start, until, total) with SCPI$/;"	m
newIterator	scala/collection/parallel/mutable/ParHashTable.scala	/^    def newIterator(idxFrom: Int, idxUntil: Int, totalSize: Int, es: Entry): IterRepr$/;"	m
newLazyCombiner	scala/collection/parallel/mutable/LazyCombiner.scala	/^  def newLazyCombiner(buffchain: ArrayBuffer[Buff]): LazyCombiner[Elem, To, Buff]$/;"	m
newLazyCombiner	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^  def newLazyCombiner(c: ArrayBuffer[ExposedArrayBuffer[T]]) = ResizableParArrayCombiner(c)$/;"	m
newLazyTypeRef	scala/reflect/generic/UnPickler.scala	/^    def newLazyTypeRef(i: Int): LazyType$/;"	m
newLazyTypeRefAndAlias	scala/reflect/generic/UnPickler.scala	/^    def newLazyTypeRefAndAlias(i: Int, j: Int): LazyType$/;"	m
newLeft	scala/collection/immutable/RedBlack.scala	/^      val newLeft = left.rng(from, None)$/;"	l
newMethod	scala/reflect/generic/Symbols.scala	/^    def newMethod(name: TermName, pos: Position = NoPosition): Symbol$/;"	m
newModule	scala/reflect/generic/Symbols.scala	/^    def newModule(name: TermName, clazz: Symbol, pos: Position = NoPosition): Symbol$/;"	m
newModuleClass	scala/reflect/generic/Symbols.scala	/^    def newModuleClass(name: TypeName, pos: Position = NoPosition): Symbol$/;"	m
newName	scala/actors/remote/FreshNameCreator.scala	/^  def newName(): Symbol = {$/;"	m
newName	scala/actors/remote/FreshNameCreator.scala	/^  def newName(prefix: String): Symbol = {$/;"	m
newRight	scala/collection/immutable/RedBlack.scala	/^      val newRight = right.rng(None, until)$/;"	l
newScope	scala/reflect/generic/Scopes.scala	/^  def newScope(): Scope$/;"	m
newSingleThreadExecutor	scala/actors/threadpool/Executors.java	/^    public static ExecutorService newSingleThreadExecutor() {$/;"	m	class:Executors
newSingleThreadExecutor	scala/actors/threadpool/Executors.java	/^    public static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory) {$/;"	m	class:Executors
newSize	scala/collection/mutable/OpenHashMap.scala	/^    val newSize = 4 * oldSize;$/;"	l
newTaskFor	scala/actors/threadpool/AbstractExecutorService.java	/^    protected RunnableFuture newTaskFor(Callable callable) {$/;"	m	class:AbstractExecutorService
newTaskFor	scala/actors/threadpool/AbstractExecutorService.java	/^    protected RunnableFuture newTaskFor(Runnable runnable, Object value) {$/;"	m	class:AbstractExecutorService
newTaskFor	scala/actors/threadpool/ExecutorCompletionService.java	/^    private RunnableFuture newTaskFor(Callable task) {$/;"	m	class:ExecutorCompletionService	file:
newTaskFor	scala/actors/threadpool/ExecutorCompletionService.java	/^    private RunnableFuture newTaskFor(Runnable task, Object result) {$/;"	m	class:ExecutorCompletionService	file:
newTaskImpl	scala/collection/parallel/Tasks.scala	/^  def newTaskImpl[R, Tp](b: Task[R, Tp]) = new TaskImpl[R, Tp](b)$/;"	m
newTermName	scala/reflect/generic/Names.scala	/^  def newTermName(cs: Array[Byte], offset: Int, len: Int): TermName$/;"	m
newTermName	scala/reflect/generic/Names.scala	/^  def newTermName(cs: Array[Char], offset: Int, len: Int): TermName$/;"	m
newTermName	scala/reflect/generic/Names.scala	/^  def newTermName(s: String): TermName$/;"	m
newThread	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^    def newThread(r: Runnable): Thread = {$/;"	m
newThread	scala/actors/threadpool/Executors.java	/^        public Thread newThread(Runnable r) {$/;"	m	class:Executors.DefaultThreadFactory
newThread	scala/actors/threadpool/Executors.java	/^        public Thread newThread(final Runnable r) {$/;"	m	class:Executors.PrivilegedThreadFactory
newThread	scala/actors/threadpool/ThreadFactory.java	/^    Thread newThread(Runnable r);$/;"	m	interface:ThreadFactory
newThread	scala/collection/parallel/Tasks.scala	/^      def newThread(r: Runnable) = {$/;"	m
newTreePrinter	scala/reflect/generic/Trees.scala	/^  def newTreePrinter(out: PrintWriter): AbsTreePrinter$/;"	m
newTypeName	scala/reflect/generic/Names.scala	/^  def newTypeName(cs: Array[Byte], offset: Int, len: Int): TypeName$/;"	m
newTypeName	scala/reflect/generic/Names.scala	/^  def newTypeName(cs: Array[Char], offset: Int, len: Int): TypeName$/;"	m
newTypeName	scala/reflect/generic/Names.scala	/^  def newTypeName(s: String): TypeName$/;"	m
newValue	scala/reflect/generic/Symbols.scala	/^    def newValue(name: TermName, pos: Position = NoPosition): Symbol$/;"	m
newWorker	scala/actors/remote/TcpService.scala	/^          val newWorker = connect(node)$/;"	l
newWrappedArray	scala/reflect/ClassManifest.scala	/^  def newWrappedArray(len: Int): WrappedArray[T] =$/;"	m
newar	scala/collection/mutable/ResizableArray.scala	/^      val newar: Array[AnyRef] = new Array(newsize)$/;"	l
newarr	scala/collection/parallel/mutable/ParArray.scala	/^    val newarr = new Array[T](arr.length)$/;"	l
newarray	scala/collection/mutable/ArrayBuffer.scala	/^      val newarray = new Array[AnyRef](len)$/;"	l
newarray	scala/collection/parallel/mutable/package.scala	/^        val newarray = new Array[AnyRef](len)$/;"	l
newelems	scala/collection/BitSetLike.scala	/^    val newelems = new Array[Long](newlen)$/;"	l
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Boolean](size)$/;"	l
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Byte](size)$/;"	l
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Char](size)$/;"	l
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Double](size)$/;"	l
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Float](size)$/;"	l
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Int](size)$/;"	l
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Long](size)$/;"	l
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Short](size)$/;"	l
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[T](size)$/;"	l
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Unit](size)$/;"	l
newelems	scala/collection/mutable/WrappedArrayBuilder.scala	/^    val newelems = manifest.newWrappedArray(size)$/;"	l
newhead	scala/collection/mutable/UnrolledBuffer.scala	/^      val newhead = new Unrolled[T](buff)$/;"	l
newhm	scala/collection/immutable/HashMap.scala	/^      def newhm(lm: ListMap[A, B @uV]) = new HashMapCollision1(hash, lm)$/;"	m
newleft	scala/collection/immutable/IntMap.scala	/^        val newleft = left.modifyOrRemove(f);$/;"	l
newleft	scala/collection/immutable/LongMap.scala	/^        val newleft = left.modifyOrRemove(f);$/;"	l
newlen	scala/collection/BitSetLike.scala	/^    var newlen = len$/;"	l
newlen	scala/collection/mutable/BitSet.scala	/^      var newlen = nwords$/;"	l
newlevel	scala/collection/immutable/HashMap.scala	/^            val newlevel = new HashTrieMap[A, B1](1 << thisindex, new Array[HashMap[A, B1]](1), 2)$/;"	l
newnextnode	scala/collection/mutable/UnrolledBuffer.scala	/^      val newnextnode = new Unrolled[T](0, new Array(array.length), null, buff)$/;"	l
newright	scala/collection/immutable/IntMap.scala	/^        val newright = right.modifyOrRemove(f);$/;"	l
newright	scala/collection/immutable/LongMap.scala	/^        val newright = right.modifyOrRemove(f);$/;"	l
newsb	scala/util/matching/Regex.scala	/^      val newsb = new java.lang.StringBuffer(sb)$/;"	l
newsize	scala/collection/immutable/TreeMap.scala	/^    val newsize = if (tree.lookup(key).isEmpty) size + 1 else size$/;"	l
newsize	scala/collection/immutable/TreeSet.scala	/^    val newsize = if (tree.lookup(elem).isEmpty) size + 1 else size$/;"	l
newsize	scala/collection/mutable/ArrayBuilder.scala	/^        var newsize = if (capacity == 0) 16 else capacity * 2$/;"	l
newsize	scala/collection/mutable/ResizableArray.scala	/^      var newsize = array.length * 2$/;"	l
newsize	scala/collection/mutable/WrappedArrayBuilder.scala	/^      var newsize = if (capacity == 0) 16 else capacity * 2$/;"	l
next	scala/Product.scala	/^    def next() = { val result = productElement(c); c += 1; result }$/;"	m
next	scala/actors/LinkedNode.java	/^  public LinkedNode next;$/;"	f	class:LinkedNode
next	scala/actors/threadpool/LinkedBlockingQueue.java	/^        Node<E> next;$/;"	f	class:LinkedBlockingQueue.Node
next	scala/actors/threadpool/LinkedBlockingQueue.java	/^        public E next() {$/;"	m	class:LinkedBlockingQueue.Itr
next	scala/actors/threadpool/SynchronousQueue.java	/^        Node next;$/;"	f	class:SynchronousQueue.Node
next	scala/actors/threadpool/SynchronousQueue.java	/^        public Object next() {$/;"	m	class:SynchronousQueue.EmptyIterator
next	scala/actors/threadpool/helpers/WaitQueue.java	/^        WaitNode next = null;$/;"	f	class:WaitQueue.WaitNode
next	scala/collection/BitSetLike.scala	/^    def next(): Int = $/;"	m
next	scala/collection/IndexedSeqLike.scala	/^    def next: A = {$/;"	m
next	scala/collection/IndexedSeqOptimized.scala	/^    def next: A = $/;"	m
next	scala/collection/Iterator.scala	/^      def next() = if (!lookahead.isEmpty) lookahead.dequeue() $/;"	m
next	scala/collection/Iterator.scala	/^      def next() = it.next()$/;"	m
next	scala/collection/Iterator.scala	/^      def next() = { skip(); pf(self.next()) }$/;"	m
next	scala/collection/Iterator.scala	/^      def next() = { skip(); self.next() }$/;"	m
next	scala/collection/Iterator.scala	/^      def next() = {$/;"	m
next	scala/collection/Iterator.scala	/^      def next(): A = self.synchronized {$/;"	m
next	scala/collection/Iterator.scala	/^      def next(): A =$/;"	m
next	scala/collection/Iterator.scala	/^    def next = (self.next, that.next)$/;"	m
next	scala/collection/Iterator.scala	/^    def next = elem$/;"	m
next	scala/collection/Iterator.scala	/^    def next = {$/;"	m
next	scala/collection/Iterator.scala	/^    def next() = $/;"	m
next	scala/collection/Iterator.scala	/^    def next() = f(self.next())$/;"	m
next	scala/collection/Iterator.scala	/^    def next() = if (hasNext) { hdDefined = false; hd } else empty.next()$/;"	m
next	scala/collection/Iterator.scala	/^    def next() = if (hasNext) {$/;"	m
next	scala/collection/Iterator.scala	/^    def next() = { hasNext; cur.next() }$/;"	m
next	scala/collection/Iterator.scala	/^    def next() = { val a = n productElement c; c += 1; a }$/;"	m
next	scala/collection/Iterator.scala	/^    def next(): (A1, B1) = $/;"	m
next	scala/collection/Iterator.scala	/^    def next(): A = { cnt += 1; self.next }$/;"	m
next	scala/collection/Iterator.scala	/^    def next(): A =$/;"	m
next	scala/collection/Iterator.scala	/^    def next(): B = (if (hasNext) cur else empty).next() $/;"	m
next	scala/collection/Iterator.scala	/^    def next(): B = {$/;"	m
next	scala/collection/Iterator.scala	/^    def next(): Int = { val j = i; i = step(i); j }$/;"	m
next	scala/collection/Iterator.scala	/^    def next(): Int = { val result = i; i += step; result }$/;"	m
next	scala/collection/Iterator.scala	/^    def next(): Int =$/;"	m
next	scala/collection/Iterator.scala	/^    def next(): Nothing = throw new NoSuchElementException("next on empty iterator")$/;"	m
next	scala/collection/Iterator.scala	/^    def next(): T = $/;"	m
next	scala/collection/Iterator.scala	/^    def next(): T = {$/;"	m
next	scala/collection/Iterator.scala	/^  def next(): A$/;"	m
next	scala/collection/JavaConversions.scala	/^        def next() = {$/;"	m
next	scala/collection/JavaConversions.scala	/^      def next = { val e = ui.next ; prev = Some(e) ; e }$/;"	m
next	scala/collection/JavaConversions.scala	/^      def next() = { val e = ui.next ; (e.getKey, e.getValue) }$/;"	m
next	scala/collection/JavaConversions.scala	/^      def next() = { val e = ui.next ; (e.getKey.asInstanceOf[String], e.getValue.asInstanceOf[String]) }$/;"	m
next	scala/collection/JavaConversions.scala	/^    def next() = underlying.next$/;"	m
next	scala/collection/JavaConversions.scala	/^    def next() = underlying.nextElement$/;"	m
next	scala/collection/LinearSeqLike.scala	/^    def next: A = $/;"	m
next	scala/collection/MapLike.scala	/^    def next() = iter.next._1$/;"	m
next	scala/collection/MapLike.scala	/^    def next() = iter.next._2$/;"	m
next	scala/collection/SeqLike.scala	/^    def next: Repr = {$/;"	m
next	scala/collection/SetLike.scala	/^    def next = {$/;"	m
next	scala/collection/SetLike.scala	/^    def next: This = {$/;"	m
next	scala/collection/TraversableOnce.scala	/^      def next(): A = if (hasNext) it.next() else Iterator.empty.next()$/;"	m
next	scala/collection/generic/Sorted.scala	/^    val next = i.next$/;"	l
next	scala/collection/immutable/IntMap.scala	/^  final def next : T = $/;"	m
next	scala/collection/immutable/List.scala	/^      val next = step(i)$/;"	l
next	scala/collection/immutable/ListMap.scala	/^      def next: (A,B) =$/;"	m
next	scala/collection/immutable/ListSet.scala	/^    def next: A =$/;"	m
next	scala/collection/immutable/LongMap.scala	/^  final def next : T = $/;"	m
next	scala/collection/immutable/PagedSeq.scala	/^  var next  : Page[T] = null$/;"	l
next	scala/collection/immutable/RedBlack.scala	/^        val next = if (leftMost) zipper.head.left else zipper.head.right$/;"	l
next	scala/collection/immutable/Stream.scala	/^  def next: A =$/;"	m
next	scala/collection/immutable/StringLike.scala	/^    def next(): String = {$/;"	m
next	scala/collection/immutable/TrieIterator.scala	/^  def next: T = {$/;"	m
next	scala/collection/immutable/Vector.scala	/^    def next: A = $/;"	m
next	scala/collection/immutable/Vector.scala	/^  def next(): A = {$/;"	m
next	scala/collection/mutable/ArrayStack.scala	/^    def next() = {$/;"	m
next	scala/collection/mutable/FlatHashTable.scala	/^    def next(): A =$/;"	m
next	scala/collection/mutable/HashEntry.scala	/^  var next: E = _$/;"	l
next	scala/collection/mutable/HashMap.scala	/^    def next() = iter.next.key$/;"	m
next	scala/collection/mutable/HashMap.scala	/^    def next() = iter.next.value$/;"	m
next	scala/collection/mutable/HashTable.scala	/^    def next() = {$/;"	m
next	scala/collection/mutable/LinkedHashMap.scala	/^    def next = $/;"	m
next	scala/collection/mutable/LinkedListLike.scala	/^    def next = {$/;"	m
next	scala/collection/mutable/LinkedListLike.scala	/^  var next: This = _$/;"	l
next	scala/collection/mutable/ListBuffer.scala	/^    def next(): A =$/;"	m
next	scala/collection/mutable/OpenHashMap.scala	/^    def next = {$/;"	m
next	scala/collection/mutable/PriorityQueue.scala	/^    def next(): A = {$/;"	m
next	scala/collection/mutable/UnrolledBuffer.scala	/^    def next = if (hasNext) {$/;"	m
next	scala/collection/parallel/ParSeqLike.scala	/^    def next: T = if (i < end) {$/;"	m
next	scala/collection/parallel/RemainsIterator.scala	/^    def next = (self.next, that.next)$/;"	m
next	scala/collection/parallel/RemainsIterator.scala	/^    def next = f(self.next)$/;"	m
next	scala/collection/parallel/RemainsIterator.scala	/^    def next = if (curr eq self) {$/;"	m
next	scala/collection/parallel/RemainsIterator.scala	/^    def next = if (self.hasNext) {$/;"	m
next	scala/collection/parallel/RemainsIterator.scala	/^    def next = trio.next$/;"	m
next	scala/collection/parallel/RemainsIterator.scala	/^    def next = { remaining -= 1; self.next }$/;"	m
next	scala/collection/parallel/Splitter.scala	/^    def next = Iterator.empty.next$/;"	m
next	scala/collection/parallel/immutable/ParHashMap.scala	/^    def next: (K, V) = {$/;"	m
next	scala/collection/parallel/immutable/ParHashSet.scala	/^    def next: T = {$/;"	m
next	scala/collection/parallel/immutable/ParRange.scala	/^    final def next = if (hasNext) {$/;"	m
next	scala/collection/parallel/immutable/package.scala	/^      def next = { i += 1; elem }$/;"	m
next	scala/collection/parallel/mutable/ParArray.scala	/^    def next = {$/;"	m
next	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^    def next() = if (hasNext) {$/;"	m
next	scala/collection/parallel/mutable/ParHashTable.scala	/^    def next: T = {$/;"	m
next	scala/collection/parallel/package.scala	/^    def next = {$/;"	m
next	scala/concurrent/Channel.scala	/^    var next: LinkedList[A] = null$/;"	l
next	scala/io/Source.scala	/^    def next = {$/;"	m
next	scala/io/Source.scala	/^    def next: Char = {$/;"	m
next	scala/io/Source.scala	/^  def next: Char = positioner.next$/;"	m
next	scala/reflect/ClassManifest.scala	/^        val next = left.head$/;"	l
next	scala/sys/process/BasicIO.scala	/^      def next(): Stream[T] = q.take match {$/;"	m
next	scala/util/automata/DetWordAutom.scala	/^  def next(q: Int, label: T) = delta(q).getOrElse(label, default(q))$/;"	m
next	scala/util/automata/NondetWordAutom.scala	/^  def next(Q: BitSet, a: T): BitSet = next(Q, next(_, a))$/;"	m
next	scala/util/automata/NondetWordAutom.scala	/^  def next(q: Int, a: T): BitSet = delta(q).getOrElse(a, default(q))$/;"	m
next	scala/util/matching/Regex.scala	/^      def next = { self.next; new Match(source, matcher, groupNames).force }$/;"	m
next	scala/util/matching/Regex.scala	/^    def next: String = {$/;"	m
next	scala/util/parsing/combinator/Parsers.scala	/^    val next: Input$/;"	l
next	scala/xml/Attribute.scala	/^  val next: MetaData$/;"	l
next	scala/xml/MetaData.scala	/^  def next: MetaData$/;"	m
next	scala/xml/Null.scala	/^  def next = null$/;"	m
next	scala/xml/PrefixedAttribute.scala	/^  val next: MetaData)$/;"	l
next	scala/xml/UnprefixedAttribute.scala	/^  val next = if (value ne null) next1 else next1.remove(key)$/;"	l
next	scala/xml/dtd/Scanner.scala	/^  final def next() = if (it.hasNext) c = it.next else c = ENDCH$/;"	m
next	scala/xml/parsing/MarkupParser.scala	/^        def next() = { val x = underlying.next(); queue += x; x }$/;"	m
next	scala/xml/parsing/MarkupParser.scala	/^      def next() = if (!queue.isEmpty) queue.dequeue() else underlying.next()$/;"	m
next	scala/xml/pull/XMLEventReader.scala	/^  def next() = {$/;"	m
nextBoolean	scala/util/Random.scala	/^  def nextBoolean(): Boolean = self.nextBoolean()$/;"	m
nextBytes	scala/util/Random.scala	/^  def nextBytes(bytes: Array[Byte]) { self.nextBytes(bytes) }$/;"	m
nextClient	scala/actors/remote/TcpService.scala	/^        val nextClient = socket.accept()$/;"	l
nextDefault	scala/util/automata/NondetWordAutom.scala	/^  def nextDefault(Q: BitSet): BitSet = next(Q, default)$/;"	m
nextDouble	scala/util/Random.scala	/^  def nextDouble(): Double = self.nextDouble()$/;"	m
nextElement	scala/collection/JavaConversions.scala	/^    def nextElement() = underlying.next$/;"	m
nextFloat	scala/util/Random.scala	/^  def nextFloat(): Float = self.nextFloat()$/;"	m
nextGaussian	scala/util/Random.scala	/^  def nextGaussian(): Double = self.nextGaussian()$/;"	m
nextInt	scala/util/Random.scala	/^  def nextInt(): Int = self.nextInt()$/;"	m
nextInt	scala/util/Random.scala	/^  def nextInt(n: Int): Int = self.nextInt(n)$/;"	m
nextLine	scala/io/BufferedSource.scala	/^    var nextLine: String = null$/;"	l
nextLoc	scala/io/BytePickle.scala	/^    def nextLoc() = { cnt += 1; cnt }$/;"	m
nextLong	scala/util/Random.scala	/^  def nextLong(): Long = self.nextLong()$/;"	m
nextMagicA	scala/util/MurmurHash.scala	/^  def nextMagicA(magicA: Int) = magicA*5 + hiddenMixerA$/;"	m
nextMagicB	scala/util/MurmurHash.scala	/^  def nextMagicB(magicB: Int) = magicB*5 + hiddenMixerB$/;"	m
nextNode	scala/actors/threadpool/LinkedBlockingQueue.java	/^        private Node<E> nextNode(Node<E> p) {$/;"	m	class:LinkedBlockingQueue.Itr	file:
nextPrintableChar	scala/util/Random.scala	/^  def nextPrintableChar(): Char = {$/;"	m
nextString	scala/util/Random.scala	/^  def nextString(length: Int) = {$/;"	m
nextToken	scala/xml/dtd/Scanner.scala	/^  final def nextToken() {$/;"	m
nextch	scala/xml/parsing/MarkupParser.scala	/^  def nextch = {$/;"	m
nextch	scala/xml/parsing/MarkupParserCommon.scala	/^  def nextch: Char$/;"	m
nextuntil	scala/collection/parallel/mutable/ParArray.scala	/^        val nextuntil = if ((i + CHECK_RATE) < until) (i + CHECK_RATE) else until$/;"	l
nextuntil	scala/collection/parallel/mutable/ParArray.scala	/^        val nextuntil = if (i + CHECK_RATE > until) until else i + CHECK_RATE$/;"	l
nfa	scala/xml/dtd/ContentModel.scala	/^    val nfa = Translator.automatonFrom(r, 1)$/;"	l
nfa	scala/xml/dtd/ElementValidator.scala	/^        val nfa = ContentModel.Translator.automatonFrom(r, 1)$/;"	l
nl	scala/runtime/ScalaRunTime.scala	/^    val nl = if (s contains "\\n") "\\n" else ""$/;"	l
nme	scala/reflect/generic/StdNames.scala	/^  val nme: LibraryTermNames$/;"	l
noCatch	scala/util/control/Exception.scala	/^  final val noCatch: Catch[Nothing] = new Catch(nothingCatcher) withDesc "<nothing>"$/;"	l
noSuchConstantTag	scala/reflect/generic/UnPickler.scala	/^    def noSuchConstantTag(tag: Int, len: Int): Constant =$/;"	m
noSuchElement	scala/collection/package.scala	/^    def noSuchElement(msg: String)   = throw new NoSuchElementException(msg)$/;"	m
noSuchTreeTag	scala/reflect/generic/UnPickler.scala	/^    def noSuchTreeTag(tag: Int, end: Int) = $/;"	m
noSuchTypeTag	scala/reflect/generic/UnPickler.scala	/^    def noSuchTypeTag(tag: Int, end: Int): Type =$/;"	m
noSuppression	scala/util/control/NoStackTrace.scala	/^  final val noSuppression = sys.SystemProperties.noTraceSupression.value$/;"	l
noTraceSupression	scala/sys/SystemProperties.scala	/^  lazy val noTraceSupression   = bool("scala.control.noTraceSuppression", "scala should not suppress any stack trace creation")$/;"	l
noTransform	scala/actors/ActorCanReply.scala	/^    val noTransform: PartialFunction[Any, Any] = { case x => x }$/;"	l
noTransform	scala/actors/Channel.scala	/^    val noTransform: PartialFunction[Any, Any] = { case x => x }$/;"	l
node	scala/actors/remote/Service.scala	/^  def node: Node$/;"	m
node	scala/actors/remote/TcpService.scala	/^    val node = parent.serializer.readObject(datain)$/;"	l
node	scala/actors/remote/TcpService.scala	/^  def node: Node = internalNode$/;"	m
node	scala/collection/mutable/UnrolledBuffer.scala	/^    var node: Unrolled[T] = headptr$/;"	l
node	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^      var node = buff.headPtr$/;"	l
nodeContainsText	scala/xml/parsing/FactoryAdapter.scala	/^  def nodeContainsText(localName: String): Boolean \/\/ abstract$/;"	m
nodeContainsText	scala/xml/parsing/NoBindingFactoryAdapter.scala	/^  def nodeContainsText(label: String) = true$/;"	m
nodeDown	scala/actors/remote/TcpService.scala	/^  def nodeDown(mnode: Node): Unit = synchronized {$/;"	m
nodeEquals	scala/xml/factory/NodeFactory.scala	/^  def nodeEquals(n: Node, pre: String, name: String, attrSeq:MetaData, scope: NamespaceBinding, children: Seq[Node]) =$/;"	m
nodes	scala/xml/persistent/CachedFileStorage.scala	/^  def nodes: Iterator[Node]  $/;"	m
nodes	scala/xml/persistent/SetStorage.scala	/^  def nodes = synchronized { theSet.iterator }$/;"	m
nodesize	scala/collection/immutable/HashMap.scala	/^      val nodesize = Integer.bitCount(bitmap)$/;"	l
noinline	scala/noinline.scala	/^class noinline extends annotation.StaticAnnotation$/;"	c
noinline	scala/package.scala	/^  type noinline = noannotation.inline$/;"	T
nonEmpty	scala/collection/GenTraversableOnce.scala	/^  def nonEmpty: Boolean$/;"	m
nonEmpty	scala/collection/TraversableOnce.scala	/^  def nonEmpty: Boolean = !isEmpty$/;"	m
nonEmpty	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def nonEmpty: Boolean$/;"	m
nonEmpty	scala/collection/parallel/ParIterableLike.scala	/^  def nonEmpty = size != 0$/;"	m
nonEmptyChildren	scala/xml/Node.scala	/^  def nonEmptyChildren: Seq[Node] = child filterNot (_.toString == "")$/;"	m
nonEmptyPrefix	scala/collection/immutable/Stream.scala	/^        var nonEmptyPrefix = this$/;"	l
nonzero	scala/util/parsing/json/Lexer.scala	/^  def nonzero = elem("nonzero digit", d => d.isDigit && d != '0')$/;"	m
normalize	scala/xml/MetaData.scala	/^  def normalize(attribs: MetaData, scope: NamespaceBinding): MetaData = {    $/;"	m
normalizeWhitespace	scala/xml/parsing/FactoryAdapter.scala	/^  val normalizeWhitespace = false$/;"	l
not	scala/util/parsing/combinator/Parsers.scala	/^  def not[T](p: => Parser[T]): Parser[Unit] = Parser { in =>$/;"	m
notEmpty	scala/actors/threadpool/LinkedBlockingQueue.java	/^    private final Condition notEmpty = takeLock.newCondition();$/;"	f	class:LinkedBlockingQueue	file:
notFull	scala/actors/threadpool/LinkedBlockingQueue.java	/^    private final Condition notFull = putLock.newCondition();$/;"	f	class:LinkedBlockingQueue	file:
notat	scala/xml/parsing/MarkupParser.scala	/^            val notat = xName$/;"	l
notat	scala/xml/parsing/MarkupParser.scala	/^    val notat = xName$/;"	l
notationDecl	scala/xml/parsing/MarkupHandler.scala	/^  def notationDecl(notat: String, extID: ExternalID): Unit = ()$/;"	m
notationDecl	scala/xml/parsing/MarkupParser.scala	/^  def notationDecl() {$/;"	m
notations	scala/xml/Document.scala	/^  def notations: Seq[scala.xml.dtd.NotationDecl] = $/;"	m
notations	scala/xml/dtd/DTD.scala	/^  def notations: Seq[NotationDecl]      = Nil$/;"	m
nothingCatcher	scala/util/control/Exception.scala	/^  final val nothingCatcher: Catcher[Nothing]  = mkThrowableCatcher(_ => false, throw _)$/;"	l
notify	scala/collection/mutable/History.scala	/^  def notify(pub: Pub, event: Evt) {$/;"	m
notify	scala/collection/mutable/Subscriber.scala	/^  def notify(pub: Pub, event: Evt): Unit$/;"	m
ns	scala/collection/SeqLike.scala	/^      val ns = new Array[Int](cs.length)$/;"	l
nsize	scala/collection/mutable/FlatHashTable.scala	/^    val nsize = calcSizeMapSize(tableLength)$/;"	l
nsize	scala/collection/mutable/HashTable.scala	/^    val nsize = calcSizeMapSize(tableLength)$/;"	l
nstates	scala/util/automata/DetWordAutom.scala	/^  val nstates: Int$/;"	l
nstates	scala/util/automata/NondetWordAutom.scala	/^  val nstates: Int$/;"	l
nstates	scala/util/automata/SubsetConstruction.scala	/^      val nstates = nstatesR$/;"	l
nstates	scala/util/automata/WordBerrySethi.scala	/^          val nstates  = pos$/;"	l
nstatesR	scala/util/automata/SubsetConstruction.scala	/^    val nstatesR = states.size$/;"	l
ntil	scala/collection/parallel/mutable/ParArray.scala	/^      val ntil = i + n$/;"	l
ntrans	scala/util/automata/SubsetConstruction.scala	/^      val ntrans = new mutable.HashMap[T, Int]()$/;"	l
ntree	scala/collection/immutable/TreeMap.scala	/^    val ntree = tree.range(from,until)$/;"	l
nullIfEmpty	scala/xml/parsing/FactoryAdapter.scala	/^      def nullIfEmpty(s: String) = if (s == "") null else s$/;"	m
num	scala/actors/scheduler/ForkJoinScheduler.scala	/^            val num = pool.drainTasksTo(list)$/;"	l
num	scala/collection/generic/GenTraversableFactory.scala	/^    val num = implicitly[Integral[T]]$/;"	l
num	scala/collection/immutable/Stream.scala	/^    val num = implicitly[Integral[T]]$/;"	l
num	scala/collection/mutable/UnrolledBuffer.scala	/^    val num = in.readInt$/;"	l
num	scala/io/BytePickle.scala	/^      var num = 0$/;"	l
num	scala/sys/package.scala	/^    val num    = Thread.activeCount()$/;"	l
numBlocked	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^    var numBlocked = 0$/;"	l
numCores	scala/collection/parallel/Tasks.scala	/^  val numCores = Runtime.getRuntime.availableProcessors$/;"	l
numCores	scala/concurrent/TaskRunners.scala	/^    val numCores = Runtime.getRuntime().availableProcessors()$/;"	l
number	scala/util/parsing/combinator/testing/RegexTest.scala	/^  val number: Parser[Any] = """\\d\\d*""".r ^^ (s => Number(s.toInt))$/;"	l
number	scala/util/parsing/json/Lexer.scala	/^  def number = intPart ~ opt(fracPart) ~ opt(expPart) ^^ { case i ~ f ~ e =>$/;"	m
number	scala/util/parsing/json/Parser.scala	/^  def number     = accept("number", { case lexical.NumericLit(n) => numberParser.get.apply(n)} )$/;"	m
numericLit	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^  def numericLit: Parser[String] = $/;"	m
nwarnings	scala/io/Source.scala	/^  var nwarnings = 0$/;"	l
nx	scala/collection/LinearSeqOptimized.scala	/^    var nx = these.tail$/;"	l
o	scala/util/Marshal.scala	/^      val o = in.readObject.asInstanceOf[A]$/;"	l
objEntry	scala/util/parsing/json/Parser.scala	/^  def objEntry   = stringVal ~ (":" ~> value) ^^ { case x ~ y => (x, y) }$/;"	m
object	scala/actors/package.scala	/^package object actors {$/;"	p
object	scala/annotation/target/package.scala	/^package object target$/;"	p
object	scala/collection/generic/package.scala	/^package object generic {$/;"	p
object	scala/collection/immutable/package.scala	/^package object immutable {$/;"	p
object	scala/collection/package.scala	/^package object collection {$/;"	p
object	scala/collection/parallel/immutable/package.scala	/^package object immutable {$/;"	p
object	scala/collection/parallel/mutable/package.scala	/^package object mutable {$/;"	p
object	scala/collection/parallel/package.scala	/^package object parallel {$/;"	p
object	scala/math/package.scala	/^package object math extends MathCommon {$/;"	p
object	scala/package.scala	/^package object scala {$/;"	p
object	scala/runtime/package.scala	/^package object runtime {$/;"	p
object	scala/sys/package.scala	/^package object sys {$/;"	p
object	scala/sys/process/package.scala	/^  package object process extends ProcessImplicits {$/;"	p
object	scala/util/continuations/package.scala	/^package object continuations {$/;"	p
object	scala/util/parsing/syntax/package.scala	/^package object syntax {$/;"	p
object	scala/xml/package.scala	/^package object xml {$/;"	p
object	scala/xml/pull/package.scala	/^package object pull$/;"	p
occ	scala/collection/SeqLike.scala	/^    val occ = new mutable.HashMap[B, Int] { override def default(k: B) = 0 }$/;"	l
occ	scala/collection/SeqLike.scala	/^    val occ = occCounts(that.seq)$/;"	l
ofBoolean	scala/collection/mutable/ArrayBuilder.scala	/^  class ofBoolean extends ArrayBuilder[Boolean] {$/;"	c
ofBoolean	scala/collection/mutable/ArrayOps.scala	/^  class ofBoolean(override val repr: Array[Boolean]) extends ArrayOps[Boolean] with ArrayLike[Boolean, Array[Boolean]] {$/;"	c
ofBoolean	scala/collection/mutable/WrappedArray.scala	/^  final class ofBoolean(val array: Array[Boolean]) extends WrappedArray[Boolean] with Serializable {$/;"	c
ofByte	scala/collection/mutable/ArrayBuilder.scala	/^  class ofByte extends ArrayBuilder[Byte] {$/;"	c
ofByte	scala/collection/mutable/ArrayOps.scala	/^  class ofByte(override val repr: Array[Byte]) extends ArrayOps[Byte] with ArrayLike[Byte, Array[Byte]] {$/;"	c
ofByte	scala/collection/mutable/WrappedArray.scala	/^  final class ofByte(val array: Array[Byte]) extends WrappedArray[Byte] with Serializable {$/;"	c
ofChar	scala/collection/mutable/ArrayBuilder.scala	/^  class ofChar extends ArrayBuilder[Char] {$/;"	c
ofChar	scala/collection/mutable/ArrayOps.scala	/^  class ofChar(override val repr: Array[Char]) extends ArrayOps[Char] with ArrayLike[Char, Array[Char]] {$/;"	c
ofChar	scala/collection/mutable/WrappedArray.scala	/^  final class ofChar(val array: Array[Char]) extends WrappedArray[Char] with Serializable {$/;"	c
ofDim	scala/Array.scala	/^  def ofDim[T: ClassManifest](n1: Int): Array[T] = $/;"	m
ofDim	scala/Array.scala	/^  def ofDim[T: ClassManifest](n1: Int, n2: Int): Array[Array[T]] = {$/;"	m
ofDim	scala/Array.scala	/^  def ofDim[T: ClassManifest](n1: Int, n2: Int, n3: Int): Array[Array[Array[T]]] = $/;"	m
ofDim	scala/Array.scala	/^  def ofDim[T: ClassManifest](n1: Int, n2: Int, n3: Int, n4: Int): Array[Array[Array[Array[T]]]] = $/;"	m
ofDim	scala/Array.scala	/^  def ofDim[T: ClassManifest](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int): Array[Array[Array[Array[Array[T]]]]] = $/;"	m
ofDouble	scala/collection/mutable/ArrayBuilder.scala	/^  class ofDouble extends ArrayBuilder[Double] {$/;"	c
ofDouble	scala/collection/mutable/ArrayOps.scala	/^  class ofDouble(override val repr: Array[Double]) extends ArrayOps[Double] with ArrayLike[Double, Array[Double]] {$/;"	c
ofDouble	scala/collection/mutable/WrappedArray.scala	/^  final class ofDouble(val array: Array[Double]) extends WrappedArray[Double] with Serializable {$/;"	c
ofFloat	scala/collection/mutable/ArrayBuilder.scala	/^  class ofFloat extends ArrayBuilder[Float] {$/;"	c
ofFloat	scala/collection/mutable/ArrayOps.scala	/^  class ofFloat(override val repr: Array[Float]) extends ArrayOps[Float] with ArrayLike[Float, Array[Float]] {$/;"	c
ofFloat	scala/collection/mutable/WrappedArray.scala	/^  final class ofFloat(val array: Array[Float]) extends WrappedArray[Float] with Serializable {$/;"	c
ofInt	scala/collection/mutable/ArrayBuilder.scala	/^  class ofInt extends ArrayBuilder[Int] {$/;"	c
ofInt	scala/collection/mutable/ArrayOps.scala	/^  class ofInt(override val repr: Array[Int]) extends ArrayOps[Int] with ArrayLike[Int, Array[Int]] {$/;"	c
ofInt	scala/collection/mutable/WrappedArray.scala	/^  final class ofInt(val array: Array[Int]) extends WrappedArray[Int] with Serializable {$/;"	c
ofLong	scala/collection/mutable/ArrayBuilder.scala	/^  class ofLong extends ArrayBuilder[Long] {$/;"	c
ofLong	scala/collection/mutable/ArrayOps.scala	/^  class ofLong(override val repr: Array[Long]) extends ArrayOps[Long] with ArrayLike[Long, Array[Long]] {$/;"	c
ofLong	scala/collection/mutable/WrappedArray.scala	/^  final class ofLong(val array: Array[Long]) extends WrappedArray[Long] with Serializable {$/;"	c
ofRef	scala/collection/mutable/ArrayBuilder.scala	/^  class ofRef[T <: AnyRef : ClassManifest] extends ArrayBuilder[T] {$/;"	c
ofRef	scala/collection/mutable/ArrayOps.scala	/^  class ofRef[T <: AnyRef](override val repr: Array[T]) extends ArrayOps[T] with ArrayLike[T, Array[T]] {$/;"	c
ofRef	scala/collection/mutable/WrappedArray.scala	/^  final class ofRef[T <: AnyRef](val array: Array[T]) extends WrappedArray[T] with Serializable {$/;"	c
ofShort	scala/collection/mutable/ArrayBuilder.scala	/^  class ofShort extends ArrayBuilder[Short] {$/;"	c
ofShort	scala/collection/mutable/ArrayOps.scala	/^  class ofShort(override val repr: Array[Short]) extends ArrayOps[Short] with ArrayLike[Short, Array[Short]] {$/;"	c
ofShort	scala/collection/mutable/WrappedArray.scala	/^  final class ofShort(val array: Array[Short]) extends WrappedArray[Short] with Serializable {$/;"	c
ofUnit	scala/collection/mutable/ArrayBuilder.scala	/^  class ofUnit extends ArrayBuilder[Unit] {$/;"	c
ofUnit	scala/collection/mutable/ArrayOps.scala	/^  class ofUnit(override val repr: Array[Unit]) extends ArrayOps[Unit] with ArrayLike[Unit, Array[Unit]] {$/;"	c
ofUnit	scala/collection/mutable/WrappedArray.scala	/^  final class ofUnit(val array: Array[Unit]) extends WrappedArray[Unit] with Serializable {$/;"	c
offer	scala/actors/LinkedQueue.java	/^  public boolean offer(Object x, long msecs) throws InterruptedException { $/;"	m	class:LinkedQueue
offer	scala/actors/threadpool/BlockingQueue.java	/^    boolean offer(E e);$/;"	m	interface:BlockingQueue
offer	scala/actors/threadpool/BlockingQueue.java	/^    boolean offer(E e, long timeout, TimeUnit unit)$/;"	m	interface:BlockingQueue
offer	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public boolean offer(E e) {$/;"	m	class:LinkedBlockingQueue
offer	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public boolean offer(E e, long timeout, TimeUnit unit)$/;"	m	class:LinkedBlockingQueue
offer	scala/actors/threadpool/Queue.java	/^    boolean offer(Object e);$/;"	m	interface:Queue
offer	scala/actors/threadpool/SynchronousQueue.java	/^    public boolean offer(Object e) {$/;"	m	class:SynchronousQueue
offer	scala/actors/threadpool/SynchronousQueue.java	/^    public boolean offer(Object e, long timeout, TimeUnit unit) throws InterruptedException {$/;"	m	class:SynchronousQueue
offset	scala/collection/immutable/HashMap.scala	/^        val offset = Integer.bitCount(bitmap & (mask-1))$/;"	l
offset	scala/collection/immutable/HashMap.scala	/^      val offset = Integer.bitCount(bitmap & (mask-1))$/;"	l
offset	scala/collection/immutable/HashSet.scala	/^        val offset = Integer.bitCount(bitmap & (mask-1))$/;"	l
offset	scala/collection/immutable/HashSet.scala	/^      val offset = Integer.bitCount(bitmap & (mask-1))$/;"	l
offset	scala/math/BigDecimal.scala	/^      val offset = i - minCached$/;"	l
offset	scala/math/BigInt.scala	/^      val offset = i - minCached$/;"	l
offset	scala/util/parsing/combinator/RegexParsers.scala	/^        val offset = in.offset$/;"	l
offset	scala/util/parsing/combinator/RegexParsers.scala	/^      val offset = in.offset$/;"	l
offset	scala/util/parsing/input/Reader.scala	/^  def offset: Int =$/;"	m
ok	scala/xml/dtd/ElementValidator.scala	/^    var ok = new BitSet(adecls.length)$/;"	l
okVersions	scala/util/Properties.scala	/^    val okVersions = version match {$/;"	l
old	scala/collection/generic/Signalling.scala	/^      val old = intflag.get$/;"	l
old	scala/collection/mutable/ListBuffer.scala	/^    var old = start.head$/;"	l
old	scala/collection/mutable/RevertibleHistory.scala	/^    val old = log.toList.reverse$/;"	l
old	scala/sys/PropImpl.scala	/^    val old = if (isSet) get else null$/;"	l
old	scala/sys/PropImpl.scala	/^    val old = value$/;"	l
old	scala/xml/factory/Binder.scala	/^      val old = result$/;"	l
oldIndex	scala/collection/mutable/ArrayStack.scala	/^    val oldIndex = index$/;"	l
oldRes	scala/util/parsing/combinator/PackratParsers.scala	/^    val oldRes: ParseResult[T] = rest.getFromCache(p).get match {$/;"	l
oldSize	scala/collection/mutable/OpenHashMap.scala	/^    val oldSize = mask + 1;$/;"	l
oldTable	scala/collection/mutable/ArrayStack.scala	/^    val oldTable = ArrayStack.clone(table)$/;"	l
oldTable	scala/collection/mutable/HashTable.scala	/^    val oldTable = table$/;"	l
oldTable	scala/collection/mutable/OpenHashMap.scala	/^    val oldTable = table;$/;"	l
olde	scala/collection/parallel/mutable/ParHashMap.scala	/^      var olde = table(h).asInstanceOf[DefaultEntry[K, V]]$/;"	l
oldelement	scala/collection/mutable/ObservableBuffer.scala	/^    val oldelement = apply(n)$/;"	l
oldtable	scala/collection/mutable/FlatHashTable.scala	/^    val oldtable = table$/;"	l
oldval	scala/util/DynamicVariable.scala	/^    val oldval = value$/;"	l
on	scala/math/Ordering.scala	/^  def on[U](f: U => T): Ordering[U] = new Ordering[U] {$/;"	m
onCodingException	scala/io/Codec.scala	/^  def onCodingException(handler: Handler): this.type = { _onCodingException = handler ; this }$/;"	m
onEnter	scala/util/parsing/ast/Binders.scala	/^    def onEnter() {}$/;"	m
onInterrupt	scala/sys/process/package.scala	/^      def onInterrupt[T](handler: => T): Throwable =?> T = {$/;"	m
onLeft	scala/util/parsing/ast/Binders.scala	/^    def onLeft() {}$/;"	m
onLockup	scala/actors/IScheduler.scala	/^  def onLockup(handler: () => Unit) {}$/;"	m
onLockup	scala/actors/IScheduler.scala	/^  def onLockup(millis: Int)(handler: () => Unit) {}$/;"	m
onMalformedInput	scala/io/Codec.scala	/^  def onMalformedInput(newAction: Action): this.type = { _onMalformedInput = newAction ; this }$/;"	m
onShutdown	scala/actors/scheduler/ExecutorScheduler.scala	/^  def onShutdown(): Unit =$/;"	m
onShutdown	scala/actors/scheduler/TerminationService.scala	/^  def onShutdown(): Unit$/;"	m
onShutdown	scala/actors/threadpool/ThreadPoolExecutor.java	/^    void onShutdown() {$/;"	m	class:ThreadPoolExecutor
onTerminate	scala/actors/IScheduler.scala	/^  def onTerminate(a: TrackedReactor)(f: => Unit): Unit$/;"	m
onTerminate	scala/actors/SchedulerAdapter.scala	/^  def onTerminate(a: TrackedReactor)(f: => Unit) =$/;"	m
onTerminate	scala/actors/scheduler/DelegatingScheduler.scala	/^  def onTerminate(actor: TrackedReactor)(f: => Unit) = impl.onTerminate(actor)(f)$/;"	m
onTerminate	scala/actors/scheduler/SingleThreadedScheduler.scala	/^  def onTerminate(actor: TrackedReactor)(f: => Unit) {}$/;"	m
onTerminate	scala/actors/scheduler/TerminationMonitor.scala	/^  def onTerminate(a: TrackedReactor)(f: => Unit): Unit = synchronized {$/;"	m
onUnmappableCharacter	scala/io/Codec.scala	/^  def onUnmappableCharacter(newAction: Action): this.type = { _onUnmappableCharacter = newAction ; this }$/;"	m
one	scala/math/Numeric.scala	/^  def one = fromInt(1)$/;"	m
ones	scala/collection/mutable/FlatHashTable.scala	/^    val ones = table.length - 1$/;"	l
ones	scala/collection/mutable/HashTable.scala	/^    val ones = table.length - 1$/;"	l
operation	scala/collection/parallel/mutable/ParArray.scala	/^      val operation = op$/;"	l
opits	scala/collection/parallel/ParIterableLike.scala	/^      val opits = othpit.psplit(pit.remaining)$/;"	l
opits	scala/collection/parallel/ParIterableLike.scala	/^      val opits = othpit.psplit(sizes: _*)$/;"	l
opits	scala/collection/parallel/ParSeqLike.scala	/^      val opits = otherpit.psplit(fp, sp)$/;"	l
opos	scala/xml/parsing/MarkupParser.scala	/^      val opos = pos;$/;"	l
ops	scala/concurrent/ops.scala	/^object ops$/;"	c
ops	scala/reflect/NameTransformer.scala	/^      var ops: OpCodes = null$/;"	l
opt	scala/util/control/Exception.scala	/^    def opt(): Option[T]                      = catcher opt body$/;"	m
opt	scala/util/control/Exception.scala	/^    def opt[U >: T](body: => U): Option[U] = toOption(Some(body))$/;"	m
opt	scala/util/control/Exception.scala	/^    def opt[U >: T](other: => U): Option[U]   = catcher opt other$/;"	m
opt	scala/util/parsing/combinator/Parsers.scala	/^  def opt[T](p: => Parser[T]): Parser[Option[T]] = $/;"	m
optElem	scala/collection/mutable/Queue.scala	/^      val optElem = removeFromList(p)$/;"	l
optManifest	scala/Predef.scala	/^  def optManifest[T](implicit m: OptManifest[T])     = m$/;"	m
option	scala/sys/BooleanProp.scala	/^    def option = if (isSet) Some(value) else None$/;"	m
option	scala/sys/Prop.scala	/^  def option: Option[T]$/;"	m
option	scala/sys/PropImpl.scala	/^  def option: Option[T] = if (isSet) Some(value) else None$/;"	m
option2Iterable	scala/Option.scala	/^  implicit def option2Iterable[A](xo: Option[A]): Iterable[A] = xo.toList$/;"	m
optionOrdering	scala/math/Ordering.scala	/^    def optionOrdering: Ordering[T]$/;"	m
or	scala/sys/PropImpl.scala	/^  def or[T1 >: T](alt: => T1): T1 = if (isSet) value else alt$/;"	m
or	scala/util/control/Exception.scala	/^    def or[U >: T](other: Catch[U]): Catch[U] = or(other.pf)$/;"	m
or	scala/util/control/Exception.scala	/^    def or[U >: T](pf2: Catcher[U]): Catch[U] = new Catch(pf orElse pf2, fin, rethrow)$/;"	m
or	scala/util/control/Exception.scala	/^    def or[U >: T](pf: Catcher[U]) = new Try(body, catcher or pf)$/;"	m
orElse	scala/PartialFunction.scala	/^  def orElse[A1 <: A, B1 >: B](that: PartialFunction[A1, B1]) : PartialFunction[A1, B1] = $/;"	m
orElse	scala/reflect/generic/Symbols.scala	/^    def orElse[T](alt: => Symbol): Symbol = if (this ne NoSymbol) this else alt$/;"	m
ord	scala/util/Sorting.scala	/^    val ord = Ordering[K]$/;"	l
ordered	scala/math/Ordering.scala	/^  implicit def ordered[A <% Comparable[A]]: Ordering[A] = new Ordering[A] {$/;"	m
orderedCompanion	scala/collection/generic/GenericOrderedTraversableTemplate.scala	/^  def orderedCompanion: GenericOrderedCompanion[CC]$/;"	m
ordering	scala/collection/SortedMapLike.scala	/^    implicit def ordering = self.ordering$/;"	m
ordering	scala/collection/SortedMapLike.scala	/^  implicit def ordering: Ordering[A]$/;"	m
ordering	scala/collection/SortedSetLike.scala	/^  implicit def ordering: Ordering[A]$/;"	m
ordering	scala/collection/generic/Sorted.scala	/^  def ordering : Ordering[K]$/;"	m
orderingToOrdered	scala/math/Ordered.scala	/^  implicit def orderingToOrdered[T](x: T)(implicit ord: Ordering[T]): Ordered[T] = $/;"	m
ordinal	scala/actors/threadpool/TimeUnit.java	/^    public int ordinal() {$/;"	m	class:TimeUnit
osName	scala/util/Properties.scala	/^  def osName                = propOrEmpty("os.name")$/;"	m
other	scala/collection/IterableViewLike.scala	/^    val other: GenIterable[B] = that$/;"	l
other	scala/collection/Iterator.scala	/^      var other: PartitionIterator = _$/;"	l
other	scala/collection/SeqViewLike.scala	/^    val other = that$/;"	l
other	scala/collection/parallel/ParIterableLike.scala	/^      val other = that.asParIterable$/;"	l
other	scala/collection/parallel/ParIterableViewLike.scala	/^    val other = that$/;"	l
other	scala/collection/parallel/ParSeqViewLike.scala	/^    val other = that$/;"	l
otherPar	scala/collection/parallel/ParIterableViewLike.scala	/^    def otherPar: ParSeq[S] = other.asParSeq$/;"	m
otherwise	scala/collection/parallel/ParIterableLike.scala	/^      def otherwise(notbody: => Unit)(implicit m: ClassManifest[Cmb]) {$/;"	m
otherwise	scala/collection/parallel/ParIterableLike.scala	/^      def otherwise(notbody: => Unit)(implicit m: ClassManifest[Cmb]): Unit$/;"	m
otherwise	scala/collection/parallel/package.scala	/^      def otherwise(notbody: => R) = if (isParallel) isbody(asParSeq) else notbody$/;"	m
otherwise	scala/collection/parallel/package.scala	/^      def otherwise(notbody: => R) = if (isParallel) isbody(asParallel) else notbody$/;"	m
otherwise	scala/collection/parallel/package.scala	/^      def otherwise(notbody: => R): R$/;"	m
othtask	scala/collection/parallel/ParIterableLike.scala	/^        val othtask = new other.Copy(() => pbf(self.repr), other.splitter)$/;"	l
out	scala/Console.scala	/^  def out = outVar.value$/;"	m
out	scala/actors/ReactorCanReply.scala	/^    val out = new OutputChannel[Any] {$/;"	l
out	scala/actors/remote/JavaSerializer.scala	/^    val out = new ObjectOutputStream(bos)$/;"	l
out	scala/reflect/generic/ByteCodecs.scala	/^      var out: Int = in >>> 7$/;"	l
out	scala/reflect/generic/ByteCodecs.scala	/^      var out: Int = src(i)$/;"	l
out	scala/sys/process/ProcessLogger.scala	/^    def out(s: => String): Unit = fout(s)$/;"	m
out	scala/sys/process/ProcessLogger.scala	/^  def out(s: => String): Unit = writer println s$/;"	m
out	scala/sys/process/ProcessLogger.scala	/^  def out(s: => String): Unit$/;"	m
out	scala/util/Marshal.scala	/^    val out = new ObjectOutputStream(ba)$/;"	l
out	scala/xml/include/sax/XIncluder.scala	/^  var out = new OutputStreamWriter(outs, encoding)$/;"	l
outThread	scala/sys/process/ProcessBuilderImpl.scala	/^      val outThread = Spawn(processOutput(process.getInputStream), daemonizeThreads)$/;"	l
outerTag	scala/reflect/generic/UnPickler.scala	/^      val outerTag = readByte()$/;"	l
output	scala/collection/package.scala	/^      var output = ""$/;"	l
output	scala/collection/parallel/RemainsIterator.scala	/^    var output = ""$/;"	l
output	scala/concurrent/pilib.scala	/^    def output[B](v: A, c: () => B) =$/;"	m
owner	scala/actors/threadpool/helpers/WaitQueue.java	/^        final Thread owner;$/;"	f	class:WaitQueue.WaitNode
owner	scala/reflect/Symbol.scala	/^  val owner = NoSymbol$/;"	l
owner	scala/reflect/Symbol.scala	/^  val owner = null$/;"	l
owner	scala/reflect/Symbol.scala	/^  val owner: Symbol =$/;"	l
owner	scala/reflect/Symbol.scala	/^  val owner: Symbol$/;"	l
owner	scala/reflect/generic/Symbols.scala	/^    def owner: Symbol$/;"	m
owner	scala/reflect/generic/UnPickler.scala	/^        val owner = if (atEnd) definitions.RootClass else readSymbolRef()$/;"	l
owner	scala/reflect/generic/UnPickler.scala	/^      val owner        = readSymbolRef()$/;"	l
owner_	scala/actors/threadpool/locks/ReentrantLock.java	/^        protected transient Thread owner_ = null;$/;"	f	class:ReentrantLock.Sync
owner_	scala/reflect/generic/Symbols.scala	/^    def owner_=(sym: Symbol)         { throw new UnsupportedOperationException("owner_= inapplicable for " + this) }$/;"	m
p	scala/actors/remote/NetKernel.scala	/^    val p = new Proxy(node, sym, this)$/;"	l
p	scala/actors/scheduler/ForkJoinScheduler.scala	/^    val p = new DrainableForkJoinPool()$/;"	l
p	scala/collection/immutable/IntMap.scala	/^    val p = mask(p1, m);$/;"	l
p	scala/collection/immutable/LongMap.scala	/^    val p = mask(p1, m);$/;"	l
p	scala/collection/immutable/PagedSeq.scala	/^      val p = page(index + start); index + start < p.end$/;"	l
p	scala/collection/mutable/FlatHashTable.scala	/^    val p = h >> sizeMapBucketBitSize$/;"	l
p	scala/collection/parallel/mutable/ParArray.scala	/^        var p = product_quick(num, arr, until, i, num.one)$/;"	l
p	scala/collection/parallel/package.scala	/^    val p = parallelismLevel$/;"	l
p	scala/sys/process/ProcessBuilderImpl.scala	/^      val p = createProcess(io)$/;"	l
p	scala/util/automata/SubsetConstruction.scala	/^        val p = indexMap(value)$/;"	l
p	scala/util/parsing/combinator/Parsers.scala	/^    lazy val p = p0 \/\/ lazy argument$/;"	l
p	scala/xml/dtd/ContentModelParser.scala	/^    val p = particle;$/;"	l
p0	scala/util/parsing/combinator/Parsers.scala	/^      val p0 = p    \/\/ avoid repeatedly re-evaluating by-name parser$/;"	l
pa	scala/collection/parallel/RemainsIterator.scala	/^    val pa = mutable.ParArray.fromTraversables(self).reverse$/;"	l
pa	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^    val pa = new ParArray(new ExposedArraySeq[T](chain(0).internalArray, size))$/;"	l
padTo	scala/collection/GenSeqLike.scala	/^  def padTo[B >: A, That](len: Int, elem: B)(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
padTo	scala/collection/Iterator.scala	/^  def padTo[A1 >: A](len: Int, elem: A1) = new Iterator[A1] {$/;"	m
padTo	scala/collection/SeqLike.scala	/^  def padTo[B >: A, That](len: Int, elem: B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
padTo	scala/collection/interfaces/SeqMethods.scala	/^  def padTo[B >: A, That](len: Int, elem: B)(implicit bf: CanBuildFrom[This, B, That]): That$/;"	m
padTo	scala/collection/parallel/ParSeqLike.scala	/^  def padTo[U >: T, That](len: Int, elem: U)(implicit bf: CanBuildFrom[Repr, U, That]): That = if (length < len) {$/;"	m
pair	scala/io/BytePickle.scala	/^  def pair[a,b](pa: SPU[a], pb: SPU[b]): SPU[(a,b)] = {$/;"	m
pairToList	scala/io/BytePickle.scala	/^    def pairToList(p: (A, List[A])): List[A] =$/;"	m
pairToList	scala/io/BytePickle.scala	/^    def pairToList(p: (a,List[a])): List[a] =$/;"	m
pairs	scala/xml/Utility.scala	/^    val pairs = Map($/;"	l
par	scala/collection/Parallelizable.scala	/^  def par: ParRepr = {$/;"	m
par	scala/concurrent/ops.scala	/^  def par[A, B](xp: => A, yp: => B)(implicit runner: TaskRunner = defaultRunner): (A, B) = {$/;"	m
parMap	scala/concurrent/ops.scala	/^  def parMap[a,b](f: a => b, xs: Array[a]): Array[b] = {$/;"	m
parallel	scala/collection/parallel/ParIterableLike.scala	/^    def parallel[R3, R2, Tp2](t2: SSCTask[R2, Tp2])(resCombiner: (R, R2) => R3) = new ParComposite[R, R2, R3, SSCTask[R, Tp], SSCTask[R2, Tp2]](tsk, t2) {$/;"	m
parallel	scala/collection/parallel/ParIterableLike.scala	/^    def parallel[R3, R2, Tp2](t2: SSCTask[R2, Tp2])(resCombiner: (R, R2) => R3): ParComposite[R, R2, R3, SSCTask[R, Tp], SSCTask[R2, Tp2]]$/;"	m
parallel.immutable	scala/collection/parallel/immutable/ParIterable.scala	/^package parallel.immutable$/;"	p
parallel.immutable	scala/collection/parallel/immutable/ParMap.scala	/^package parallel.immutable$/;"	p
parallel.immutable	scala/collection/parallel/immutable/ParSeq.scala	/^package parallel.immutable$/;"	p
parallel.immutable	scala/collection/parallel/immutable/ParSet.scala	/^package parallel.immutable$/;"	p
parallel.immutable	scala/collection/parallel/immutable/ParVector.scala	/^package parallel.immutable$/;"	p
parallel.mutable	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^package parallel.mutable$/;"	p
parallel.mutable	scala/collection/parallel/mutable/ParHashTable.scala	/^package parallel.mutable$/;"	p
parallel.mutable	scala/collection/parallel/mutable/ParSetLike.scala	/^package parallel.mutable$/;"	p
parallelismLevel	scala/collection/parallel/Tasks.scala	/^  def parallelismLevel = FutureThreadPoolTasks.numCores$/;"	m
parallelismLevel	scala/collection/parallel/Tasks.scala	/^  def parallelismLevel = ThreadPoolTasks.numCores$/;"	m
parallelismLevel	scala/collection/parallel/Tasks.scala	/^  def parallelismLevel = forkJoinPool.getParallelism$/;"	m
parallelismLevel	scala/collection/parallel/Tasks.scala	/^  def parallelismLevel: Int$/;"	m
param	scala/annotation/target/param.scala	/^final class param extends annotation.StaticAnnotation$/;"	c
parameterEntityDecl	scala/xml/parsing/MarkupHandler.scala	/^  def parameterEntityDecl(name: String, edef: EntityDef): Unit =$/;"	m
params	scala/reflect/generic/UnPickler.scala	/^          val params = until(end, readIdentRef)$/;"	l
params	scala/reflect/generic/UnPickler.scala	/^          val params = until(end, readSymbolRef)$/;"	l
pareach	scala/collection/parallel/ParIterableLike.scala	/^  def pareach[U](f: T => U): Unit = {$/;"	m
parentBase	scala/xml/include/sax/XIncludeFilter.scala	/^      val parentBase = bases.peek().asInstanceOf[URL]$/;"	l
parents	scala/reflect/generic/UnPickler.scala	/^          val parents = times(readNat(), readTreeRef)$/;"	l
parse	scala/util/parsing/combinator/RegexParsers.scala	/^  def parse[T](p: Parser[T], in: Reader[Char]): ParseResult[T] = $/;"	m
parse	scala/util/parsing/combinator/RegexParsers.scala	/^  def parse[T](p: Parser[T], in: java.io.Reader): ParseResult[T] =$/;"	m
parse	scala/util/parsing/combinator/RegexParsers.scala	/^  def parse[T](p: Parser[T], in: java.lang.CharSequence): ParseResult[T] = $/;"	m
parse	scala/util/parsing/json/JSON.scala	/^  def parse(input: String): Option[List[Any]] = parseRaw(input).map(unRaw).flatMap({$/;"	m
parse	scala/xml/dtd/ContentModel.scala	/^  def parse(s: String): ContentModel = ContentModelParser.parse(s)$/;"	m
parse	scala/xml/dtd/ContentModelParser.scala	/^  def parse(s: String): ContentModel = { initScanner(s); contentspec }$/;"	m
parse	scala/xml/include/sax/XIncludeFilter.scala	/^        var parse = atts.getValue("parse")$/;"	l
parseAll	scala/util/parsing/combinator/RegexParsers.scala	/^  def parseAll[T](p: Parser[T], in: Reader[Char]): ParseResult[T] =$/;"	m
parseAll	scala/util/parsing/combinator/RegexParsers.scala	/^  def parseAll[T](p: Parser[T], in: java.io.Reader): ParseResult[T] =$/;"	m
parseAll	scala/util/parsing/combinator/RegexParsers.scala	/^  def parseAll[T](p: Parser[T], in: java.lang.CharSequence): ParseResult[T] = $/;"	m
parseAttributeValue	scala/xml/Utility.scala	/^  def parseAttributeValue(value: String): Seq[Node] = {$/;"	m
parseCharRef	scala/xml/Utility.scala	/^  def parseCharRef(ch: () => Char, nextch: () => Unit, reportSyntaxError: String => Unit, reportTruncatedError: String => Unit): String = {$/;"	m
parseDTD	scala/xml/parsing/MarkupParser.scala	/^  def parseDTD(): Unit = { \/\/ dirty but fast$/;"	m
parseDelim	scala/util/parsing/combinator/lexical/StdLexical.scala	/^    def parseDelim(s: String): Parser[Token] = accept(s.toList) ^^ { x => Keyword(s) }$/;"	m
parseFull	scala/util/parsing/json/JSON.scala	/^  def parseFull(input: String): Option[Any] =$/;"	m
parseRaw	scala/util/parsing/json/JSON.scala	/^  def parseRaw(input : String) : Option[JSONType] = $/;"	m
parsedEntityDecl	scala/xml/parsing/MarkupHandler.scala	/^  def parsedEntityDecl(name: String, edef: EntityDef): Unit = $/;"	m
parser	scala/util/parsing/combinator/testing/RegexTest.scala	/^  val parser = (ident | number | string)*$/;"	l
parser	scala/util/parsing/combinator/testing/Tester.scala	/^  val parser: syntactic.Parser[Any]$/;"	l
parser	scala/xml/factory/XMLLoader.scala	/^  def parser: SAXParser = {$/;"	m
parser	scala/xml/include/sax/Main.scala	/^    val parser: XMLReader =$/;"	l
parser	scala/xml/include/sax/XIncludeFilter.scala	/^      val parser: XMLReader =$/;"	l
parser2packrat	scala/util/parsing/combinator/PackratParsers.scala	/^  implicit def parser2packrat[T](p: => super.Parser[T]): PackratParser[T] = {$/;"	m
parsing	scala/xml/parsing/ConstructingHandler.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/ConstructingParser.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/DefaultMarkupHandler.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/ExternalSources.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/FactoryAdapter.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/FatalError.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/MarkupHandler.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/MarkupParser.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/MarkupParserCommon.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/NoBindingFactoryAdapter.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/TokenTests.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/ValidatingMarkupHandler.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/XhtmlEntities.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/XhtmlParser.scala	/^package parsing$/;"	p
partFuns	scala/actors/Future.scala	/^    val partFuns = unsetFts.map((p: Pair[Int, Future[Any]]) => {$/;"	l
partFunsRest	scala/actors/Future.scala	/^            val partFunsRest = partFuns filter (_ != pf)$/;"	l
particle	scala/xml/dtd/ContentModelParser.scala	/^  def particle = token match {$/;"	m
partition	scala/collection/GenTraversableLike.scala	/^  def partition(pred: A => Boolean): (Repr, Repr)$/;"	m
partition	scala/collection/Iterator.scala	/^  def partition(p: A => Boolean): (Iterator[A], Iterator[A]) = {$/;"	m
partition	scala/collection/TraversableLike.scala	/^  def partition(p: A => Boolean): (Repr, Repr) = {$/;"	m
partition	scala/collection/interfaces/TraversableMethods.scala	/^  def partition(p: A => Boolean): (Traversable[A], Traversable[A])$/;"	m
partition	scala/collection/parallel/ParIterableLike.scala	/^  def partition(pred: T => Boolean): (Repr, Repr) = {$/;"	m
partition2combiners	scala/collection/parallel/RemainsIterator.scala	/^  def partition2combiners[U >: T, This](pred: T => Boolean, btrue: Combiner[U, This], bfalse: Combiner[U, This]) = {$/;"	m
pat	scala/reflect/generic/UnPickler.scala	/^          val pat = readTreeRef()$/;"	l
patch	scala/collection/GenSeqLike.scala	/^  def patch[B >: A, That](from: Int, patch: GenSeq[B], replaced: Int)(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
patch	scala/collection/Iterator.scala	/^  def patch[B >: A](from: Int, patchElems: Iterator[B], replaced: Int) = new Iterator[B] {$/;"	m
patch	scala/collection/SeqLike.scala	/^  def patch[B >: A, That](from: Int, patch: GenSeq[B], replaced: Int)(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
patch	scala/collection/SeqLike.scala	/^  def patch[B >: A, That](from: Int, patch: Seq[B], replaced: Int)(implicit bf: CanBuildFrom[Repr, B, That]): That =$/;"	m
patch	scala/collection/SeqViewLike.scala	/^    val patch = _patch$/;"	l
patch	scala/collection/interfaces/SeqMethods.scala	/^  def patch[B >: A, That](from: Int, patch: GenSeq[B], replaced: Int)(implicit bf: CanBuildFrom[This, B, That]): That $/;"	m
patch	scala/collection/parallel/ParSeqLike.scala	/^  def patch[U >: T, That](from: Int, patch: GenSeq[U], replaced: Int)(implicit bf: CanBuildFrom[Repr, U, That]): That = {$/;"	m
patch	scala/collection/parallel/ParSeqViewLike.scala	/^    val patch = _patch;$/;"	l
patchNat	scala/reflect/generic/PickleBuffer.scala	/^  def patchNat(pos: Int, x: Int) {$/;"	m
patchNatPrefix	scala/reflect/generic/PickleBuffer.scala	/^    def patchNatPrefix(x: Int) {$/;"	m
patchPar	scala/collection/parallel/ParSeqViewLike.scala	/^    def patchPar: ParSeq[U] = patch.asInstanceOf[ParSeq[U]]$/;"	m
patchParSeq	scala/collection/parallel/RemainsIterator.scala	/^  def patchParSeq[U >: T](from: Int, patchElems: SeqSplitter[U], replaced: Int) = new Patched(from, patchElems, replaced)$/;"	m
pattern	scala/util/matching/Regex.scala	/^  val pattern = Pattern.compile(regex)$/;"	l
pb	scala/io/BufferedSource.scala	/^        val pb = new PushbackReader(charReader)$/;"	l
pb	scala/io/BytePickle.scala	/^      val pb = k(a)$/;"	l
pbf	scala/collection/parallel/ParIterableLike.scala	/^      val pbf = bf.asParallel$/;"	l
pbf	scala/collection/parallel/ParIterableLike.scala	/^    val pbf = bf.asParallel$/;"	l
pbf	scala/collection/parallel/ParSeqLike.scala	/^      val pbf = bf.asParallel$/;"	l
pbf	scala/collection/parallel/ParSeqLike.scala	/^    val pbf = bf.asParallel$/;"	l
pc2	scala/collection/BitSetLike.scala	/^    def pc2(w: Int) = if (w == 0) 0 else pc1(w & 0xff) + pc1(w >>> 8)$/;"	m
pc4	scala/collection/BitSetLike.scala	/^    def pc4(w: Int) = if (w == 0) 0 else pc2(w & 0xffff) + pc2(w >>> 16)$/;"	m
pe	scala/io/BytePickle.scala	/^      val pe = state.dict$/;"	l
peReference	scala/xml/parsing/MarkupHandler.scala	/^  def peReference(name: String) { decls ::= PEReference(name) }$/;"	m
peek	scala/actors/LinkedQueue.java	/^  public Object peek() {$/;"	m	class:LinkedQueue
peek	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public E peek() {$/;"	m	class:LinkedBlockingQueue
peek	scala/actors/threadpool/Queue.java	/^    Object peek();$/;"	m	interface:Queue
peek	scala/actors/threadpool/SynchronousQueue.java	/^    public Object peek() {$/;"	m	class:SynchronousQueue
peek	scala/collection/mutable/ArrayStack.scala	/^  def peek = top$/;"	m
peekByte	scala/reflect/generic/PickleBuffer.scala	/^  def peekByte(): Int = bytes(readIndex)$/;"	m
perThreadNumberParser	scala/util/parsing/json/JSON.scala	/^   def perThreadNumberParser : NumericParser = numberParser.get()$/;"	m
perThreadNumberParser_	scala/util/parsing/json/JSON.scala	/^   def perThreadNumberParser_=(f : NumericParser) { numberParser.set(f) }$/;"	m
perf	scala/actors/threadpool/Perf.java	/^    private static final Perf perf = new Perf();$/;"	f	class:Perf	file:
perf	scala/actors/threadpool/helpers/Utils.java	/^        final Perf perf;$/;"	f	class:Utils.SunPerfProvider
permutations	scala/collection/SeqLike.scala	/^  def permutations: Iterator[Repr] = $/;"	m
permutations	scala/collection/interfaces/SeqMethods.scala	/^  def permutations: Iterator[This]$/;"	m
persistent	scala/xml/persistent/CachedFileStorage.scala	/^package persistent$/;"	p
persistent	scala/xml/persistent/Index.scala	/^package persistent$/;"	p
persistent	scala/xml/persistent/SetStorage.scala	/^package persistent$/;"	p
perturb	scala/collection/mutable/OpenHashMap.scala	/^    var perturb = index;$/;"	l
pf	scala/actors/Future.scala	/^            val pf = pfOpt.get \/\/ succeeds always$/;"	l
pf	scala/util/control/Exception.scala	/^    val pf: Catcher[T], $/;"	l
pf2	scala/util/control/Exception.scala	/^      val pf2 = new Catcher[U] {$/;"	l
pfOpt	scala/actors/Future.scala	/^            val pfOpt = partFuns find (_ isDefinedAt msg)$/;"	l
pflags	scala/reflect/generic/UnPickler.scala	/^      val pflags = (pflagsHi.toLong << 32) + pflagsLo$/;"	l
pflagsHi	scala/reflect/generic/UnPickler.scala	/^      val pflagsHi = readNat()$/;"	l
pflagsLo	scala/reflect/generic/UnPickler.scala	/^      val pflagsLo = readNat()$/;"	l
phit	scala/collection/parallel/immutable/ParHashMap.scala	/^      val phit = new ParHashMapIterator(it, sz) with SCPI$/;"	l
phit	scala/collection/parallel/immutable/ParHashSet.scala	/^      val phit = new ParHashSetIterator(it, sz) with SCPI$/;"	l
phrase	scala/util/parsing/combinator/Parsers.scala	/^  def phrase[T](p: Parser[T]) = new Parser[T] {$/;"	m
pickle	scala/io/BytePickle.scala	/^  def pickle[T](p: SPU[T], a: T): Array[Byte] =$/;"	m
pickledToRawFlags	scala/reflect/generic/Flags.scala	/^  def pickledToRawFlags(pflags: Long): Long =$/;"	m
pid	scala/reflect/generic/UnPickler.scala	/^          val pid = readTreeRef().asInstanceOf[RefTree]$/;"	l
pilib	scala/concurrent/pilib.scala	/^object pilib {$/;"	c
pipeIn	scala/sys/process/ProcessImpl.scala	/^      val pipeIn      = new PipedInputStream(pipeOut)$/;"	l
pipeOut	scala/sys/process/ProcessImpl.scala	/^      val pipeOut       = new PipedOutputStream$/;"	l
pit	scala/collection/parallel/immutable/ParVector.scala	/^    val pit = new ParVectorIterator(vector.startIndex, vector.endIndex) with SCPI$/;"	l
pit	scala/collection/parallel/mutable/ParArray.scala	/^    val pit = new ParArrayIterator with SCPI$/;"	l
pitdup	scala/collection/parallel/ParIterableLike.scala	/^      val pitdup = pit.dup$/;"	l
pits	scala/collection/parallel/ParIterableLike.scala	/^      val pits = pit.split$/;"	l
pits	scala/collection/parallel/ParIterableLike.scala	/^      val pits = super.split$/;"	l
pits	scala/collection/parallel/ParSeqLike.scala	/^      val pits = pit.psplit(fp, sp)$/;"	l
pits	scala/collection/parallel/ParSeqLike.scala	/^      val pits = pit.split$/;"	l
pits	scala/collection/parallel/ParSeqLike.scala	/^      val pits = splitter.psplit(from, replaced, length - from - realreplaced)$/;"	l
pits	scala/collection/parallel/ParSeqLike.scala	/^      val pits = super.psplit(sizes: _*)$/;"	l
pits	scala/collection/parallel/ParSeqLike.scala	/^    val pits = splitter.psplit(from, repl, length - from - repl)$/;"	l
pits	scala/collection/parallel/RemainsIterator.scala	/^      val pits = self.psplit(from, replaced, self.remaining - from - replaced)$/;"	l
plen	scala/collection/parallel/ParIterableLike.scala	/^        val plen = p.remaining min (len - untilp)$/;"	l
plus	scala/math/Numeric.scala	/^    def plus(x: BigDecimal, y: BigDecimal): BigDecimal = x + y$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: BigInt, y: BigInt): BigInt = x + y$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: Byte, y: Byte): Byte = (x + y).toByte$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: Char, y: Char): Char = (x + y).toChar$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: Double, y: Double): Double = x + y$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: Float, y: Float): Float = x + y$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: Int, y: Int): Int = x + y$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: Long, y: Long): Long = x + y$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: Short, y: Short): Short = (x + y).toShort$/;"	m
plus	scala/math/Numeric.scala	/^  def plus(x: T, y: T): T$/;"	m
poll	scala/actors/LinkedQueue.java	/^  public Object poll(long msecs) throws InterruptedException {$/;"	m	class:LinkedQueue
poll	scala/actors/threadpool/BlockingQueue.java	/^    E poll(long timeout, TimeUnit unit)$/;"	m	interface:BlockingQueue
poll	scala/actors/threadpool/CompletionService.java	/^    Future poll();$/;"	m	interface:CompletionService
poll	scala/actors/threadpool/CompletionService.java	/^    Future poll(long timeout, TimeUnit unit) throws InterruptedException;$/;"	m	interface:CompletionService
poll	scala/actors/threadpool/ExecutorCompletionService.java	/^    public Future poll() {$/;"	m	class:ExecutorCompletionService
poll	scala/actors/threadpool/ExecutorCompletionService.java	/^    public Future poll(long timeout, TimeUnit unit) throws InterruptedException {$/;"	m	class:ExecutorCompletionService
poll	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public E poll() {$/;"	m	class:LinkedBlockingQueue
poll	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public E poll(long timeout, TimeUnit unit) throws InterruptedException {$/;"	m	class:LinkedBlockingQueue
poll	scala/actors/threadpool/Queue.java	/^    Object poll();$/;"	m	interface:Queue
poll	scala/actors/threadpool/SynchronousQueue.java	/^    public Object poll() {$/;"	m	class:SynchronousQueue
poll	scala/actors/threadpool/SynchronousQueue.java	/^    public Object poll(long timeout, TimeUnit unit) throws InterruptedException {$/;"	m	class:SynchronousQueue
poll	scala/ref/ReferenceQueue.scala	/^  def poll: Option[Reference[T]] = Wrapper(underlying.poll)$/;"	m
poolNumber	scala/actors/threadpool/Executors.java	/^        static final AtomicInteger poolNumber = new AtomicInteger(1);$/;"	f	class:Executors.DefaultThreadFactory
pop	scala/collection/immutable/IntMap.scala	/^  def pop = {$/;"	m
pop	scala/collection/immutable/LongMap.scala	/^  def pop() = {$/;"	m
pop	scala/collection/immutable/Stack.scala	/^  def pop: Stack[A] =$/;"	m
pop	scala/collection/mutable/ArrayStack.scala	/^  def pop(): T = {$/;"	m
pop	scala/collection/mutable/Stack.scala	/^  def pop(): A = {$/;"	m
pop	scala/xml/parsing/MarkupParser.scala	/^  def pop() {$/;"	m
pop2	scala/collection/immutable/Stack.scala	/^  def pop2: (A, Stack[A]) =$/;"	m
portnum	scala/actors/remote/TcpService.scala	/^    var portnum = 0$/;"	l
pos	scala/actors/MessageQueue.scala	/^    var pos = 0$/;"	l
pos	scala/collection/SeqLike.scala	/^      var pos = 2$/;"	l
pos	scala/collection/immutable/List.scala	/^    var pos = str.length()$/;"	l
pos	scala/collection/mutable/UnrolledBuffer.scala	/^    var pos: Int = -1$/;"	l
pos	scala/collection/parallel/RemainsIterator.scala	/^    var pos = -1$/;"	l
pos	scala/collection/parallel/immutable/ParHashMap.scala	/^    val pos = hc & 0x1f$/;"	l
pos	scala/collection/parallel/immutable/ParHashSet.scala	/^    val pos = hc & 0x1f$/;"	l
pos	scala/collection/parallel/mutable/ParArray.scala	/^      var pos = -1$/;"	l
pos	scala/collection/parallel/mutable/ParHashMap.scala	/^    val pos = (hc >>> nonmasklen)$/;"	l
pos	scala/collection/parallel/mutable/ParHashSet.scala	/^    val pos = hc >>> nonmasklen$/;"	l
pos	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^      var pos = startpos$/;"	l
pos	scala/io/Source.scala	/^    var pos = 0$/;"	l
pos	scala/io/Source.scala	/^  def pos = positioner.pos$/;"	m
pos	scala/reflect/generic/Trees.scala	/^    def pos = rawpos$/;"	m
pos	scala/util/parsing/combinator/PackratParsers.scala	/^    def pos: Position = underlying.pos$/;"	m
pos	scala/util/parsing/combinator/lexical/Scanners.scala	/^    def pos = rest1.pos$/;"	m
pos	scala/util/parsing/input/CharSequenceReader.scala	/^  def pos: Position = new OffsetPosition(source, offset)$/;"	m
pos	scala/util/parsing/input/PagedSeqReader.scala	/^  def pos: Position = new OffsetPosition(source, offset)$/;"	m
pos	scala/util/parsing/input/Positional.scala	/^  var pos: Position = NoPosition$/;"	l
pos	scala/util/parsing/input/Reader.scala	/^  def pos: Position$/;"	m
pos	scala/util/regexp/WordExp.scala	/^    var pos = -1$/;"	l
pos	scala/xml/Utility.scala	/^    var pos = 0$/;"	l
pos	scala/xml/parsing/MarkupParser.scala	/^      val pos = this.pos$/;"	l
pos	scala/xml/parsing/MarkupParser.scala	/^    val pos = this.pos$/;"	l
pos	scala/xml/parsing/MarkupParser.scala	/^  var pos: Int = _$/;"	l
pos1	scala/collection/immutable/List.scala	/^      val pos1 = str.lastIndexOf(separator, pos - 1)$/;"	l
posStep	scala/collection/immutable/NumericRange.scala	/^    val posStep = num.gt(step, zero)$/;"	l
pos_	scala/reflect/generic/Trees.scala	/^    def pos_=(pos: Position) = rawpos = pos$/;"	m
positioned	scala/util/parsing/combinator/Parsers.scala	/^  def positioned[T <: Positional](p: => Parser[T]): Parser[T] = Parser { in =>$/;"	m
positive	scala/runtime/BoxesRunTime.java	/^    public static Object positive(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
pow	scala/MathCommon.scala	/^  def pow(x: Double, y: Double): Double = java.lang.Math.pow(x, y)$/;"	m
pow	scala/math/BigDecimal.scala	/^  def pow (n: Int): BigDecimal = this.bigDecimal.pow(n, mc)$/;"	m
pow	scala/math/BigInt.scala	/^  def pow (exp: Int): BigInt = new BigInt(this.bigInteger.pow(exp))$/;"	m
pp	scala/util/parsing/combinator/RegexParsers.scala	/^    val pp = super.positioned(p)$/;"	l
pre	scala/collection/BitSetLike.scala	/^    var pre = ""$/;"	l
pre	scala/reflect/generic/UnPickler.scala	/^          val pre = readTypeRef()$/;"	l
pre	scala/xml/Attribute.scala	/^  def pre: String        \/\/ will be null if unprefixed$/;"	m
pre	scala/xml/PrefixedAttribute.scala	/^  val pre: String,$/;"	l
pre	scala/xml/UnprefixedAttribute.scala	/^  final val pre = null$/;"	l
preMaxSize	scala/actors/scheduler/ThreadPoolConfig.scala	/^    val preMaxSize = getIntegerProp("actors.maxPoolSize") getOrElse 256$/;"	l
precedes	scala/collection/mutable/FlatHashTable.scala	/^    def precedes(i: Int, j: Int) = {$/;"	m
precision	scala/math/BigDecimal.scala	/^  def precision: Int = this.bigDecimal.precision()$/;"	m
preferIPv4Stack	scala/sys/SystemProperties.scala	/^  lazy val preferIPv4Stack     = bool("java.net.preferIPv4Stack", "system should prefer IPv4 sockets")$/;"	l
preferIPv6Addresses	scala/sys/SystemProperties.scala	/^  lazy val preferIPv6Addresses = bool("java.net.preferIPv6Addresses", "system should prefer IPv6 addresses")$/;"	l
prefix	scala/collection/immutable/Stream.scala	/^        var prefix = f(nonEmptyPrefix.head).toStream$/;"	l
prefix	scala/testing/Benchmark.scala	/^  def prefix: String = getClass().getName()$/;"	m
prefix	scala/xml/Node.scala	/^  def prefix: String = null$/;"	m
prefix	scala/xml/Utility.scala	/^  final def prefix(name: String): Option[String] = (name indexOf ':') match {$/;"	m
prefix	scala/xml/parsing/MarkupParser.scala	/^          val prefix = qname.substring(6 \/*xmlns:*\/ , qname.length);$/;"	l
prefixLength	scala/collection/GenSeqLike.scala	/^  def prefixLength(p: A => Boolean): Int = segmentLength(p, 0)$/;"	m
prefixLength	scala/collection/interfaces/SeqMethods.scala	/^  def prefixLength(p: A => Boolean): Int$/;"	m
prefixLength	scala/collection/parallel/RemainsIterator.scala	/^  def prefixLength(pred: T => Boolean): Int = {$/;"	m
prefixedKey	scala/xml/MetaData.scala	/^  def prefixedKey = this match {$/;"	m
prepend	scala/collection/mutable/BufferLike.scala	/^  def prepend(elems: A*) { prependAll(elems) } $/;"	m
prepend	scala/collection/mutable/UnrolledBuffer.scala	/^    def prepend(elem: T) = if (size < array.length) {$/;"	m
prependAll	scala/collection/mutable/BufferLike.scala	/^  def prependAll(xs: TraversableOnce[A]) { xs ++=: this }$/;"	m
prependToList	scala/collection/mutable/ListBuffer.scala	/^  def prependToList(xs: List[A]): List[A] = {$/;"	m
pres	scala/collection/immutable/List.scala	/^    var pres = prefix$/;"	l
preserve	scala/xml/XML.scala	/^  val preserve  = "preserve"$/;"	l
preserveWS	scala/xml/parsing/ConstructingHandler.scala	/^  val preserveWS: Boolean$/;"	l
preserveWS	scala/xml/parsing/MarkupParser.scala	/^  val preserveWS: Boolean$/;"	l
preserveWS	scala/xml/parsing/XhtmlParser.scala	/^  val preserveWS = true$/;"	l
preserveWS	scala/xml/pull/XMLEventReader.scala	/^    val preserveWS = XMLEventReader.this.preserveWS$/;"	l
preserveWS	scala/xml/pull/XMLEventReader.scala	/^  val preserveWS = true$/;"	l
preserving	scala/collection/mutable/ArrayStack.scala	/^  def preserving[T](action: => T) = {$/;"	m
prestartAllCoreThreads	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public int prestartAllCoreThreads() {$/;"	m	class:ThreadPoolExecutor
prestartCoreThread	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public boolean prestartCoreThread() {$/;"	m	class:ThreadPoolExecutor
prev	scala/actors/MessageQueue.scala	/^      var prev = first$/;"	l
prev	scala/collection/JavaConversions.scala	/^        var prev : Option[A] = None$/;"	l
prev	scala/collection/JavaConversions.scala	/^      val prev = underlying.replace(k, v)$/;"	l
prev	scala/collection/JavaConversions.scala	/^      var prev : Option[A] = None$/;"	l
prev	scala/collection/immutable/HashMap.scala	/^          var prev: HashTrieMap[A, B1] = null$/;"	l
prev	scala/collection/mutable/DoubleLinkedListLike.scala	/^  var prev: This = _$/;"	l
prevOwner	scala/reflect/generic/Trees.scala	/^      val prevOwner = currentOwner$/;"	l
prevSize	scala/collection/Iterator.scala	/^      val prevSize = buffer.size$/;"	l
previousLevel	scala/xml/include/sax/XIncludeFilter.scala	/^      val previousLevel = level$/;"	l
previousRemaining	scala/collection/parallel/immutable/ParHashMap.scala	/^        val previousRemaining = remaining$/;"	l
previousRemaining	scala/collection/parallel/immutable/ParHashSet.scala	/^        val previousRemaining = remaining$/;"	l
print	scala/Console.scala	/^  def print(obj: Any) {$/;"	m
print	scala/Predef.scala	/^  def print(x: Any) = Console.print(x)$/;"	m
print	scala/collection/immutable/Stream.scala	/^  def print() { print(", ") }$/;"	m
print	scala/collection/immutable/Stream.scala	/^  def print(sep: String) {$/;"	m
print	scala/collection/parallel/ParIterableLike.scala	/^    def print(depth: Int = 0): Unit$/;"	m
print	scala/collection/parallel/ParIterableLike.scala	/^    def print(depth: Int) = println((" " * depth) + this)$/;"	m
print	scala/collection/parallel/ParIterableLike.scala	/^    def print(depth: Int) {$/;"	m
print	scala/reflect/generic/Trees.scala	/^    def print(tree: Tree)$/;"	m
printActorDump	scala/actors/IScheduler.scala	/^  def printActorDump() {}$/;"	m
printChain	scala/collection/parallel/Tasks.scala	/^    def printChain() = {$/;"	m
printer	scala/reflect/generic/Trees.scala	/^      val printer = newTreePrinter(new PrintWriter(buffer))$/;"	l
printf	scala/Console.scala	/^  def printf(text: String, args: Any*) { out.print(text format (args : _*)) }$/;"	m
printf	scala/Predef.scala	/^  def printf(text: String, xs: Any*) = Console.print(text.format(xs: _*))$/;"	m
println	scala/Console.scala	/^  def println() { out.println() }$/;"	m
println	scala/Console.scala	/^  def println(x: Any) { out.println(x) }$/;"	m
println	scala/Predef.scala	/^  def println() = Console.println()$/;"	m
println	scala/Predef.scala	/^  def println(x: Any) = Console.println(x)$/;"	m
privateWithin	scala/reflect/generic/HasFlags.scala	/^  def privateWithin: AccessBoundaryType$/;"	m
privateWithin	scala/reflect/generic/Symbols.scala	/^    def privateWithin: Symbol$/;"	m
privateWithin	scala/reflect/generic/UnPickler.scala	/^      val privateWithin = $/;"	l
privateWithin	scala/reflect/generic/UnPickler.scala	/^      val privateWithin = readNameRef()$/;"	l
privateWithin_	scala/reflect/generic/Symbols.scala	/^    def privateWithin_=(sym: Symbol) { throw new UnsupportedOperationException("privateWithin_= inapplicable for " + this) }$/;"	m
privilegedCallable	scala/actors/threadpool/Executors.java	/^    public static Callable privilegedCallable(Callable callable) {$/;"	m	class:Executors
privilegedCallableUsingCurrentClassLoader	scala/actors/threadpool/Executors.java	/^    public static Callable privilegedCallableUsingCurrentClassLoader(Callable callable) {$/;"	m	class:Executors
privilegedThreadFactory	scala/actors/threadpool/Executors.java	/^    public static ThreadFactory privilegedThreadFactory() {$/;"	m	class:Executors
probablePrime	scala/math/BigInt.scala	/^  def probablePrime(bitLength: Int, rnd: scala.util.Random): BigInt =$/;"	m
procInstr	scala/xml/factory/Binder.scala	/^  final def procInstr(pos: Int, target: String, txt: String) =$/;"	m
procInstr	scala/xml/parsing/ConstructingHandler.scala	/^  def procInstr(pos: Int, target: String, txt: String) =$/;"	m
procInstr	scala/xml/parsing/DefaultMarkupHandler.scala	/^  def procInstr(pos: Int, target: String, txt: String) = NodeSeq.Empty$/;"	m
procInstr	scala/xml/parsing/MarkupHandler.scala	/^  def procInstr(pos: Int, target: String, txt: String): NodeSeq$/;"	m
procInstr	scala/xml/pull/XMLEventReader.scala	/^    def procInstr(pos: Int, target: String, txt: String)  = setEvent(EvProcInstr(target, txt))$/;"	m
process	scala/sys/process/BasicIO.scala	/^    val process:   T => Unit,$/;"	l
process	scala/sys/process/BasicIO.scala	/^package process$/;"	p
process	scala/sys/process/Process.scala	/^package process$/;"	p
process	scala/sys/process/ProcessBuilder.scala	/^package process$/;"	p
process	scala/sys/process/ProcessBuilderImpl.scala	/^      val process  = run(BasicIO(withInput, streamed.process, log))$/;"	l
process	scala/sys/process/ProcessBuilderImpl.scala	/^      val process = p.start() \/\/ start the external process$/;"	l
process	scala/sys/process/ProcessBuilderImpl.scala	/^package process$/;"	p
process	scala/sys/process/ProcessIO.scala	/^package process$/;"	p
process	scala/sys/process/ProcessImpl.scala	/^package process$/;"	p
process	scala/sys/process/ProcessLogger.scala	/^package process$/;"	p
process	scala/sys/process/package.scala	/^  package process {$/;"	p
processDebug	scala/sys/process/package.scala	/^      final val processDebug = props contains "scala.process.debug"$/;"	l
processError	scala/sys/process/ProcessIO.scala	/^  val processError: InputStream => Unit,$/;"	l
processFully	scala/sys/process/BasicIO.scala	/^  def processFully(buffer: Appendable): InputStream => Unit = processFully(appendLine(buffer))$/;"	m
processFully	scala/sys/process/BasicIO.scala	/^  def processFully(processLine: String => Unit): InputStream => Unit = in => {$/;"	m
processLinesFully	scala/sys/process/BasicIO.scala	/^  def processLinesFully(processLine: String => Unit)(readLine: () => String) {$/;"	m
processMsg	scala/actors/remote/NetKernel.scala	/^  def processMsg(senderNode: Node, msg: AnyRef): Unit = synchronized {$/;"	m
processOutput	scala/sys/process/ProcessIO.scala	/^  val processOutput: InputStream => Unit,$/;"	l
processWorkerExit	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private void processWorkerExit(Worker w, boolean completedAbruptly) {$/;"	m	class:ThreadPoolExecutor	file:
processingInstruction	scala/xml/include/sax/XIncluder.scala	/^  def processingInstruction(target: String, data: String) {$/;"	m
prod	scala/collection/parallel/mutable/ParArray.scala	/^        var prod = one$/;"	l
produce	scala/xml/pull/XMLEventReader.scala	/^  def produce(x: T): Unit = if (!eos) interruptibly(queue put x)$/;"	m
product	scala/collection/GenTraversableOnce.scala	/^  def product[A1 >: A](implicit num: Numeric[A1]): A1$/;"	m
product	scala/collection/TraversableOnce.scala	/^  def product[B >: A](implicit num: Numeric[B]): B = foldLeft(num.one)(num.times)$/;"	m
product	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def product[B >: A](implicit num: Numeric[B]): B$/;"	m
product	scala/collection/parallel/ParIterableLike.scala	/^  def product[U >: T](implicit num: Numeric[U]): U = {$/;"	m
productArity	scala/Product.scala	/^  def productArity: Int$/;"	m
productElement	scala/Product.scala	/^  def productElement(n: Int): Any$/;"	m
productElements	scala/Product.scala	/^  def productElements: Iterator[Any] = productIterator$/;"	m
productIterator	scala/Product.scala	/^  def productIterator: Iterator[Any] = new Iterator[Any] {$/;"	m
productPrefix	scala/Product.scala	/^  def productPrefix = ""$/;"	m
projection	scala/collection/IterableLike.scala	/^  def projection = view$/;"	m
prolog	scala/xml/parsing/MarkupParser.scala	/^  def prolog(): (Option[String], Option[String], Option[Boolean]) =$/;"	m
promoteTermNamesAsNecessary	scala/reflect/generic/Names.scala	/^  implicit def promoteTermNamesAsNecessary(name: Name): TermName = mkTermName(name)$/;"	m
propIsSet	scala/util/Properties.scala	/^  def propIsSet(name: String)                   = System.getProperty(name) != null$/;"	m
propIsSetTo	scala/util/Properties.scala	/^  def propIsSetTo(name: String, value: String)  = propOrNull(name) == value$/;"	m
propOrElse	scala/util/Properties.scala	/^  def propOrElse(name: String, alt: String)     = System.getProperty(name, alt)$/;"	m
propOrEmpty	scala/util/Properties.scala	/^  def propOrEmpty(name: String)                 = propOrElse(name, "")$/;"	m
propOrFalse	scala/util/Properties.scala	/^  def propOrFalse(name: String)                 = propOrNone(name) exists (x => List("yes", "on", "true") contains x.toLowerCase)$/;"	m
propOrNone	scala/util/Properties.scala	/^  def propOrNone(name: String)                  = Option(propOrNull(name))$/;"	m
propOrNull	scala/util/Properties.scala	/^  def propOrNull(name: String)                  = propOrElse(name, null)$/;"	m
propertiesAsScalaMap	scala/collection/JavaConversions.scala	/^  implicit def propertiesAsScalaMap(p: ju.Properties): mutable.Map[String, String] = p match {$/;"	m
propertiesAsScalaMapConverter	scala/collection/JavaConverters.scala	/^  implicit def propertiesAsScalaMapConverter(p: ju.Properties): AsScala[mutable.Map[String, String]] = $/;"	m
props	scala/sys/package.scala	/^  def props: SystemProperties = new SystemProperties$/;"	m
props	scala/util/Properties.scala	/^    val props = new java.util.Properties$/;"	l
protect	scala/sys/process/BasicIO.scala	/^    def protect(in: InputStream): InputStream    = if (in eq stdin) Uncloseable(in) else in$/;"	m
protect	scala/sys/process/BasicIO.scala	/^    def protect(out: OutputStream): OutputStream = if ((out eq stdout) || (out eq stderr)) Uncloseable(out) else out$/;"	m
providerProp	scala/actors/threadpool/helpers/Utils.java	/^    private final static String providerProp =$/;"	f	class:Utils	file:
proxies	scala/actors/remote/NetKernel.scala	/^  val proxies = new HashMap[(Node, Symbol), Proxy]$/;"	l
psplit	scala/collection/parallel/ParSeqLike.scala	/^    def psplit(sizes: Int*) = {$/;"	m
psplit	scala/collection/parallel/ParSeqLike.scala	/^    def psplit(sizes: Int*): Seq[ParIterator]$/;"	m
psplit	scala/collection/parallel/PreciseSplitter.scala	/^  def psplit(sizes: Int*): Seq[PreciseSplitter[T]]$/;"	m
psplit	scala/collection/parallel/RemainsIterator.scala	/^    def psplit(sizes: Int*) = trio.psplit(sizes: _*)$/;"	m
psplit	scala/collection/parallel/RemainsIterator.scala	/^    def psplit(sizes: Int*): Seq[SeqSplitter[(U, S)]] = {$/;"	m
psplit	scala/collection/parallel/RemainsIterator.scala	/^    def psplit(sizes: Int*): Seq[SeqSplitter[S]] = self.psplit(sizes: _*).map { _ map f }$/;"	m
psplit	scala/collection/parallel/RemainsIterator.scala	/^    def psplit(sizes: Int*): Seq[SeqSplitter[T]] = takeSeq(self.psplit(sizes: _*)) { (p, n) => p.take(n) }$/;"	m
psplit	scala/collection/parallel/RemainsIterator.scala	/^    def psplit(sizes: Int*): Seq[SeqSplitter[U]] = if (firstNonEmpty) {$/;"	m
psplit	scala/collection/parallel/RemainsIterator.scala	/^    def psplit(szs: Int*) = (self.psplit(szs: _*) zip that.psplit(szs: _*)) map { p => p._1 zipParSeq p._2 }$/;"	m
psplit	scala/collection/parallel/RemainsIterator.scala	/^  def psplit(sizes: Int*): Seq[SeqSplitter[T]]$/;"	m
psplit	scala/collection/parallel/immutable/ParRange.scala	/^    def psplit(sizes: Int*) = {$/;"	m
psplit	scala/collection/parallel/immutable/ParVector.scala	/^    def psplit(sizes: Int*): Seq[ParVectorIterator] = {$/;"	m
psplit	scala/collection/parallel/immutable/package.scala	/^      def psplit(sizes: Int*) = {$/;"	m
psplit	scala/collection/parallel/mutable/ParArray.scala	/^    def psplit(sizesIncomplete: Int*): Seq[ParIterator] = {$/;"	m
pubID	scala/xml/parsing/MarkupParser.scala	/^      val pubID = pubidLiteral()$/;"	l
pubidLiteral	scala/xml/parsing/MarkupParser.scala	/^  def pubidLiteral(): String = {$/;"	m
publicID	scala/xml/include/sax/XIncludeFilter.scala	/^    var publicID = ""$/;"	l
publicId	scala/xml/dtd/ExternalID.scala	/^  def publicId: String$/;"	m
publicId	scala/xml/dtd/ExternalID.scala	/^  val publicId = null$/;"	l
pull	scala/xml/pull/XMLEvent.scala	/^package pull$/;"	p
pull	scala/xml/pull/XMLEventReader.scala	/^package pull$/;"	p
purge	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public void purge() {$/;"	m	class:ThreadPoolExecutor
push	scala/collection/immutable/IntMap.scala	/^  def push(x : IntMap[V]) {$/;"	m
push	scala/collection/immutable/LongMap.scala	/^  def push(x : LongMap[V]) {$/;"	m
push	scala/collection/immutable/Stack.scala	/^  def push[B >: A](elem1: B, elem2: B, elems: B*): Stack[B] = $/;"	m
push	scala/collection/immutable/Stack.scala	/^  def push[B >: A](elem: B): Stack[B] = new Stack(elem :: elems)$/;"	m
push	scala/collection/mutable/ArrayStack.scala	/^  def push(x: T) {$/;"	m
push	scala/collection/mutable/Stack.scala	/^  def push(elem1: A, elem2: A, elems: A*): this.type =$/;"	m
push	scala/collection/mutable/Stack.scala	/^  def push(elem: A): this.type = { elems = elem :: elems; this }$/;"	m
push	scala/xml/parsing/MarkupParser.scala	/^  def push(entityName: String) {$/;"	m
pushAll	scala/collection/immutable/Stack.scala	/^  def pushAll[B >: A](xs: TraversableOnce[B]): Stack[B] =$/;"	m
pushAll	scala/collection/mutable/Stack.scala	/^  def pushAll(xs: TraversableOnce[A]): this.type = { xs.seq foreach push ; this }$/;"	m
pushExternal	scala/xml/parsing/MarkupParser.scala	/^  def pushExternal(systemId: String) {$/;"	m
pushdown	scala/collection/parallel/ParIterableLike.scala	/^    def pushdown(v: U) = {$/;"	m
pushdown	scala/collection/parallel/ParIterableLike.scala	/^    def pushdown(v: U) {$/;"	m
pushdown	scala/collection/parallel/ParIterableLike.scala	/^    def pushdown(v: U): Unit$/;"	m
put	scala/actors/LinkedQueue.java	/^  public void put(Object x) throws InterruptedException {$/;"	m	class:LinkedQueue
put	scala/actors/threadpool/BlockingQueue.java	/^    void put(E e) throws InterruptedException;$/;"	m	interface:BlockingQueue
put	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public void put(E e) throws InterruptedException {$/;"	m	class:LinkedBlockingQueue
put	scala/actors/threadpool/SynchronousQueue.java	/^    public void put(Object e) throws InterruptedException {$/;"	m	class:SynchronousQueue
put	scala/collection/JavaConversions.scala	/^    def put(key: A, value: B): B = underlying.put(key, value) match {$/;"	m
put	scala/collection/mutable/MapLike.scala	/^  def put(key: A, value: B): Option[B] = {$/;"	m
put	scala/collection/parallel/mutable/ParHashMap.scala	/^  def put(key: K, value: V): Option[V] = {$/;"	m
put	scala/collection/parallel/mutable/ParMapLike.scala	/^  def put(key: K, value: V): Option[V]$/;"	m
put	scala/concurrent/SyncVar.scala	/^  def put(x: A) = synchronized {$/;"	m
putBack	scala/actors/threadpool/helpers/FIFOWaitQueue.java	/^    public void putBack(WaitNode w) {$/;"	m	class:FIFOWaitQueue
putBack	scala/actors/threadpool/helpers/WaitQueue.java	/^    public abstract void putBack(WaitNode w);$/;"	m	class:WaitQueue
putIfAbsent	scala/collection/JavaConversions.scala	/^    def putIfAbsent(k: A, v: B) = underlying.putIfAbsent(k, v) match {$/;"	m
putIfAbsent	scala/collection/JavaConversions.scala	/^    def putIfAbsent(k: A, v: B): Option[B] = {$/;"	m
putIfAbsent	scala/collection/mutable/ConcurrentMap.scala	/^  def putIfAbsent(k: A, v: B): Option[B]$/;"	m
putLock	scala/actors/threadpool/LinkedBlockingQueue.java	/^    private final ReentrantLock putLock = new ReentrantLock();$/;"	f	class:LinkedBlockingQueue	file:
putLock_	scala/actors/LinkedQueue.java	/^  protected final Object putLock_ = new Object(); $/;"	f	class:LinkedQueue
pw	scala/reflect/generic/Flags.scala	/^    val pw =$/;"	l
pw	scala/reflect/generic/UnPickler.scala	/^          val pw = at(inforef, readSymbol)$/;"	l
q	scala/sys/process/BasicIO.scala	/^      val q = new LinkedBlockingQueue[Either[Int, T]]$/;"	l
q	scala/util/automata/SubsetConstruction.scala	/^      val q = indexMap(Q)$/;"	l
q	scala/util/automata/WordBerrySethi.scala	/^    val q = deltaq(src)$/;"	l
q	scala/util/parsing/combinator/PackratParsers.scala	/^    lazy val q = p$/;"	l
q	scala/util/parsing/combinator/PackratParsers.scala	/^    val q = super.phrase(p)$/;"	l
q	scala/util/parsing/combinator/Parsers.scala	/^      lazy val q = q0 \/\/ lazy argument$/;"	l
q0	scala/util/automata/SubsetConstruction.scala	/^    val q0 = BitSet(0)            \/\/ the set { 0 }$/;"	l
q1	scala/util/automata/Inclusion.scala	/^    var q1 = 0 \/\/dfa1.initstate; \/\/ == 0$/;"	l
q2	scala/util/automata/Inclusion.scala	/^    var q2 = 0 \/\/dfa2.initstate; \/\/ == 0$/;"	l
qCurrent	scala/xml/parsing/ValidatingMarkupHandler.scala	/^  var qCurrent: Int = -1$/;"	l
qDef	scala/util/automata/SubsetConstruction.scala	/^      val qDef = indexMap(transDef)$/;"	l
qStack	scala/xml/parsing/ValidatingMarkupHandler.scala	/^  var qStack: List[Int] = Nil$/;"	l
qel	scala/actors/Actor.scala	/^      val qel = mailbox.extractFirst((m: Any, replyTo: OutputChannel[Any]) => {$/;"	l
qel	scala/actors/Actor.scala	/^      val qel = tmpMbox.extractFirst((msg: Any, replyTo: OutputChannel[Any]) => {$/;"	l
qel	scala/actors/Reactor.scala	/^      val qel = tmpMbox.extractFirst(handler)$/;"	l
qel	scala/actors/ReplyReactor.scala	/^      val qel = mailbox.extractFirst((m: Any, replyTo: OutputChannel[Any]) => {$/;"	l
qel	scala/actors/ReplyReactor.scala	/^      val qel = tmpMbox.extractFirst((msg: Any, replyTo: OutputChannel[Any]) => {$/;"	l
qlock	scala/actors/threadpool/SynchronousQueue.java	/^    private final ReentrantLock qlock;$/;"	f	class:SynchronousQueue	file:
qname	scala/xml/parsing/FactoryAdapter.scala	/^      val qname = attributes getQName i$/;"	l
qname	scala/xml/parsing/MarkupParser.scala	/^      val qname = xName$/;"	l
qual	scala/reflect/generic/UnPickler.scala	/^          val qual = readTreeRef()$/;"	l
qualifier	scala/reflect/generic/UnPickler.scala	/^          val qualifier = readTreeRef()$/;"	l
queue	scala/collection/parallel/Tasks.scala	/^  def queue = executor.getQueue.asInstanceOf[LinkedBlockingQueue[Runnable]]$/;"	m
queue	scala/reflect/generic/UnPickler.scala	/^      val queue = new collection.mutable.ListBuffer[() => Unit]()$/;"	l
queueCreate	scala/concurrent/MailBox.scala	/^  def queueCreate[A >: Null <: AnyRef]: QueueModule[A] = new QueueModule[A] {$/;"	m
queueCreate	scala/concurrent/MailBox.scala	/^  def queueCreate[A]: QueueModule[A] = new QueueModule[A] {$/;"	m
quickSort	scala/util/Sorting.scala	/^  def quickSort(a: Array[Double]) { sort1(a, 0, a.length) }$/;"	m
quickSort	scala/util/Sorting.scala	/^  def quickSort(a: Array[Float]) { sort1(a, 0, a.length) }$/;"	m
quickSort	scala/util/Sorting.scala	/^  def quickSort(a: Array[Int]) { sort1(a, 0, a.length) }$/;"	m
quickSort	scala/util/Sorting.scala	/^  def quickSort[K: Ordering](a: Array[K]) { sort1(a, 0, a.length) }$/;"	m
quot	scala/math/BigDecimal.scala	/^  def quot (that: BigDecimal): BigDecimal =$/;"	m
quot	scala/math/Integral.scala	/^  def quot(x: T, y: T): T$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: BigDecimal, y: BigDecimal): BigDecimal = x \/ y$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: BigInt, y: BigInt): BigInt = x \/ y$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: Byte, y: Byte): Byte = (x \/ y).toByte$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: Char, y: Char): Char = (x \/ y).toChar$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: Double, y: Double): Double = (BigDecimal(x) \/ BigDecimal(y)).doubleValue$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: Float, y: Float): Float = (BigDecimal(x) \/ BigDecimal(y)).floatValue$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: Int, y: Int): Int = x \/ y$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: Long, y: Long): Long = x \/ y$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: Short, y: Short): Short = (x \/ y).toShort$/;"	m
quoteString	scala/util/parsing/json/Parser.scala	/^  def quoteString (s : String) : String =$/;"	m
quoted	scala/xml/dtd/ExternalID.scala	/^  def quoted(s: String) = {$/;"	m
quotedPublicLiteral	scala/xml/dtd/ExternalID.scala	/^    lazy val quotedPublicLiteral = quoted(publicId)$/;"	l
quotedSystemLiteral	scala/xml/dtd/ExternalID.scala	/^    lazy val quotedSystemLiteral = quoted(systemId)$/;"	l
r	scala/actors/Actor.scala	/^      val r = new ActorProxy(Thread.currentThread, sched)$/;"	l
r	scala/collection/Iterator.scala	/^    val r = new PartitionIterator(!p(_))$/;"	l
r	scala/collection/JavaConversions.scala	/^      val r = underlying.put(k, v)$/;"	l
r	scala/collection/JavaConversions.scala	/^      val r = underlying.putIfAbsent(k, v)$/;"	l
r	scala/collection/JavaConversions.scala	/^      val r = underlying.remove(k)$/;"	l
r	scala/collection/SeqLike.scala	/^      var r = n$/;"	l
r	scala/collection/immutable/Stream.scala	/^      val r = Stream.consWrapper(result).#::(these.head)$/;"	l
r	scala/collection/immutable/StringLike.scala	/^  def r: Regex = new Regex(toString)$/;"	m
r	scala/collection/mutable/MapLike.scala	/^    val r = get(key)$/;"	l
r	scala/collection/mutable/SetLike.scala	/^    val r = contains(elem)$/;"	l
r	scala/collection/mutable/UnrolledBuffer.scala	/^        val r = array(idx)$/;"	l
r	scala/collection/mutable/UnrolledBuffer.scala	/^      val r = node.array(pos)$/;"	l
r	scala/collection/parallel/ParSeqLike.scala	/^      val r = pit.indexWhere(pred)$/;"	l
r	scala/collection/parallel/ParSeqLike.scala	/^      val r = pit.lastIndexWhere(pred)$/;"	l
r	scala/collection/parallel/RemainsIterator.scala	/^    var r = next$/;"	l
r	scala/collection/parallel/RemainsIterator.scala	/^    var r = z$/;"	l
r	scala/collection/parallel/RemainsIterator.scala	/^    var r: U = next$/;"	l
r	scala/collection/parallel/RemainsIterator.scala	/^    var r: U = num.one$/;"	l
r	scala/collection/parallel/RemainsIterator.scala	/^    var r: U = num.zero$/;"	l
r	scala/collection/parallel/immutable/ParHashMap.scala	/^      val r = triter.next$/;"	l
r	scala/collection/parallel/immutable/ParRange.scala	/^      val r = range.apply(ind)$/;"	l
r	scala/collection/parallel/immutable/ParRange.scala	/^      val r = rangeleft.reduceLeft(op)$/;"	l
r	scala/collection/parallel/mutable/ParArray.scala	/^      val r = foldLeft_quick(arr, until, op, z)$/;"	l
r	scala/collection/parallel/mutable/ParArray.scala	/^      val r = indexWhere_quick(pred, arr, until, i)$/;"	l
r	scala/collection/parallel/mutable/ParArray.scala	/^      val r = lastIndexWhere_quick(pred, arr, i, until)$/;"	l
r	scala/collection/parallel/mutable/ParArray.scala	/^      val r = prefixLength_quick(pred, arr, until, i)$/;"	l
r	scala/collection/parallel/mutable/ParArray.scala	/^      var r: Option[T] = None$/;"	l
r	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val r = itertable(idx).asInstanceOf[T]$/;"	l
r	scala/collection/parallel/package.scala	/^      val r = buffer(index)$/;"	l
r	scala/concurrent/MailBox.scala	/^    val r = new Receiver(f)$/;"	l
r	scala/reflect/generic/UnPickler.scala	/^      var r = entries(i)$/;"	l
r	scala/testing/SUnit.scala	/^      val r = new TestResult()$/;"	l
r	scala/util/parsing/ast/Binders.scala	/^      val r = result$/;"	l
r	scala/util/parsing/combinator/Parsers.scala	/^    val r = p(in)$/;"	l
r	scala/util/parsing/input/Reader.scala	/^    var r: Reader[T] = this$/;"	l
r	scala/util/regexp/Base.scala	/^    def r = r1$/;"	m
r	scala/xml/dtd/ContentModel.scala	/^  def r: ContentModel.RegExp$/;"	m
r	scala/xml/include/sax/Main.scala	/^          val r = Class.forName(args(1)).newInstance().asInstanceOf[EntityResolver]$/;"	l
r1	scala/util/automata/Inclusion.scala	/^        val r1 = dfa1.next(q1,letter)$/;"	l
r2	scala/util/automata/Inclusion.scala	/^        val r2 = dfa2.next(q2,letter)$/;"	l
ranOrCancelled	scala/actors/threadpool/FutureTask.java	/^    private boolean ranOrCancelled() {$/;"	m	class:FutureTask	file:
random	scala/MathCommon.scala	/^  def random: Double = java.lang.Math.random()$/;"	m
range	scala/Array.scala	/^  def range(start: Int, end: Int): Array[Int] = range(start, end, 1)$/;"	m
range	scala/Array.scala	/^  def range(start: Int, end: Int, step: Int): Array[Int] = {$/;"	m
range	scala/collection/Iterator.scala	/^  def range(start: Int, end: Int): Iterator[Int] = range(start, end, 1)$/;"	m
range	scala/collection/Iterator.scala	/^  def range(start: Int, end: Int, step: Int => Int) = new Iterator[Int] {$/;"	m
range	scala/collection/Iterator.scala	/^  def range(start: Int, end: Int, step: Int) = new Iterator[Int] {$/;"	m
range	scala/collection/generic/GenTraversableFactory.scala	/^  def range[T: Integral](start: T, end: T): CC[T] = range(start, end, implicitly[Integral[T]].one)$/;"	m
range	scala/collection/generic/GenTraversableFactory.scala	/^  def range[T: Integral](start: T, end: T, step: T): CC[T] = {$/;"	m
range	scala/collection/generic/Sorted.scala	/^  def range(from: K, until: K): This = rangeImpl(Some(from), Some(until))$/;"	m
range	scala/collection/immutable/List.scala	/^  def range(start: Int, end: Int, step: Int => Int): List[Int] = {$/;"	m
range	scala/collection/immutable/RedBlack.scala	/^    def range(from: Option[A], until: Option[A]): Tree[B] = blacken(rng(from, until))$/;"	m
range	scala/collection/immutable/Stream.scala	/^  def range(start: Int, end: Int, step: Int => Int): Stream[Int] =$/;"	m
rangeImpl	scala/collection/SortedMapLike.scala	/^  def rangeImpl(from : Option[A], until : Option[A]) : This$/;"	m
rangeImpl	scala/collection/SortedSetLike.scala	/^  def rangeImpl(from: Option[A], until: Option[A]): This$/;"	m
rangeImpl	scala/collection/generic/Sorted.scala	/^  def rangeImpl(from: Option[K], until: Option[K]): This$/;"	m
rawFlagsToPickled	scala/reflect/generic/Flags.scala	/^  def rawFlagsToPickled(flags: Long): Long =$/;"	m
rawInfo	scala/reflect/generic/Symbols.scala	/^    def rawInfo: Type$/;"	m
re	scala/collection/immutable/StringLike.scala	/^    val re = separators.foldLeft("[")(_+escape(_)) + "]"$/;"	l
react	scala/actors/Actor.scala	/^  def react(f: PartialFunction[Any, Unit]): Nothing =$/;"	m
react	scala/actors/Channel.scala	/^  def react(f: PartialFunction[Msg, Unit]): Nothing = {$/;"	m
react	scala/actors/InputChannel.scala	/^  def react(f: PartialFunction[Msg, Unit]): Nothing$/;"	m
react	scala/actors/ReactChannel.scala	/^  def react(f: PartialFunction[Msg, Unit]): Nothing = {$/;"	m
reactWithin	scala/actors/Actor.scala	/^  def reactWithin(msec: Long)(f: PartialFunction[Any, Unit]): Nothing =$/;"	m
reactWithin	scala/actors/Channel.scala	/^  def reactWithin(msec: Long)(f: PartialFunction[Any, Unit]): Nothing = {$/;"	m
reactWithin	scala/actors/InputChannel.scala	/^  def reactWithin(msec: Long)(f: PartialFunction[Any, Unit]): Nothing$/;"	m
reactWithin	scala/actors/ReactChannel.scala	/^  def reactWithin(msec: Long)(f: PartialFunction[Any, Unit]): Nothing = {$/;"	m
reaction	scala/actors/Future.scala	/^      val reaction: PartialFunction[Any, Unit] = new PartialFunction[Any, Unit] {$/;"	l
reactor	scala/actors/Actor.scala	/^  def reactor(body: => Responder[Unit]): Actor = {$/;"	m
read	scala/concurrent/Channel.scala	/^  def read: A = synchronized {$/;"	m
read	scala/concurrent/SyncChannel.scala	/^  def read: A = {$/;"	m
read	scala/concurrent/pilib.scala	/^    def read = {$/;"	m
readASCIIEncoding	scala/xml/include/sax/EncodingHeuristics.scala	/^    def readASCIIEncoding: String = {$/;"	m
readBoolean	scala/Console.scala	/^  def readBoolean(): Boolean = {$/;"	m
readBoolean	scala/Predef.scala	/^  def readBoolean() = Console.readBoolean()$/;"	m
readByte	scala/Console.scala	/^  def readByte(): Byte = {$/;"	m
readByte	scala/Predef.scala	/^  def readByte() = Console.readByte()$/;"	m
readByte	scala/reflect/generic/PickleBuffer.scala	/^  def readByte(): Int = {$/;"	m
readChar	scala/Console.scala	/^  def readChar(): Char = {$/;"	m
readChar	scala/Predef.scala	/^  def readChar() = Console.readChar()$/;"	m
readDouble	scala/Console.scala	/^  def readDouble(): Double = {$/;"	m
readDouble	scala/Predef.scala	/^  def readDouble() = Console.readDouble()$/;"	m
readEncodingFromStream	scala/xml/include/sax/EncodingHeuristics.scala	/^  def readEncodingFromStream(in: InputStream): String = {$/;"	m
readExtSymbol	scala/reflect/generic/UnPickler.scala	/^      def readExtSymbol(): Symbol = {$/;"	m
readFloat	scala/Console.scala	/^  def readFloat(): Float = {$/;"	m
readFloat	scala/Predef.scala	/^  def readFloat() = Console.readFloat()$/;"	m
readFully	scala/sys/process/BasicIO.scala	/^    def readFully() {$/;"	m
readIndex	scala/reflect/generic/PickleBuffer.scala	/^  var readIndex = from$/;"	l
readInt	scala/Console.scala	/^  def readInt(): Int = {$/;"	m
readInt	scala/Predef.scala	/^  def readInt() = Console.readInt()$/;"	m
readInto	scala/collection/Iterator.scala	/^  def readInto[B >: A](xs: Array[B]) {$/;"	m
readInto	scala/collection/Iterator.scala	/^  def readInto[B >: A](xs: Array[B], start: Int) {$/;"	m
readInto	scala/collection/Iterator.scala	/^  def readInto[B >: A](xs: Array[B], start: Int, sz: Int) {$/;"	m
readLine	scala/Console.scala	/^  def readLine(): String = in.readLine()$/;"	m
readLine	scala/Console.scala	/^  def readLine(text: String, args: Any*): String = {$/;"	m
readLine	scala/Predef.scala	/^  def readLine(): String = Console.readLine()$/;"	m
readLine	scala/Predef.scala	/^  def readLine(text: String, args: Any*) = Console.readLine(text, args)$/;"	m
readLock	scala/actors/threadpool/locks/ReadWriteLock.java	/^    Lock readLock();$/;"	m	interface:ReadWriteLock
readLock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    public Lock readLock()  { return readerLock_; }$/;"	m	class:ReentrantReadWriteLock
readLong	scala/Console.scala	/^  def readLong(): Long = {$/;"	m
readLong	scala/Predef.scala	/^  def readLong() = Console.readLong()$/;"	m
readLong	scala/reflect/generic/PickleBuffer.scala	/^  def readLong(len: Int): Long = {$/;"	m
readLongNat	scala/reflect/generic/PickleBuffer.scala	/^  def readLongNat(): Long = {$/;"	m
readModifiers	scala/reflect/generic/UnPickler.scala	/^    def readModifiers(): Modifiers = {$/;"	m
readNat	scala/io/BytePickle.scala	/^      def readNat: Int = {$/;"	m
readNat	scala/reflect/generic/PickleBuffer.scala	/^  def readNat(): Int = readLongNat().toInt$/;"	m
readNode	scala/actors/remote/TcpService.scala	/^  def readNode() {$/;"	m
readObject	scala/actors/remote/Serializer.scala	/^  def readObject(inputStream: DataInputStream): AnyRef = {$/;"	m
readObject	scala/actors/threadpool/LinkedBlockingQueue.java	/^    private void readObject(java.io.ObjectInputStream s)$/;"	m	class:LinkedBlockingQueue	file:
readObject	scala/actors/threadpool/locks/ReentrantLock.java	/^        private void readObject(java.io.ObjectInputStream in)$/;"	m	class:ReentrantLock.FairSync	file:
readObject	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        private void readObject(java.io.ObjectInputStream in)$/;"	m	class:ReentrantReadWriteLock.Sync	file:
readOnly	scala/collection/mutable/BufferLike.scala	/^  def readOnly: scala.collection.Seq[A] = toSeq$/;"	m
readOnly	scala/collection/mutable/Map.scala	/^  def readOnly : scala.collection.Map[A, B] = new scala.collection.Map[A, B] {$/;"	m
readReq	scala/concurrent/SyncChannel.scala	/^        val readReq  = pendingReads.head$/;"	l
readReq	scala/concurrent/SyncChannel.scala	/^    val readReq = new SyncVar[A]$/;"	l
readResolve	scala/actors/threadpool/TimeUnit.java	/^    protected Object readResolve() throws ObjectStreamException {$/;"	m	class:TimeUnit
readShort	scala/Console.scala	/^  def readShort(): Short = {$/;"	m
readShort	scala/Predef.scala	/^  def readShort() = Console.readShort()$/;"	m
readToken	scala/xml/dtd/Scanner.scala	/^  final def readToken: Int = $/;"	m
reader	scala/io/BufferedSource.scala	/^  def reader() = new InputStreamReader(inputStream, codec.decoder)$/;"	m
reader	scala/sys/process/BasicIO.scala	/^    val reader = new BufferedReader(new InputStreamReader(in))$/;"	l
reader	scala/xml/include/sax/XIncludeFilter.scala	/^      val reader = new InputStreamReader(in, encoding)$/;"	l
readerLock_	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    final ReadLock readerLock_ = new ReadLock(this);$/;"	f	class:ReentrantReadWriteLock
readers_	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        transient HashMap<Thread, Integer> readers_ = new HashMap<Thread, Integer>();$/;"	f	class:ReentrantReadWriteLock.Sync
readf	scala/Console.scala	/^  def readf(format: String): List[Any] = {$/;"	m
readf	scala/Predef.scala	/^  def readf(format: String) = Console.readf(format)$/;"	m
readf1	scala/Console.scala	/^  def readf1(format: String): Any = readf(format).head$/;"	m
readf1	scala/Predef.scala	/^  def readf1(format: String) = Console.readf1(format)$/;"	m
readf2	scala/Console.scala	/^  def readf2(format: String): (Any, Any) = {$/;"	m
readf2	scala/Predef.scala	/^  def readf2(format: String) = Console.readf2(format)$/;"	m
readf3	scala/Console.scala	/^  def readf3(format: String): (Any, Any, Any) = {$/;"	m
readf3	scala/Predef.scala	/^  def readf3(format: String) = Console.readf3(format)$/;"	m
realfrom	scala/collection/parallel/ParSeqLike.scala	/^    val realfrom = if (from < 0) 0 else from$/;"	l
realreplaced	scala/collection/parallel/ParSeqLike.scala	/^    val realreplaced = replaced min (length - from)$/;"	l
recalculate	scala/collection/generic/SliceInterval.scala	/^  def recalculate(_from: Int, _until: Int): SliceInterval = {$/;"	m
recalculate	scala/collection/generic/SliceInterval.scala	/^  def recalculate(interval: SliceInterval): SliceInterval =$/;"	m
receive	scala/actors/Actor.scala	/^  def receive[A](f: PartialFunction[Any, A]): A =$/;"	m
receive	scala/actors/Actor.scala	/^  def receive[R](f: PartialFunction[Any, R]): R = {$/;"	m
receive	scala/actors/Channel.scala	/^  def receive[R](f: PartialFunction[Msg, R]): R = {$/;"	m
receive	scala/actors/InputChannel.scala	/^  def receive[R](f: PartialFunction[Msg, R]): R$/;"	m
receive	scala/actors/ReactChannel.scala	/^  def receive[R](f: PartialFunction[Msg, R]): R = {$/;"	m
receive	scala/concurrent/MailBox.scala	/^    def receive(): A = synchronized {$/;"	m
receive	scala/concurrent/MailBox.scala	/^  def receive[A](f: PartialFunction[Message, A]): A = {$/;"	m
receiveTimeout	scala/actors/Actor.scala	/^    val receiveTimeout = () => {$/;"	l
receiveWithin	scala/actors/Actor.scala	/^  def receiveWithin[R](msec: Long)(f: PartialFunction[Any, R]): R = {$/;"	m
receiveWithin	scala/actors/Actor.scala	/^  def receiveWithin[R](msec: Long)(f: PartialFunction[Any, R]): R =$/;"	m
receiveWithin	scala/actors/Channel.scala	/^  def receiveWithin[R](msec: Long)(f: PartialFunction[Any, R]): R = {$/;"	m
receiveWithin	scala/actors/InputChannel.scala	/^  def receiveWithin[R](msec: Long)(f: PartialFunction[Any, R]): R$/;"	m
receiveWithin	scala/actors/ReactChannel.scala	/^  def receiveWithin[R](msec: Long)(f: PartialFunction[Any, R]): R = {$/;"	m
receiveWithin	scala/concurrent/MailBox.scala	/^    def receiveWithin(msec: Long): A = synchronized {$/;"	m
receiveWithin	scala/concurrent/MailBox.scala	/^  def receiveWithin[A](msec: Long)(f: PartialFunction[Message, A]): A = {$/;"	m
receiver	scala/actors/ActorCanReply.scala	/^        def receiver =$/;"	m
receiver	scala/actors/Channel.scala	/^        def receiver =$/;"	m
receiver	scala/actors/OutputChannel.scala	/^  def receiver: Actor$/;"	m
receiver	scala/actors/Reactor.scala	/^  def receiver: Actor = this.asInstanceOf[Actor]$/;"	m
receiver	scala/actors/ReactorCanReply.scala	/^      def receiver =$/;"	m
receiver	scala/actors/remote/Proxy.scala	/^  def receiver: Actor =$/;"	m
receiverLoc	scala/actors/remote/NetKernel.scala	/^    val receiverLoc = Locator(node, name)$/;"	l
recheck	scala/actors/threadpool/helpers/WaitQueue.java	/^        boolean recheck(WaitNode node);$/;"	m	interface:WaitQueue.QueuedSync
recheck	scala/actors/threadpool/locks/ReentrantLock.java	/^        public synchronized boolean recheck(WaitQueue.WaitNode node) {$/;"	m	class:ReentrantLock.FairSync
recvActor	scala/actors/ReactChannel.scala	/^    val recvActor = receiver.asInstanceOf[Actor]$/;"	l
reduce	scala/collection/GenTraversableOnce.scala	/^  def reduce[A1 >: A](op: (A1, A1) => A1): A1$/;"	m
reduce	scala/collection/TraversableOnce.scala	/^  def reduce[A1 >: A](op: (A1, A1) => A1): A1 = reduceLeft(op)$/;"	m
reduce	scala/collection/parallel/ParIterableLike.scala	/^  def reduce[U >: T](op: (U, U) => U): U = {$/;"	m
reduceLeft	scala/collection/IndexedSeqOptimized.scala	/^  def reduceLeft[B >: A](op: (B, A) => B): B = $/;"	m
reduceLeft	scala/collection/LinearSeqOptimized.scala	/^  def reduceLeft[B >: A](f: (B, A) => B): B = $/;"	m
reduceLeft	scala/collection/TraversableOnce.scala	/^  def reduceLeft[B >: A](op: (B, A) => B): B = {$/;"	m
reduceLeft	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def reduceLeft[B >: A](op: (B, A) => B): B$/;"	m
reduceLeft	scala/collection/parallel/ParIterableLike.scala	/^  def reduceLeft[U >: T](op: (U, T) => U): U = seq.reduceLeft(op)$/;"	m
reduceLeft	scala/collection/parallel/RemainsIterator.scala	/^  def reduceLeft[U >: T](howmany: Int, op: (U, U) => U): U = {$/;"	m
reduceLeftOption	scala/collection/GenTraversableOnce.scala	/^  def reduceLeftOption[B >: A](op: (B, A) => B): Option[B]$/;"	m
reduceLeftOption	scala/collection/TraversableOnce.scala	/^  def reduceLeftOption[B >: A](op: (B, A) => B): Option[B] =$/;"	m
reduceLeftOption	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def reduceLeftOption[B >: A](op: (B, A) => B): Option[B]$/;"	m
reduceLeftOption	scala/collection/parallel/ParIterableLike.scala	/^  def reduceLeftOption[U >: T](op: (U, T) => U): Option[U] = seq.reduceLeftOption(op)$/;"	m
reduceOption	scala/collection/GenTraversableOnce.scala	/^  def reduceOption[A1 >: A](op: (A1, A1) => A1): Option[A1]$/;"	m
reduceOption	scala/collection/TraversableOnce.scala	/^  def reduceOption[A1 >: A](op: (A1, A1) => A1): Option[A1] = reduceLeftOption(op)$/;"	m
reduceOption	scala/collection/parallel/ParIterableLike.scala	/^  def reduceOption[U >: T](op: (U, U) => U): Option[U] = if (isEmpty) None else Some(reduce(op))$/;"	m
reduceRight	scala/collection/GenTraversableOnce.scala	/^  def reduceRight[B >: A](op: (A, B) => B): B$/;"	m
reduceRight	scala/collection/IndexedSeqOptimized.scala	/^  def reduceRight[B >: A](op: (A, B) => B): B = $/;"	m
reduceRight	scala/collection/LinearSeqOptimized.scala	/^  def reduceRight[B >: A](op: (A, B) => B): B = $/;"	m
reduceRight	scala/collection/TraversableOnce.scala	/^  def reduceRight[B >: A](op: (A, B) => B): B = {$/;"	m
reduceRight	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def reduceRight[B >: A](op: (A, B) => B): B$/;"	m
reduceRight	scala/collection/parallel/ParIterableLike.scala	/^  def reduceRight[U >: T](op: (T, U) => U): U = seq.reduceRight(op)$/;"	m
reduceRightOption	scala/collection/GenTraversableOnce.scala	/^  def reduceRightOption[B >: A](op: (A, B) => B): Option[B]$/;"	m
reduceRightOption	scala/collection/TraversableOnce.scala	/^  def reduceRightOption[B >: A](op: (A, B) => B): Option[B] =$/;"	m
reduceRightOption	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def reduceRightOption[B >: A](op: (A, B) => B): Option[B]$/;"	m
reduceRightOption	scala/collection/parallel/ParIterableLike.scala	/^  def reduceRightOption[U >: T](op: (T, U) => U): Option[U] = seq.reduceRightOption(op)$/;"	m
reduceToSize	scala/collection/mutable/ResizableArray.scala	/^  def reduceToSize(sz: Int) {$/;"	m
reduceWith	scala/collection/mutable/ArrayStack.scala	/^  def reduceWith(f: (T, T) => T): Unit = while(size > 1) combine(f)$/;"	m
reducedRes	scala/collection/immutable/Stream.scala	/^      var reducedRes: B = this.head$/;"	l
ref	scala/xml/Utility.scala	/^          val ref = rfb.toString() $/;"	l
refArrayOps	scala/Predef.scala	/^  implicit def refArrayOps[T <: AnyRef](xs: Array[T]): ArrayOps[T] = new ArrayOps.ofRef[T](xs)$/;"	m
refDef	scala/io/BytePickle.scala	/^  def refDef: PU[RefDef] = new PU[RefDef] {$/;"	m
reference	scala/Symbol.scala	/^        val reference = map get name$/;"	l
reference	scala/math/Equiv.scala	/^  def reference[T <: AnyRef] : Equiv[T] = new Equiv[T] {$/;"	m
regenerateZero	scala/reflect/generic/ByteCodecs.scala	/^  def regenerateZero(src: Array[Byte]): Int = {$/;"	m
regex	scala/util/parsing/combinator/RegexParsers.scala	/^  implicit def regex(r: Regex): Parser[String] = new Parser[String] {$/;"	m
regexp	scala/xml/dtd/ContentModelParser.scala	/^  def regexp: RegExp = {$/;"	m
regexp	scala/xml/include/sax/EncodingHeuristics.scala	/^      val regexp = """(?m).*?encoding\\s*=\\s*["'](.+?)['"]""".r$/;"	l
register	scala/actors/remote/NetKernel.scala	/^  def register(name: Symbol, a: OutputChannel[Any]): Unit = synchronized {$/;"	m
register	scala/actors/remote/RemoteActor.scala	/^  def register(name: Symbol, a: Actor): Unit = synchronized {$/;"	m
registerProxy	scala/actors/remote/NetKernel.scala	/^  def registerProxy(senderNode: Node, senderName: Symbol, p: Proxy): Unit =$/;"	m
reify	scala/util/continuations/package.scala	/^  def reify[A,B,C](ctx: =>(A @cpsParam[B,C])): ControlContext[A,B,C] = {$/;"	m
reifyR	scala/util/continuations/package.scala	/^  def reifyR[A,B,C](ctx: => ControlContext[A,B,C]): ControlContext[A,B,C] = {$/;"	m
reject	scala/actors/threadpool/ThreadPoolExecutor.java	/^    final void reject(Runnable command) {$/;"	m	class:ThreadPoolExecutor
rejectedExecution	scala/actors/threadpool/RejectedExecutionHandler.java	/^    void rejectedExecution(Runnable r, ThreadPoolExecutor executor);$/;"	m	interface:RejectedExecutionHandler
rejectedExecution	scala/actors/threadpool/ThreadPoolExecutor.java	/^        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {$/;"	m	class:ThreadPoolExecutor.AbortPolicy
rejectedExecution	scala/actors/threadpool/ThreadPoolExecutor.java	/^        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {$/;"	m	class:ThreadPoolExecutor.CallerRunsPolicy
rejectedExecution	scala/actors/threadpool/ThreadPoolExecutor.java	/^        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {$/;"	m	class:ThreadPoolExecutor.DiscardOldestPolicy
rejectedExecution	scala/actors/threadpool/ThreadPoolExecutor.java	/^        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {$/;"	m	class:ThreadPoolExecutor.DiscardPolicy
release	scala/collection/parallel/Tasks.scala	/^    def release() {}$/;"	m
release	scala/concurrent/Lock.scala	/^  def release() = synchronized {$/;"	m
releaseVersion	scala/util/Properties.scala	/^  val releaseVersion = scalaPropOrNone("version.number") flatMap { s =>$/;"	l
rem	scala/collection/parallel/immutable/ParVector.scala	/^      val rem = remaining$/;"	l
rem	scala/math/Integral.scala	/^  def rem(x: T, y: T): T$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: BigDecimal, y: BigDecimal): BigDecimal = x remainder y$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: BigInt, y: BigInt): BigInt = x % y$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: Byte, y: Byte): Byte = (x % y).toByte$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: Char, y: Char): Char = (x % y).toChar$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: Double, y: Double): Double = (BigDecimal(x) remainder BigDecimal(y)).doubleValue$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: Float, y: Float): Float = (BigDecimal(x) remainder BigDecimal(y)).floatValue$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: Int, y: Int): Int = x % y$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: Long, y: Long): Long = x % y$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: Short, y: Short): Short = (x % y).toShort$/;"	m
rem	scala/text/Document.scala	/^      var rem = n$/;"	l
remainder	scala/collection/immutable/NumericRange.scala	/^      val remainder = num.toLong(num.rem(diff, step))$/;"	l
remainder	scala/math/BigDecimal.scala	/^  def remainder (that: BigDecimal): BigDecimal = this.bigDecimal.remainder(that.bigDecimal, mc)$/;"	m
remaining	scala/collection/parallel/ParSeqLike.scala	/^    final def remaining = end - i$/;"	m
remaining	scala/collection/parallel/RemainsIterator.scala	/^    def remaining = if (curr eq self) curr.remaining + that.remaining else curr.remaining$/;"	m
remaining	scala/collection/parallel/RemainsIterator.scala	/^    def remaining = self.remaining max that.remaining$/;"	m
remaining	scala/collection/parallel/RemainsIterator.scala	/^    def remaining = self.remaining min that.remaining$/;"	m
remaining	scala/collection/parallel/RemainsIterator.scala	/^    def remaining = self.remaining$/;"	m
remaining	scala/collection/parallel/RemainsIterator.scala	/^    def remaining = trio.remaining$/;"	m
remaining	scala/collection/parallel/RemainsIterator.scala	/^    var remaining = taken min self.remaining$/;"	l
remaining	scala/collection/parallel/RemainsIterator.scala	/^  def remaining: Int$/;"	m
remaining	scala/collection/parallel/immutable/ParHashMap.scala	/^    def remaining = sz - i$/;"	m
remaining	scala/collection/parallel/immutable/ParHashSet.scala	/^    def remaining = sz - i$/;"	m
remaining	scala/collection/parallel/immutable/ParRange.scala	/^    final def remaining = len - ind$/;"	m
remaining	scala/collection/parallel/immutable/ParVector.scala	/^    def remaining: Int = remainingElementCount$/;"	m
remaining	scala/collection/parallel/immutable/package.scala	/^      def remaining = until - i$/;"	m
remaining	scala/collection/parallel/mutable/ParArray.scala	/^    def remaining = until - i$/;"	m
remaining	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^    def remaining = totalsize - traversed$/;"	m
remaining	scala/collection/parallel/mutable/ParHashTable.scala	/^    def remaining = totalsize - traversed$/;"	m
remaining	scala/collection/parallel/package.scala	/^    def remaining = until - index$/;"	m
remainingCapacity	scala/actors/threadpool/BlockingQueue.java	/^    int remainingCapacity();$/;"	m	interface:BlockingQueue
remainingCapacity	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public int remainingCapacity() {$/;"	m	class:LinkedBlockingQueue
remainingCapacity	scala/actors/threadpool/SynchronousQueue.java	/^    public int remainingCapacity() {$/;"	m	class:SynchronousQueue
remote	scala/actors/remote/FreshNameCreator.scala	/^package remote$/;"	p
remote	scala/actors/remote/JavaSerializer.scala	/^package remote$/;"	p
remote	scala/actors/remote/NetKernel.scala	/^package remote$/;"	p
remote	scala/actors/remote/Proxy.scala	/^package remote$/;"	p
remote	scala/actors/remote/RemoteActor.scala	/^package remote$/;"	p
remote	scala/actors/remote/Serializer.scala	/^package remote$/;"	p
remote	scala/actors/remote/Service.scala	/^package remote$/;"	p
remote	scala/actors/remote/TcpService.scala	/^package remote$/;"	p
remote	scala/package.scala	/^  type remote = annotation.remote$/;"	T
remote	scala/remote.scala	/^class remote extends annotation.StaticAnnotation {}$/;"	c
remoteApply	scala/actors/remote/NetKernel.scala	/^  def remoteApply(node: Node, name: Symbol, from: OutputChannel[Any], rfun: Function2[AbstractActor, Proxy, Unit]) {$/;"	m
remove	scala/actors/MessageQueue.scala	/^  def remove(n: Int)(p: (Msg, OutputChannel[Any]) => Boolean): Option[(Msg, OutputChannel[Any])] =$/;"	m
remove	scala/actors/threadpool/AbstractQueue.java	/^    public Object remove() {$/;"	m	class:AbstractQueue
remove	scala/actors/threadpool/BlockingQueue.java	/^    boolean remove(Object o);$/;"	m	interface:BlockingQueue
remove	scala/actors/threadpool/LinkedBlockingQueue.java	/^        public void remove() {$/;"	m	class:LinkedBlockingQueue.Itr
remove	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public boolean remove(Object o) {$/;"	m	class:LinkedBlockingQueue
remove	scala/actors/threadpool/Queue.java	/^    Object remove();$/;"	m	interface:Queue
remove	scala/actors/threadpool/SynchronousQueue.java	/^        public void remove() {$/;"	m	class:SynchronousQueue.EmptyIterator
remove	scala/actors/threadpool/SynchronousQueue.java	/^    public boolean remove(Object o) {$/;"	m	class:SynchronousQueue
remove	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public boolean remove(Runnable task) {$/;"	m	class:ThreadPoolExecutor
remove	scala/collection/JavaConversions.scala	/^        def remove() = prev match {$/;"	m
remove	scala/collection/JavaConversions.scala	/^      def remove = prev match {$/;"	m
remove	scala/collection/JavaConversions.scala	/^    def remove() = throw new UnsupportedOperationException$/;"	m
remove	scala/collection/JavaConversions.scala	/^    def remove(i : Int) = underlying.remove(i)$/;"	m
remove	scala/collection/JavaConversions.scala	/^    def remove(k: A, v: B): Boolean = underlying.remove(k, v)$/;"	m
remove	scala/collection/JavaConversions.scala	/^    def remove(k: AnyRef, v: AnyRef) = try {$/;"	m
remove	scala/collection/immutable/List.scala	/^  def remove(p: A => Boolean): List[A] = filterNot(p)$/;"	m
remove	scala/collection/mutable/ArrayBuffer.scala	/^  def remove(n: Int): A = {$/;"	m
remove	scala/collection/mutable/BufferLike.scala	/^  def remove(n: Int): A$/;"	m
remove	scala/collection/mutable/BufferLike.scala	/^  def remove(n: Int, count: Int) {$/;"	m
remove	scala/collection/mutable/BufferProxy.scala	/^  def remove(n: Int): A = self.remove(n)$/;"	m
remove	scala/collection/mutable/ConcurrentMap.scala	/^  def remove(k: A, v: B): Boolean$/;"	m
remove	scala/collection/mutable/DoubleLinkedListLike.scala	/^  def remove(): Unit = if (nonEmpty) {$/;"	m
remove	scala/collection/mutable/ListBuffer.scala	/^  def remove(n: Int): A = {$/;"	m
remove	scala/collection/mutable/MapLike.scala	/^  def remove(key: A): Option[B] = {$/;"	m
remove	scala/collection/mutable/SetLike.scala	/^  def remove(elem: A): Boolean = {$/;"	m
remove	scala/collection/mutable/UnrolledBuffer.scala	/^  def remove(idx: Int) =$/;"	m
remove	scala/collection/parallel/mutable/ParHashMap.scala	/^  def remove(key: K): Option[V] = {$/;"	m
remove	scala/ref/ReferenceQueue.scala	/^  def remove(timeout: Long): Option[Reference[T]] = Wrapper(underlying.remove(timeout))$/;"	m
remove	scala/ref/ReferenceQueue.scala	/^  def remove: Option[Reference[T]] = Wrapper(underlying.remove)$/;"	m
remove	scala/sys/ShutdownHookThread.scala	/^  def remove() = runtime removeShutdownHook this$/;"	m
remove	scala/xml/Attribute.scala	/^  def remove(key: String) =$/;"	m
remove	scala/xml/Attribute.scala	/^  def remove(namespace: String, scope: NamespaceBinding, key: String) =$/;"	m
remove	scala/xml/MetaData.scala	/^  def remove(key: String): MetaData$/;"	m
remove	scala/xml/MetaData.scala	/^  def remove(namespace: String, scope: NamespaceBinding, key: String): MetaData$/;"	m
remove	scala/xml/MetaData.scala	/^  final def remove(namespace: String, owner: Node, key: String): MetaData =$/;"	m
remove	scala/xml/Null.scala	/^  def remove(key: String) = this$/;"	m
remove	scala/xml/Null.scala	/^  def remove(namespace: String, scope: NamespaceBinding, key: String) = this$/;"	m
removeAll	scala/actors/threadpool/SynchronousQueue.java	/^    public boolean removeAll(Collection c) {$/;"	m	class:SynchronousQueue
removeBinding	scala/collection/mutable/MultiMap.scala	/^  def removeBinding(key: A, value: B): this.type = {$/;"	m
removeDuplicates	scala/collection/immutable/List.scala	/^  def removeDuplicates: List[A] = distinct$/;"	m
removeEntry	scala/collection/mutable/FlatHashTable.scala	/^  def removeEntry(elem: A) : Option[A] = {$/;"	m
removeKey	scala/collection/mutable/MapLike.scala	/^  def removeKey(key: A): Option[B] = remove(key)$/;"	m
removeSubscription	scala/collection/mutable/Publisher.scala	/^  def removeSubscription(sub: Sub) { filters -= sub }$/;"	m
removeSubscriptions	scala/collection/mutable/Publisher.scala	/^  def removeSubscriptions() { filters.clear }$/;"	m
remvector	scala/collection/parallel/immutable/ParVector.scala	/^      var remvector = remainingVector$/;"	l
rep	scala/util/parsing/combinator/Parsers.scala	/^  def rep[T](p: => Parser[T]): Parser[List[T]] = rep1(p) | success(List())$/;"	m
rep1	scala/util/parsing/combinator/Parsers.scala	/^  def rep1[T](first: => Parser[T], p0: => Parser[T]): Parser[List[T]] = Parser { in =>$/;"	m
rep1	scala/util/parsing/combinator/Parsers.scala	/^  def rep1[T](p: => Parser[T]): Parser[List[T]] = rep1(p, p)$/;"	m
rep1sep	scala/util/parsing/combinator/Parsers.scala	/^  def rep1sep[T](p : => Parser[T], q : => Parser[Any]): Parser[List[T]] = $/;"	m
repN	scala/util/parsing/combinator/Parsers.scala	/^  def repN[T](num: Int, p: => Parser[T]): Parser[List[T]] = $/;"	m
repetition	scala/collection/parallel/immutable/package.scala	/^  def repetition[T](elem: T, len: Int) = new Repetition(elem, len)$/;"	m
repl	scala/collection/parallel/ParSeqLike.scala	/^    val repl = (r min (length - from)) max 0$/;"	l
replStringOf	scala/runtime/ScalaRunTime.scala	/^  def replStringOf(arg: Any, maxElements: Int): String = {$/;"	m
replace	scala/collection/JavaConversions.scala	/^    def replace(k: A, oldval: B, newval: B) = underlying.replace(k, oldval, newval)$/;"	m
replace	scala/collection/JavaConversions.scala	/^    def replace(k: A, oldvalue: B, newvalue: B): Boolean = underlying.replace(k, oldvalue, newvalue)$/;"	m
replace	scala/collection/JavaConversions.scala	/^    def replace(k: A, v: B): B = underlying.replace(k, v) match {$/;"	m
replace	scala/collection/JavaConversions.scala	/^    def replace(k: A, v: B): Option[B] = {$/;"	m
replace	scala/collection/mutable/ConcurrentMap.scala	/^  def replace(k: A, oldvalue: B, newvalue: B): Boolean$/;"	m
replace	scala/collection/mutable/ConcurrentMap.scala	/^  def replace(k: A, v: B): Option[B]  $/;"	m
replace	scala/collection/mutable/StringBuilder.scala	/^  def replace(start: Int, end: Int, str: String): StringBuilder = {$/;"	m
replace	scala/util/matching/Regex.scala	/^    def replace(rs: String) = matcher.appendReplacement(sb, rs)$/;"	m
replaceAllIn	scala/util/matching/Regex.scala	/^  def replaceAllIn(target: java.lang.CharSequence, replacement: String): String = {$/;"	m
replaceAllIn	scala/util/matching/Regex.scala	/^  def replaceAllIn(target: java.lang.CharSequence, replacer: Match => String): String = {$/;"	m
replaceAllLiterally	scala/collection/immutable/StringLike.scala	/^  def replaceAllLiterally(literal: String, replacement: String): String = {$/;"	m
replaceFirstIn	scala/util/matching/Regex.scala	/^  def replaceFirstIn(target: java.lang.CharSequence, replacement: String): String = {$/;"	m
replaceSomeIn	scala/util/matching/Regex.scala	/^  def replaceSomeIn(target: java.lang.CharSequence, replacer: Match => Option[String]): String = {$/;"	m
replaced	scala/collection/SeqViewLike.scala	/^    val replaced = _replaced$/;"	l
replaced	scala/collection/parallel/ParSeqViewLike.scala	/^    val replaced = _replaced$/;"	l
replaced	scala/util/matching/Regex.scala	/^    def replaced = {$/;"	m
replacementText	scala/xml/parsing/MarkupHandler.scala	/^  def replacementText(entityName: String): Source =$/;"	m
replicate	scala/concurrent/ops.scala	/^  def replicate(start: Int, end: Int)(p: Int => Unit)(implicit runner: TaskRunner = defaultRunner) {$/;"	m
reply	scala/actors/Actor.scala	/^  def reply(): Unit =$/;"	m
reply	scala/actors/Actor.scala	/^  def reply(msg: Any): Unit =$/;"	m
replyCh	scala/actors/ActorCanReply.scala	/^    val replyCh = new Channel[Any](Actor.self(scheduler))$/;"	l
replyCh	scala/actors/Channel.scala	/^    val replyCh = new Channel[Any](Actor.self(receiver.scheduler))$/;"	l
replyCh	scala/actors/remote/Proxy.scala	/^                val replyCh = new Channel[Any](this)$/;"	l
report	scala/io/Source.scala	/^  def report(pos: Int, msg: String, out: PrintStream) {$/;"	m
reportError	scala/io/Source.scala	/^  def reportError($/;"	m
reportSyntaxError	scala/xml/factory/Binder.scala	/^  def reportSyntaxError(pos:Int, str:String) = {}$/;"	m
reportSyntaxError	scala/xml/parsing/MarkupHandler.scala	/^  def reportSyntaxError(pos: Int, str: String): Unit$/;"	m
reportSyntaxError	scala/xml/parsing/MarkupParser.scala	/^  def reportSyntaxError(pos: Int, str: String): Unit = curInput.reportError(pos, str)$/;"	m
reportSyntaxError	scala/xml/parsing/MarkupParser.scala	/^  def reportSyntaxError(str: String): Unit = reportSyntaxError(pos, str)$/;"	m
reportSyntaxError	scala/xml/parsing/MarkupParserCommon.scala	/^  def reportSyntaxError(pos: Int, str: String): Unit$/;"	m
reportSyntaxError	scala/xml/parsing/MarkupParserCommon.scala	/^  def reportSyntaxError(str: String): Unit$/;"	m
reportValidationError	scala/xml/parsing/MarkupParser.scala	/^  def reportValidationError(pos: Int, str: String): Unit = reportSyntaxError(pos, str)$/;"	m
reportValidationError	scala/xml/parsing/ValidatingMarkupHandler.scala	/^  def reportValidationError(pos: Int, str: String): Unit$/;"	m
reportWarning	scala/io/Source.scala	/^  def reportWarning($/;"	m
repr	scala/collection/GenTraversableLike.scala	/^  def repr: Repr$/;"	m
repr	scala/collection/TraversableLike.scala	/^  def repr: Repr = this.asInstanceOf[Repr]$/;"	m
repr	scala/collection/parallel/ParIterableLike.scala	/^    def repr = self.repr$/;"	m
repr	scala/collection/parallel/ParIterableLike.scala	/^  def repr: Repr = this.asInstanceOf[Repr]$/;"	m
repr	scala/collection/parallel/Tasks.scala	/^    def repr = this.asInstanceOf[Tp]    $/;"	m
repsep	scala/util/parsing/combinator/Parsers.scala	/^  def repsep[T](p: => Parser[T], q: => Parser[Any]): Parser[List[T]] = $/;"	m
require	scala/Predef.scala	/^  def require(requirement: Boolean) {$/;"	m
requiresStrictSplitters	scala/collection/parallel/ParIterableLike.scala	/^    def requiresStrictSplitters = false$/;"	m
res	scala/Console.scala	/^    val res = readf(format)$/;"	l
res	scala/Console.scala	/^    var res: List[Any] = Nil$/;"	l
res	scala/Symbol.scala	/^        val res = cached()$/;"	l
res	scala/Symbol.scala	/^    val res = cached()$/;"	l
res	scala/actors/Future.scala	/^    val res = new SyncVar[T]$/;"	l
res	scala/actors/MessageQueue.scala	/^      val res = first$/;"	l
res	scala/actors/MessageQueue.scala	/^    val res = super.extractFirst(p)$/;"	l
res	scala/actors/MessageQueue.scala	/^    val res = super.get(n)(p)$/;"	l
res	scala/actors/MessageQueue.scala	/^    val res = super.remove(n)(p)$/;"	l
res	scala/actors/ReactorCanReply.scala	/^    val res = new scala.concurrent.SyncVar[A]$/;"	l
res	scala/actors/ReactorCanReply.scala	/^    val res = new scala.concurrent.SyncVar[Any]$/;"	l
res	scala/collection/Iterator.scala	/^        val res = takeDestructively(count)$/;"	l
res	scala/collection/Iterator.scala	/^      val res = elem$/;"	l
res	scala/collection/Iterator.scala	/^    var res = false$/;"	l
res	scala/collection/Iterator.scala	/^    var res = true$/;"	l
res	scala/collection/Iterator.scala	/^    var res: Option[A] = None$/;"	l
res	scala/collection/MapLike.scala	/^    var res: This = repr$/;"	l
res	scala/collection/SeqLike.scala	/^      val res = buf.result$/;"	l
res	scala/collection/immutable/List.scala	/^      val res = new ListBuffer[A]$/;"	l
res	scala/collection/immutable/List.scala	/^    var res: List[A] = Nil$/;"	l
res	scala/collection/immutable/ListSet.scala	/^        val res = that.elem$/;"	l
res	scala/collection/immutable/Vector.scala	/^    val res = display0(lo).asInstanceOf[A]$/;"	l
res	scala/collection/mutable/HashTable.scala	/^      val res = es$/;"	l
res	scala/collection/mutable/LinkedListLike.scala	/^      val res = elems.elem$/;"	l
res	scala/collection/mutable/OpenHashMap.scala	/^      val res = entry.value$/;"	l
res	scala/collection/mutable/OpenHashMap.scala	/^      val res = table(index).value$/;"	l
res	scala/collection/mutable/Queue.scala	/^        val res: Option[LinkedList[A]] = Some(cell.next)$/;"	l
res	scala/collection/mutable/Queue.scala	/^      val res = first0.elem$/;"	l
res	scala/collection/mutable/Queue.scala	/^      val res = new ArrayBuffer[A]$/;"	l
res	scala/collection/mutable/Queue.scala	/^      val res: Option[A] = Some(first0.elem)$/;"	l
res	scala/collection/mutable/Queue.scala	/^    var res: Option[A] = None$/;"	l
res	scala/collection/mutable/Stack.scala	/^    val res = elems.head$/;"	l
res	scala/collection/parallel/Combiner.scala	/^    val res = super.result$/;"	l
res	scala/collection/parallel/mutable/ParHashSet.scala	/^          val res = t.insertEntry(atPos, beforePos, elem.asInstanceOf[T])$/;"	l
res	scala/collection/parallel/mutable/ParHashTable.scala	/^      val res = es$/;"	l
res	scala/collection/script/Message.scala	/^    var res = "Script("$/;"	l
res	scala/concurrent/pilib.scala	/^      var res: A = defaultValue$/;"	l
res	scala/io/BytePickle.scala	/^      val res = refDef.appU(state.stream)$/;"	l
res	scala/math/Ordering.scala	/^            val res = ord.compare(xe.next, ye.next)$/;"	l
res	scala/math/Ordering.scala	/^          val res = ord.compare(xe.next, ye.next)$/;"	l
res	scala/testing/SUnit.scala	/^      val res = (actual: NodeSeq) xml_sameElements expected$/;"	l
res	scala/util/Random.scala	/^      val res = nextInt(surrogateStart - 1) + 1$/;"	l
res	scala/util/continuations/ControlContext.scala	/^            val res = f(x)$/;"	l
res	scala/util/continuations/ControlContext.scala	/^            val res: C1 = ctxR.foreachFull(k, thr) \/\/ => B1$/;"	l
res	scala/util/parsing/combinator/PackratParsers.scala	/^                val res = lrAnswer(p, inMem, base)$/;"	l
res	scala/xml/PrettyPrinter.scala	/^    var res: List[Item] = Nil$/;"	l
res	scala/xml/dtd/ContentModelParser.scala	/^          val res = MIXED(choiceRest(Eps));$/;"	l
res	scala/xml/parsing/MarkupParser.scala	/^    val res = handle.elem(pos, pre, local, aMap, scope, ts)$/;"	l
res	scala/xml/parsing/ValidatingMarkupHandler.scala	/^    val res = decl.contentModel.validate(ns);$/;"	l
res	scala/xml/persistent/CachedFileStorage.scala	/^    val res = ConstructingParser.fromSource(src,false).document.docElem(0)$/;"	l
res	scala/xml/pull/XMLEventReader.scala	/^    val res = buffer$/;"	l
res1	scala/collection/immutable/List.scala	/^      val res1 = new ListBuffer[A]$/;"	l
res1	scala/util/parsing/combinator/Parsers.scala	/^        val res1 = Parser.this(in)$/;"	l
res2	scala/collection/immutable/List.scala	/^      val res2 = new ListBuffer[A]$/;"	l
res2	scala/io/BytePickle.scala	/^          val res2 = pa.appU(new UnPicklerState(res._2, upe))$/;"	l
res2	scala/io/BytePickle.scala	/^          val res2 = unat.appU(res._2)  \/\/ read location$/;"	l
res2	scala/util/parsing/combinator/Parsers.scala	/^        val res2 = q(in)$/;"	l
resPa	scala/io/BytePickle.scala	/^      val resPa = pa.appU(s)$/;"	l
resTpeCls	scala/reflect/generic/UnPickler.scala	/^              val resTpeCls = restpe.getClass.toString \/\/ what's uglier than isInstanceOf? right! -- isInstanceOf does not work since the concrete types are defined in the compiler (not in scope here)$/;"	l
reserved	scala/util/parsing/combinator/lexical/StdLexical.scala	/^  val reserved = new HashSet[String]$/;"	l
reset	scala/collection/mutable/MutableList.scala	/^  def reset() { clear() }$/;"	m
reset	scala/io/Source.scala	/^  def reset(): Source = $/;"	m
reset	scala/util/MurmurHash.scala	/^  def reset() {$/;"	m
reset	scala/util/continuations/package.scala	/^  def reset[A,C](ctx: =>(A @cpsParam[A,C])): C = {$/;"	m
reset0	scala/util/continuations/package.scala	/^  def reset0[A](ctx: =>(A @cpsParam[A,A])): A = reset(ctx)$/;"	m
resetAndRet	scala/xml/include/sax/EncodingHeuristics.scala	/^    def resetAndRet = { in.reset ; ret }$/;"	m
resetFn	scala/io/Source.scala	/^    val resetFn = if (reset == null) () => createBufferedSource(inputStream, bufferSize, reset, close)(codec) else reset$/;"	l
resetProxy	scala/actors/Actor.scala	/^  def resetProxy() {$/;"	m
resolveType	scala/util/parsing/json/JSON.scala	/^  def resolveType(input: Any): Any = input match {$/;"	m
resolver	scala/xml/include/sax/Main.scala	/^    val resolver: Option[EntityResolver] =$/;"	l
resolver	scala/xml/include/sax/XIncludeFilter.scala	/^      val resolver = this.getEntityResolver()$/;"	l
respond	scala/Responder.scala	/^    def respond(k: A => Unit) = k(x)$/;"	m
respond	scala/Responder.scala	/^    def respond(k: A => Unit) {$/;"	m
respond	scala/Responder.scala	/^    def respond(k: B => Unit) {$/;"	m
respond	scala/Responder.scala	/^  def respond(k: A => Unit): Unit$/;"	m
respond	scala/actors/Actor.scala	/^        def respond(k: B => Unit) = fun(caseBlock andThen k)$/;"	m
respond	scala/actors/Future.scala	/^  def respond(k: T => Unit) {$/;"	m
respond	scala/actors/ReactorCanReply.scala	/^      def respond(k: A => Unit): Unit =$/;"	m
respondOn	scala/actors/Actor.scala	/^  def respondOn[A, B](fun: PartialFunction[A, Unit] => Nothing):$/;"	m
rest	scala/collection/LinearSeqOptimized.scala	/^    val rest = drop(n)$/;"	l
rest	scala/collection/immutable/Stream.scala	/^      var rest: Stream[A] = this$/;"	l
rest	scala/collection/immutable/Stream.scala	/^    var rest = this$/;"	l
rest	scala/concurrent/SyncVar.scala	/^    var rest = timeout$/;"	l
rest	scala/util/automata/SubsetConstruction.scala	/^    val rest = new mutable.Stack[BitSet]$/;"	l
rest	scala/util/parsing/combinator/PackratParsers.scala	/^    def rest: Reader[T] = new PackratReader(underlying.rest) {$/;"	m
rest	scala/util/parsing/combinator/lexical/Scanners.scala	/^    def rest = new Scanner(rest2)$/;"	m
rest	scala/util/parsing/input/CharSequenceReader.scala	/^  def rest: CharSequenceReader =$/;"	m
rest	scala/util/parsing/input/PagedSeqReader.scala	/^  def rest: PagedSeqReader =$/;"	m
rest	scala/util/parsing/input/Reader.scala	/^  def rest: Reader[T]$/;"	m
rest	scala/xml/parsing/MarkupParserCommon.scala	/^    val rest = until.tail$/;"	l
restPar	scala/collection/parallel/ParIterableViewLike.scala	/^    def restPar: ParIterable[U] = rest.asParIterable$/;"	m
restart	scala/actors/Reactor.scala	/^  def restart(): Unit = synchronized {$/;"	m
restart	scala/actors/Scheduler.scala	/^  def restart() {$/;"	m
restart	scala/actors/scheduler/ForkJoinScheduler.scala	/^  def restart() {$/;"	m
restart	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^  def restart() {$/;"	m
restpe	scala/reflect/generic/UnPickler.scala	/^          val restpe = readTypeRef()$/;"	l
result	scala/Responder.scala	/^    var result: Option[A] = None$/;"	l
result	scala/Tuple3.scala	/^      def result = (b1.result, b2.result, b3.result)$/;"	m
result	scala/actors/Actor.scala	/^    val result = f(received.get)$/;"	l
result	scala/actors/threadpool/Executors.java	/^        final Object result;$/;"	f	class:Executors.RunnableAdapter
result	scala/actors/threadpool/Executors.java	/^        private Object result;$/;"	f	class:Executors.PrivilegedCallable	file:
result	scala/actors/threadpool/Executors.java	/^        private Object result;$/;"	f	class:Executors.PrivilegedCallableUsingCurrentClassLoader	file:
result	scala/actors/threadpool/FutureTask.java	/^    private Object result;$/;"	f	class:FutureTask	file:
result	scala/collection/IndexedSeqLike.scala	/^    val result = new mutable.ArrayBuffer[A1](size)$/;"	l
result	scala/collection/Iterator.scala	/^      val result: B = $/;"	l
result	scala/collection/JavaConversions.scala	/^    def result = this$/;"	m
result	scala/collection/LinearSeqLike.scala	/^        val result = these.head; these = these.tail; result$/;"	l
result	scala/collection/MapLike.scala	/^    val result = new mutable.ArrayBuffer[C](size)$/;"	l
result	scala/collection/SeqLike.scala	/^      val result = (self.newBuilder ++= elms).result$/;"	l
result	scala/collection/SetLike.scala	/^      val result = buf.result$/;"	l
result	scala/collection/SetLike.scala	/^    val result = new mutable.ArrayBuffer[A1](size)$/;"	l
result	scala/collection/TraversableLike.scala	/^    var result = false$/;"	l
result	scala/collection/TraversableLike.scala	/^    var result = true$/;"	l
result	scala/collection/TraversableLike.scala	/^    var result: () => A = () => throw new NoSuchElementException$/;"	l
result	scala/collection/TraversableLike.scala	/^    var result: Option[A] = None$/;"	l
result	scala/collection/TraversableOnce.scala	/^      val result = new Array[B](size)$/;"	l
result	scala/collection/TraversableOnce.scala	/^    var result = 0	$/;"	l
result	scala/collection/TraversableOnce.scala	/^    var result = z$/;"	l
result	scala/collection/TraversableView.scala	/^    def result() = throw new UnsupportedOperationException("TraversableView.Builder.result")$/;"	m
result	scala/collection/TraversableViewLike.scala	/^      var result: B = null.asInstanceOf[B]$/;"	l
result	scala/collection/immutable/List.scala	/^    var result: List[A] = Nil$/;"	l
result	scala/collection/immutable/ListSet.scala	/^    def result() = elems.foldLeft(empty[Elem])(_ unchecked_+ _)$/;"	m
result	scala/collection/immutable/Stream.scala	/^      val result = cur.head$/;"	l
result	scala/collection/immutable/Stream.scala	/^    def result: Stream[A] = parts.toStream flatMap (_.toStream)$/;"	m
result	scala/collection/immutable/Stream.scala	/^    val result = these.v$/;"	l
result	scala/collection/immutable/Stream.scala	/^    var result: Stream[A] = Stream.Empty$/;"	l
result	scala/collection/immutable/Vector.scala	/^  def result: Vector[A] = {$/;"	m
result	scala/collection/mutable/AddingBuilder.scala	/^  def result: To = elems$/;"	m
result	scala/collection/mutable/ArrayBuffer.scala	/^    val result = apply(n)$/;"	l
result	scala/collection/mutable/ArrayBuffer.scala	/^  def result: ArrayBuffer[A] = this$/;"	m
result	scala/collection/mutable/ArrayBuilder.scala	/^    def result() = {$/;"	m
result	scala/collection/mutable/ArraySeq.scala	/^      val result = new ArraySeq[A](buf.length)$/;"	l
result	scala/collection/mutable/ArrayStack.scala	/^  def result = new ArrayStack[T](table.reverse, index)$/;"	m
result	scala/collection/mutable/Builder.scala	/^      def result: NewTo = f(self.result)$/;"	m
result	scala/collection/mutable/Builder.scala	/^  def result(): To$/;"	m
result	scala/collection/mutable/DoubleLinkedList.scala	/^      def result() = current$/;"	m
result	scala/collection/mutable/GrowingBuilder.scala	/^  def result: To = elems$/;"	m
result	scala/collection/mutable/LazyBuilder.scala	/^  def result(): To$/;"	m
result	scala/collection/mutable/ListBuffer.scala	/^  def result: List[A] = toList$/;"	m
result	scala/collection/mutable/MapBuilder.scala	/^  def result: Coll = elems$/;"	m
result	scala/collection/mutable/MapLike.scala	/^  def result: This = repr$/;"	m
result	scala/collection/mutable/MutableList.scala	/^  def result = this$/;"	m
result	scala/collection/mutable/OpenHashMap.scala	/^      val result = table(index);$/;"	l
result	scala/collection/mutable/PriorityQueue.scala	/^  def result = this$/;"	m
result	scala/collection/mutable/SetBuilder.scala	/^  def result: Coll = elems$/;"	m
result	scala/collection/mutable/SetLike.scala	/^  def result: This = repr$/;"	m
result	scala/collection/mutable/Stack.scala	/^    def result = {$/;"	m
result	scala/collection/mutable/StringBuilder.scala	/^  def result(): String = toString$/;"	m
result	scala/collection/mutable/UnrolledBuffer.scala	/^  def result = this$/;"	m
result	scala/collection/mutable/WrappedArrayBuilder.scala	/^  def result() = {$/;"	m
result	scala/collection/parallel/ParIterableView.scala	/^    def result() = throw new UnsupportedOperationException("ParIterableView.Combiner.result")$/;"	m
result	scala/collection/parallel/ParIterableViewLike.scala	/^    var result: Combiner[U, That] = null$/;"	l
result	scala/collection/parallel/ParSeqView.scala	/^    def result() = throw new UnsupportedOperationException("ParSeqView.Combiner.result")$/;"	m
result	scala/collection/parallel/ParSeqViewLike.scala	/^    var result: Combiner[U, That] = null$/;"	l
result	scala/collection/parallel/Tasks.scala	/^    var result: R$/;"	l
result	scala/collection/parallel/immutable/ParHashMap.scala	/^  def result = {$/;"	m
result	scala/collection/parallel/immutable/ParHashSet.scala	/^    var result = ()$/;"	l
result	scala/collection/parallel/immutable/ParHashSet.scala	/^  def result = {$/;"	m
result	scala/collection/parallel/immutable/ParVector.scala	/^  def result: ParVector[T] = {$/;"	m
result	scala/collection/parallel/mutable/LazyCombiner.scala	/^  def result: To = allocateAndCopy$/;"	m
result	scala/collection/parallel/mutable/ParArray.scala	/^    var result = ();$/;"	l
result	scala/collection/parallel/mutable/ParHashMap.scala	/^    var result = Int.MinValue$/;"	l
result	scala/collection/parallel/mutable/ParHashMap.scala	/^  def result: ParHashMap[K, V] = if (size >= (ParHashMapCombiner.numblocks * sizeMapBucketSize)) { \/\/ 1024$/;"	m
result	scala/collection/parallel/mutable/ParHashSet.scala	/^    var result = (Int.MinValue, new UnrolledBuffer[Any]);$/;"	l
result	scala/collection/parallel/mutable/ParHashSet.scala	/^  def result: ParHashSet[T] = {$/;"	m
result	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^    var result = ()$/;"	l
result	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^    var result = ();$/;"	l
result	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^  def result = {$/;"	m
result	scala/concurrent/ThreadRunner.scala	/^    val result = new SyncVar[Either[Exception, S]]$/;"	l
result	scala/io/BufferedSource.scala	/^      val result = {$/;"	l
result	scala/reflect/generic/Flags.scala	/^    var result = 0$/;"	l
result	scala/reflect/generic/PickleBuffer.scala	/^    val result = new Array[(Int, Array[Byte])](readNat())$/;"	l
result	scala/reflect/generic/UnPickler.scala	/^      val result = readNameRef() == tpnme.REFINE_CLASS_NAME$/;"	l
result	scala/sys/process/ProcessImpl.scala	/^      val result = new SyncVar[Either[Throwable, T]]$/;"	l
result	scala/util/automata/Inclusion.scala	/^    var result = true$/;"	l
result	scala/util/control/TailCalls.scala	/^    def result: A = {$/;"	m
result	scala/util/parsing/ast/Binders.scala	/^       var result = true$/;"	l
result	scala/xml/factory/Binder.scala	/^  var result: NodeBuffer = new NodeBuffer()$/;"	l
results	scala/actors/Future.scala	/^    var results: List[Option[Any]] = Nil$/;"	l
results	scala/concurrent/ops.scala	/^    val results = new Array[b](xs.length);$/;"	l
resultsMap	scala/actors/Future.scala	/^    var resultsMap: collection.mutable.Map[Int, Option[Any]] = new collection.mutable.HashMap[Int, Option[Any]]$/;"	l
ret	scala/collection/Iterator.scala	/^      val ret = (self.next, idx)$/;"	l
ret	scala/collection/parallel/mutable/ParArray.scala	/^      val ret = if (r != -1) r - i else r$/;"	l
ret	scala/ref/ReferenceWrapper.scala	/^    val ret = underlying.get$/;"	l
ret	scala/util/Sorting.scala	/^    val ret = a.toArray$/;"	l
ret	scala/util/continuations/ControlContext.scala	/^        val ret: A => B = { x: A =>$/;"	l
ret	scala/xml/include/sax/EncodingHeuristics.scala	/^    var ret: String = null    $/;"	l
retType	scala/reflect/Manifest.scala	/^  def retType[T: ClassManifest](name: String) =$/;"	m
retain	scala/collection/mutable/MapLike.scala	/^  def retain(p: (A, B) => Boolean): this.type = {$/;"	m
retain	scala/collection/mutable/SetLike.scala	/^  def retain(p: A => Boolean): Unit = for (elem <- this.toList) if (!p(elem)) this -= elem$/;"	m
retainAll	scala/actors/threadpool/SynchronousQueue.java	/^    public boolean retainAll(Collection c) {$/;"	m	class:SynchronousQueue
rethrow	scala/util/control/Exception.scala	/^    val rethrow: Throwable => Boolean = shouldRethrow)$/;"	l
return_	scala/util/parsing/ast/Binders.scala	/^  def return_[T](result: T): ReturnAndDo[T] =$/;"	m
returning	scala/xml/parsing/MarkupParserCommon.scala	/^  def returning[T](x: T)(f: T => Unit): T = { f(x) ; x }$/;"	m
reverse	scala/collection/GenSeqLike.scala	/^  def reverse: Repr$/;"	m
reverse	scala/collection/IndexedSeqOptimized.scala	/^  def reverse: Repr = {$/;"	m
reverse	scala/collection/SeqLike.scala	/^  def reverse: Repr = {$/;"	m
reverse	scala/collection/interfaces/SeqMethods.scala	/^  def reverse: This$/;"	m
reverse	scala/collection/mutable/PriorityQueue.scala	/^  def reverse = {$/;"	m
reverse	scala/collection/parallel/ParSeqLike.scala	/^  def reverse: Repr = {$/;"	m
reverse	scala/collection/parallel/RemainsIterator.scala	/^  def reverse: SeqSplitter[T] = {$/;"	m
reverse	scala/math/PartialOrdering.scala	/^  def reverse : PartialOrdering[T] = new PartialOrdering[T] {$/;"	m
reverse2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def reverse2combiner[U >: T, This](cb: Combiner[U, This]): Combiner[U, This] = {$/;"	m
reverseBytes	scala/runtime/RichChar.scala	/^  def reverseBytes: Char                = Character.reverseBytes(self)$/;"	m
reverseContents	scala/collection/mutable/StringBuilder.scala	/^  def reverseContents(): StringBuilder = {$/;"	m
reverseIterator	scala/collection/IndexedSeqOptimized.scala	/^  def reverseIterator: Iterator[A] = new Iterator[A] {$/;"	m
reverseIterator	scala/collection/SeqLike.scala	/^  def reverseIterator: Iterator[A] = toCollection(reverse).iterator$/;"	m
reverseIterator	scala/collection/immutable/Vector.scala	/^  def reverseIterator: Iterator[A] = new Iterator[A] {$/;"	m
reverseIterator	scala/collection/interfaces/SeqMethods.scala	/^  def reverseIterator: Iterator[A]$/;"	m
reverseIterator	scala/collection/mutable/PriorityQueue.scala	/^  def reverseIterator = new Iterator[A] {$/;"	m
reverseMap	scala/collection/GenSeqLike.scala	/^  def reverseMap[B, That](f: A => B)(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
reverseMap	scala/collection/SeqLike.scala	/^  def reverseMap[B, That](f: A => B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
reverseMap	scala/collection/interfaces/SeqMethods.scala	/^  def reverseMap[B, That](f: A => B)(implicit bf: CanBuildFrom[This, B, That]): That$/;"	m
reverseMap	scala/collection/parallel/ParSeqLike.scala	/^  def reverseMap[S, That](f: T => S)(implicit bf: CanBuildFrom[Repr, S, That]): That = bf ifParallel { pbf =>$/;"	m
reverseMap2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def reverseMap2combiner[S, That](f: T => S, cb: Combiner[S, That]): Combiner[S, That] = {$/;"	m
reverse_	scala/collection/immutable/List.scala	/^  def reverse_:::[B >: A](prefix: List[B]): List[B] = {$/;"	m
reversedElements	scala/collection/SeqLike.scala	/^  def reversedElements = reverseIterator$/;"	m
revq	scala/collection/mutable/PriorityQueue.scala	/^    val revq = new PriorityQueue[A]()(new math.Ordering[A] {$/;"	l
rfb	scala/xml/Utility.scala	/^    var rfb: StringBuilder = null$/;"	l
rhs	scala/reflect/generic/Trees.scala	/^    def rhs: Tree$/;"	m
rhs	scala/reflect/generic/UnPickler.scala	/^          val rhs = readTreeRef()$/;"	l
right	scala/Either.scala	/^  def right = Either.RightProjection(this)$/;"	m
right	scala/collection/immutable/RedBlack.scala	/^    def right: Tree[B]$/;"	m
rightmost	scala/collection/parallel/ParIterableLike.scala	/^    def rightmost = this$/;"	m
rightmost	scala/collection/parallel/ParIterableLike.scala	/^    def rightmost: ScanLeaf[U]$/;"	m
rightmost	scala/collection/parallel/ParIterableLike.scala	/^    val rightmost = right.rightmost$/;"	l
rights	scala/collection/immutable/List.scala	/^  def rights[A, B](es: Iterable[Either[A, B]]) = $/;"	m
rint	scala/MathCommon.scala	/^  def rint(x: Double): Double = java.lang.Math.rint(x)$/;"	m
rleft	scala/collection/parallel/immutable/ParRange.scala	/^      val rleft = rangeleft$/;"	l
rleft	scala/collection/parallel/immutable/ParRange.scala	/^      var rleft = rangeleft$/;"	l
rng	scala/collection/immutable/RedBlack.scala	/^    def rng(from: Option[A], until: Option[A]) = this$/;"	m
rng	scala/collection/immutable/RedBlack.scala	/^    def rng(from: Option[A], until: Option[A]): Tree[B]$/;"	m
root	scala/collection/parallel/immutable/ParHashMap.scala	/^    val root = new Array[HashMap[K, AnyRef]](bucks.length)$/;"	l
root	scala/collection/parallel/immutable/ParHashMap.scala	/^    val root = new Array[HashMap[K, V]](bucks.length)$/;"	l
root	scala/collection/parallel/immutable/ParHashSet.scala	/^    val root = new Array[HashSet[T]](bucks.length)$/;"	l
root	scala/util/parsing/json/Parser.scala	/^  def root       = jsonObj | jsonArray$/;"	m
rootElem	scala/xml/parsing/FactoryAdapter.scala	/^  var rootElem: Node = null$/;"	l
rootLabel	scala/xml/parsing/ValidatingMarkupHandler.scala	/^  var rootLabel:String = _$/;"	l
round	scala/MathCommon.scala	/^  def round(x: Double): Long = java.lang.Math.round(x)$/;"	m
round	scala/MathCommon.scala	/^  def round(x: Float): Int = java.lang.Math.round(x)$/;"	m
round	scala/math/BigDecimal.scala	/^  def round(mc: MathContext): BigDecimal = this.bigDecimal round mc$/;"	m
round	scala/runtime/RichDouble.scala	/^  def round: Long   = math.round(self)$/;"	m
round	scala/runtime/RichFloat.scala	/^  def round: Int   = math.round(self)$/;"	m
row	scala/collection/GenSeqViewLike.scala	/^      val row = findRow(idx, 0, self.length - 1)$/;"	l
run	scala/Responder.scala	/^  def run[A](r: Responder[A]): Option[A] = {$/;"	m
run	scala/actors/Actor.scala	/^                def run() {$/;"	m
run	scala/actors/Future.scala	/^      def run() { thisActor ! TIMEOUT }$/;"	m
run	scala/actors/ReactorTask.scala	/^  def run() {$/;"	m
run	scala/actors/ReplyReactor.scala	/^              def run() { thisActor.send(TIMEOUT, thisActor) }$/;"	m
run	scala/actors/scheduler/ExecutorScheduler.scala	/^    def run() { fun }$/;"	m
run	scala/actors/scheduler/ForkJoinScheduler.scala	/^      def run() { fun }$/;"	m
run	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^      def run() { fun }$/;"	m
run	scala/actors/scheduler/SingleThreadedScheduler.scala	/^      def run() { fun }$/;"	m
run	scala/actors/threadpool/FutureTask.java	/^    public void run() {$/;"	m	class:FutureTask
run	scala/actors/threadpool/RunnableFuture.java	/^    void run();$/;"	m	interface:RunnableFuture
run	scala/actors/threadpool/ThreadPoolExecutor.java	/^        public void run() {$/;"	m	class:ThreadPoolExecutor.Worker
run	scala/collection/parallel/Tasks.scala	/^    def run = {$/;"	m
run	scala/concurrent/JavaConversions.scala	/^        def run() { fun() }$/;"	m
run	scala/concurrent/ThreadPoolRunner.scala	/^    def run() = fun()$/;"	m
run	scala/concurrent/ThreadRunner.scala	/^      def run() { result set tryCatch(task()) }$/;"	m
run	scala/concurrent/ThreadRunner.scala	/^      def run() { tryCatch(task()) }$/;"	m
run	scala/reflect/generic/UnPickler.scala	/^    def run() {$/;"	m
run	scala/runtime/ScalaRunTime.scala	/^    def run() { result = block }$/;"	m
run	scala/sys/process/ProcessBuilder.scala	/^  def run(): Process$/;"	m
run	scala/sys/process/ProcessBuilder.scala	/^  def run(connectInput: Boolean): Process$/;"	m
run	scala/sys/process/ProcessBuilder.scala	/^  def run(io: ProcessIO): Process$/;"	m
run	scala/sys/process/ProcessBuilder.scala	/^  def run(log: ProcessLogger): Process$/;"	m
run	scala/sys/process/ProcessBuilder.scala	/^  def run(log: ProcessLogger, connectInput: Boolean): Process$/;"	m
run	scala/sys/process/ProcessBuilderImpl.scala	/^    def run(): Process                                          = run(false)$/;"	m
run	scala/sys/process/ProcessBuilderImpl.scala	/^    def run(connectInput: Boolean): Process                     = run(BasicIO.standard(connectInput))$/;"	m
run	scala/sys/process/ProcessBuilderImpl.scala	/^    def run(log: ProcessLogger): Process                        = run(log, false)$/;"	m
run	scala/sys/process/ProcessBuilderImpl.scala	/^    def run(log: ProcessLogger, connectInput: Boolean): Process = run(BasicIO(connectInput, log))$/;"	m
run	scala/sys/process/ProcessBuilderImpl.scala	/^    final def run(io: ProcessIO): Process = underlying.run(io.daemonized())$/;"	m
run	scala/sys/process/ProcessBuilderImpl.scala	/^    final def run(io: ProcessIO): Process = {$/;"	m
run	scala/sys/process/ProcessImpl.scala	/^      def run(): Unit =$/;"	m
run	scala/sys/process/ProcessImpl.scala	/^    def run(): Unit$/;"	m
run	scala/testing/Benchmark.scala	/^  def run()$/;"	m
run	scala/testing/SUnit.scala	/^    def run(r: TestResult) {$/;"	m
run	scala/testing/SUnit.scala	/^    def run(r: TestResult): Unit$/;"	m
run	scala/util/continuations/package.scala	/^  def run[A](ctx: =>(Any @cpsParam[Unit,A])): A = {$/;"	m
runAndReset	scala/actors/threadpool/FutureTask.java	/^    protected boolean runAndReset() {$/;"	m	class:FutureTask
runBenchmark	scala/testing/Benchmark.scala	/^  def runBenchmark(noTimes: Int): List[Long] =$/;"	m
runStateAtLeast	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private static boolean runStateAtLeast(int c, int s) {$/;"	m	class:ThreadPoolExecutor	file:
runStateLessThan	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private static boolean runStateLessThan(int c, int s) {$/;"	m	class:ThreadPoolExecutor	file:
runStateOf	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private static int runStateOf(int c)     { return c & ~CAPACITY; }$/;"	m	class:ThreadPoolExecutor	file:
runWorker	scala/actors/threadpool/ThreadPoolExecutor.java	/^    final void runWorker(Worker w) {$/;"	m	class:ThreadPoolExecutor
runnable	scala/concurrent/ThreadRunner.scala	/^    val runnable = new Runnable {$/;"	l
runner	scala/actors/threadpool/FutureTask.java	/^    private volatile Thread runner;$/;"	f	class:FutureTask	file:
running	scala/actors/remote/TcpService.scala	/^  var running = true$/;"	l
runtime	scala/sys/package.scala	/^  def runtime: Runtime = Runtime.getRuntime$/;"	m
rvb	scala/collection/parallel/immutable/ParVector.scala	/^    val rvb = new VectorBuilder[T]$/;"	l
s	scala/Console.scala	/^    val s = readLine()$/;"	l
s	scala/actors/Actor.scala	/^    val s = tl.get$/;"	l
s	scala/actors/Reactor.scala	/^        val s = new ForkJoinScheduler(ThreadPoolConfig.corePoolSize, ThreadPoolConfig.maxPoolSize, false, false)$/;"	l
s	scala/actors/Scheduler.scala	/^      val s = new ForkJoinScheduler$/;"	l
s	scala/actors/Scheduler.scala	/^      val s = new ResizableThreadPoolScheduler(false)$/;"	l
s	scala/actors/remote/RemoteActor.scala	/^    val s = Actor.self$/;"	l
s	scala/actors/scheduler/DaemonScheduler.scala	/^      val s = new ForkJoinScheduler(true)$/;"	l
s	scala/actors/scheduler/DaemonScheduler.scala	/^      val s = new ResizableThreadPoolScheduler(true)$/;"	l
s	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^        val s = w.thread.getState()$/;"	l
s	scala/collection/BitSetLike.scala	/^    var s = 0$/;"	l
s	scala/collection/SeqLike.scala	/^      var s: Seq[A] = thisCollection drop i$/;"	l
s	scala/collection/immutable/HashMap.scala	/^      val s = in.readInt()$/;"	l
s	scala/collection/immutable/HashMap.scala	/^      val s = orig.size$/;"	l
s	scala/collection/immutable/HashSet.scala	/^      val s = in.readInt()$/;"	l
s	scala/collection/immutable/HashSet.scala	/^      val s = orig.size$/;"	l
s	scala/collection/immutable/PagedSeq.scala	/^    val s = start + _start$/;"	l
s	scala/collection/immutable/Vector.scala	/^            val s = new Vector(startIndex - 1 + shift, endIndex + shift, newBlockIndex)$/;"	l
s	scala/collection/immutable/Vector.scala	/^            val s = new Vector(startIndex - shift, endIndex + 1 - shift, newBlockIndex)$/;"	l
s	scala/collection/immutable/Vector.scala	/^          val s = new Vector(startIndex - 1 + move, endIndex + move, newBlockIndex)$/;"	l
s	scala/collection/immutable/Vector.scala	/^          val s = new Vector(startIndex - 1, endIndex, newBlockIndex)$/;"	l
s	scala/collection/immutable/Vector.scala	/^          val s = new Vector(startIndex, endIndex + 1, newBlockIndex)$/;"	l
s	scala/collection/immutable/Vector.scala	/^        val s = new Vector(startIndex - 1, endIndex, blockIndex)$/;"	l
s	scala/collection/immutable/Vector.scala	/^        val s = new Vector(startIndex, endIndex + 1, blockIndex)$/;"	l
s	scala/collection/immutable/Vector.scala	/^      val s = new Vector(0,1,0)$/;"	l
s	scala/collection/immutable/Vector.scala	/^      val s = new Vector(31,32,0)$/;"	l
s	scala/collection/immutable/Vector.scala	/^    val s = new Vector(cutIndex-shift, endIndex-shift, blockIndex-shift)$/;"	l
s	scala/collection/immutable/Vector.scala	/^    val s = new Vector(startIndex-shift, cutIndex-shift, blockIndex-shift)$/;"	l
s	scala/collection/immutable/Vector.scala	/^    val s = new VectorIterator[A](startIndex, endIndex)$/;"	l
s	scala/collection/immutable/Vector.scala	/^    val s = new Vector[A](0, size, 0) \/\/ should focus front or back?$/;"	l
s	scala/collection/immutable/Vector.scala	/^    val s = new Vector[B](startIndex, endIndex, idx)$/;"	l
s	scala/collection/parallel/mutable/ParArray.scala	/^      var s = sum_quick(num, arr, until, i, num.zero)$/;"	l
s	scala/reflect/generic/UnPickler.scala	/^            val s = at(typeRef, readSymbol)$/;"	l
s	scala/reflect/generic/UnPickler.scala	/^            val s = owner.info.decl(name)$/;"	l
s	scala/runtime/ScalaRunTime.scala	/^    val s  = stringOf(arg, maxElements)$/;"	l
s	scala/util/Sorting.scala	/^            var s = len \/ 8$/;"	l
s	scala/util/Sorting.scala	/^        var s = math.min(a-off, b-a)$/;"	l
s	scala/xml/NamespaceBinding.scala	/^    val s = " xmlns%s=\\"%s\\"".format($/;"	l
s	scala/xml/include/sax/Main.scala	/^        val s = new XIncluder(System.out, "UTF-8")$/;"	l
s	scala/xml/parsing/FactoryAdapter.scala	/^      val s = "[%s]:%d:%d: %s".format($/;"	l
s	scala/xml/parsing/MarkupParser.scala	/^      val s = if (isProlog) "SDDecl? " else ""$/;"	l
sOpt	scala/xml/dtd/ContentModelParser.scala	/^  def sOpt() = if( token == S ) nextToken;$/;"	m
sPrime	scala/io/BytePickle.scala	/^          val sPrime = refDef.appP(Def(), state.stream)$/;"	l
sPrime	scala/io/BytePickle.scala	/^          val sPrime = refDef.appP(Ref(), state.stream)$/;"	l
sPrime	scala/io/BytePickle.scala	/^      val sPrime = pa.appP(a, s)$/;"	l
sPrime	scala/io/BytePickle.scala	/^      val sPrime = resPa._2$/;"	l
sPrimePrime	scala/io/BytePickle.scala	/^          val sPrimePrime = pa.appP(v, new PicklerState(sPrime, pe))$/;"	l
sPrimePrime	scala/io/BytePickle.scala	/^      val sPrimePrime = pb.appP(b, sPrime)$/;"	l
safeChar	scala/util/Random.scala	/^    def safeChar() = {$/;"	m
safeToString	scala/reflect/generic/Types.scala	/^    def safeToString: String = super.toString$/;"	m
same	scala/collection/parallel/mutable/ParArray.scala	/^      var same = true$/;"	l
sameElements	scala/collection/GenIterableLike.scala	/^  def sameElements[A1 >: A](that: GenIterable[A1]): Boolean$/;"	m
sameElements	scala/collection/IndexedSeqOptimized.scala	/^  def sameElements[B >: A](that: GenIterable[B]): Boolean = that match {$/;"	m
sameElements	scala/collection/IterableLike.scala	/^  def sameElements[B >: A](that: GenIterable[B]): Boolean = {$/;"	m
sameElements	scala/collection/IterableLike.scala	/^  def sameElements[B >: A](that: Iterable[B]): Boolean = sameElements(that: GenIterable[B])$/;"	m
sameElements	scala/collection/Iterator.scala	/^  def sameElements(that: Iterator[_]): Boolean = {    $/;"	m
sameElements	scala/collection/LinearSeqOptimized.scala	/^  def sameElements[B >: A](that: GenIterable[B]): Boolean = that match {$/;"	m
sameElements	scala/collection/interfaces/IterableMethods.scala	/^  def sameElements[B >: A](that: GenIterable[B]): Boolean$/;"	m
sameElements	scala/collection/parallel/ParIterableLike.scala	/^  def sameElements[U >: T](that: GenIterable[U]) = seq.sameElements(that)$/;"	m
sameElements	scala/runtime/ScalaRunTime.scala	/^  def sameElements(xs1: collection.Seq[Any], xs2: collection.Seq[Any]) = xs1 sameElements xs2$/;"	m
sarr	scala/collection/parallel/mutable/ParArray.scala	/^      val sarr = array$/;"	l
save	scala/xml/XML.scala	/^  final def save($/;"	m
saveFull	scala/xml/XML.scala	/^  final def saveFull(filename: String, node: Node, enc: String, xmlDecl: Boolean, doctype: dtd.DocType): Unit = $/;"	m
saveFull	scala/xml/XML.scala	/^  final def saveFull(filename: String, node: Node, xmlDecl: Boolean, doctype: dtd.DocType): Unit = $/;"	m
saved	scala/actors/ReplyReactorTask.scala	/^  var saved: ReplyReactor = _$/;"	l
saved	scala/reflect/generic/PickleBuffer.scala	/^    val saved = readIndex$/;"	l
saved	scala/xml/parsing/MarkupParserCommon.scala	/^    val saved = getter$/;"	l
savedIndex	scala/reflect/generic/UnPickler.scala	/^            val savedIndex = readIndex$/;"	l
savedIndex	scala/reflect/generic/UnPickler.scala	/^          val savedIndex = readIndex$/;"	l
savedIndex	scala/reflect/generic/UnPickler.scala	/^        val savedIndex = readIndex$/;"	l
savedIndex	scala/reflect/generic/UnPickler.scala	/^      val savedIndex = readIndex$/;"	l
savedWaitingFor	scala/actors/Reactor.scala	/^        val savedWaitingFor = waitingFor$/;"	l
saving	scala/xml/parsing/MarkupParserCommon.scala	/^  def saving[A, B](getter: A, setter: A => Unit)(body: => B): B = {$/;"	m
saxe	scala/xml/include/sax/Main.scala	/^    def saxe[T](body: => T) = catching[T](classOf[SAXException]) opt body$/;"	m
sb	scala/collection/immutable/List.scala	/^    val sb = new StringBuilder()$/;"	l
sb	scala/util/automata/DetWordAutom.scala	/^    val sb = new StringBuilder("[DetWordAutom  nstates=")$/;"	l
sb	scala/xml/PrettyPrinter.scala	/^          val sb = new StringBuilder()$/;"	l
sb	scala/xml/PrettyPrinter.scala	/^    val sb = new StringBuilder()$/;"	l
sb	scala/xml/TextBuffer.scala	/^  val sb = new StringBuilder()$/;"	l
sb	scala/xml/Utility.scala	/^    val sb  = new StringBuilder$/;"	l
sb	scala/xml/Utility.scala	/^    val sb = new StringBuilder$/;"	l
sb	scala/xml/dtd/Scanner.scala	/^    val sb = new StringBuilder()$/;"	l
sb	scala/xml/dtd/ValidationException.scala	/^    val sb = new StringBuilder("missing value for REQUIRED attribute")$/;"	l
sb	scala/xml/parsing/MarkupParser.scala	/^    val sb: StringBuilder = new StringBuilder()$/;"	l
sb	scala/xml/parsing/MarkupParserCommon.scala	/^    val sb = new StringBuilder$/;"	l
sb2	scala/xml/Attribute.scala	/^    val sb2 = new StringBuilder()$/;"	l
scala	scala/AnyVal.scala	/^package scala$/;"	p
scala	scala/AnyValCompanion.scala	/^package scala$/;"	p
scala	scala/App.scala	/^package scala$/;"	p
scala	scala/Application.scala	/^package scala$/;"	p
scala	scala/Array.scala	/^package scala$/;"	p
scala	scala/Boolean.scala	/^package scala$/;"	p
scala	scala/Byte.scala	/^package scala$/;"	p
scala	scala/Cell.scala	/^package scala$/;"	p
scala	scala/Char.scala	/^package scala$/;"	p
scala	scala/Console.scala	/^package scala$/;"	p
scala	scala/CountedIterator.scala	/^package scala$/;"	p
scala	scala/DelayedInit.scala	/^package scala$/;"	p
scala	scala/Double.scala	/^package scala$/;"	p
scala	scala/Dynamic.scala	/^package scala$/;"	p
scala	scala/Either.scala	/^package scala$/;"	p
scala	scala/Enumeration.scala	/^package scala$/;"	p
scala	scala/Equals.scala	/^package scala$/;"	p
scala	scala/Float.scala	/^package scala$/;"	p
scala	scala/Function.scala	/^package scala$/;"	p
scala	scala/Function0.scala	/^package scala$/;"	p
scala	scala/Function1.scala	/^package scala$/;"	p
scala	scala/Function10.scala	/^package scala$/;"	p
scala	scala/Function11.scala	/^package scala$/;"	p
scala	scala/Function12.scala	/^package scala$/;"	p
scala	scala/Function13.scala	/^package scala$/;"	p
scala	scala/Function14.scala	/^package scala$/;"	p
scala	scala/Function15.scala	/^package scala$/;"	p
scala	scala/Function16.scala	/^package scala$/;"	p
scala	scala/Function17.scala	/^package scala$/;"	p
scala	scala/Function18.scala	/^package scala$/;"	p
scala	scala/Function19.scala	/^package scala$/;"	p
scala	scala/Function2.scala	/^package scala$/;"	p
scala	scala/Function20.scala	/^package scala$/;"	p
scala	scala/Function21.scala	/^package scala$/;"	p
scala	scala/Function22.scala	/^package scala$/;"	p
scala	scala/Function3.scala	/^package scala$/;"	p
scala	scala/Function4.scala	/^package scala$/;"	p
scala	scala/Function5.scala	/^package scala$/;"	p
scala	scala/Function6.scala	/^package scala$/;"	p
scala	scala/Function7.scala	/^package scala$/;"	p
scala	scala/Function8.scala	/^package scala$/;"	p
scala	scala/Function9.scala	/^package scala$/;"	p
scala	scala/Immutable.scala	/^package scala$/;"	p
scala	scala/Int.scala	/^package scala$/;"	p
scala	scala/Long.scala	/^package scala$/;"	p
scala	scala/LowPriorityImplicits.scala	/^package scala$/;"	p
scala	scala/MatchError.scala	/^package scala$/;"	p
scala	scala/Math.scala	/^package scala$/;"	p
scala	scala/MathCommon.scala	/^package scala$/;"	p
scala	scala/Mutable.scala	/^package scala$/;"	p
scala	scala/NotDefinedError.scala	/^package scala$/;"	p
scala	scala/NotNull.scala	/^package scala$/;"	p
scala	scala/Option.scala	/^package scala$/;"	p
scala	scala/PartialFunction.scala	/^package scala$/;"	p
scala	scala/Predef.scala	/^package scala$/;"	p
scala	scala/Product.scala	/^package scala$/;"	p
scala	scala/Product1.scala	/^package scala$/;"	p
scala	scala/Product10.scala	/^package scala$/;"	p
scala	scala/Product11.scala	/^package scala$/;"	p
scala	scala/Product12.scala	/^package scala$/;"	p
scala	scala/Product13.scala	/^package scala$/;"	p
scala	scala/Product14.scala	/^package scala$/;"	p
scala	scala/Product15.scala	/^package scala$/;"	p
scala	scala/Product16.scala	/^package scala$/;"	p
scala	scala/Product17.scala	/^package scala$/;"	p
scala	scala/Product18.scala	/^package scala$/;"	p
scala	scala/Product19.scala	/^package scala$/;"	p
scala	scala/Product2.scala	/^package scala$/;"	p
scala	scala/Product20.scala	/^package scala$/;"	p
scala	scala/Product21.scala	/^package scala$/;"	p
scala	scala/Product22.scala	/^package scala$/;"	p
scala	scala/Product3.scala	/^package scala$/;"	p
scala	scala/Product4.scala	/^package scala$/;"	p
scala	scala/Product5.scala	/^package scala$/;"	p
scala	scala/Product6.scala	/^package scala$/;"	p
scala	scala/Product7.scala	/^package scala$/;"	p
scala	scala/Product8.scala	/^package scala$/;"	p
scala	scala/Product9.scala	/^package scala$/;"	p
scala	scala/Proxy.scala	/^package scala$/;"	p
scala	scala/Responder.scala	/^package scala$/;"	p
scala	scala/ScalaObject.scala	/^package scala$/;"	p
scala	scala/SerialVersionUID.scala	/^package scala$/;"	p
scala	scala/Serializable.scala	/^package scala$/;"	p
scala	scala/Short.scala	/^package scala$/;"	p
scala	scala/SpecializableCompanion.scala	/^package scala$/;"	p
scala	scala/Symbol.scala	/^package scala$/;"	p
scala	scala/Tuple1.scala	/^package scala$/;"	p
scala	scala/Tuple10.scala	/^package scala$/;"	p
scala	scala/Tuple11.scala	/^package scala$/;"	p
scala	scala/Tuple12.scala	/^package scala$/;"	p
scala	scala/Tuple13.scala	/^package scala$/;"	p
scala	scala/Tuple14.scala	/^package scala$/;"	p
scala	scala/Tuple15.scala	/^package scala$/;"	p
scala	scala/Tuple16.scala	/^package scala$/;"	p
scala	scala/Tuple17.scala	/^package scala$/;"	p
scala	scala/Tuple18.scala	/^package scala$/;"	p
scala	scala/Tuple19.scala	/^package scala$/;"	p
scala	scala/Tuple2.scala	/^package scala$/;"	p
scala	scala/Tuple20.scala	/^package scala$/;"	p
scala	scala/Tuple21.scala	/^package scala$/;"	p
scala	scala/Tuple22.scala	/^package scala$/;"	p
scala	scala/Tuple3.scala	/^package scala$/;"	p
scala	scala/Tuple4.scala	/^package scala$/;"	p
scala	scala/Tuple5.scala	/^package scala$/;"	p
scala	scala/Tuple6.scala	/^package scala$/;"	p
scala	scala/Tuple7.scala	/^package scala$/;"	p
scala	scala/Tuple8.scala	/^package scala$/;"	p
scala	scala/Tuple9.scala	/^package scala$/;"	p
scala	scala/UninitializedError.scala	/^package scala$/;"	p
scala	scala/UninitializedFieldError.scala	/^package scala$/;"	p
scala	scala/Unit.scala	/^package scala$/;"	p
scala	scala/actors/package.scala	/^package scala$/;"	p
scala	scala/cloneable.scala	/^package scala$/;"	p
scala	scala/collection/package.scala	/^package scala$/;"	p
scala	scala/deprecated.scala	/^package scala$/;"	p
scala	scala/deprecatedName.scala	/^package scala$/;"	p
scala	scala/inline.scala	/^package scala$/;"	p
scala	scala/math/package.scala	/^package scala$/;"	p
scala	scala/native.scala	/^package scala$/;"	p
scala	scala/noinline.scala	/^package scala$/;"	p
scala	scala/remote.scala	/^package scala$/;"	p
scala	scala/runtime/package.scala	/^package scala$/;"	p
scala	scala/specialized.scala	/^package scala$/;"	p
scala	scala/sys/package.scala	/^package scala$/;"	p
scala	scala/throws.scala	/^package scala$/;"	p
scala	scala/transient.scala	/^package scala$/;"	p
scala	scala/unchecked.scala	/^package scala$/;"	p
scala	scala/volatile.scala	/^package scala$/;"	p
scala	scala/xml/package.scala	/^package scala$/;"	p
scala.actors	scala/actors/AbstractActor.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/Actor.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/ActorCanReply.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/ActorProxy.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/ActorTask.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/CanReply.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/Channel.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/Combinators.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/DaemonActor.scala	/^package scala.actors $/;"	p
scala.actors	scala/actors/Debug.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/Future.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/IScheduler.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/InputChannel.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/LinkedNode.java	/^package scala.actors;$/;"	p
scala.actors	scala/actors/LinkedQueue.java	/^package scala.actors;$/;"	p
scala.actors	scala/actors/MessageQueue.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/OutputChannel.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/ReactChannel.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/Reaction.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/Reactor.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/ReactorCanReply.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/ReactorTask.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/ReplyReactor.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/ReplyReactorTask.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/Scheduler.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/SchedulerAdapter.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/UncaughtException.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/remote/FreshNameCreator.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/remote/JavaSerializer.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/remote/NetKernel.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/remote/Proxy.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/remote/RemoteActor.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/remote/Serializer.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/remote/Service.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/remote/TcpService.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/scheduler/ActorGC.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/scheduler/DaemonScheduler.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/scheduler/DelegatingScheduler.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/scheduler/DrainableForkJoinPool.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/scheduler/ExecutorScheduler.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/scheduler/ForkJoinScheduler.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/scheduler/SingleThreadedScheduler.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/scheduler/TerminationMonitor.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/scheduler/TerminationService.scala	/^package scala.actors$/;"	p
scala.actors	scala/actors/scheduler/ThreadPoolConfig.scala	/^package scala.actors$/;"	p
scala.actors.scheduler	scala/actors/scheduler/QuitControl.scala	/^package scala.actors.scheduler$/;"	p
scala.actors.scheduler	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^package scala.actors.scheduler$/;"	p
scala.actors.threadpool	scala/actors/threadpool/AbstractCollection.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/AbstractExecutorService.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/AbstractQueue.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/Arrays.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/AtomicInteger.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/BlockingQueue.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/Callable.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/CancellationException.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/CompletionService.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/ExecutionException.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/Executor.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/ExecutorCompletionService.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/ExecutorService.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/Executors.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/Future.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/FutureTask.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/LinkedBlockingQueue.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/Perf.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/Queue.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/RejectedExecutionException.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/RejectedExecutionHandler.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/RunnableFuture.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/SynchronousQueue.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/ThreadFactory.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/ThreadPoolExecutor.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/TimeUnit.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool	scala/actors/threadpool/TimeoutException.java	/^package scala.actors.threadpool;$/;"	p
scala.actors.threadpool.helpers	scala/actors/threadpool/helpers/FIFOWaitQueue.java	/^package scala.actors.threadpool.helpers;$/;"	p
scala.actors.threadpool.helpers	scala/actors/threadpool/helpers/NanoTimer.java	/^package scala.actors.threadpool.helpers;$/;"	p
scala.actors.threadpool.helpers	scala/actors/threadpool/helpers/ThreadHelpers.java	/^package scala.actors.threadpool.helpers;$/;"	p
scala.actors.threadpool.helpers	scala/actors/threadpool/helpers/Utils.java	/^package scala.actors.threadpool.helpers;$/;"	p
scala.actors.threadpool.helpers	scala/actors/threadpool/helpers/WaitQueue.java	/^package scala.actors.threadpool.helpers;$/;"	p
scala.actors.threadpool.locks	scala/actors/threadpool/locks/CondVar.java	/^package scala.actors.threadpool.locks;$/;"	p
scala.actors.threadpool.locks	scala/actors/threadpool/locks/Condition.java	/^package scala.actors.threadpool.locks;$/;"	p
scala.actors.threadpool.locks	scala/actors/threadpool/locks/FIFOCondVar.java	/^package scala.actors.threadpool.locks;$/;"	p
scala.actors.threadpool.locks	scala/actors/threadpool/locks/Lock.java	/^package scala.actors.threadpool.locks;$/;"	p
scala.actors.threadpool.locks	scala/actors/threadpool/locks/ReadWriteLock.java	/^package scala.actors.threadpool.locks;$/;"	p
scala.actors.threadpool.locks	scala/actors/threadpool/locks/ReentrantLock.java	/^package scala.actors.threadpool.locks;$/;"	p
scala.actors.threadpool.locks	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^package scala.actors.threadpool.locks;$/;"	p
scala.annotation	scala/annotation/Annotation.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/ClassfileAnnotation.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/StaticAnnotation.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/TypeConstraint.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/bridge.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/elidable.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/implicitNotFound.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/migration.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/serializable.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/strictfp.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/switch.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/tailrec.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/target/package.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/varargs.scala	/^package scala.annotation$/;"	p
scala.annotation.target	scala/annotation/target/beanGetter.scala	/^package scala.annotation.target$/;"	p
scala.annotation.target	scala/annotation/target/beanSetter.scala	/^package scala.annotation.target$/;"	p
scala.annotation.target	scala/annotation/target/field.scala	/^package scala.annotation.target$/;"	p
scala.annotation.target	scala/annotation/target/getter.scala	/^package scala.annotation.target$/;"	p
scala.annotation.target	scala/annotation/target/param.scala	/^package scala.annotation.target$/;"	p
scala.annotation.target	scala/annotation/target/setter.scala	/^package scala.annotation.target$/;"	p
scala.annotation.unchecked	scala/annotation/unchecked/uncheckedStable.scala	/^package scala.annotation.unchecked$/;"	p
scala.annotation.unchecked	scala/annotation/unchecked/uncheckedVariance.scala	/^package scala.annotation.unchecked$/;"	p
scala.collection	scala/collection/BitSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/BitSetLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/BufferedIterator.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/CustomParallelizable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/DefaultMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenIterable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenIterableLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenIterableView.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenIterableViewLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenMapLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenSeqLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenSeqView.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenSeqViewLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenSetLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenTraversable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenTraversableLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenTraversableOnce.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenTraversableView.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenTraversableViewLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/IndexedSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/IndexedSeqLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/IndexedSeqOptimized.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/Iterable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/IterableLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/IterableProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/IterableProxyLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/IterableView.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/IterableViewLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/Iterator.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/JavaConversions.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/JavaConverters.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/LinearSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/LinearSeqLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/LinearSeqOptimized.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/Map.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/MapLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/MapProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/MapProxyLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/Parallel.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/Parallelizable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/Seq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SeqLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SeqProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SeqProxyLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SeqView.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SeqViewLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/Set.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SetLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SetProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SetProxyLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SortedMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SortedMapLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SortedSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SortedSetLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/Traversable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/TraversableLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/TraversableOnce.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/TraversableProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/TraversableProxyLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/TraversableView.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/TraversableViewLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/Addable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/BitOperations.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/BitSetFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/CanBuildFrom.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/CanCombineFrom.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/ClassManifestTraversableFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenMapFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenSeqFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenSetFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenTraversableFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenericClassManifestCompanion.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenericClassManifestTraversableTemplate.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenericCompanion.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenericOrderedCompanion.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenericOrderedTraversableTemplate.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenericSeqCompanion.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenericSetTemplate.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenericTraversableTemplate.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/Growable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/HasNewBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/ImmutableMapFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/ImmutableSetFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/ImmutableSortedMapFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/ImmutableSortedSetFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/MapFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/MutableMapFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/MutableSetFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/OrderedTraversableFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/SeqFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/SetFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/Shrinkable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/SliceInterval.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/Sorted.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/SortedMapFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/SortedSetFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/Subtractable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/TraversableFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/package.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/BitSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/DefaultMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/HashMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/HashSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/IndexedSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/IntMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Iterable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/LinearSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/List.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/ListMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/ListSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/LongMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Map.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/MapLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/MapProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/NumericRange.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/PagedSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Queue.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/RedBlack.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Seq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Set.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/SetProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/SortedMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/SortedSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Stack.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Stream.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/StreamView.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/StreamViewLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/StringLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/StringOps.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Traversable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/TreeMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/TreeSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/TrieIterator.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Vector.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/WrappedString.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/package.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/interfaces/IterableMethods.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/interfaces/MapMethods.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/interfaces/SeqMethods.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/interfaces/SetMethods.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/interfaces/TraversableMethods.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/interfaces/TraversableOnceMethods.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/AddingBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ArrayBuffer.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ArrayBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ArrayLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ArrayOps.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ArraySeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ArrayStack.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/BitSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Buffer.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/BufferLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/BufferProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Builder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Cloneable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ConcurrentMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/DefaultEntry.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/DefaultMapModel.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/DoubleLinkedList.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/DoubleLinkedListLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/FlatHashTable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/GrowingBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/HashEntry.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/HashMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/HashSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/HashTable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/History.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ImmutableMapAdaptor.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ImmutableSetAdaptor.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/IndexedSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/IndexedSeqLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/IndexedSeqOptimized.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/IndexedSeqView.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Iterable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/LazyBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/LinearSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/LinkedEntry.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/LinkedHashMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/LinkedHashSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/LinkedList.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/LinkedListLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ListBuffer.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ListMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Map.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/MapBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/MapLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/MapProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/MultiMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/MutableList.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ObservableBuffer.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ObservableMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ObservableSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/OpenHashMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/PriorityQueue.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/PriorityQueueProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Publisher.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Queue.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/QueueProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ResizableArray.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/RevertibleHistory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Seq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SeqLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Set.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SetBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SetLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SetProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Stack.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/StackProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/StringBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Subscriber.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SynchronizedBuffer.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SynchronizedMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SynchronizedPriorityQueue.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SynchronizedQueue.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SynchronizedSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SynchronizedStack.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Traversable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Undoable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/WeakHashMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/WrappedArray.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/WrappedArrayBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/immutable/ParIterable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/immutable/ParMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/immutable/ParSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/immutable/ParSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/immutable/ParVector.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/mutable/ParHashTable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/mutable/ParSetLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/package.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/script/Location.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/script/Message.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/script/Scriptable.scala	/^package scala.collection$/;"	p
scala.collection.generic	scala/collection/generic/FilterMonadic.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/GenericParCompanion.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/GenericParTemplate.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/HasNewCombiner.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/IterableForwarder.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/ParFactory.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/ParMapFactory.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/ParSetFactory.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/SeqForwarder.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/Signalling.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/Sizing.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/TraversableForwarder.scala	/^package scala.collection.generic$/;"	p
scala.collection.immutable	scala/collection/immutable/Range.scala	/^package scala.collection.immutable$/;"	p
scala.collection.mutable	scala/collection/mutable/UnrolledBuffer.scala	/^package scala.collection.mutable$/;"	p
scala.collection.parallel	scala/collection/parallel/Combiner.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParIterable.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParIterableLike.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParIterableView.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParIterableViewLike.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParMap.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParMapLike.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParSeq.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParSeqLike.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParSeqView.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParSeqViewLike.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParSet.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParSetLike.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/PreciseSplitter.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/RemainsIterator.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/Splitter.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/TaskSupport.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/Tasks.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/immutable/package.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/mutable/ParHashMap.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/mutable/ParMapLike.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/mutable/package.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel.immutable	scala/collection/parallel/immutable/ParHashMap.scala	/^package scala.collection.parallel.immutable$/;"	p
scala.collection.parallel.immutable	scala/collection/parallel/immutable/ParHashSet.scala	/^package scala.collection.parallel.immutable$/;"	p
scala.collection.parallel.immutable	scala/collection/parallel/immutable/ParRange.scala	/^package scala.collection.parallel.immutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/LazyCombiner.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/ParArray.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/ParHashSet.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/ParIterable.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/ParMap.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/ParSeq.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/ParSet.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.compat	scala/compat/Platform.scala	/^package scala.compat$/;"	p
scala.concurrent	scala/concurrent/Channel.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/DelayedLazyVal.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/FutureTaskRunner.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/JavaConversions.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/Lock.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/MailBox.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/ManagedBlocker.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/SyncChannel.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/SyncVar.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/TIMEOUT.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/TaskRunner.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/TaskRunners.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/ThreadPoolRunner.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/ThreadRunner.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/ops.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/pilib.scala	/^package scala.concurrent$/;"	p
scala.io	scala/io/BufferedSource.scala	/^package scala.io$/;"	p
scala.io	scala/io/BytePickle.scala	/^package scala.io$/;"	p
scala.io	scala/io/Codec.scala	/^package scala.io$/;"	p
scala.io	scala/io/Position.scala	/^package scala.io$/;"	p
scala.io	scala/io/Source.scala	/^package scala.io$/;"	p
scala.io	scala/io/UTF8Codec.scala	/^package scala.io$/;"	p
scala.math	scala/math/BigDecimal.scala	/^package scala.math$/;"	p
scala.math	scala/math/BigInt.scala	/^package scala.math$/;"	p
scala.math	scala/math/Equiv.scala	/^package scala.math$/;"	p
scala.math	scala/math/Fractional.scala	/^package scala.math$/;"	p
scala.math	scala/math/Integral.scala	/^package scala.math$/;"	p
scala.math	scala/math/Numeric.scala	/^package scala.math$/;"	p
scala.math	scala/math/Ordered.scala	/^package scala.math$/;"	p
scala.math	scala/math/Ordering.scala	/^package scala.math$/;"	p
scala.math	scala/math/PartialOrdering.scala	/^package scala.math$/;"	p
scala.math	scala/math/PartiallyOrdered.scala	/^package scala.math$/;"	p
scala.math	scala/math/ScalaNumber.java	/^package scala.math;$/;"	p
scala.math	scala/math/ScalaNumericConversions.scala	/^package scala.math$/;"	p
scala.parallel	scala/parallel/Future.scala	/^package scala.parallel$/;"	p
scala.ref	scala/ref/PhantomReference.scala	/^package scala.ref$/;"	p
scala.ref	scala/ref/Reference.scala	/^package scala.ref$/;"	p
scala.ref	scala/ref/ReferenceQueue.scala	/^package scala.ref$/;"	p
scala.ref	scala/ref/ReferenceWrapper.scala	/^package scala.ref$/;"	p
scala.ref	scala/ref/SoftReference.scala	/^package scala.ref$/;"	p
scala.ref	scala/ref/WeakReference.scala	/^package scala.ref$/;"	p
scala.reflect	scala/reflect/BeanDescription.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/BeanDisplayName.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/BeanInfo.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/BeanInfoSkip.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/BeanProperty.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/BooleanBeanProperty.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/ClassManifest.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/Code.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/Manifest.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/NameTransformer.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/NoManifest.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/OptManifest.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/Print.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/ScalaBeanInfo.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/ScalaLongSignature.java	/^package scala.reflect;$/;"	p
scala.reflect	scala/reflect/ScalaSignature.java	/^package scala.reflect;$/;"	p
scala.reflect	scala/reflect/Symbol.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/Tree.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/Type.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/generic/AnnotationInfos.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/generic/Constants.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/generic/Flags.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/generic/HasFlags.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/generic/Names.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/generic/PickleBuffer.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/generic/PickleFormat.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/generic/Scopes.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/generic/StandardDefinitions.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/generic/StdNames.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/generic/Symbols.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/generic/Trees.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/generic/Types.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/generic/UnPickler.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/generic/Universe.scala	/^package scala.reflect$/;"	p
scala.reflect.generic	scala/reflect/generic/ByteCodecs.scala	/^package scala.reflect.generic$/;"	p
scala.runtime	scala/runtime/AbstractFunction0.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction1.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction10.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction11.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction12.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction13.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction14.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction15.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction16.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction17.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction18.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction19.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction2.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction20.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction21.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction22.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction3.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction4.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction5.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction6.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction7.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction8.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction9.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AnyValCompanion.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/ArrayRuntime.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/BooleanRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/Boxed.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/BoxedUnit.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/BoxesRunTime.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/ByteRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/CharRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/DoubleRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/FloatRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/IntRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/LongRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/MethodCache.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/NonLocalReturnControl.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/Nothing$.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/Null$.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/ObjectRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/RichBoolean.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/RichByte.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/RichChar.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/RichDouble.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/RichException.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/RichFloat.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/RichInt.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/RichLong.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/RichShort.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/ScalaNumberProxy.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/ScalaRunTime.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/ShortRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/StringAdd.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/TraitSetter.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileBooleanRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileByteRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileCharRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileDoubleRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileFloatRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileIntRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileLongRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileObjectRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileShortRef.java	/^package scala.runtime;$/;"	p
scala.sys	scala/sys/BooleanProp.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/Prop.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/PropImpl.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/ShutdownHookThread.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/SystemProperties.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/process/BasicIO.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/process/Process.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/process/ProcessBuilder.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/process/ProcessBuilderImpl.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/process/ProcessIO.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/process/ProcessImpl.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/process/ProcessLogger.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/process/package.scala	/^package scala.sys {$/;"	p
scala.testing	scala/testing/Benchmark.scala	/^package scala.testing$/;"	p
scala.testing	scala/testing/SUnit.scala	/^package scala.testing$/;"	p
scala.testing	scala/testing/Show.scala	/^package scala.testing$/;"	p
scala.text	scala/text/Document.scala	/^package scala.text$/;"	p
scala.util	scala/util/DynamicVariable.scala	/^package scala.util$/;"	p
scala.util	scala/util/Marshal.scala	/^package scala.util$/;"	p
scala.util	scala/util/MurmurHash.scala	/^package scala.util$/;"	p
scala.util	scala/util/Properties.scala	/^package scala.util$/;"	p
scala.util	scala/util/Random.scala	/^package scala.util$/;"	p
scala.util	scala/util/Sorting.scala	/^package scala.util$/;"	p
scala.util	scala/util/continuations/package.scala	/^package scala.util$/;"	p
scala.util.automata	scala/util/automata/BaseBerrySethi.scala	/^package scala.util.automata$/;"	p
scala.util.automata	scala/util/automata/DetWordAutom.scala	/^package scala.util.automata$/;"	p
scala.util.automata	scala/util/automata/Inclusion.scala	/^package scala.util.automata$/;"	p
scala.util.automata	scala/util/automata/NondetWordAutom.scala	/^package scala.util.automata$/;"	p
scala.util.automata	scala/util/automata/SubsetConstruction.scala	/^package scala.util.automata$/;"	p
scala.util.automata	scala/util/automata/WordBerrySethi.scala	/^package scala.util.automata$/;"	p
scala.util.continuations	scala/util/continuations/ControlContext.scala	/^package scala.util.continuations$/;"	p
scala.util.control	scala/util/control/Breaks.scala	/^package scala.util.control$/;"	p
scala.util.control	scala/util/control/ControlThrowable.scala	/^package scala.util.control$/;"	p
scala.util.control	scala/util/control/Exception.scala	/^package scala.util.control$/;"	p
scala.util.control	scala/util/control/NoStackTrace.scala	/^package scala.util.control$/;"	p
scala.util.control	scala/util/control/TailCalls.scala	/^package scala.util.control$/;"	p
scala.util.grammar	scala/util/grammar/HedgeRHS.scala	/^package scala.util.grammar$/;"	p
scala.util.grammar	scala/util/grammar/TreeRHS.scala	/^package scala.util.grammar$/;"	p
scala.util.logging	scala/util/logging/ConsoleLogger.scala	/^package scala.util.logging$/;"	p
scala.util.logging	scala/util/logging/Logged.scala	/^package scala.util.logging$/;"	p
scala.util.matching	scala/util/matching/Regex.scala	/^package scala.util.matching$/;"	p
scala.util.parsing	scala/util/parsing/combinator/lexical/Lexical.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing	scala/util/parsing/combinator/lexical/Scanners.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing	scala/util/parsing/combinator/lexical/StdLexical.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing	scala/util/parsing/combinator/syntactical/StandardTokenParsers.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing	scala/util/parsing/combinator/syntactical/TokenParsers.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing	scala/util/parsing/combinator/token/StdTokens.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing	scala/util/parsing/combinator/token/Tokens.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing	scala/util/parsing/syntax/package.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing.ast	scala/util/parsing/ast/AbstractSyntax.scala	/^package scala.util.parsing.ast$/;"	p
scala.util.parsing.ast	scala/util/parsing/ast/Binders.scala	/^package scala.util.parsing.ast$/;"	p
scala.util.parsing.combinator	scala/util/parsing/combinator/ImplicitConversions.scala	/^package scala.util.parsing.combinator$/;"	p
scala.util.parsing.combinator	scala/util/parsing/combinator/JavaTokenParsers.scala	/^package scala.util.parsing.combinator$/;"	p
scala.util.parsing.combinator	scala/util/parsing/combinator/PackratParsers.scala	/^package scala.util.parsing.combinator$/;"	p
scala.util.parsing.combinator	scala/util/parsing/combinator/Parsers.scala	/^package scala.util.parsing.combinator$/;"	p
scala.util.parsing.combinator	scala/util/parsing/combinator/RegexParsers.scala	/^package scala.util.parsing.combinator$/;"	p
scala.util.parsing.combinator.testing	scala/util/parsing/combinator/testing/RegexTest.scala	/^package scala.util.parsing.combinator.testing$/;"	p
scala.util.parsing.combinator.testing	scala/util/parsing/combinator/testing/Tester.scala	/^package scala.util.parsing.combinator.testing$/;"	p
scala.util.parsing.input	scala/util/parsing/input/CharArrayReader.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input	scala/util/parsing/input/CharSequenceReader.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input	scala/util/parsing/input/NoPosition.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input	scala/util/parsing/input/OffsetPosition.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input	scala/util/parsing/input/PagedSeqReader.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input	scala/util/parsing/input/Position.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input	scala/util/parsing/input/Positional.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input	scala/util/parsing/input/Reader.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input	scala/util/parsing/input/StreamReader.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.json	scala/util/parsing/json/JSON.scala	/^package scala.util.parsing.json$/;"	p
scala.util.parsing.json	scala/util/parsing/json/Lexer.scala	/^package scala.util.parsing.json$/;"	p
scala.util.parsing.json	scala/util/parsing/json/Parser.scala	/^package scala.util.parsing.json$/;"	p
scala.util.regexp	scala/util/regexp/Base.scala	/^package scala.util.regexp$/;"	p
scala.util.regexp	scala/util/regexp/PointedHedgeExp.scala	/^package scala.util.regexp$/;"	p
scala.util.regexp	scala/util/regexp/SyntaxError.scala	/^package scala.util.regexp$/;"	p
scala.util.regexp	scala/util/regexp/WordExp.scala	/^package scala.util.regexp$/;"	p
scala.xml	scala/xml/Atom.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Attribute.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Comment.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Document.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Elem.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/EntityRef.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Equality.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Group.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/HasKeyValue.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/MalformedAttributeException.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/MetaData.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/NamespaceBinding.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Node.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/NodeBuffer.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/NodeSeq.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Null.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/PCData.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/PrefixedAttribute.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/PrettyPrinter.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/ProcInstr.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/QNode.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/SpecialNode.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Text.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/TextBuffer.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/TopScope.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/TypeSymbol.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Unparsed.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/UnprefixedAttribute.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Utility.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/XML.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Xhtml.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/ContentModel.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/ContentModelParser.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/DTD.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/Decl.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/DocType.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/ElementValidator.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/ExternalID.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/Scanner.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/Tokens.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/ValidationException.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/factory/Binder.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/factory/LoggedNodeFactory.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/factory/NodeFactory.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/factory/XMLLoader.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/include/CircularIncludeException.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/include/UnavailableResourceException.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/include/XIncludeException.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/include/sax/EncodingHeuristics.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/include/sax/Main.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/include/sax/XIncludeFilter.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/include/sax/XIncluder.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/ConstructingHandler.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/ConstructingParser.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/DefaultMarkupHandler.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/ExternalSources.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/FactoryAdapter.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/FatalError.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/MarkupHandler.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/MarkupParser.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/MarkupParserCommon.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/NoBindingFactoryAdapter.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/TokenTests.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/ValidatingMarkupHandler.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/XhtmlEntities.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/XhtmlParser.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/persistent/CachedFileStorage.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/persistent/Index.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/persistent/SetStorage.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/pull/XMLEvent.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/pull/XMLEventReader.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/pull/package.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/transform/BasicTransformer.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/transform/RewriteRule.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/transform/RuleTransformer.scala	/^package scala.xml$/;"	p
scalaCmd	scala/util/Properties.scala	/^  def scalaCmd              = if (isWin) "scala.bat" else "scala"$/;"	m
scalaHome	scala/util/Properties.scala	/^  def scalaHome             = propOrEmpty("scala.home")$/;"	m
scalaPropOrElse	scala/util/Properties.scala	/^  def scalaPropOrElse(name: String, alt: String): String = scalaProps.getProperty(name, alt)$/;"	m
scalaPropOrEmpty	scala/util/Properties.scala	/^  def scalaPropOrEmpty(name: String): String             = scalaPropOrElse(name, "")$/;"	m
scalaPropOrNone	scala/util/Properties.scala	/^  def scalaPropOrNone(name: String): Option[String]      = Option(scalaProps.getProperty(name))$/;"	m
scalacCmd	scala/util/Properties.scala	/^  def scalacCmd             = if (isWin) "scalac.bat" else "scalac"$/;"	m
scale	scala/math/BigDecimal.scala	/^  def scale: Int = this.bigDecimal.scale()$/;"	m
scan	scala/collection/GenTraversableLike.scala	/^  def scan[B >: A, That](z: B)(op: (B, B) => B)(implicit cbf: CanBuildFrom[Repr, B, That]): That$/;"	m
scan	scala/collection/TraversableLike.scala	/^  def scan[B >: A, That](z: B)(op: (B, B) => B)(implicit cbf: CanBuildFrom[Repr, B, That]): That = scanLeft(z)(op)$/;"	m
scan	scala/collection/mutable/HashTable.scala	/^    def scan() {$/;"	m
scan	scala/collection/parallel/ParIterableLike.scala	/^  def scan[U >: T, That](z: U)(op: (U, U) => U)(implicit bf: CanBuildFrom[Repr, U, That]): That = if (bf.isParallel) {$/;"	m
scan	scala/collection/parallel/mutable/ParHashTable.scala	/^    def scan() {$/;"	m
scan	scala/reflect/generic/UnPickler.scala	/^  def scan(bytes: Array[Byte], offset: Int, classRoot: Symbol, moduleRoot: Symbol, filename: String)$/;"	m
scanLeft	scala/collection/GenTraversableLike.scala	/^  def scanLeft[B, That](z: B)(op: (B, A) => B)(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
scanLeft	scala/collection/Iterator.scala	/^  def scanLeft[B](z: B)(op: (B, A) => B): Iterator[B] = new Iterator[B] {$/;"	m
scanLeft	scala/collection/TraversableLike.scala	/^  def scanLeft[B, That](z: B)(op: (B, A) => B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
scanLeft	scala/collection/interfaces/TraversableMethods.scala	/^  def scanLeft[B, That](z: B)(op: (B, A) => B)(implicit bf: CanBuildFrom[This, B, That]): That$/;"	m
scanLeft	scala/collection/parallel/ParIterableLike.scala	/^  def scanLeft[S, That](z: S)(op: (S, T) => S)(implicit bf: CanBuildFrom[Repr, S, That]) = seq.scanLeft(z)(op)(bf2seq(bf))$/;"	m
scanRight	scala/collection/GenTraversableLike.scala	/^  def scanRight[B, That](z: B)(op: (A, B) => B)(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
scanRight	scala/collection/Iterator.scala	/^  def scanRight[B](z: B)(op: (A, B) => B): Iterator[B] = toBuffer.scanRight(z)(op).iterator$/;"	m
scanRight	scala/collection/TraversableLike.scala	/^  def scanRight[B, That](z: B)(op: (A, B) => B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
scanRight	scala/collection/interfaces/TraversableMethods.scala	/^  def scanRight[B, That](z: B)(op: (A, B) => B)(implicit bf: CanBuildFrom[This, B, That]): That$/;"	m
scanRight	scala/collection/parallel/ParIterableLike.scala	/^  def scanRight[S, That](z: S)(op: (T, S) => S)(implicit bf: CanBuildFrom[Repr, S, That]) = seq.scanRight(z)(op)(bf2seq(bf))$/;"	m
scanToArray	scala/collection/parallel/RemainsIterator.scala	/^  def scanToArray[U >: T, A >: U](z: U, op: (U, U) => U, array: Array[A], from: Int) {$/;"	m
scanToCombiner	scala/collection/parallel/RemainsIterator.scala	/^  def scanToCombiner[U >: T, That](howmany: Int, startValue: U, op: (U, U) => U, cb: Combiner[U, That]) = {$/;"	m
scanToCombiner	scala/collection/parallel/RemainsIterator.scala	/^  def scanToCombiner[U >: T, That](startValue: U, op: (U, U) => U, cb: Combiner[U, That]) = {$/;"	m
scanned	scala/collection/TraversableLike.scala	/^    var scanned = List(z)$/;"	l
sched	scala/actors/Reactor.scala	/^      val sched = if (!ThreadPoolConfig.useForkJoin) {$/;"	l
sched	scala/actors/Scheduler.scala	/^    val sched = if (!ThreadPoolConfig.useForkJoin) {$/;"	l
sched	scala/actors/scheduler/DaemonScheduler.scala	/^    val sched = if (!ThreadPoolConfig.useForkJoin) {$/;"	l
scheduler	scala/actors/Reactor.scala	/^  val scheduler = new DelegatingScheduler {$/;"	l
scheduler	scala/actors/scheduler/ActorGC.scala	/^package scheduler$/;"	p
scheduler	scala/actors/scheduler/DaemonScheduler.scala	/^package scheduler$/;"	p
scheduler	scala/actors/scheduler/DelegatingScheduler.scala	/^package scheduler$/;"	p
scheduler	scala/actors/scheduler/DrainableForkJoinPool.scala	/^package scheduler$/;"	p
scheduler	scala/actors/scheduler/ExecutorScheduler.scala	/^package scheduler$/;"	p
scheduler	scala/actors/scheduler/ForkJoinScheduler.scala	/^package scheduler$/;"	p
scheduler	scala/actors/scheduler/SingleThreadedScheduler.scala	/^package scheduler$/;"	p
scheduler	scala/actors/scheduler/TerminationMonitor.scala	/^package scheduler$/;"	p
scheduler	scala/actors/scheduler/TerminationService.scala	/^package scheduler$/;"	p
scheduler	scala/actors/scheduler/ThreadPoolConfig.scala	/^package scheduler$/;"	p
scope	scala/xml/Node.scala	/^  def scope: NamespaceBinding = TopScope$/;"	m
scope	scala/xml/parsing/MarkupParser.scala	/^    var scope: NamespaceBinding = pscope$/;"	l
scopeStack	scala/xml/parsing/FactoryAdapter.scala	/^  var scopeStack  = new mutable.Stack[NamespaceBinding]$/;"	l
scp	scala/xml/parsing/FactoryAdapter.scala	/^    val scp = scopeStack.pop$/;"	l
scpe	scala/xml/parsing/FactoryAdapter.scala	/^    var scpe: NamespaceBinding = $/;"	l
script	scala/collection/script/Location.scala	/^package script$/;"	p
script	scala/collection/script/Message.scala	/^package script$/;"	p
script	scala/collection/script/Scriptable.scala	/^package script$/;"	p
second	scala/sys/process/ProcessImpl.scala	/^          val second = b.run(io)$/;"	l
second	scala/sys/process/ProcessImpl.scala	/^      val second = b.run(secondIO)$/;"	l
secondIO	scala/sys/process/ProcessImpl.scala	/^      val secondIO = defaultIO.withInput(toInput => currentSink put Some(toInput))$/;"	l
seen	scala/collection/SeqLike.scala	/^    val seen = mutable.HashSet[A]()$/;"	l
seglen	scala/collection/parallel/ParSeqLike.scala	/^      val seglen = pit.prefixLength(pred)$/;"	l
segmentLength	scala/collection/GenSeqLike.scala	/^  def segmentLength(p: A => Boolean, from: Int): Int$/;"	m
segmentLength	scala/collection/IndexedSeqOptimized.scala	/^  def segmentLength(p: A => Boolean, from: Int): Int = {$/;"	m
segmentLength	scala/collection/LinearSeqOptimized.scala	/^  def segmentLength(p: A => Boolean, from: Int): Int = {$/;"	m
segmentLength	scala/collection/SeqLike.scala	/^  def segmentLength(p: A => Boolean, from: Int): Int = {$/;"	m
segmentLength	scala/collection/interfaces/SeqMethods.scala	/^  def segmentLength(p: A => Boolean, from: Int): Int$/;"	m
segmentLength	scala/collection/parallel/ParSeqLike.scala	/^  def segmentLength(p: T => Boolean, from: Int): Int = if (from >= length) 0 else {$/;"	m
segments	scala/util/Properties.scala	/^    val segments = s split '.'$/;"	l
select	scala/actors/remote/RemoteActor.scala	/^  def select(node: Node, sym: Symbol): AbstractActor = synchronized {$/;"	m
selectTag	scala/util/automata/SubsetConstruction.scala	/^  def selectTag(Q: BitSet, finals: Array[Int]) =$/;"	m
selector	scala/reflect/generic/UnPickler.scala	/^          val selector = readNameRef()$/;"	l
selector	scala/reflect/generic/UnPickler.scala	/^          val selector = readTreeRef()$/;"	l
selector	scala/reflect/generic/UnPickler.scala	/^          val selector = readTypeNameRef()$/;"	l
selectors	scala/reflect/generic/UnPickler.scala	/^          val selectors = until(end, () => {$/;"	l
self	scala/Proxy.scala	/^    def self: T$/;"	m
self	scala/Proxy.scala	/^  def self: Any$/;"	m
self	scala/actors/Actor.scala	/^  def self: Actor = self(Scheduler)$/;"	m
self	scala/collection/Iterator.scala	/^    val self = buffered$/;"	l
self	scala/collection/TraversableProxyLike.scala	/^  def self: Repr$/;"	m
self	scala/collection/immutable/ListMap.scala	/^      var self: ListMap[A,B] = ListMap.this$/;"	l
self	scala/collection/immutable/NumericRange.scala	/^    val self = this$/;"	l
self	scala/collection/mutable/BufferProxy.scala	/^    def self = BufferProxy.this.self.clone()$/;"	m
self	scala/collection/mutable/BufferProxy.scala	/^  def self: Buffer[A]$/;"	m
self	scala/collection/mutable/Builder.scala	/^      val self = Builder.this$/;"	l
self	scala/collection/mutable/PriorityQueueProxy.scala	/^    def self = PriorityQueueProxy.this.self.clone()$/;"	m
self	scala/collection/mutable/PriorityQueueProxy.scala	/^  def self: PriorityQueue[A]$/;"	m
self	scala/collection/mutable/QueueProxy.scala	/^    def self = QueueProxy.this.self.clone()$/;"	m
self	scala/collection/mutable/QueueProxy.scala	/^  def self: Queue[A]$/;"	m
self	scala/collection/mutable/StackProxy.scala	/^    def self = StackProxy.this.self.clone()$/;"	m
self	scala/collection/mutable/StackProxy.scala	/^  def self: Stack[A]$/;"	m
self	scala/ref/ReferenceWrapper.scala	/^  def self = underlying$/;"	m
self	scala/reflect/generic/UnPickler.scala	/^          val self = readValDefRef()$/;"	l
self	scala/util/parsing/ast/Binders.scala	/^    def self: Element = scope.getElementFor(el)$/;"	m
selfrem	scala/collection/parallel/RemainsIterator.scala	/^      val selfrem = self.remaining$/;"	l
selfs	scala/collection/parallel/RemainsIterator.scala	/^      val selfs = self.psplit(selfsizes: _*)$/;"	l
selfs	scala/collection/parallel/RemainsIterator.scala	/^      val selfs = self.split$/;"	l
selfsym	scala/reflect/generic/UnPickler.scala	/^          val selfsym = if (isSymbolRef(typeRef)) {$/;"	l
send	scala/actors/ActorCanReply.scala	/^        def send(msg: Any, replyTo: OutputChannel[Any]) =$/;"	m
send	scala/actors/Channel.scala	/^        def send(msg: Any, replyTo: OutputChannel[Any]) =$/;"	m
send	scala/actors/Channel.scala	/^  def send(msg: Msg, replyTo: OutputChannel[Any]) {$/;"	m
send	scala/actors/OutputChannel.scala	/^  def send(msg: Msg, replyTo: OutputChannel[Any]): Unit$/;"	m
send	scala/actors/ReactChannel.scala	/^  def send(msg: Msg, replyTo: OutputChannel[Any]) {$/;"	m
send	scala/actors/Reactor.scala	/^  def send(msg: Msg, replyTo: OutputChannel[Any]) {$/;"	m
send	scala/actors/ReactorCanReply.scala	/^      def send(msg: Any, replyTo: OutputChannel[Any]) = {$/;"	m
send	scala/actors/ReactorCanReply.scala	/^      def send(msg: Any, replyTo: OutputChannel[Any]) =$/;"	m
send	scala/actors/remote/NetKernel.scala	/^  def send(node: Node, name: Symbol, msg: AnyRef): Unit =$/;"	m
send	scala/actors/remote/NetKernel.scala	/^  def send(node: Node, name: Symbol, msg: AnyRef, session: Symbol) {$/;"	m
send	scala/actors/remote/Proxy.scala	/^  def send(msg: Any, replyCh: OutputChannel[Any]): Unit =$/;"	m
send	scala/actors/remote/Service.scala	/^  def send(node: Node, data: Array[Byte]): Unit$/;"	m
send	scala/actors/remote/TcpService.scala	/^  def send(node: Node, data: Array[Byte]): Unit = synchronized {$/;"	m
send	scala/concurrent/MailBox.scala	/^  def send(msg: Message): Unit = synchronized {$/;"	m
sendNode	scala/actors/remote/TcpService.scala	/^  def sendNode(n: Node) {$/;"	m
sendToNode	scala/actors/remote/NetKernel.scala	/^  def sendToNode(node: Node, msg: AnyRef) = {$/;"	m
sender	scala/actors/Actor.scala	/^  def sender: OutputChannel[Any] =$/;"	m
senderInfo	scala/actors/ActorTask.scala	/^    val senderInfo = try { Some(actor.sender) } catch {$/;"	l
senderLoc	scala/actors/remote/NetKernel.scala	/^    val senderLoc = Locator(service.node, getOrCreateName(Actor.self))$/;"	l
senderLoc	scala/actors/remote/NetKernel.scala	/^    val senderLoc = Locator(service.node, getOrCreateName(from))$/;"	l
senderProxy	scala/actors/remote/NetKernel.scala	/^              val senderProxy = getOrCreateProxy(senderLoc.node, senderLoc.name)$/;"	l
senderProxy	scala/actors/remote/NetKernel.scala	/^            val senderProxy = getOrCreateProxy(senderLoc.node, senderLoc.name)$/;"	l
separate	scala/collection/immutable/List.scala	/^  def separate[A,B](es: Iterable[Either[A, B]]): (List[A], List[B]) =$/;"	m
seq	scala/collection/GenIterable.scala	/^  def seq: Iterable[A]$/;"	m
seq	scala/collection/GenMap.scala	/^  def seq: Map[A, B]$/;"	m
seq	scala/collection/GenMapLike.scala	/^  def seq: Map[A, B]$/;"	m
seq	scala/collection/GenSeq.scala	/^  def seq: Seq[A]$/;"	m
seq	scala/collection/GenSet.scala	/^  def seq: Set[A]$/;"	m
seq	scala/collection/GenSetLike.scala	/^  def seq: Set[A]$/;"	m
seq	scala/collection/GenTraversable.scala	/^  def seq: Traversable[A]$/;"	m
seq	scala/collection/GenTraversableOnce.scala	/^  def seq: TraversableOnce[A]$/;"	m
seq	scala/collection/Iterator.scala	/^  def seq: Iterator[A] = this$/;"	m
seq	scala/collection/Parallelizable.scala	/^  def seq: TraversableOnce[A]$/;"	m
seq	scala/collection/TraversableOnce.scala	/^  def seq: TraversableOnce[A]$/;"	m
seq	scala/collection/immutable/StringOps.scala	/^  def seq = this.iterator$/;"	m
seq	scala/collection/mutable/ArrayOps.scala	/^  def seq = this.iterator$/;"	m
seq	scala/collection/parallel/ParIterableLike.scala	/^  def seq: Sequential$/;"	m
seq	scala/collection/parallel/mutable/ParIterable.scala	/^  def seq: collection.mutable.Iterable[T]$/;"	m
seq	scala/collection/parallel/mutable/ParMap.scala	/^  def seq: collection.mutable.Map[K, V]$/;"	m
seq	scala/collection/parallel/mutable/ParSeq.scala	/^  def seq: collection.mutable.Seq[T]$/;"	m
seq	scala/collection/parallel/mutable/ParSet.scala	/^  def seq: collection.mutable.Set[T]$/;"	m
seq	scala/xml/transform/BasicTransformer.scala	/^    val seq = transform(n)$/;"	l
seqAsJavaList	scala/collection/JavaConversions.scala	/^  implicit def seqAsJavaList[A](b : Seq[A]): ju.List[A] = b match {$/;"	m
seqAsJavaListConverter	scala/collection/JavaConverters.scala	/^  implicit def seqAsJavaListConverter[A](b : Seq[A]): AsJava[ju.List[A]] = $/;"	m
seqDerivedOrdering	scala/math/Ordering.scala	/^    implicit def seqDerivedOrdering[CC[X] <: collection.Seq[X], T](implicit ord: Ordering[T]): Ordering[CC[T]] =$/;"	m
seqRest	scala/xml/dtd/ContentModelParser.scala	/^  def seqRest(p: RegExp) = { $/;"	m
seqToCharSequence	scala/Predef.scala	/^  implicit def seqToCharSequence(xs: collection.IndexedSeq[Char]): CharSequence = new CharSequence {$/;"	m
seqToNodeSeq	scala/xml/NodeSeq.scala	/^  implicit def seqToNodeSeq(s: Seq[Node]): NodeSeq = fromSeq(s)$/;"	m
sequ	scala/io/BytePickle.scala	/^  def sequ[t,u](f: u => t, pa: SPU[t], k: t => SPU[u]): SPU[u] = new SPU[u] {$/;"	m
sequence	scala/util/parsing/ast/Binders.scala	/^  def sequence[bt <: NameElement, st <% Mappable[st]](orig: List[UnderBinder[bt, st]]): UnderBinder[bt, List[st]] = $/;"	m
sequenceToXML	scala/xml/Utility.scala	/^  def sequenceToXML($/;"	m
sequenceToXML	scala/xml/Xhtml.scala	/^  def sequenceToXML($/;"	m
serialVersionUID	scala/actors/threadpool/AtomicInteger.java	/^    private static final long serialVersionUID = 6214790243416807050L;$/;"	f	class:AtomicInteger	file:
serialVersionUID	scala/actors/threadpool/CancellationException.java	/^    private static final long serialVersionUID = -9202173006928992231L;$/;"	f	class:CancellationException	file:
serialVersionUID	scala/actors/threadpool/ExecutionException.java	/^    private static final long serialVersionUID = 7830266012832686185L;$/;"	f	class:ExecutionException	file:
serialVersionUID	scala/actors/threadpool/LinkedBlockingQueue.java	/^    private static final long serialVersionUID = -6903933977591709194L;$/;"	f	class:LinkedBlockingQueue	file:
serialVersionUID	scala/actors/threadpool/RejectedExecutionException.java	/^    private static final long serialVersionUID = -375805702767069545L;$/;"	f	class:RejectedExecutionException	file:
serialVersionUID	scala/actors/threadpool/SynchronousQueue.java	/^        private static final long serialVersionUID = -3223113410248163686L;$/;"	f	class:SynchronousQueue.Node	file:
serialVersionUID	scala/actors/threadpool/SynchronousQueue.java	/^        private static final long serialVersionUID = -3623113410248163686L;$/;"	f	class:SynchronousQueue.FifoWaitQueue	file:
serialVersionUID	scala/actors/threadpool/SynchronousQueue.java	/^        private static final long serialVersionUID = -3633113410248163686L;$/;"	f	class:SynchronousQueue.LifoWaitQueue	file:
serialVersionUID	scala/actors/threadpool/SynchronousQueue.java	/^    private static final long serialVersionUID = -3223113410248163686L;$/;"	f	class:SynchronousQueue	file:
serialVersionUID	scala/actors/threadpool/ThreadPoolExecutor.java	/^	private static final long serialVersionUID = 6138294804551838833L;$/;"	f	class:ThreadPoolExecutor.Worker	file:
serialVersionUID	scala/actors/threadpool/TimeoutException.java	/^    private static final long serialVersionUID = 1900926677490660714L;$/;"	f	class:TimeoutException	file:
serialVersionUID	scala/actors/threadpool/helpers/FIFOWaitQueue.java	/^    private final static long serialVersionUID = 2416444691925378811L;$/;"	f	class:FIFOWaitQueue	file:
serialVersionUID	scala/actors/threadpool/locks/CondVar.java	/^    private static final long serialVersionUID = -5009898475638427940L;$/;"	f	class:CondVar	file:
serialVersionUID	scala/actors/threadpool/locks/FIFOCondVar.java	/^    private static final long serialVersionUID = -497497271881010475L;$/;"	f	class:FIFOCondVar	file:
serialVersionUID	scala/actors/threadpool/locks/ReentrantLock.java	/^        private static final long serialVersionUID = -3000897897090466540L;$/;"	f	class:ReentrantLock.FairSync	file:
serialVersionUID	scala/actors/threadpool/locks/ReentrantLock.java	/^        private static final long serialVersionUID = -5179523762034025860L;$/;"	f	class:ReentrantLock.Sync	file:
serialVersionUID	scala/actors/threadpool/locks/ReentrantLock.java	/^        private static final long serialVersionUID = 7316153563782823691L;$/;"	f	class:ReentrantLock.NonfairSync	file:
serialVersionUID	scala/actors/threadpool/locks/ReentrantLock.java	/^    private static final long serialVersionUID = 7373984872572414699L;$/;"	f	class:ReentrantLock	file:
serialVersionUID	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        private static final long serialVersionUID = -2392241841540339773L;$/;"	f	class:ReentrantReadWriteLock.NonfairSync	file:
serialVersionUID	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        private static final long serialVersionUID = -4992448646407690164L;$/;"	f	class:ReentrantReadWriteLock.WriteLock	file:
serialVersionUID	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        private static final long serialVersionUID = -5992448646407690164L;$/;"	f	class:ReentrantReadWriteLock.ReadLock	file:
serialVersionUID	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    private static final long serialVersionUID = -3463448656717690166L;$/;"	f	class:ReentrantReadWriteLock	file:
serialVersionUID	scala/runtime/BooleanRef.java	/^    private static final long serialVersionUID = -5730524563015615974L;$/;"	f	class:BooleanRef	file:
serialVersionUID	scala/runtime/BoxedUnit.java	/^    private static final long serialVersionUID = 8405543498931817370L;$/;"	f	class:BoxedUnit	file:
serialVersionUID	scala/runtime/ByteRef.java	/^    private static final long serialVersionUID = -100666928446877072L;$/;"	f	class:ByteRef	file:
serialVersionUID	scala/runtime/CharRef.java	/^    private static final long serialVersionUID = 6537214938268005702L;$/;"	f	class:CharRef	file:
serialVersionUID	scala/runtime/DoubleRef.java	/^    private static final long serialVersionUID = 8304402127373655534L;$/;"	f	class:DoubleRef	file:
serialVersionUID	scala/runtime/FloatRef.java	/^    private static final long serialVersionUID = -5793980990371366933L;$/;"	f	class:FloatRef	file:
serialVersionUID	scala/runtime/IntRef.java	/^    private static final long serialVersionUID = 1488197132022872888L;$/;"	f	class:IntRef	file:
serialVersionUID	scala/runtime/LongRef.java	/^    private static final long serialVersionUID = -3567869820105829499L;$/;"	f	class:LongRef	file:
serialVersionUID	scala/runtime/ObjectRef.java	/^    private static final long serialVersionUID = -9055728157600312291L;$/;"	f	class:ObjectRef	file:
serialVersionUID	scala/runtime/ShortRef.java	/^    private static final long serialVersionUID = 4218441291229072313L;$/;"	f	class:ShortRef	file:
serialVersionUID	scala/runtime/VolatileBooleanRef.java	/^    private static final long serialVersionUID = -5730524563015615974L;$/;"	f	class:VolatileBooleanRef	file:
serialVersionUID	scala/runtime/VolatileByteRef.java	/^    private static final long serialVersionUID = -100666928446877072L;$/;"	f	class:VolatileByteRef	file:
serialVersionUID	scala/runtime/VolatileCharRef.java	/^    private static final long serialVersionUID = 6537214938268005702L;$/;"	f	class:VolatileCharRef	file:
serialVersionUID	scala/runtime/VolatileDoubleRef.java	/^    private static final long serialVersionUID = 8304402127373655534L;$/;"	f	class:VolatileDoubleRef	file:
serialVersionUID	scala/runtime/VolatileFloatRef.java	/^    private static final long serialVersionUID = -5793980990371366933L;$/;"	f	class:VolatileFloatRef	file:
serialVersionUID	scala/runtime/VolatileIntRef.java	/^    private static final long serialVersionUID = 1488197132022872888L;$/;"	f	class:VolatileIntRef	file:
serialVersionUID	scala/runtime/VolatileLongRef.java	/^    private static final long serialVersionUID = -3567869820105829499L;$/;"	f	class:VolatileLongRef	file:
serialVersionUID	scala/runtime/VolatileObjectRef.java	/^    private static final long serialVersionUID = -9055728157600312291L;$/;"	f	class:VolatileObjectRef	file:
serialVersionUID	scala/runtime/VolatileShortRef.java	/^    private static final long serialVersionUID = 4218441291229072313L;$/;"	f	class:VolatileShortRef	file:
serializable	scala/annotation/serializable.scala	/^class serializable extends annotation.StaticAnnotation$/;"	c
serializable	scala/package.scala	/^  type serializable = annotation.serializable$/;"	T
serialize	scala/actors/remote/JavaSerializer.scala	/^  def serialize(o: AnyRef): Array[Byte] = {$/;"	m
serialize	scala/actors/remote/Serializer.scala	/^  def serialize(o: AnyRef): Array[Byte]$/;"	m
serializer	scala/actors/remote/Service.scala	/^  val serializer: Serializer$/;"	l
serializer	scala/actors/remote/TcpService.scala	/^  val serializer: JavaSerializer = new JavaSerializer(this, cl)$/;"	l
serv	scala/actors/remote/RemoteActor.scala	/^        val serv = TcpService(TcpService.generatePort, cl)$/;"	l
serv	scala/actors/remote/RemoteActor.scala	/^    val serv = TcpService(port, cl)$/;"	l
service	scala/actors/remote/TcpService.scala	/^        val service = new TcpService(port, cl)$/;"	l
ses	scala/collection/parallel/mutable/ParHashTable.scala	/^        val ses = itertable(sidx - 1).asInstanceOf[Entry] \/\/ sidx - 1 ensures counting from the right spot$/;"	l
sessionMap	scala/actors/remote/Proxy.scala	/^  var sessionMap = new HashMap[OutputChannel[Any], Symbol]$/;"	l
set	scala/actors/threadpool/AtomicInteger.java	/^    public final synchronized void set(int newValue) {$/;"	m	class:AtomicInteger
set	scala/actors/threadpool/FutureTask.java	/^    protected void set(Object v) {$/;"	m	class:FutureTask
set	scala/collection/mutable/MultiMap.scala	/^        val set = makeSet$/;"	l
set	scala/concurrent/SyncVar.scala	/^  def set(x: A) = synchronized {$/;"	m
set	scala/concurrent/pilib.scala	/^    def set(f: () => Any) = synchronized {$/;"	m
set	scala/sys/BooleanProp.scala	/^    def set(newValue: String) = "" + value$/;"	m
set	scala/sys/Prop.scala	/^  def set(newValue: String): String$/;"	m
set	scala/sys/PropImpl.scala	/^  def set(newValue: String): String = {$/;"	m
setAsJavaSet	scala/collection/JavaConversions.scala	/^  implicit def setAsJavaSet[A](s: Set[A]): ju.Set[A] = s match {$/;"	m
setAsJavaSetConverter	scala/collection/JavaConverters.scala	/^  implicit def setAsJavaSetConverter[A](s : Set[A]): AsJava[ju.Set[A]] = $/;"	m
setBit	scala/math/BigInt.scala	/^  def setBit  (n: Int): BigInt  = new BigInt(this.bigInteger.setBit(n))$/;"	m
setCanBuildFrom	scala/collection/generic/GenSetFactory.scala	/^  def setCanBuildFrom[A] = new CanBuildFrom[CC[_], A, CC[A]] {$/;"	m
setCharAt	scala/collection/mutable/StringBuilder.scala	/^  def setCharAt(index: Int, ch: Char): Unit = underlying.setCharAt(index, ch)$/;"	m
setCompleted	scala/actors/threadpool/FutureTask.java	/^    private void setCompleted(Object result) {$/;"	m	class:FutureTask	file:
setContentModel	scala/xml/dtd/ElementValidator.scala	/^  def setContentModel(cm: ContentModel) = {$/;"	m
setCorePoolSize	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public void setCorePoolSize(int corePoolSize) {$/;"	m	class:ThreadPoolExecutor
setDocumentLocator	scala/xml/include/sax/XIncluder.scala	/^  def setDocumentLocator(locator: Locator) {}$/;"	m
setErr	scala/Console.scala	/^  def setErr(err: OutputStream): Unit =$/;"	m
setErr	scala/Console.scala	/^  def setErr(err: PrintStream) { errVar.value = err }$/;"	m
setEvent	scala/xml/pull/XMLEventReader.scala	/^    def setEvent(es: XMLEvent*): NodeSeq = {$/;"	m
setException	scala/actors/threadpool/FutureTask.java	/^    protected void setException(Throwable t) {$/;"	m	class:FutureTask
setFailed	scala/actors/threadpool/FutureTask.java	/^    private void setFailed(Throwable exception) {$/;"	m	class:FutureTask	file:
setFilter	scala/xml/include/sax/XIncluder.scala	/^  def setFilter(filter: XIncludeFilter) {$/;"	m
setIn	scala/Console.scala	/^  def setIn(in: InputStream) {$/;"	m
setIn	scala/Console.scala	/^  def setIn(reader: Reader) {$/;"	m
setIndexFlag	scala/collection/generic/Signalling.scala	/^  def setIndexFlag(f: Int) = signalDelegate.setIndexFlag(f)$/;"	m
setIndexFlag	scala/collection/generic/Signalling.scala	/^  def setIndexFlag(f: Int) {}$/;"	m
setIndexFlag	scala/collection/generic/Signalling.scala	/^  def setIndexFlag(f: Int)$/;"	m
setIndexFlagIfGreater	scala/collection/generic/Signalling.scala	/^  def setIndexFlagIfGreater(f: Int) = signalDelegate.setIndexFlagIfGreater(f)$/;"	m
setIndexFlagIfGreater	scala/collection/generic/Signalling.scala	/^  def setIndexFlagIfGreater(f: Int) {}$/;"	m
setIndexFlagIfGreater	scala/collection/generic/Signalling.scala	/^  def setIndexFlagIfGreater(f: Int)$/;"	m
setIndexFlagIfLesser	scala/collection/generic/Signalling.scala	/^  def setIndexFlagIfLesser(f: Int) = signalDelegate.setIndexFlagIfLesser(f)$/;"	m
setIndexFlagIfLesser	scala/collection/generic/Signalling.scala	/^  def setIndexFlagIfLesser(f: Int) {}$/;"	m
setIndexFlagIfLesser	scala/collection/generic/Signalling.scala	/^  def setIndexFlagIfLesser(f: Int)$/;"	m
setInternalSize	scala/collection/parallel/mutable/package.scala	/^    def setInternalSize(s: Int) = size0 = s$/;"	m
setItem	scala/actors/threadpool/SynchronousQueue.java	/^        synchronized boolean setItem(Object x) {$/;"	m	class:SynchronousQueue.Node
setKeepAliveTime	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public void setKeepAliveTime(long time, TimeUnit unit) {$/;"	m	class:ThreadPoolExecutor
setLength	scala/collection/mutable/StringBuilder.scala	/^  def setLength(len: Int) { underlying setLength len }$/;"	m
setMaximumPoolSize	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public void setMaximumPoolSize(int maximumPoolSize) {$/;"	m	class:ThreadPoolExecutor
setMetaData	scala/xml/dtd/ElementValidator.scala	/^  def setMetaData(adecls: List[AttrDecl]) { this.adecls = adecls }$/;"	m
setOut	scala/Console.scala	/^  def setOut(out: OutputStream): Unit =$/;"	m
setOut	scala/Console.scala	/^  def setOut(out: PrintStream) { outVar.value = out }$/;"	m
setPos	scala/reflect/generic/Trees.scala	/^    def setPos(pos: Position): this.type = { rawpos = pos; this }$/;"	m
setPos	scala/util/parsing/input/Positional.scala	/^  def setPos(newpos: Position): this.type = {$/;"	m
setProp	scala/util/Properties.scala	/^  def setProp(name: String, value: String)      = System.setProperty(name, value)$/;"	m
setProperty	scala/collection/JavaConversions.scala	/^    def setProperty(key: String, value: String) = underlying.setProperty(key, value)$/;"	m
setRejectedExecutionHandler	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public void setRejectedExecutionHandler(RejectedExecutionHandler handler) {$/;"	m	class:ThreadPoolExecutor
setRootCause	scala/xml/include/XIncludeException.scala	/^  def setRootCause(nestedException: Throwable ) {$/;"	m
setScale	scala/math/BigDecimal.scala	/^  def setScale(scale: Int): BigDecimal = this.bigDecimal setScale scale$/;"	m
setScale	scala/math/BigDecimal.scala	/^  def setScale(scale: Int, mode: RoundingMode): BigDecimal =$/;"	m
setSeed	scala/util/Random.scala	/^  def setSeed(seed: Long) { self.setSeed(seed) }$/;"	m
setSize	scala/collection/parallel/mutable/ParHashMap.scala	/^    def setSize(sz: Int) = tableSize = sz$/;"	m
setSize	scala/collection/parallel/mutable/ParHashSet.scala	/^    def setSize(sz: Int) = tableSize = sz$/;"	m
setSym	scala/reflect/generic/UnPickler.scala	/^      def setSym() {$/;"	m
setSymModsName	scala/reflect/generic/UnPickler.scala	/^      def setSymModsName() {$/;"	m
setSymName	scala/reflect/generic/UnPickler.scala	/^      def setSymName() {$/;"	m
setSymbol	scala/reflect/generic/Trees.scala	/^    def setSymbol(sym: Symbol): this.type = { symbol = sym; this }$/;"	m
setThreadFactory	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public void setThreadFactory(ThreadFactory threadFactory) {$/;"	m	class:ThreadPoolExecutor
setType	scala/reflect/generic/Trees.scala	/^    def setType(tp: Type): this.type = { rawtpe = tp; this } $/;"	m
setUp	scala/testing/Benchmark.scala	/^  def setUp() {$/;"	m
setUp	scala/testing/SUnit.scala	/^    def setUp() {}$/;"	m
setValue	scala/collection/JavaConversions.scala	/^            def setValue(v1 : B) = self.put(k, v1)$/;"	m
setValue	scala/sys/BooleanProp.scala	/^    def setValue[T1 >: Boolean](newValue: T1): Boolean = value$/;"	m
setValue	scala/sys/Prop.scala	/^  def setValue[T1 >: T](value: T1): T$/;"	m
setValue	scala/sys/PropImpl.scala	/^  def setValue[T1 >: T](newValue: T1): T = {$/;"	m
setter	scala/annotation/target/setter.scala	/^final class setter extends annotation.StaticAnnotation$/;"	c
share	scala/io/BytePickle.scala	/^  def share[a](pa: SPU[a]): SPU[a] = new SPU[a] {$/;"	m
shift	scala/collection/immutable/Vector.scala	/^        val shift = freeSpace & ~((1<<5*(depth-1))-1) \/\/ number of elements by which we'll shift right (only move at top level)$/;"	l
shift	scala/collection/immutable/Vector.scala	/^        val shift = startIndex & ~((1<<5*(depth-1))-1)$/;"	l
shift	scala/collection/immutable/Vector.scala	/^    val shift = (cutIndex & ~((1 << (5*d))-1))$/;"	l
shift	scala/collection/immutable/Vector.scala	/^    val shift = (startIndex & ~((1 << (5*d))-1))$/;"	l
shift	scala/util/continuations/package.scala	/^  def shift[A,B,C](fun: (A => B) => C): A @cpsParam[B,C] = {$/;"	m
shiftBlocks	scala/collection/immutable/Vector.scala	/^        val shiftBlocks = freeSpace >>> 5*(depth-1) \/\/ number of top-level blocks$/;"	l
shiftBlocks	scala/collection/immutable/Vector.scala	/^        val shiftBlocks = startIndex >>> 5*(depth-1)$/;"	l
shiftLogicalRight	scala/runtime/BoxesRunTime.java	/^    public static Object shiftLogicalRight(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
shiftR	scala/util/continuations/package.scala	/^  def shiftR[A,B,C](fun: (A => B) => C): ControlContext[A,B,C] = {$/;"	m
shiftSignedLeft	scala/runtime/BoxesRunTime.java	/^    public static Object shiftSignedLeft(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
shiftSignedRight	scala/runtime/BoxesRunTime.java	/^    public static Object shiftSignedRight(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
shiftUnit	scala/util/continuations/package.scala	/^  def shiftUnit[A,B,C>:B](x: A): A @cpsParam[B,C] = {$/;"	m
shiftUnit0	scala/util/continuations/package.scala	/^  def shiftUnit0[A,B](x: A): A @cpsParam[B,B] = {$/;"	m
shiftUnitR	scala/util/continuations/package.scala	/^  def shiftUnitR[A,B](x: A): ControlContext[A,B,B] = {$/;"	m
shifted	scala/collection/mutable/HashTable.scala	/^    val shifted = (improved >> (32 - java.lang.Integer.bitCount(ones))) & ones$/;"	l
short2Short	scala/Predef.scala	/^  implicit def short2Short(x: Short)        = java.lang.Short.valueOf(x)$/;"	m
short2ShortConflict	scala/Predef.scala	/^  implicit def short2ShortConflict(x: Short)        = new AnyRef$/;"	m
short2double	scala/Predef.scala	/^  implicit def short2double(x: Short): Double = x.toDouble$/;"	m
short2float	scala/Predef.scala	/^  implicit def short2float(x: Short): Float = x.toFloat$/;"	m
short2int	scala/Predef.scala	/^  implicit def short2int(x: Short): Int = x.toInt$/;"	m
short2long	scala/Predef.scala	/^  implicit def short2long(x: Short): Long = x.toLong$/;"	m
shortArrayOps	scala/Predef.scala	/^  implicit def shortArrayOps(xs: Array[Short]): ArrayOps[Short] = new ArrayOps.ofShort(xs)$/;"	m
shortBy	scala/collection/Iterator.scala	/^          val shortBy = count - res.length$/;"	l
shortForm	scala/xml/Xhtml.scala	/^    def shortForm = $/;"	m
shortValue	scala/reflect/generic/Constants.scala	/^    def shortValue: Short = tag match {$/;"	m
shortWrapper	scala/LowPriorityImplicits.scala	/^  implicit def shortWrapper(x: Short)     = new runtime.RichShort(x)$/;"	m
shortened	scala/collection/parallel/RemainsIterator.scala	/^      val shortened = for ((it, (from, until)) <- sq zip (sizes.init zip sizes.tail)) yield$/;"	l
shorter	scala/collection/generic/BitOperations.scala	/^    def shorter(m1: Int, m2: Int)               = unsignedCompare(m2, m1)$/;"	m
shorter	scala/collection/generic/BitOperations.scala	/^    def shorter(m1: Long, m2: Long)                = unsignedCompare(m2, m1)$/;"	m
shouldRethrow	scala/util/control/Exception.scala	/^  def shouldRethrow(x: Throwable): Boolean = x match {$/;"	m
shouldSplitFurther	scala/collection/parallel/ParIterableLike.scala	/^    def shouldSplitFurther = false$/;"	m
shouldSplitFurther	scala/collection/parallel/ParIterableLike.scala	/^    def shouldSplitFurther = pit.remaining > threshold(size, parallelismLevel)$/;"	m
shouldSplitFurther	scala/collection/parallel/ParIterableLike.scala	/^    def shouldSplitFurther = tree match {$/;"	m
shouldSplitFurther	scala/collection/parallel/Tasks.scala	/^    def shouldSplitFurther: Boolean$/;"	m
shouldSplitFurther	scala/collection/parallel/immutable/ParHashMap.scala	/^    def shouldSplitFurther = howmany > collection.parallel.thresholdFromSize(root.length, parallelismLevel)$/;"	m
shouldSplitFurther	scala/collection/parallel/immutable/ParHashSet.scala	/^    def shouldSplitFurther = howmany > collection.parallel.thresholdFromSize(root.length, parallelismLevel)$/;"	m
shouldSplitFurther	scala/collection/parallel/mutable/ParArray.scala	/^    def shouldSplitFurther = howmany > collection.parallel.thresholdFromSize(length, parallelismLevel)$/;"	m
shouldSplitFurther	scala/collection/parallel/mutable/ParArray.scala	/^    def shouldSplitFurther = tree match {$/;"	m
shouldSplitFurther	scala/collection/parallel/mutable/ParHashMap.scala	/^    def shouldSplitFurther = howmany > collection.parallel.thresholdFromSize(ParHashMapCombiner.numblocks, parallelismLevel)$/;"	m
shouldSplitFurther	scala/collection/parallel/mutable/ParHashSet.scala	/^    def shouldSplitFurther = howmany > collection.parallel.thresholdFromSize(ParHashMapCombiner.numblocks, parallelismLevel)$/;"	m
shouldSplitFurther	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^    def shouldSplitFurther = howmany > collection.parallel.thresholdFromSize(size, parallelismLevel)$/;"	m
shouldSplitFurther	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^    def shouldSplitFurther = howmany > collection.parallel.thresholdFromSize(size, parallelismLevel)$/;"	m
shouldUnlink	scala/actors/threadpool/SynchronousQueue.java	/^        abstract boolean shouldUnlink(Node node);$/;"	m	class:SynchronousQueue.WaitQueue
shouldUnlink	scala/actors/threadpool/SynchronousQueue.java	/^        boolean shouldUnlink(Node node) {$/;"	m	class:SynchronousQueue.FifoWaitQueue
shouldUnlink	scala/actors/threadpool/SynchronousQueue.java	/^        boolean shouldUnlink(Node node) {$/;"	m	class:SynchronousQueue.LifoWaitQueue
shuffle	scala/util/Random.scala	/^  def shuffle[T, CC[X] <: TraversableOnce[X]](xs: CC[T])(implicit bf: CanBuildFrom[CC[T], T, CC[T]]): CC[T] = {$/;"	m
shutdown	scala/actors/IScheduler.scala	/^  def shutdown(): Unit$/;"	m
shutdown	scala/actors/SchedulerAdapter.scala	/^  def shutdown(): Unit =$/;"	m
shutdown	scala/actors/scheduler/DelegatingScheduler.scala	/^  def shutdown(): Unit = synchronized {$/;"	m
shutdown	scala/actors/scheduler/ForkJoinScheduler.scala	/^  def shutdown(): Unit = synchronized {$/;"	m
shutdown	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^  def shutdown(): Unit = synchronized {$/;"	m
shutdown	scala/actors/scheduler/SingleThreadedScheduler.scala	/^  def shutdown() {$/;"	m
shutdown	scala/actors/scheduler/TerminationService.scala	/^  def shutdown(): Unit = synchronized {$/;"	m
shutdown	scala/actors/threadpool/ExecutorService.java	/^    void shutdown();$/;"	m	interface:ExecutorService
shutdown	scala/actors/threadpool/Executors.java	/^        public void shutdown() { e.shutdown(); }$/;"	m	class:Executors.DelegatedExecutorService
shutdown	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public void shutdown() {$/;"	m	class:ThreadPoolExecutor
shutdown	scala/concurrent/JavaConversions.scala	/^      def shutdown() =$/;"	m
shutdown	scala/concurrent/JavaConversions.scala	/^      def shutdown() {$/;"	m
shutdown	scala/concurrent/TaskRunner.scala	/^  def shutdown(): Unit$/;"	m
shutdown	scala/concurrent/ThreadRunner.scala	/^  def shutdown() {$/;"	m
shutdownNow	scala/actors/threadpool/ExecutorService.java	/^    List shutdownNow();$/;"	m	interface:ExecutorService
shutdownNow	scala/actors/threadpool/Executors.java	/^        public List shutdownNow() { return e.shutdownNow(); }$/;"	m	class:Executors.DelegatedExecutorService
shutdownNow	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public List shutdownNow() {$/;"	m	class:ThreadPoolExecutor
shutdownPerm	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private static final RuntimePermission shutdownPerm =$/;"	f	class:ThreadPoolExecutor	file:
sidx	scala/collection/parallel/mutable/ParHashTable.scala	/^        val sidx = idx + divsz + 1 \/\/ + 1 preserves iteration invariant$/;"	l
sign	scala/util/parsing/json/Lexer.scala	/^  def sign = elem("sign character", d => d == '-' || d == '+')$/;"	m
signal	scala/actors/threadpool/helpers/WaitQueue.java	/^        public synchronized boolean signal(QueuedSync sync) {$/;"	m	class:WaitQueue.WaitNode
signal	scala/actors/threadpool/locks/CondVar.java	/^    public synchronized void signal() {$/;"	m	class:CondVar
signal	scala/actors/threadpool/locks/Condition.java	/^    void signal();$/;"	m	interface:Condition
signal	scala/actors/threadpool/locks/FIFOCondVar.java	/^    public void signal() {$/;"	m	class:FIFOCondVar
signalAll	scala/actors/threadpool/locks/CondVar.java	/^    public synchronized void signalAll() {$/;"	m	class:CondVar
signalAll	scala/actors/threadpool/locks/Condition.java	/^    void signalAll();$/;"	m	interface:Condition
signalAll	scala/actors/threadpool/locks/FIFOCondVar.java	/^    public void signalAll() {$/;"	m	class:FIFOCondVar
signalDelegate	scala/collection/generic/Signalling.scala	/^  var signalDelegate: Signalling$/;"	l
signalDelegate	scala/collection/parallel/ParIterableLike.scala	/^    var signalDelegate: Signalling = IdleSignalling$/;"	l
signalDelegate	scala/collection/parallel/RemainsIterator.scala	/^    var signalDelegate = self.signalDelegate$/;"	l
signalNotEmpty	scala/actors/threadpool/LinkedBlockingQueue.java	/^    private void signalNotEmpty() {$/;"	m	class:LinkedBlockingQueue	file:
signalNotFull	scala/actors/threadpool/LinkedBlockingQueue.java	/^    private void signalNotFull() {$/;"	m	class:LinkedBlockingQueue	file:
signalWaiters	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized void signalWaiters() {$/;"	m	class:ReentrantReadWriteLock.ReadLock
signalWaiters	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized void signalWaiters() {$/;"	m	class:ReentrantReadWriteLock.WriteLock
signature	scala/reflect/generic/StandardDefinitions.scala	/^    def signature(tp: Type): String$/;"	m
signum	scala/MathCommon.scala	/^  def signum(x: Double): Double =$/;"	m
signum	scala/MathCommon.scala	/^  def signum(x: Float): Float = $/;"	m
signum	scala/MathCommon.scala	/^  def signum(x: Int): Int = $/;"	m
signum	scala/MathCommon.scala	/^  def signum(x: Long): Long = $/;"	m
signum	scala/math/BigDecimal.scala	/^  def signum: Int = this.bigDecimal.signum()$/;"	m
signum	scala/math/BigInt.scala	/^  def signum: Int = this.bigInteger.signum()$/;"	m
signum	scala/math/Numeric.scala	/^    def signum(): Int = Numeric.this.signum(lhs)$/;"	m
signum	scala/math/Numeric.scala	/^  def signum(x: T): Int =$/;"	m
signum	scala/runtime/ScalaNumberProxy.scala	/^  def signum          = num.signum(self)$/;"	m
sin	scala/MathCommon.scala	/^  def sin(x: Double): Double = java.lang.Math.sin(x)$/;"	m
single	scala/collection/Iterator.scala	/^  def single[A](elem: A) = new Iterator[A] {$/;"	m
singleCase	scala/actors/Future.scala	/^      val singleCase: PartialFunction[Any, Pair[Int, Any]] = {$/;"	l
singleType	scala/reflect/ClassManifest.scala	/^  def singleType[T <: AnyRef](value: AnyRef): Manifest[T] = Manifest.singleType(value)$/;"	m
singleType	scala/reflect/Manifest.scala	/^  def singleType[T <: AnyRef](value: AnyRef): Manifest[T] =$/;"	m
singleton	scala/collection/Seq.scala	/^  def singleton[A](value: A) = Seq(value) $/;"	m
singleton	scala/collection/immutable/IntMap.scala	/^  def singleton[T](key : Int, value : T) : IntMap[T] = IntMap.Tip(key, value);$/;"	m
singleton	scala/collection/immutable/LongMap.scala	/^  def singleton[T](key : Long, value : T) : LongMap[T] = LongMap.Tip(key, value);$/;"	m
sinh	scala/math/package.scala	/^  def sinh(x: Double): Double = java.lang.Math.sinh(x)$/;"	m
sink	scala/sys/process/ProcessImpl.scala	/^      val sink        = new PipeSink(pipeIn, currentSink, b.toString)$/;"	l
sink	scala/util/automata/SubsetConstruction.scala	/^    val sink = BitSet.empty       \/\/ the set { }$/;"	l
size	scala/actors/Future.scala	/^    val size = resultsMap.size$/;"	l
size	scala/actors/MessageQueue.scala	/^  def size = _size$/;"	m
size	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public int size() {$/;"	m	class:LinkedBlockingQueue
size	scala/actors/threadpool/SynchronousQueue.java	/^    public int size() {$/;"	m	class:SynchronousQueue
size	scala/collection/GenTraversableLike.scala	/^  def size: Int$/;"	m
size	scala/collection/GenTraversableOnce.scala	/^  def size: Int$/;"	m
size	scala/collection/JavaConversions.scala	/^      def size = self.size$/;"	m
size	scala/collection/JavaConversions.scala	/^    def size = underlying.size$/;"	m
size	scala/collection/JavaConversions.scala	/^    def size: Int = underlying.size$/;"	m
size	scala/collection/TraversableOnce.scala	/^  def size: Int = {$/;"	m
size	scala/collection/generic/Sizing.scala	/^  def size: Int$/;"	m
size	scala/collection/immutable/Vector.scala	/^    val size = blockIndex + lo$/;"	l
size	scala/collection/immutable/package.scala	/^      val size = end.toLong - start.toLong$/;"	l
size	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def size: Int$/;"	m
size	scala/collection/mutable/FlatHashTable.scala	/^    val size = in.readInt$/;"	l
size	scala/collection/mutable/HashTable.scala	/^    val size = in.readInt$/;"	l
size	scala/collection/parallel/ParIterableLike.scala	/^    def size = splitter.remaining$/;"	m
size	scala/collection/parallel/ParIterableView.scala	/^    def size = throw new UnsupportedOperationException("ParIterableView.Combiner.size")$/;"	m
size	scala/collection/parallel/ParIterableViewLike.scala	/^    def size = splitter.remaining$/;"	m
size	scala/collection/parallel/ParSeqView.scala	/^    def size = throw new UnsupportedOperationException("ParSeqView.Combiner.size")$/;"	m
size	scala/collection/parallel/immutable/ParVector.scala	/^  def size: Int = sz$/;"	m
size	scala/collection/parallel/mutable/LazyCombiner.scala	/^  def size = chain.foldLeft(0)(_ + _.size)$/;"	m
size	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^  def size = buff.size$/;"	m
size	scala/collection/parallel/package.scala	/^    def size = sz$/;"	m
sizeHint	scala/collection/mutable/Builder.scala	/^  def sizeHint(coll: TraversableLike[_, _], delta: Int = 0) {$/;"	m
sizeHint	scala/collection/mutable/Builder.scala	/^  def sizeHint(size: Int) {}$/;"	m
sizeHintBounded	scala/collection/mutable/Builder.scala	/^  def sizeHintBounded(size: Int, boundingColl: TraversableLike[_, _]) {$/;"	m
sizeNew	scala/collection/immutable/HashMap.scala	/^            val sizeNew = size - sub.size$/;"	l
sizeNew	scala/collection/immutable/HashMap.scala	/^          val sizeNew = size + (subNew.size - sub.size)$/;"	l
sizeNew	scala/collection/immutable/HashSet.scala	/^            val sizeNew = size - sub.size$/;"	l
sizeNew	scala/collection/immutable/HashSet.scala	/^          val sizeNew = size + (subNew.size - sub.size)$/;"	l
sizemap	scala/collection/mutable/FlatHashTable.scala	/^    val sizemap: Array[Int]$/;"	l
sizemap	scala/collection/mutable/HashTable.scala	/^    val sizemap: Array[Int]$/;"	l
sizes	scala/collection/parallel/ParIterableLike.scala	/^      val sizes = pits.map(_.remaining)$/;"	l
sizes	scala/collection/parallel/ParIterableLike.scala	/^      val sizes = pits.scanLeft(0)(_ + _.remaining)$/;"	l
sizes	scala/collection/parallel/RemainsIterator.scala	/^      val sizes = selfs.map(_.remaining)$/;"	l
sizes	scala/collection/parallel/RemainsIterator.scala	/^      val sizes = sq.scanLeft(0)(_ + _.remaining)$/;"	l
sizes	scala/collection/parallel/mutable/ParArray.scala	/^      val sizes = if (total >= left) sizesIncomplete else sizesIncomplete :+ (left - total)$/;"	l
skip	scala/collection/Iterator.scala	/^      def skip() = $/;"	m
skipWhitespace	scala/util/parsing/combinator/RegexParsers.scala	/^  def skipWhitespace = whiteSpace.toString.length > 0$/;"	m
skippedEntity	scala/xml/include/sax/XIncluder.scala	/^  def skippedEntity(name: String) {$/;"	m
sleep	scala/actors/threadpool/TimeUnit.java	/^    public void sleep(long timeout) throws InterruptedException {$/;"	m	class:TimeUnit
slice	scala/collection/GenTraversableLike.scala	/^  def slice(unc_from: Int, unc_until: Int): Repr$/;"	m
slice	scala/collection/IndexedSeqOptimized.scala	/^  def slice(from: Int, until: Int): Repr = {$/;"	m
slice	scala/collection/Iterator.scala	/^  def slice(from: Int, until: Int): Iterator[A] = {$/;"	m
slice	scala/collection/LinearSeqOptimized.scala	/^  def slice(from: Int, until: Int): Repr = {$/;"	m
slice	scala/collection/TraversableLike.scala	/^  def slice(from: Int, until: Int): Repr = sliceWithKnownBound(math.max(from, 0), until)$/;"	m
slice	scala/collection/immutable/PagedSeq.scala	/^  def slice(start: Int): PagedSeq[T] = slice(start, UndeterminedEnd)$/;"	m
slice	scala/collection/interfaces/TraversableMethods.scala	/^  def slice(from: Int, until: Int): Traversable[A]$/;"	m
slice2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def slice2combiner[U >: T, This](from: Int, until: Int, cb: Combiner[U, This]): Combiner[U, This] = {$/;"	m
sliceElems	scala/collection/LinearSeqOptimized.scala	/^    var sliceElems = until - count$/;"	l
sliding	scala/collection/IterableLike.scala	/^  def sliding[B >: A](size: Int): Iterator[Repr] = sliding(size, 1)$/;"	m
sliding	scala/collection/IterableLike.scala	/^  def sliding[B >: A](size: Int, step: Int): Iterator[Repr] =$/;"	m
sliding	scala/collection/Iterator.scala	/^  def sliding[B >: A](size: Int, step: Int = 1): GroupedIterator[B] =$/;"	m
sliding	scala/collection/interfaces/IterableMethods.scala	/^  def sliding[B >: A](size: Int): Iterator[Iterable[A]]$/;"	m
sliding	scala/collection/interfaces/IterableMethods.scala	/^  def sliding[B >: A](size: Int, step: Int): Iterator[Iterable[A]]$/;"	m
smDefined	scala/collection/mutable/FlatHashTable.scala	/^    val smDefined = in.readBoolean$/;"	l
smDefined	scala/collection/mutable/HashTable.scala	/^    val smDefined = in.readBoolean$/;"	l
smaller	scala/xml/Utility.scala	/^    val smaller = sort(md.filter { m => m.key < key })$/;"	l
smallest	scala/collection/immutable/RedBlack.scala	/^    def smallest: NonEmpty[B] = if (left.isEmpty) this else left.smallest$/;"	m
smallest	scala/collection/immutable/RedBlack.scala	/^    def smallest: NonEmpty[B]$/;"	m
smallest	scala/collection/immutable/RedBlack.scala	/^    def smallest: NonEmpty[Nothing] = throw new NoSuchElementException("empty map")$/;"	m
snapshot	scala/actors/Scheduler.scala	/^  def snapshot() {$/;"	m
snapshot	scala/actors/scheduler/ForkJoinScheduler.scala	/^  def snapshot() = synchronized {$/;"	m
snapshot	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^  def snapshot() = synchronized {$/;"	m
snd	scala/collection/immutable/TrieIterator.scala	/^          val snd = Array[Iterable[T]](arrayStack(0).last)$/;"	l
snd	scala/io/BytePickle.scala	/^    def snd(p: (a,b)): b = p._2$/;"	m
snd	scala/io/BytePickle.scala	/^    def snd(p: (a,b,c)): b = p._2$/;"	m
sndidx	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val sndidx = divpt$/;"	l
sndit	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val sndit = newIterator(sndidx, snduntil, sndtotal)$/;"	l
sndlength	scala/collection/parallel/immutable/ParHashMap.scala	/^        val sndlength = previousRemaining - fstlength$/;"	l
sndlength	scala/collection/parallel/immutable/ParHashSet.scala	/^        val sndlength = previousRemaining - fstlength$/;"	l
sndtotal	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val sndtotal = remaining - fsttotal$/;"	l
snduntil	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val snduntil = until$/;"	l
socket	scala/actors/remote/TcpService.scala	/^      val socket = new ServerSocket(port)$/;"	l
socket	scala/actors/remote/TcpService.scala	/^      val socket = new ServerSocket(portnum)$/;"	l
socket	scala/actors/remote/TcpService.scala	/^    val socket = new Socket(n.address, n.port)$/;"	l
some	scala/collection/parallel/mutable/ParArray.scala	/^      var some = false$/;"	l
someKernel	scala/actors/remote/RemoteActor.scala	/^  def someKernel: NetKernel =$/;"	m
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(Object[] a) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(Object[] a, Comparator c) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(Object[] a, int fromIndex, int toIndex) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(Object[] a, int fromIndex, int toIndex, Comparator c) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(byte[] a) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(byte[] a, int fromIndex, int toIndex) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(char[] a) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(char[] a, int fromIndex, int toIndex) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(double[] a) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(double[] a, int fromIndex, int toIndex) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(float[] a) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(float[] a, int fromIndex, int toIndex) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(int[] a) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(int[] a, int fromIndex, int toIndex) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(long[] a) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(long[] a, int fromIndex, int toIndex) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(short[] a) {$/;"	m	class:Arrays
sort	scala/actors/threadpool/Arrays.java	/^    public static void sort(short[] a, int fromIndex, int toIndex) {$/;"	m	class:Arrays
sort	scala/collection/immutable/List.scala	/^  def sort(lt : (A,A) => Boolean): List[A] = {$/;"	m
sort	scala/xml/Utility.scala	/^  def sort(md: MetaData): MetaData = if((md eq Null) || (md.next eq Null)) md else {$/;"	m
sort	scala/xml/Utility.scala	/^  def sort(n:Node): Node = n match {$/;"	m
sort2	scala/util/Sorting.scala	/^    def sort2(off: Int, len: Int) {$/;"	m
sortBy	scala/collection/SeqLike.scala	/^  def sortBy[B](f: A => B)(implicit ord: Ordering[B]): Repr = sorted(ord on f)$/;"	m
sortBy	scala/collection/interfaces/SeqMethods.scala	/^  def sortBy[B](f: A => B)(implicit ord: Ordering[B]): This$/;"	m
sortWith	scala/collection/SeqLike.scala	/^  def sortWith(lt: (A, A) => Boolean): Repr = sorted(Ordering fromLessThan lt)$/;"	m
sortWith	scala/collection/interfaces/SeqMethods.scala	/^  def sortWith(lt: (A, A) => Boolean): This$/;"	m
sorted	scala/collection/SeqLike.scala	/^  def sorted[B >: A](implicit ord: Ordering[B]): Repr = {$/;"	m
sorted	scala/collection/interfaces/SeqMethods.scala	/^  def sorted[B >: A](implicit ord: Ordering[B]): This$/;"	m
source	scala/sys/process/ProcessImpl.scala	/^      val source        = new PipeSource(currentSource, pipeOut, a.toString)$/;"	l
source	scala/util/matching/Regex.scala	/^    val source: java.lang.CharSequence$/;"	l
source	scala/util/parsing/combinator/RegexParsers.scala	/^      val source = in.source$/;"	l
source	scala/util/parsing/input/Reader.scala	/^  def source: java.lang.CharSequence = $/;"	m
source	scala/xml/include/sax/XIncludeFilter.scala	/^    val source =$/;"	l
source	scala/xml/include/sax/XIncludeFilter.scala	/^    var source: URL = null$/;"	l
sourceEncoding	scala/util/Properties.scala	/^  def sourceEncoding        = scalaPropOrElse("file.encoding", "UTF-8")$/;"	m
sourceModule	scala/reflect/generic/Symbols.scala	/^    def sourceModule: Symbol = NoSymbol$/;"	m
sourceModule_	scala/reflect/generic/Symbols.scala	/^    def sourceModule_=(sym: Symbol)  { throw new UnsupportedOperationException("sourceModule_= inapplicable for " + this) }$/;"	m
sourceReader	scala/util/Properties.scala	/^  def sourceReader          = scalaPropOrElse("source.reader", "scala.tools.nsc.io.SourceReader")$/;"	m
sp	scala/collection/parallel/ParSeqLike.scala	/^      val sp = len - len \/ 2$/;"	l
sp	scala/collection/parallel/ParSeqLike.scala	/^      val sp = pit.remaining - fp$/;"	l
space	scala/xml/XML.scala	/^  val space     = "space"$/;"	l
spaces	scala/text/Document.scala	/^    def spaces(n: Int) {$/;"	m
span	scala/collection/GenTraversableLike.scala	/^  def span(pred: A => Boolean): (Repr, Repr)$/;"	m
span	scala/collection/IndexedSeqOptimized.scala	/^  def span(p: A => Boolean): (Repr, Repr) = splitAt(prefixLength(p))$/;"	m
span	scala/collection/Iterator.scala	/^  def span(p: A => Boolean): (Iterator[A], Iterator[A]) = {$/;"	m
span	scala/collection/LinearSeqOptimized.scala	/^  def span(p: A => Boolean): (Repr, Repr) = {$/;"	m
span	scala/collection/TraversableLike.scala	/^  def span(p: A => Boolean): (Repr, Repr) = {$/;"	m
span	scala/collection/interfaces/TraversableMethods.scala	/^  def span(p: A => Boolean): (Traversable[A], Traversable[A])$/;"	m
span	scala/collection/parallel/ParIterableLike.scala	/^  def span(pred: T => Boolean): (Repr, Repr) = {$/;"	m
span2combiners	scala/collection/parallel/RemainsIterator.scala	/^  def span2combiners[U >: T, This](p: T => Boolean, before: Combiner[U, This], after: Combiner[U, This]) = {$/;"	m
spawn	scala/concurrent/ops.scala	/^  def spawn(p: => Unit)(implicit runner: TaskRunner = defaultRunner): Unit = {$/;"	m
spawn	scala/concurrent/pilib.scala	/^  val spawn = new Spawn {$/;"	l
spawnSubtasks	scala/collection/parallel/Tasks.scala	/^    def spawnSubtasks() = {$/;"	m
specialized	scala/package.scala	/^  type specialized = annotation.specialized$/;"	T
specialized	scala/specialized.scala	/^class specialized(types: SpecializableCompanion*) extends annotation.StaticAnnotation {$/;"	c
split	scala/collection/immutable/HashMap.scala	/^  def split: Seq[HashMap[A, B]] = Seq(this)$/;"	m
split	scala/collection/immutable/List.scala	/^    def split(lst: List[A]) = {$/;"	m
split	scala/collection/immutable/StringLike.scala	/^  def split(separator: Char): Array[String] = toString.split(escape(separator))$/;"	m
split	scala/collection/immutable/StringLike.scala	/^  def split(separators: Array[Char]): Array[String] = {$/;"	m
split	scala/collection/immutable/TrieIterator.scala	/^  def split: SplitIterators = {$/;"	m
split	scala/collection/parallel/ParIterableLike.scala	/^    def split = pit.split.map(newSubtask(_)) \/\/ default split procedure$/;"	m
split	scala/collection/parallel/ParIterableLike.scala	/^    def split = throw new UnsupportedOperationException("Does not split.")$/;"	m
split	scala/collection/parallel/ParIterableLike.scala	/^    def split = tree match {$/;"	m
split	scala/collection/parallel/ParIterableLike.scala	/^    def split: Seq[IterableSplitter[T]]$/;"	m
split	scala/collection/parallel/ParSeqLike.scala	/^    def split = psplit(remaining \/ 2, remaining - remaining \/ 2)$/;"	m
split	scala/collection/parallel/ParSeqLike.scala	/^    def split: Seq[ParIterator]$/;"	m
split	scala/collection/parallel/PreciseSplitter.scala	/^  def split: Seq[PreciseSplitter[T]]$/;"	m
split	scala/collection/parallel/RemainsIterator.scala	/^    def split = trio.split$/;"	m
split	scala/collection/parallel/RemainsIterator.scala	/^    def split: Seq[IterableSplitter[(T, S)]] = {$/;"	m
split	scala/collection/parallel/RemainsIterator.scala	/^    def split: Seq[IterableSplitter[(U, S)]] = {$/;"	m
split	scala/collection/parallel/RemainsIterator.scala	/^    def split: Seq[IterableSplitter[S]] = self.split.map { _ map f }$/;"	m
split	scala/collection/parallel/RemainsIterator.scala	/^    def split: Seq[IterableSplitter[T]] = takeSeq(self.split) { (p, n) => p.take(n) }$/;"	m
split	scala/collection/parallel/RemainsIterator.scala	/^    def split: Seq[IterableSplitter[U]] = if (firstNonEmpty) Seq(curr, that) else curr.split$/;"	m
split	scala/collection/parallel/RemainsIterator.scala	/^  def split: Seq[IterableSplitter[T]]$/;"	m
split	scala/collection/parallel/RemainsIterator.scala	/^  def split: Seq[SeqSplitter[T]]$/;"	m
split	scala/collection/parallel/Splitter.scala	/^    def split = Seq(this)$/;"	m
split	scala/collection/parallel/Splitter.scala	/^  def split: Seq[Splitter[T]]$/;"	m
split	scala/collection/parallel/Tasks.scala	/^    def split = body.split.map(b => newTaskImpl(b))$/;"	m
split	scala/collection/parallel/Tasks.scala	/^    def split: Seq[TaskImpl[R, Tp]]$/;"	m
split	scala/collection/parallel/immutable/ParHashMap.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/immutable/ParHashMap.scala	/^    def split: Seq[ParIterator] = if (remaining < 2) Seq(this) else triter match {$/;"	m
split	scala/collection/parallel/immutable/ParHashSet.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/immutable/ParHashSet.scala	/^    def split: Seq[ParIterator] = if (remaining < 2) Seq(this) else triter match {$/;"	m
split	scala/collection/parallel/immutable/ParRange.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/immutable/ParVector.scala	/^    def split: Seq[ParVectorIterator] = {$/;"	m
split	scala/collection/parallel/immutable/package.scala	/^      def split = psplit(remaining \/ 2, remaining - remaining \/ 2)$/;"	m
split	scala/collection/parallel/mutable/ParArray.scala	/^    def split = tree match {$/;"	m
split	scala/collection/parallel/mutable/ParArray.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^    def split = if (remaining > 1) {$/;"	m
split	scala/collection/parallel/mutable/ParHashMap.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/mutable/ParHashSet.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/mutable/ParHashTable.scala	/^    def split: Seq[IterableSplitter[T]] = if (remaining > 1) {$/;"	m
split	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/package.scala	/^    def split: Seq[IterableSplitter[T]] = if (remaining > 1) {$/;"	m
split	scala/util/matching/Regex.scala	/^  def split(toSplit: java.lang.CharSequence): Array[String] =$/;"	m
splitAt	scala/collection/GenTraversableLike.scala	/^  def splitAt(n: Int): (Repr, Repr)$/;"	m
splitAt	scala/collection/IndexedSeqOptimized.scala	/^  def splitAt(n: Int): (Repr, Repr) = (take(n), drop(n))$/;"	m
splitAt	scala/collection/TraversableLike.scala	/^  def splitAt(n: Int): (Repr, Repr) = {$/;"	m
splitAt	scala/collection/interfaces/TraversableMethods.scala	/^  def splitAt(n: Int): (Traversable[A], Traversable[A])$/;"	m
splitAt	scala/collection/parallel/ParIterableLike.scala	/^  def splitAt(n: Int): (Repr, Repr) = {$/;"	m
splitAt2combiners	scala/collection/parallel/RemainsIterator.scala	/^  def splitAt2combiners[U >: T, This](at: Int, before: Combiner[U, This], after: Combiner[U, This]) = {$/;"	m
splitpoint	scala/collection/immutable/HashMap.scala	/^        val splitpoint = nodesize \/ 2$/;"	l
splitpoint	scala/collection/parallel/mutable/ParArray.scala	/^        val splitpoint = left \/ 2$/;"	l
splitsizes	scala/collection/parallel/RemainsIterator.scala	/^      val splitsizes = sizes.zip(szcum.init zip szcum.tail).flatMap { t =>$/;"	l
splitted	scala/collection/parallel/immutable/ParVector.scala	/^      val splitted = new ArrayBuffer[Vector[T]]$/;"	l
splitter	scala/collection/parallel/ParIterableLike.scala	/^    def splitter = self.splitter$/;"	m
splitter	scala/collection/parallel/ParIterableViewLike.scala	/^    def splitter: IterableSplitter[(T, S)] = self.splitter zipParSeq otherPar.splitter$/;"	m
splitter	scala/collection/parallel/ParIterableViewLike.scala	/^    def splitter: IterableSplitter[(U, S)] = self.splitter.zipAllParSeq(otherPar.splitter, thisElem, thatElem)$/;"	m
splitter	scala/collection/parallel/ParIterableViewLike.scala	/^    def splitter: IterableSplitter[S] = forcedPar.splitter$/;"	m
splitter	scala/collection/parallel/ParIterableViewLike.scala	/^    def splitter: IterableSplitter[S] = self.splitter.map(mapping)$/;"	m
splitter	scala/collection/parallel/ParIterableViewLike.scala	/^    def splitter: IterableSplitter[T] = self.splitter.slice(from, until)$/;"	m
splitter	scala/collection/parallel/ParIterableViewLike.scala	/^    def splitter: IterableSplitter[U] = self.splitter.appendParIterable[U, IterableSplitter[U]](restPar.splitter)$/;"	m
splitter	scala/collection/parallel/ParSeqLike.scala	/^    def splitter = self.splitter$/;"	m
splitter	scala/collection/parallel/immutable/ParHashMap.scala	/^  def splitter: IterableSplitter[(K, V)] = new ParHashMapIterator(trie.iterator, trie.size) with SCPI$/;"	m
splitter	scala/collection/parallel/immutable/ParHashSet.scala	/^  def splitter: IterableSplitter[T] = new ParHashSetIterator(trie.iterator, trie.size) with SCPI$/;"	m
splitter	scala/collection/parallel/immutable/ParRange.scala	/^  def splitter = new ParRangeIterator with SCPI$/;"	m
splitter	scala/collection/parallel/immutable/ParVector.scala	/^  def splitter: SeqSplitter[T] = {$/;"	m
splitter	scala/collection/parallel/immutable/package.scala	/^    def splitter = new ParIterator with SCPI$/;"	m
splitter	scala/collection/parallel/mutable/ParHashMap.scala	/^  def splitter = new ParHashMapIterator(1, table.length, size, table(0).asInstanceOf[DefaultEntry[K, V]]) with SCPI$/;"	m
splitter	scala/collection/parallel/mutable/ParHashSet.scala	/^  def splitter = new ParHashSetIterator(0, table.length, size) with SCPI$/;"	m
sq	scala/collection/parallel/mutable/ParArray.scala	/^        val sq = Seq($/;"	l
sq	scala/xml/PrettyPrinter.scala	/^             val sq:Seq[String] = stg.split(" ");$/;"	l
sqrt	scala/MathCommon.scala	/^  def sqrt(x: Double): Double = java.lang.Math.sqrt(x)$/;"	m
src	scala/collection/SeqLike.scala	/^      val src = source.slice(sourceOffset, sourceCount) drop toDrop$/;"	l
src	scala/collection/SeqLike.scala	/^      val src = source.slice(sourceOffset, sourceCount) take toTake reverse$/;"	l
src	scala/xml/persistent/CachedFileStorage.scala	/^    val src = Source.fromFile(theFile)$/;"	l
srcClass	scala/Array.scala	/^    val srcClass = src.getClass$/;"	l
srcUntil	scala/Array.scala	/^    val srcUntil = srcPos + length$/;"	l
srclen	scala/reflect/generic/ByteCodecs.scala	/^    val srclen = src.length$/;"	l
stableSort	scala/util/Sorting.scala	/^  def stableSort[K: ClassManifest, M: Ordering](a: Seq[K], f: K => M): Array[K] =$/;"	m
stableSort	scala/util/Sorting.scala	/^  def stableSort[K: ClassManifest: Ordering](a: Array[K]) {$/;"	m
stableSort	scala/util/Sorting.scala	/^  def stableSort[K: ClassManifest: Ordering](a: Seq[K]): Array[K] =$/;"	m
stableSort	scala/util/Sorting.scala	/^  def stableSort[K: ClassManifest](a: Array[K], f: (K, K) => Boolean) {$/;"	m
stableSort	scala/util/Sorting.scala	/^  def stableSort[K: ClassManifest](a: Seq[K], f: (K, K) => Boolean): Array[K] = {$/;"	m
standAlone	scala/xml/Document.scala	/^  var standAlone: Option[Boolean] = _$/;"	l
standard	scala/sys/process/BasicIO.scala	/^  def standard(connectInput: Boolean): ProcessIO = standard(input(connectInput))$/;"	m
standard	scala/sys/process/BasicIO.scala	/^  def standard(in: OutputStream => Unit): ProcessIO = new ProcessIO(in, toStdOut, toStdErr)$/;"	m
start	scala/actors/Reactor.scala	/^  def start(): Reactor[Msg] = synchronized {$/;"	m
start	scala/actors/scheduler/ForkJoinScheduler.scala	/^  def start() {$/;"	m
start	scala/collection/IndexedSeqOptimized.scala	/^    val start = from max 0$/;"	l
start	scala/collection/generic/SliceInterval.scala	/^    val start = from + lo$/;"	l
start	scala/collection/immutable/PagedSeq.scala	/^  final def start = num * PageSize$/;"	m
start	scala/collection/immutable/StringLike.scala	/^      val start = index$/;"	l
start	scala/collection/immutable/StringLike.scala	/^    val start = from max 0$/;"	l
start	scala/collection/immutable/StringOps.scala	/^    val start = if (from < 0) 0 else from$/;"	l
start	scala/collection/immutable/WrappedString.scala	/^    val start = if (from < 0) 0 else from$/;"	l
start	scala/collection/immutable/package.scala	/^    def start: Int$/;"	m
start	scala/collection/parallel/Tasks.scala	/^    def start() = fork$/;"	m
start	scala/collection/parallel/Tasks.scala	/^    def start() = synchronized {$/;"	m
start	scala/collection/parallel/Tasks.scala	/^    def start() = {$/;"	m
start	scala/collection/parallel/Tasks.scala	/^    def start()$/;"	m
start	scala/collection/parallel/mutable/ParArray.scala	/^        val start = traversed$/;"	l
start	scala/concurrent/SyncVar.scala	/^    val start = System.currentTimeMillis$/;"	l
start	scala/sys/process/ProcessImpl.scala	/^    def start()     = getExitValue$/;"	m
start	scala/sys/process/ProcessImpl.scala	/^    def start(): Unit$/;"	m
start	scala/util/matching/Regex.scala	/^    def start(i: Int) = starts(i)$/;"	m
start	scala/util/matching/Regex.scala	/^    def start(i: Int): Int = matcher.start(i)$/;"	m
start	scala/util/matching/Regex.scala	/^    def start(i: Int): Int$/;"	m
start	scala/util/matching/Regex.scala	/^    def start: Int = matcher.start$/;"	m
start	scala/util/matching/Regex.scala	/^    def start: Int$/;"	m
start	scala/util/matching/Regex.scala	/^    val start = matcher.start$/;"	l
start	scala/util/parsing/combinator/RegexParsers.scala	/^        val start = handleWhiteSpace(in.source, offset)$/;"	l
start	scala/util/parsing/combinator/RegexParsers.scala	/^      val start = handleWhiteSpace(source, offset)$/;"	l
startCDATA	scala/xml/include/sax/XIncluder.scala	/^  def startCDATA() {}$/;"	m
startDTD	scala/xml/include/sax/XIncluder.scala	/^  def startDTD(name: String, publicID: String, systemID: String) {$/;"	m
startDocument	scala/xml/include/sax/XIncluder.scala	/^  def startDocument() {$/;"	m
startElement	scala/xml/include/sax/XIncluder.scala	/^  def startElement(namespaceURI: String, localName: String, qualifiedName: String, atts: Attributes) = {$/;"	m
startEntity	scala/xml/include/sax/XIncluder.scala	/^  def startEntity(name: String) {$/;"	m
startHash	scala/util/MurmurHash.scala	/^  def startHash(seed: Int) = seed ^ visibleMagic$/;"	m
startMagicA	scala/util/MurmurHash.scala	/^  def startMagicA = hiddenMagicA$/;"	m
startMagicB	scala/util/MurmurHash.scala	/^  def startMagicB = hiddenMagicB$/;"	m
startMbox	scala/actors/Reactor.scala	/^      val startMbox = new MQueue[Msg]("Start")$/;"	l
startModCount	scala/collection/mutable/OpenHashMap.scala	/^    val startModCount = modCount;$/;"	l
startPrefixMapping	scala/xml/include/sax/XIncluder.scala	/^  def startPrefixMapping(prefix: String , uri: String) {}$/;"	m
startRead	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized boolean startRead() {$/;"	m	class:ReentrantReadWriteLock.Sync
startReadFromNewReader	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized boolean startReadFromNewReader() {$/;"	m	class:ReentrantReadWriteLock.Sync
startReadFromWaitingReader	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized boolean startReadFromWaitingReader() {$/;"	m	class:ReentrantReadWriteLock.Sync
startTime	scala/testing/Benchmark.scala	/^      val startTime = Platform.currentTime$/;"	l
startWrite	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized boolean startWrite() {$/;"	m	class:ReentrantReadWriteLock.Sync
startWriteFromNewWriter	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized boolean startWriteFromNewWriter() {$/;"	m	class:ReentrantReadWriteLock.Sync
startWriteFromWaitingWriter	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        synchronized boolean startWriteFromWaitingWriter() {$/;"	m	class:ReentrantReadWriteLock.Sync
startsWith	scala/collection/GenSeqLike.scala	/^  def startsWith[B](that: GenSeq[B]): Boolean = startsWith(that, 0)$/;"	m
startsWith	scala/collection/GenSeqLike.scala	/^  def startsWith[B](that: GenSeq[B], offset: Int): Boolean$/;"	m
startsWith	scala/collection/GenSeqLike.scala	/^  def startsWith[B](that: Seq[B]): Boolean = startsWith(that: GenSeq[B])$/;"	m
startsWith	scala/collection/IndexedSeqOptimized.scala	/^  def startsWith[B](that: GenSeq[B], offset: Int): Boolean = that match {$/;"	m
startsWith	scala/collection/SeqLike.scala	/^  def startsWith[B](that: GenSeq[B], offset: Int): Boolean = {  $/;"	m
startsWith	scala/collection/SeqLike.scala	/^  def startsWith[B](that: Seq[B], offset: Int): Boolean = startsWith(that: GenSeq[B], offset)$/;"	m
startsWith	scala/collection/interfaces/SeqMethods.scala	/^  def startsWith[B](that: Seq[B]): Boolean$/;"	m
startsWith	scala/collection/interfaces/SeqMethods.scala	/^  def startsWith[B](that: Seq[B], offset: Int): Boolean$/;"	m
startsWith	scala/collection/parallel/ParSeqLike.scala	/^  def startsWith[S](that: GenSeq[S], offset: Int): Boolean = that ifParSeq { pthat =>$/;"	m
state	scala/actors/threadpool/FutureTask.java	/^    private int state;$/;"	f	class:FutureTask	file:
state	scala/actors/threadpool/SynchronousQueue.java	/^        int state = 0;$/;"	f	class:SynchronousQueue.Node
states	scala/util/automata/SubsetConstruction.scala	/^    var states = Set(q0, sink)    \/\/ initial set of sets$/;"	l
stats	scala/reflect/generic/UnPickler.scala	/^          val stats = until(end, readTreeRef)$/;"	l
stbl	scala/collection/immutable/ListMap.scala	/^        val stbl = acc$/;"	l
stderr	scala/sys/process/package.scala	/^    def stderr = java.lang.System.err$/;"	m
stdin	scala/io/Source.scala	/^  def stdin = fromInputStream(System.in)$/;"	m
stdin	scala/sys/process/package.scala	/^    def stdin  = java.lang.System.in$/;"	m
stdout	scala/sys/process/package.scala	/^    def stdout = java.lang.System.out$/;"	m
step	scala/collection/immutable/package.scala	/^    def step: Int$/;"	m
stmt	scala/xml/parsing/MarkupParser.scala	/^              val stmt = xName$/;"	l
stop	scala/xml/pull/XMLEventReader.scala	/^  def stop() = {$/;"	m
stopTime	scala/testing/Benchmark.scala	/^      val stopTime = Platform.currentTime$/;"	l
storageNode	scala/xml/persistent/CachedFileStorage.scala	/^    val storageNode = <nodes>{ nodes.toList }<\/nodes>$/;"	l
storedMagicA	scala/util/MurmurHash.scala	/^  val storedMagicA =$/;"	l
storedMagicB	scala/util/MurmurHash.scala	/^  val storedMagicB = $/;"	l
stotal	scala/collection/parallel/mutable/ParHashTable.scala	/^        val stotal = calcNumElems(sidx - 1, suntil, table.length, sizeMapBucketSize)$/;"	l
str	scala/collection/immutable/StringLike.scala	/^    val str = self.toString$/;"	l
str	scala/reflect/NameTransformer.scala	/^              val str = Integer.parseInt(hex, 16).toChar$/;"	l
str	scala/xml/parsing/MarkupParser.scala	/^    val str = cbuf.toString()$/;"	l
str	scala/xml/parsing/MarkupParser.scala	/^    val str = cbuf.toString();$/;"	l
str	scala/xml/parsing/MarkupParserCommon.scala	/^    val str = xAttributeValue(ch_returning_nextch)$/;"	l
strRep	scala/util/parsing/json/Lexer.scala	/^    val strRep = xs mkString ""$/;"	l
stream	scala/sys/process/BasicIO.scala	/^    val  stream:  () => Stream[T]$/;"	l
stream	scala/util/Properties.scala	/^    val stream = pickJarBasedOn getResourceAsStream propFilename$/;"	l
streamed	scala/sys/process/ProcessBuilderImpl.scala	/^      val streamed = Streamed[String](nonZeroException)$/;"	l
strict_	scala/xml/Equality.scala	/^  def strict_!=(other: Equality) = !strict_==(other)$/;"	m
strict_	scala/xml/Equality.scala	/^  def strict_==(other: Equality): Boolean$/;"	m
strictfp	scala/annotation/strictfp.scala	/^class strictfp extends annotation.StaticAnnotation$/;"	c
strictlyEqual	scala/xml/Equality.scala	/^    val strictlyEqual = other match {$/;"	l
string	scala/collection/TraversableLike.scala	/^    var string = repr.asInstanceOf[AnyRef].getClass.getName$/;"	l
string	scala/io/BytePickle.scala	/^  def string: SPU[String] = share(wrap($/;"	m
string	scala/util/parsing/combinator/testing/RegexTest.scala	/^  val string: Parser[Any] = "\\".*\\"".r ^^ (s => Str(s.substring(1, s.length - 1)))$/;"	l
string	scala/util/parsing/json/Lexer.scala	/^  def string = '\\"' ~> rep(charSeq | chrExcept('\\"', '\\n', EofCh)) <~ '\\"' ^^ { _ mkString "" }$/;"	m
string2codec	scala/io/Codec.scala	/^  implicit def string2codec(s: String) = apply(s)$/;"	m
stringCanBuildFrom	scala/Predef.scala	/^  implicit def stringCanBuildFrom: CanBuildFrom[String, Char, String] = $/;"	m
stringHash	scala/util/MurmurHash.scala	/^  def stringHash(s: String) = {$/;"	m
stringLit	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^  def stringLit: Parser[String] = $/;"	m
stringLiteral	scala/util/parsing/combinator/JavaTokenParsers.scala	/^  def stringLiteral: Parser[String] = $/;"	m
stringOf	scala/runtime/ScalaRunTime.scala	/^  def stringOf(arg: Any): String = stringOf(arg, scala.Int.MaxValue)$/;"	m
stringOf	scala/runtime/ScalaRunTime.scala	/^  def stringOf(arg: Any, maxElements: Int): String = {    $/;"	m
stringPrefix	scala/collection/GenTraversableLike.scala	/^  def stringPrefix: String$/;"	m
stringPrefix	scala/collection/TraversableLike.scala	/^  def stringPrefix : String = {$/;"	m
stringPrefix	scala/collection/interfaces/TraversableMethods.scala	/^  def stringPrefix: String$/;"	m
stringPrefix	scala/collection/parallel/ParIterable.scala	/^  def stringPrefix = "ParIterable"$/;"	m
stringSeqToProcess	scala/sys/process/Process.scala	/^  implicit def stringSeqToProcess(command: Seq[String]): ProcessBuilder   = apply(command)$/;"	m
stringToProcess	scala/sys/process/Process.scala	/^  implicit def stringToProcess(command: String): ProcessBuilder           = apply(command)$/;"	m
stringToTermName	scala/reflect/generic/StdNames.scala	/^  implicit def stringToTermName(s: String): TermName = newTermName(s)$/;"	m
stringVal	scala/util/parsing/json/Parser.scala	/^  def stringVal  = accept("string", { case lexical.StringLit(n) => n} )$/;"	m
stringValue	scala/reflect/generic/Constants.scala	/^    def stringValue: String =$/;"	m
stripLineEnd	scala/collection/immutable/StringLike.scala	/^  def stripLineEnd: String = {$/;"	m
stripMargin	scala/collection/immutable/StringLike.scala	/^  def stripMargin(marginChar: Char): String = {$/;"	m
stripMargin	scala/collection/immutable/StringLike.scala	/^  def stripMargin: String = stripMargin('|')$/;"	m
stripPrefix	scala/collection/immutable/StringLike.scala	/^  def stripPrefix(prefix: String) =$/;"	m
stripSuffix	scala/collection/immutable/StringLike.scala	/^  def stripSuffix(suffix: String) =$/;"	m
sub	scala/collection/immutable/HashMap.scala	/^        val sub = elems(offset)$/;"	l
sub	scala/collection/immutable/HashSet.scala	/^        val sub = elems(offset)$/;"	l
subNew	scala/collection/immutable/HashMap.scala	/^        val subNew = sub.removed0(key, hash, level + 5)$/;"	l
subNew	scala/collection/immutable/HashMap.scala	/^        val subNew = sub.updated0(key, hash, level + 5, value, kv, merger)$/;"	l
subNew	scala/collection/immutable/HashSet.scala	/^        val subNew = sub.removed0(key, hash, level + 5)$/;"	l
subNew	scala/collection/immutable/HashSet.scala	/^        val subNew = sub.updated0(key, hash, level + 5)$/;"	l
subSequence	scala/Predef.scala	/^    def subSequence(start: Int, end: Int): CharSequence = arrayToCharSequence(xs.slice(start, end))$/;"	m
subSequence	scala/Predef.scala	/^    def subSequence(start: Int, end: Int): CharSequence = seqToCharSequence(xs.slice(start, end))$/;"	m
subSequence	scala/collection/mutable/StringBuilder.scala	/^  def subSequence(start: Int, end: Int): java.lang.CharSequence = substring(start, end)$/;"	m
subcount	scala/collection/immutable/HashMap.scala	/^	val subcount = Integer.bitCount(thisbm | thatbm)$/;"	l
subgroups	scala/util/matching/Regex.scala	/^    def subgroups: List[String] = (1 to groupCount).toList map group$/;"	m
subl	scala/collection/immutable/RedBlack.scala	/^      def subl(t: Tree[B]) = t match {$/;"	m
submit	scala/actors/threadpool/AbstractExecutorService.java	/^    public Future submit(Callable task) {$/;"	m	class:AbstractExecutorService
submit	scala/actors/threadpool/AbstractExecutorService.java	/^    public Future submit(Runnable task) {$/;"	m	class:AbstractExecutorService
submit	scala/actors/threadpool/AbstractExecutorService.java	/^    public Future submit(Runnable task, Object result) {$/;"	m	class:AbstractExecutorService
submit	scala/actors/threadpool/CompletionService.java	/^    Future submit(Callable task);$/;"	m	interface:CompletionService
submit	scala/actors/threadpool/CompletionService.java	/^    Future submit(Runnable task, Object result);$/;"	m	interface:CompletionService
submit	scala/actors/threadpool/ExecutorCompletionService.java	/^    public Future submit(Callable task) {$/;"	m	class:ExecutorCompletionService
submit	scala/actors/threadpool/ExecutorCompletionService.java	/^    public Future submit(Runnable task, Object result) {$/;"	m	class:ExecutorCompletionService
submit	scala/actors/threadpool/ExecutorService.java	/^    Future submit(Callable task);$/;"	m	interface:ExecutorService
submit	scala/actors/threadpool/ExecutorService.java	/^    Future submit(Runnable task);$/;"	m	interface:ExecutorService
submit	scala/actors/threadpool/ExecutorService.java	/^    Future submit(Runnable task, Object result);$/;"	m	interface:ExecutorService
submit	scala/actors/threadpool/Executors.java	/^        public Future submit(Callable task) {$/;"	m	class:Executors.DelegatedExecutorService
submit	scala/actors/threadpool/Executors.java	/^        public Future submit(Runnable task) {$/;"	m	class:Executors.DelegatedExecutorService
submit	scala/actors/threadpool/Executors.java	/^        public Future submit(Runnable task, Object result) {$/;"	m	class:Executors.DelegatedExecutorService
submit	scala/concurrent/FutureTaskRunner.scala	/^  def submit[S](task: Task[S]): Future[S]$/;"	m
submit	scala/concurrent/ThreadPoolRunner.scala	/^  def submit[S](task: Task[S]): Future[S] = {$/;"	m
submit	scala/concurrent/ThreadRunner.scala	/^  def submit[S](task: Task[S]): Future[S] = {$/;"	m
subscribe	scala/collection/mutable/Publisher.scala	/^  def subscribe(sub: Sub) { subscribe(sub, event => true) }$/;"	m
subscribe	scala/collection/mutable/Publisher.scala	/^  def subscribe(sub: Sub, filter: Filter) { filters.addBinding(sub, filter) }$/;"	m
subsetOf	scala/collection/BitSetLike.scala	/^  def subsetOf(other: BitSet): Boolean =$/;"	m
subsetOf	scala/collection/GenSetLike.scala	/^  def subsetOf(that: GenSet[A]): Boolean = this forall that$/;"	m
subsetOf	scala/collection/GenSetLike.scala	/^  def subsetOf(that: Set[A]): Boolean = subsetOf(that: GenSet[A])$/;"	m
subsetOf	scala/collection/interfaces/SetMethods.scala	/^  def subsetOf(that: Set[A]): Boolean  $/;"	m
subsets	scala/collection/SetLike.scala	/^  def subsets(len: Int): Iterator[This] = {$/;"	m
subsets	scala/collection/SetLike.scala	/^  def subsets: Iterator[This] = new Iterator[This] {$/;"	m
subsets	scala/collection/interfaces/SetMethods.scala	/^  def subsets(len: Int): Iterator[This]$/;"	m
subsets	scala/collection/interfaces/SetMethods.scala	/^  def subsets: Iterator[This]$/;"	m
substitute	scala/util/parsing/ast/Binders.scala	/^    def substitute(b: binderType, value: Element): Unit = substitution(b) = value$/;"	m
substring	scala/collection/mutable/StringBuilder.scala	/^  def substring(start: Int): String = substring(start, length)$/;"	m
substring	scala/collection/mutable/StringBuilder.scala	/^  def substring(start: Int, end: Int): String = underlying.substring(start, end)$/;"	m
subtasks	scala/collection/parallel/Tasks.scala	/^        val subtasks = head.split$/;"	l
subtract	scala/runtime/BoxesRunTime.java	/^    public static Object subtract(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
subtrees	scala/reflect/generic/Trees.scala	/^      def subtrees(x: Any): List[Tree] = x match {$/;"	m
success	scala/sys/process/ProcessBuilderImpl.scala	/^      val success = new SyncVar[Boolean]$/;"	l
success	scala/util/parsing/combinator/Parsers.scala	/^  def success[T](v: T) = Parser{ in => Success(v, in) }$/;"	m
successful	scala/util/parsing/combinator/Parsers.scala	/^    val successful = false$/;"	l
successful	scala/util/parsing/combinator/Parsers.scala	/^    val successful = true$/;"	l
successful	scala/util/parsing/combinator/Parsers.scala	/^    val successful: Boolean$/;"	l
suite	scala/testing/SUnit.scala	/^    def suite: TestSuite$/;"	m
sum	scala/collection/GenTraversableOnce.scala	/^  def sum[A1 >: A](implicit num: Numeric[A1]): A1$/;"	m
sum	scala/collection/SeqLike.scala	/^        var sum = nums.slice(idx + 1, nums.length).sum + 1$/;"	l
sum	scala/collection/TraversableOnce.scala	/^  def sum[B >: A](implicit num: Numeric[B]): B = foldLeft(num.zero)(num.plus)$/;"	m
sum	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def sum[B >: A](implicit num: Numeric[B]): B$/;"	m
sum	scala/collection/parallel/ParIterableLike.scala	/^  def sum[U >: T](implicit num: Numeric[U]): U = {$/;"	m
sum	scala/collection/parallel/mutable/ParArray.scala	/^      var sum = z$/;"	l
sum	scala/collection/parallel/mutable/ParArray.scala	/^      var sum = zero$/;"	l
sum	scala/concurrent/pilib.scala	/^    val sum = Sum(s.toList map { _.untyped })$/;"	l
suntil	scala/collection/parallel/mutable/ParHashTable.scala	/^        val suntil = until$/;"	l
supers	scala/reflect/ClassManifest.scala	/^        val supers = next.getInterfaces.toSet ++ Option(next.getSuperclass)$/;"	l
supertpe	scala/reflect/generic/UnPickler.scala	/^          val supertpe = readTypeRef()$/;"	l
surrogateStart	scala/util/Random.scala	/^      val surrogateStart: Int = 0xD800$/;"	l
suspendSubscription	scala/collection/mutable/Publisher.scala	/^  def suspendSubscription(sub: Sub) { suspended += sub }$/;"	m
suspendable	scala/util/continuations/package.scala	/^  type suspendable = cps[Unit]$/;"	T
swap	scala/Either.scala	/^  def swap = this match {$/;"	m
swap	scala/Tuple2.scala	/^  def swap: Tuple2[T2,T1] = Tuple2(_2, _1)$/;"	m
swap	scala/util/Random.scala	/^    def swap(i1: Int, i2: Int) {$/;"	m
swap	scala/util/Sorting.scala	/^    def swap(a: Int, b: Int) {$/;"	m
switch	scala/annotation/switch.scala	/^final class switch extends annotation.StaticAnnotation$/;"	c
sym	scala/Symbol.scala	/^          val sym = valueFromKey(name)$/;"	l
sym	scala/reflect/generic/UnPickler.scala	/^          val sym = (isClassRoot, isModuleFlag) match {$/;"	l
sym	scala/reflect/generic/UnPickler.scala	/^          val sym = readSymbolRef()$/;"	l
symApply	scala/testing/Show.scala	/^  implicit def symApply(sym: Symbol) = new SymApply(sym)$/;"	m
symbol	scala/reflect/generic/Trees.scala	/^    def symbol: Symbol = null$/;"	m
symbol	scala/reflect/generic/UnPickler.scala	/^      var symbol: Symbol = null$/;"	l
symbolValue	scala/reflect/generic/Constants.scala	/^    def symbolValue: Symbol = value.asInstanceOf[Symbol]$/;"	m
symbol_	scala/reflect/generic/Trees.scala	/^    def symbol_=(sym: Symbol) { throw new UnsupportedOperationException("symbol_= inapplicable for " + this) }$/;"	m
symmetricHash	scala/util/MurmurHash.scala	/^  def symmetricHash[T](xs: collection.TraversableOnce[T], seed: Int) = {$/;"	m
sync	scala/actors/threadpool/locks/FIFOCondVar.java	/^    private static final WaitQueue.QueuedSync sync = new WaitQueue.QueuedSync() {$/;"	f	class:FIFOCondVar	file:
sync	scala/actors/threadpool/locks/ReentrantLock.java	/^    private final Sync sync;$/;"	f	class:ReentrantLock	file:
sync	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    final Sync sync;$/;"	f	class:ReentrantReadWriteLock
sync	scala/collection/parallel/Tasks.scala	/^    def sync() = future.get$/;"	m
sync	scala/collection/parallel/Tasks.scala	/^    def sync() = join$/;"	m
sync	scala/collection/parallel/Tasks.scala	/^    def sync() = synchronized {$/;"	m
sync	scala/collection/parallel/Tasks.scala	/^    def sync()$/;"	m
syntactic	scala/util/parsing/combinator/testing/Tester.scala	/^  val syntactic: TokenParsers { val lexical: Lexical }$/;"	l
syntactical	scala/util/parsing/combinator/syntactical/StandardTokenParsers.scala	/^package syntactical$/;"	p
syntactical	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^package syntactical$/;"	p
syntactical	scala/util/parsing/combinator/syntactical/TokenParsers.scala	/^package syntactical$/;"	p
sysID	scala/xml/parsing/MarkupParser.scala	/^      val sysID = if (ch != '>')$/;"	l
sysID	scala/xml/parsing/MarkupParser.scala	/^      val sysID = systemLiteral()$/;"	l
systemID	scala/xml/include/sax/XIncludeFilter.scala	/^    var systemID = ""$/;"	l
systemId	scala/xml/dtd/ExternalID.scala	/^  def systemId: String$/;"	m
systemLiteral	scala/xml/parsing/MarkupParser.scala	/^  def systemLiteral(): String = {$/;"	m
systemPropertiesToCompanion	scala/sys/SystemProperties.scala	/^  implicit def systemPropertiesToCompanion(p: SystemProperties): SystemProperties.type = this$/;"	m
sz	scala/collection/parallel/immutable/ParHashMap.scala	/^    val sz = root.foldLeft(0)(_ + _.size)$/;"	l
sz	scala/collection/parallel/immutable/ParHashSet.scala	/^    val sz = root.foldLeft(0)(_ + _.size)$/;"	l
sz	scala/collection/parallel/immutable/ParVector.scala	/^  var sz = 0$/;"	l
sz	scala/collection/parallel/mutable/ParArray.scala	/^            val sz = remaining$/;"	l
sz	scala/collection/parallel/mutable/ParArray.scala	/^        val sz = remaining$/;"	l
szcum	scala/collection/parallel/RemainsIterator.scala	/^      val szcum = sizes.scanLeft(0)(_ + _)$/;"	l
szsnd	scala/collection/immutable/TrieIterator.scala	/^          val szsnd = snd(0).size$/;"	l
t	scala/actors/scheduler/ForkJoinScheduler.scala	/^      val t = new Thread(this)$/;"	l
t	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^      val t = new Thread(r)$/;"	l
t	scala/collection/parallel/Tasks.scala	/^        val t = new Thread(r)$/;"	l
t	scala/collection/parallel/Tasks.scala	/^    val t = newTaskImpl(task)$/;"	l
t	scala/collection/parallel/mutable/ParHashMap.scala	/^      val t = table$/;"	l
t	scala/collection/parallel/mutable/ParHashSet.scala	/^      var t = table$/;"	l
t	scala/reflect/generic/UnPickler.scala	/^      val t = tag match {$/;"	l
t	scala/sys/ShutdownHookThread.scala	/^    val t = new ShutdownHookThread(hookName()) {$/;"	l
t	scala/sys/process/ProcessBuilderImpl.scala	/^      val t = Spawn({$/;"	l
t	scala/util/Sorting.scala	/^      val t = x(a)$/;"	l
t_hi	scala/util/Sorting.scala	/^      var t_hi = mid + 1$/;"	l
tabinc	scala/io/Source.scala	/^    var tabinc = 4$/;"	l
table	scala/collection/mutable/FlatHashTable.scala	/^    val table: Array[AnyRef],$/;"	l
table	scala/collection/mutable/HashTable.scala	/^    val table: Array[HashEntry[A, Entry]],$/;"	l
table	scala/collection/parallel/mutable/ParHashMap.scala	/^    val table = new AddingHashTable(size, tableLoadFactor)$/;"	l
table	scala/collection/parallel/mutable/ParHashMap.scala	/^    val table = new HashTable[K, DefaultEntry[K, V]] {$/;"	l
table	scala/collection/parallel/mutable/ParHashSet.scala	/^    val table = new AddingFlatHashTable(size, tableLoadFactor)$/;"	l
tableLength	scala/collection/parallel/mutable/ParHashSet.scala	/^    def tableLength = table.length$/;"	m
tableSize	scala/collection/mutable/FlatHashTable.scala	/^    val tableSize: Int,$/;"	l
tableSize	scala/collection/mutable/HashTable.scala	/^    val tableSize: Int,$/;"	l
tableidx	scala/collection/mutable/FlatHashTable.scala	/^    var tableidx = 0$/;"	l
tableidx	scala/collection/mutable/HashTable.scala	/^    var tableidx = 0$/;"	l
tableuntil	scala/collection/mutable/FlatHashTable.scala	/^    var tableuntil = sizeMapBucketSize min tbl.length$/;"	l
tableuntil	scala/collection/mutable/HashTable.scala	/^    var tableuntil = 0$/;"	l
tabulate	scala/Array.scala	/^  def tabulate[T: ClassManifest](n1: Int, n2: Int)(f: (Int, Int) => T): Array[Array[T]] = $/;"	m
tabulate	scala/Array.scala	/^  def tabulate[T: ClassManifest](n1: Int, n2: Int, n3: Int)(f: (Int, Int, Int) => T): Array[Array[Array[T]]] = $/;"	m
tabulate	scala/Array.scala	/^  def tabulate[T: ClassManifest](n1: Int, n2: Int, n3: Int, n4: Int)(f: (Int, Int, Int, Int) => T): Array[Array[Array[Array[T]]]] = $/;"	m
tabulate	scala/Array.scala	/^  def tabulate[T: ClassManifest](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(f: (Int, Int, Int, Int, Int) => T): Array[Array[Array[Array[Array[T]]]]] = $/;"	m
tabulate	scala/Array.scala	/^  def tabulate[T: ClassManifest](n: Int)(f: Int => T): Array[T] = {$/;"	m
tabulate	scala/collection/Iterator.scala	/^  def tabulate[A](end: Int)(f: Int => A) = new Iterator[A] {$/;"	m
tabulate	scala/collection/generic/GenTraversableFactory.scala	/^  def tabulate[A](n1: Int, n2: Int)(f: (Int, Int) => A): CC[CC[A]] = $/;"	m
tabulate	scala/collection/generic/GenTraversableFactory.scala	/^  def tabulate[A](n1: Int, n2: Int, n3: Int)(f: (Int, Int, Int) => A): CC[CC[CC[A]]] = $/;"	m
tabulate	scala/collection/generic/GenTraversableFactory.scala	/^  def tabulate[A](n1: Int, n2: Int, n3: Int, n4: Int)(f: (Int, Int, Int, Int) => A): CC[CC[CC[CC[A]]]] = $/;"	m
tabulate	scala/collection/generic/GenTraversableFactory.scala	/^  def tabulate[A](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(f: (Int, Int, Int, Int, Int) => A): CC[CC[CC[CC[CC[A]]]]] = $/;"	m
tabulate	scala/collection/generic/GenTraversableFactory.scala	/^  def tabulate[A](n: Int)(f: Int => A): CC[A] = {$/;"	m
tag	scala/collection/generic/Signalling.scala	/^  def tag = -1$/;"	m
tag	scala/collection/generic/Signalling.scala	/^  def tag = signalDelegate.tag$/;"	m
tag	scala/collection/generic/Signalling.scala	/^  def tag: Int$/;"	m
tag	scala/reflect/generic/Constants.scala	/^    val tag: Int = value match {$/;"	l
tag	scala/reflect/generic/PickleBuffer.scala	/^      val tag = readNat()$/;"	l
tag	scala/reflect/generic/UnPickler.scala	/^      val tag   = readByte()$/;"	l
tag	scala/reflect/generic/UnPickler.scala	/^      val tag = bytes(index(i))$/;"	l
tag	scala/reflect/generic/UnPickler.scala	/^      val tag = bytes(index(i)).toInt$/;"	l
tag	scala/reflect/generic/UnPickler.scala	/^      val tag = readByte()$/;"	l
tag	scala/reflect/generic/UnPickler.scala	/^      val tag = readByte().toInt$/;"	l
tag	scala/reflect/generic/UnPickler.scala	/^      val tag = readNat()$/;"	l
tagStack	scala/xml/parsing/FactoryAdapter.scala	/^  val tagStack    = new mutable.Stack[String]$/;"	l
tail	scala/collection/GenTraversableLike.scala	/^  def tail: Repr = {$/;"	m
tail	scala/collection/IndexedSeqOptimized.scala	/^  def tail: Repr = if (isEmpty) super.tail else slice(1, length)$/;"	m
tail	scala/collection/LinearSeqOptimized.scala	/^  def tail: Repr$/;"	m
tail	scala/collection/immutable/List.scala	/^  def tail: List[A]$/;"	m
tail	scala/collection/immutable/ListSet.scala	/^      val tail = self - e; new tail.Node(elem)$/;"	l
tail	scala/collection/immutable/Stream.scala	/^  def tail: Stream[A]$/;"	m
tail	scala/collection/interfaces/TraversableMethods.scala	/^  def tail: Traversable[A]$/;"	m
tail0	scala/collection/immutable/List.scala	/^          val tail0 = pending.tail$/;"	l
tailDefined	scala/collection/immutable/Stream.scala	/^    def tailDefined = false$/;"	m
tailDefined	scala/collection/immutable/Stream.scala	/^    def tailDefined: Boolean = tlVal ne null$/;"	m
tailFlatMap	scala/collection/immutable/Stream.scala	/^      def tailFlatMap = asStream[B](tail withFilter p flatMap f) $/;"	m
tailMap	scala/collection/immutable/Stream.scala	/^      def tailMap = asStream[B](tail withFilter p map f)$/;"	m
tail_	scala/actors/threadpool/helpers/FIFOWaitQueue.java	/^    protected transient WaitNode tail_ = null;$/;"	f	class:FIFOWaitQueue
tailcall	scala/util/control/TailCalls.scala	/^  def tailcall[A](rest: => TailRec[A]): TailRec[A] = new Call(() => rest)$/;"	m
tailrec	scala/annotation/tailrec.scala	/^final class tailrec extends annotation.StaticAnnotation$/;"	c
tails	scala/collection/TraversableLike.scala	/^  def tails: Iterator[Repr] = iterateUntilEmpty(_.tail)$/;"	m
tails	scala/collection/interfaces/TraversableMethods.scala	/^  def tails: Iterator[This]$/;"	m
take	scala/actors/LinkedQueue.java	/^  public Object take() throws InterruptedException {$/;"	m	class:LinkedQueue
take	scala/actors/threadpool/BlockingQueue.java	/^    E take() throws InterruptedException;$/;"	m	interface:BlockingQueue
take	scala/actors/threadpool/CompletionService.java	/^    Future take() throws InterruptedException;$/;"	m	interface:CompletionService
take	scala/actors/threadpool/ExecutorCompletionService.java	/^    public Future take() throws InterruptedException {$/;"	m	class:ExecutorCompletionService
take	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public E take() throws InterruptedException {$/;"	m	class:LinkedBlockingQueue
take	scala/actors/threadpool/SynchronousQueue.java	/^    public Object take() throws InterruptedException {$/;"	m	class:SynchronousQueue
take	scala/collection/GenTraversableLike.scala	/^  def take(n: Int): Repr$/;"	m
take	scala/collection/IndexedSeqOptimized.scala	/^  def take(n: Int): Repr = slice(0, n)$/;"	m
take	scala/collection/Iterator.scala	/^  def take(n: Int): Iterator[A] = slice(0, n)$/;"	m
take	scala/collection/LinearSeqOptimized.scala	/^  def take(n: Int): Repr = {$/;"	m
take	scala/collection/TraversableLike.scala	/^  def take(n: Int): Repr = slice(0, n)$/;"	m
take	scala/collection/interfaces/TraversableMethods.scala	/^  def take(n: Int): Traversable[A]$/;"	m
take	scala/collection/parallel/ParIterableLike.scala	/^  def take(n: Int): Repr = {$/;"	m
take	scala/concurrent/SyncVar.scala	/^  def take() = synchronized {$/;"	m
take2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def take2combiner[U >: T, This](n: Int, cb: Combiner[U, This]): Combiner[U, This] = {$/;"	m
takeAnd	scala/runtime/BoxesRunTime.java	/^    public static Object takeAnd(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
takeConditionalAnd	scala/runtime/BoxesRunTime.java	/^    public static Object takeConditionalAnd(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
takeConditionalOr	scala/runtime/BoxesRunTime.java	/^    public static Object takeConditionalOr(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
takeLock	scala/actors/threadpool/LinkedBlockingQueue.java	/^    private final ReentrantLock takeLock = new ReentrantLock();$/;"	f	class:LinkedBlockingQueue	file:
takeModulo	scala/runtime/BoxesRunTime.java	/^    public static Object takeModulo(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
takeNot	scala/runtime/BoxesRunTime.java	/^    public static Object takeNot(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
takeOr	scala/runtime/BoxesRunTime.java	/^    public static Object takeOr(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
takeOver	scala/actors/threadpool/helpers/WaitQueue.java	/^        void takeOver(WaitNode node);$/;"	m	interface:WaitQueue.QueuedSync
takeOver	scala/actors/threadpool/locks/ReentrantLock.java	/^        public synchronized void takeOver(WaitQueue.WaitNode node) {$/;"	m	class:ReentrantLock.FairSync
takeRight	scala/collection/IndexedSeqOptimized.scala	/^  def takeRight(n: Int): Repr = slice(length - n, length)$/;"	m
takeRight	scala/collection/IterableLike.scala	/^  def takeRight(n: Int): Repr = {$/;"	m
takeRight	scala/collection/interfaces/IterableMethods.scala	/^  def takeRight(n: Int): Iterable[A]$/;"	m
takeWhile	scala/collection/GenTraversableLike.scala	/^  def takeWhile(pred: A => Boolean): Repr$/;"	m
takeWhile	scala/collection/IndexedSeqOptimized.scala	/^  def takeWhile(p: A => Boolean): Repr = take(prefixLength(p))$/;"	m
takeWhile	scala/collection/Iterator.scala	/^  def takeWhile(p: A => Boolean): Iterator[A] = new Iterator[A] {$/;"	m
takeWhile	scala/collection/LinearSeqOptimized.scala	/^  def takeWhile(p: A => Boolean): Repr = {$/;"	m
takeWhile	scala/collection/TraversableLike.scala	/^  def takeWhile(p: A => Boolean): Repr = {$/;"	m
takeWhile	scala/collection/interfaces/TraversableMethods.scala	/^  def takeWhile(p: A => Boolean): Traversable[A]$/;"	m
takeWhile	scala/collection/parallel/ParIterableLike.scala	/^  def takeWhile(pred: T => Boolean): Repr = {$/;"	m
takeWhile2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def takeWhile2combiner[U >: T, This](p: T => Boolean, cb: Combiner[U, This]) = {$/;"	m
takeXor	scala/runtime/BoxesRunTime.java	/^    public static Object takeXor(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
tan	scala/MathCommon.scala	/^  def tan(x: Double): Double = java.lang.Math.tan(x)$/;"	m
tanh	scala/math/package.scala	/^  def tanh(x: Double):Double = java.lang.Math.tanh(x)$/;"	m
targarrseq	scala/collection/parallel/mutable/ParArray.scala	/^      val targarrseq = new ArraySeq[U](length + 1)$/;"	l
targarrseq	scala/collection/parallel/mutable/ParArray.scala	/^    val targarrseq = new ArraySeq[S](length)$/;"	l
target	scala/reflect/generic/Constants.scala	/^      val target = pt.typeSymbol$/;"	l
target	scala/reflect/generic/UnPickler.scala	/^      val target = readSymbolRef()$/;"	l
targetarr	scala/collection/parallel/mutable/ParArray.scala	/^            val targetarr: Array[Any] = pac.buff.lastPtr.array.asInstanceOf[Array[Any]]$/;"	l
targetarr	scala/collection/parallel/mutable/ParArray.scala	/^          val targetarr: Array[Any] = pac.buff.lastPtr.array.asInstanceOf[Array[Any]]$/;"	l
targetarr	scala/collection/parallel/mutable/ParArray.scala	/^        val targetarr: Array[Any] = pac.lastbuff.internalArray.asInstanceOf[Array[Any]]$/;"	l
targetarr	scala/collection/parallel/mutable/ParArray.scala	/^      val targetarr = targarrseq.array.asInstanceOf[Array[Any]]$/;"	l
targetarr	scala/collection/parallel/mutable/ParArray.scala	/^    val targetarr = targarrseq.array.asInstanceOf[Array[Any]]$/;"	l
tarr	scala/collection/parallel/mutable/ParArray.scala	/^      val tarr = targetarr$/;"	l
tarray	scala/sys/package.scala	/^    val tarray = new Array[Thread](num)$/;"	l
task	scala/actors/Actor.scala	/^      val task = new ActorTask(this, null, f, msg)$/;"	l
task	scala/actors/scheduler/SingleThreadedScheduler.scala	/^      val task = tasks.dequeue()$/;"	l
task	scala/actors/threadpool/ExecutorCompletionService.java	/^        private final Future task;$/;"	f	class:ExecutorCompletionService.QueueingFuture	file:
task	scala/actors/threadpool/Executors.java	/^        final Runnable task;$/;"	f	class:Executors.RunnableAdapter
task	scala/actors/threadpool/Executors.java	/^        private final Callable task;$/;"	f	class:Executors.PrivilegedCallable	file:
task	scala/actors/threadpool/Executors.java	/^        private final Callable task;$/;"	f	class:Executors.PrivilegedCallableUsingCurrentClassLoader	file:
task	scala/collection/parallel/ParIterableLike.scala	/^      val task = (copythis parallel copythat) { _ combine _ } mapResult {$/;"	l
tasksupport	scala/collection/parallel/package.scala	/^  val tasksupport = getTaskSupport$/;"	l
tbl	scala/collection/mutable/FlatHashTable.scala	/^    var tbl = table$/;"	l
tbl	scala/collection/mutable/HashTable.scala	/^    val tbl = table$/;"	l
tbl	scala/collection/parallel/mutable/ParHashSet.scala	/^    val tbl = new FlatHashTable[T] {$/;"	l
tcount	scala/collection/parallel/Tasks.scala	/^  val tcount = new atomic.AtomicLong(0L)$/;"	l
tearDown	scala/testing/Benchmark.scala	/^  def tearDown() {$/;"	m
tearDown	scala/testing/SUnit.scala	/^    def tearDown() {}$/;"	m
tempEntry	scala/util/parsing/combinator/PackratParsers.scala	/^          val tempEntry: MemoEntry[_] = cached.get \/\/ match {case Some(x: MemoEntry[_]) => x}$/;"	l
tempRes	scala/util/parsing/combinator/PackratParsers.scala	/^            val tempRes = p(in)$/;"	l
tempRes	scala/util/parsing/combinator/PackratParsers.scala	/^          val tempRes = p(in)$/;"	l
tempRes	scala/util/parsing/combinator/PackratParsers.scala	/^    val tempRes = p(rest); tempRes match {$/;"	l
terminate	scala/actors/remote/NetKernel.scala	/^  def terminate() {$/;"	m
terminate	scala/actors/remote/Service.scala	/^  def terminate(): Unit$/;"	m
terminate	scala/actors/remote/TcpService.scala	/^  def terminate() {$/;"	m
terminated	scala/actors/IScheduler.scala	/^  def terminated(a: TrackedReactor): Unit$/;"	m
terminated	scala/actors/SchedulerAdapter.scala	/^  def terminated(a: TrackedReactor) =$/;"	m
terminated	scala/actors/scheduler/DelegatingScheduler.scala	/^  def terminated(actor: TrackedReactor) = impl.terminated(actor)$/;"	m
terminated	scala/actors/scheduler/SingleThreadedScheduler.scala	/^  def terminated(actor: TrackedReactor) {}$/;"	m
terminated	scala/actors/scheduler/TerminationMonitor.scala	/^  def terminated(a: TrackedReactor) = {$/;"	m
terminated	scala/actors/threadpool/ThreadPoolExecutor.java	/^    protected void terminated() { }$/;"	m	class:ThreadPoolExecutor
termination	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private final Condition termination = mainLock.newCondition();$/;"	f	class:ThreadPoolExecutor	file:
test	scala/actors/MessageQueue.scala	/^    def test(msg: Msg): Boolean =$/;"	m
test	scala/actors/MessageQueue.scala	/^    def test(msg: Msg, session: OutputChannel[Any]): Boolean =$/;"	m
test	scala/testing/Show.scala	/^  def test[A](f: Symbol, args: A*): String = {$/;"	m
test	scala/util/automata/Inclusion.scala	/^        val test = encode(r1, r2)$/;"	l
test	scala/util/parsing/combinator/testing/Tester.scala	/^  def test(in: String) {$/;"	m
test	scala/xml/PrettyPrinter.scala	/^        val test = {$/;"	l
testBit	scala/math/BigInt.scala	/^  def testBit (n: Int): Boolean = this.bigInteger.testBit(n)$/;"	m
testEqual	scala/runtime/BoxesRunTime.java	/^    public static Object testEqual(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
testGreaterOrEqualThan	scala/runtime/BoxesRunTime.java	/^    public static Object testGreaterOrEqualThan(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
testGreaterThan	scala/runtime/BoxesRunTime.java	/^    public static Object testGreaterThan(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
testLessOrEqualThan	scala/runtime/BoxesRunTime.java	/^    public static Object testLessOrEqualThan(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
testLessThan	scala/runtime/BoxesRunTime.java	/^    public static Object testLessThan(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
testLogged	scala/xml/factory/LoggedNodeFactory.scala	/^object testLogged extends Application {$/;"	c
testMethod	scala/testing/Show.scala	/^    def testMethod(meth: java.lang.reflect.Method): String =$/;"	m
testNotEqual	scala/runtime/BoxesRunTime.java	/^    public static Object testNotEqual(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
text	scala/text/Document.scala	/^  def text(s: String): Document = DocText(s)$/;"	m
text	scala/xml/NodeSeq.scala	/^  def text: String                = this map (_.text) mkString$/;"	m
text	scala/xml/factory/Binder.scala	/^  final def text(pos: Int, txt: String) =$/;"	m
text	scala/xml/parsing/ConstructingHandler.scala	/^  def text(pos: Int, txt: String)     = Text(txt)$/;"	m
text	scala/xml/parsing/DefaultMarkupHandler.scala	/^  def text(pos: Int, txt:String) = NodeSeq.Empty$/;"	m
text	scala/xml/parsing/MarkupHandler.scala	/^  def text(pos: Int, txt: String): NodeSeq$/;"	m
text	scala/xml/pull/XMLEventReader.scala	/^    def text(pos: Int, txt:String)                        = setEvent(EvText(txt))$/;"	m
textDecl	scala/xml/parsing/MarkupParser.scala	/^  def textDecl(): (Option[String], Option[String]) =$/;"	m
textdecl	scala/xml/parsing/MarkupParser.scala	/^    var textdecl:Tuple2[Option[String],Option[String]] = null;$/;"	l
tgt	scala/collection/SeqLike.scala	/^      val tgt = target.slice(targetOffset, targetCount)$/;"	l
tgt	scala/collection/SeqLike.scala	/^      val tgt = target.slice(targetOffset, targetCount).reverse$/;"	l
that	scala/collection/immutable/HashMap.scala	/^        val that = hm.asInstanceOf[HashTrieMap[A, B1]]$/;"	l
that	scala/collection/immutable/ListSet.scala	/^    var that: ListSet[A] = self$/;"	l
that	scala/collection/parallel/ParSeqLike.scala	/^      val that = patch.asParSeq$/;"	l
that	scala/collection/parallel/Tasks.scala	/^      val that = t.asInstanceOf[Task[R, Tp]]$/;"	l
that	scala/collection/parallel/immutable/ParVector.scala	/^    val that = other.asInstanceOf[LazyParVectorCombiner[T]]$/;"	l
that	scala/collection/parallel/mutable/LazyCombiner.scala	/^      val that = other.asInstanceOf[LazyCombiner[Elem, To, Buff]]$/;"	l
that	scala/collection/parallel/package.scala	/^        val that = other.asInstanceOf[BucketCombiner[Elem, To, Buck, CombinerType]]$/;"	l
thatElem	scala/collection/IterableViewLike.scala	/^    val thatElem = _thatElem$/;"	l
thatElem	scala/collection/SeqViewLike.scala	/^    val thatElem = _thatElem$/;"	l
thatElem	scala/collection/parallel/ParIterableViewLike.scala	/^    val thatElem = _thatElem$/;"	l
thatElem	scala/collection/parallel/ParSeqViewLike.scala	/^    val thatElem = _thatElem$/;"	l
thatElems	scala/collection/IndexedSeqOptimized.scala	/^      val thatElems = that.iterator$/;"	l
thatLen	scala/collection/IndexedSeqOptimized.scala	/^      val thatLen = that.length$/;"	l
thatbm	scala/collection/immutable/HashMap.scala	/^        var thatbm = that.bitmap$/;"	l
thatelems	scala/collection/immutable/HashMap.scala	/^        val thatelems = that.elems$/;"	l
thati	scala/collection/immutable/HashMap.scala	/^        var thati = 0$/;"	l
thatindex	scala/collection/immutable/HashMap.scala	/^        var thatindex = (hash >>> level) & 0x1f$/;"	l
thatit	scala/collection/parallel/RemainsIterator.scala	/^      val thatit = if (selfrem > thatrem) that.appendParSeq(repetition(thatelem, selfrem - thatrem).splitter) else that$/;"	l
thatlsb	scala/collection/immutable/HashMap.scala	/^          val thatlsb = thatbm ^ (thatbm & (thatbm - 1))$/;"	l
thatrem	scala/collection/parallel/RemainsIterator.scala	/^      val thatrem = that.remaining$/;"	l
thats	scala/collection/parallel/RemainsIterator.scala	/^      val thats = that.psplit(sizes: _*)$/;"	l
thats	scala/collection/parallel/RemainsIterator.scala	/^      val thats = that.psplit(thatsizes: _*)$/;"	l
thatseq	scala/collection/parallel/ParIterableLike.scala	/^    val thatseq = that.asParSeq$/;"	l
thatseq	scala/collection/parallel/ParSeqLike.scala	/^    val thatseq = that.asParSeq$/;"	l
theChar	scala/xml/Utility.scala	/^          val theChar = parseCharRef ({ ()=> c },{ () => c = it.next },{s => throw new RuntimeException(s)}, {s => throw new RuntimeException(s)})$/;"	l
theChar	scala/xml/parsing/MarkupParser.scala	/^              val theChar = handle.text(tmppos, xCharRef(() => ch, () => nextch))$/;"	l
theNode	scala/xml/parsing/MarkupParser.scala	/^    var theNode: Node = null;$/;"	l
theSeq	scala/xml/Document.scala	/^  def theSeq: Seq[Node] = this.docElem$/;"	m
theSeq	scala/xml/Node.scala	/^  def theSeq: Seq[Node] = this :: Nil$/;"	m
theSeq	scala/xml/NodeSeq.scala	/^    def theSeq = s$/;"	m
theSeq	scala/xml/NodeSeq.scala	/^  def theSeq: Seq[Node]$/;"	m
thenp	scala/reflect/generic/UnPickler.scala	/^          val thenp = readTreeRef()$/;"	l
these	scala/collection/IterableLike.scala	/^    val these = this.iterator$/;"	l
these	scala/collection/LinearSeqLike.scala	/^    var these = self$/;"	l
these	scala/collection/LinearSeqOptimized.scala	/^      var these = this$/;"	l
these	scala/collection/LinearSeqOptimized.scala	/^    var these = repr$/;"	l
these	scala/collection/LinearSeqOptimized.scala	/^    var these = self$/;"	l
these	scala/collection/LinearSeqOptimized.scala	/^    var these = this drop from$/;"	l
these	scala/collection/LinearSeqOptimized.scala	/^    var these = this$/;"	l
these	scala/collection/LinearSeqOptimized.scala	/^    var these: Repr = repr$/;"	l
these	scala/collection/immutable/List.scala	/^    var these = this$/;"	l
these	scala/collection/immutable/List.scala	/^    var these: List[B] = this$/;"	l
these	scala/collection/immutable/Stream.scala	/^    var these = this$/;"	l
these	scala/collection/immutable/Stream.scala	/^    var these: Stream[A] = this$/;"	l
these	scala/collection/mutable/LinkedListLike.scala	/^    var these = this$/;"	l
these	scala/collection/mutable/LinkedListLike.scala	/^    var these: This = repr$/;"	l
these	scala/xml/NodeSeq.scala	/^    val these = this.iterator$/;"	l
this	scala/Array.scala	/^   def this(dim1: Int, dim2: Int) = {$/;"	m
this	scala/Array.scala	/^   def this(dim1: Int, dim2: Int, dim3: Int) = {$/;"	m
this	scala/Array.scala	/^   def this(dim1: Int, dim2: Int, dim3: Int, dim4: Int) = {$/;"	m
this	scala/Array.scala	/^   def this(dim1: Int, dim2: Int, dim3: Int, dim4: Int, dim5: Int) = {$/;"	m
this	scala/Array.scala	/^   def this(dim1: Int, dim2: Int, dim3: Int, dim4: Int, dim5: Int, dim6: Int) = {$/;"	m
this	scala/Array.scala	/^   def this(dim1: Int, dim2: Int, dim3: Int, dim4: Int, dim5: Int, dim6: Int, dim7: Int) = {$/;"	m
this	scala/Array.scala	/^   def this(dim1: Int, dim2: Int, dim3: Int, dim4: Int, dim5: Int, dim6: Int, dim7: Int, dim8: Int) = {$/;"	m
this	scala/Array.scala	/^   def this(dim1: Int, dim2: Int, dim3: Int, dim4: Int, dim5: Int, dim6: Int, dim7: Int, dim8: Int, dim9: Int) = {$/;"	m
this	scala/Enumeration.scala	/^    def this()              = this(nextId)$/;"	m
this	scala/Enumeration.scala	/^    def this(i: Int)        = this(i, nextNameOrNull)$/;"	m
this	scala/Enumeration.scala	/^    def this(name: String)  = this(nextId, name)$/;"	m
this	scala/Enumeration.scala	/^  def this() = this(0)$/;"	m
this	scala/Enumeration.scala	/^  def this(names: String*) = this(0, names: _*)$/;"	m
this	scala/UninitializedFieldError.scala	/^  def this(obj: Any) =$/;"	m
this	scala/actors/Channel.scala	/^  def this() = this(Actor.self)$/;"	m
this	scala/actors/MessageQueue.scala	/^  def this() = this(null, null, null)$/;"	m
this	scala/actors/MessageQueue.scala	/^  def this(msg: Any, session: OutputChannel[Any]) = this(msg, session, null)$/;"	m
this	scala/actors/MessageQueue.scala	/^  def this(msg: Msg, session: OutputChannel[Any]) = this(msg, session, null)$/;"	m
this	scala/actors/Reaction.scala	/^  def this(a: Actor) = this(a, null, null)$/;"	m
this	scala/actors/scheduler/ForkJoinScheduler.scala	/^  def this() {$/;"	m
this	scala/actors/scheduler/ForkJoinScheduler.scala	/^  def this(d: Boolean) {$/;"	m
this	scala/actors/scheduler/ForkJoinScheduler.scala	/^  def this(d: Boolean, f: Boolean) {$/;"	m
this	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^  def this() {$/;"	m
this	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^  def this(d: Boolean) {$/;"	m
this	scala/collection/immutable/HashMap.scala	/^    def this (level: Int, m1: HashMap1[A,B], m2: HashMap1[A,B]) = {$/;"	m
this	scala/collection/immutable/ListSet.scala	/^    def this() = this(empty[Elem])$/;"	m
this	scala/collection/immutable/PagedSeq.scala	/^  def this(more: (Array[T], Int, Int) => Int) = this(more, new Page[T](0), 0, UndeterminedEnd)$/;"	m
this	scala/collection/immutable/Stack.scala	/^  def this() = this(Nil)$/;"	m
this	scala/collection/immutable/TreeMap.scala	/^  def this()(implicit ordering: Ordering[A]) = this(0, null)(ordering)$/;"	m
this	scala/collection/immutable/TreeSet.scala	/^  def this()(implicit ordering: Ordering[A]) = this(0, null)(ordering)$/;"	m
this	scala/collection/mutable/ArrayBuffer.scala	/^  def this() = this(16)$/;"	m
this	scala/collection/mutable/ArrayStack.scala	/^  def this() = this(new Array[AnyRef](1), 0)$/;"	m
this	scala/collection/mutable/BitSet.scala	/^  def this() = this(0)$/;"	m
this	scala/collection/mutable/BitSet.scala	/^  def this(initSize: Int) = this(new Array[Long]((initSize + 63) >> 6 max 1))$/;"	m
this	scala/collection/mutable/DoubleLinkedList.scala	/^  def this(elem: A, next: DoubleLinkedList[A]) {$/;"	m
this	scala/collection/mutable/HashMap.scala	/^  def this() = this(null)$/;"	m
this	scala/collection/mutable/HashSet.scala	/^  def this() = this(null)$/;"	m
this	scala/collection/mutable/LinkedList.scala	/^  def this(elem: A, next: LinkedList[A]) {$/;"	m
this	scala/collection/mutable/OpenHashMap.scala	/^  def this() = this(8);$/;"	m
this	scala/collection/mutable/Stack.scala	/^  def this() = this(Nil)$/;"	m
this	scala/collection/mutable/StringBuilder.scala	/^  def this() = this(16, "")$/;"	m
this	scala/collection/mutable/StringBuilder.scala	/^  def this(capacity: Int) = this(capacity, "")$/;"	m
this	scala/collection/mutable/StringBuilder.scala	/^  def this(initCapacity: Int, initValue: String) =$/;"	m
this	scala/collection/mutable/StringBuilder.scala	/^  def this(str: String) = this(16, str)$/;"	m
this	scala/collection/parallel/immutable/ParHashMap.scala	/^  def this() = this(HashMap.empty[K, V])$/;"	m
this	scala/collection/parallel/immutable/ParHashSet.scala	/^  def this() = this(HashSet.empty[T])$/;"	m
this	scala/collection/parallel/immutable/ParVector.scala	/^  def this() = this(Vector())$/;"	m
this	scala/collection/parallel/mutable/ParArray.scala	/^  def this(sz: Int) = this {$/;"	m
this	scala/collection/parallel/mutable/ParHashMap.scala	/^  def this() = this(null)$/;"	m
this	scala/collection/parallel/mutable/ParHashSet.scala	/^  def this() = this(null)$/;"	m
this	scala/collection/script/Message.scala	/^  def this(elem: A) = this(NoLo, elem)$/;"	m
this	scala/io/BufferedSource.scala	/^  def this(inputStream: InputStream)(implicit codec: Codec) = this(inputStream, DefaultBufSize)(codec)$/;"	m
this	scala/io/Source.scala	/^    def this() = this(RelaxedPosition)$/;"	m
this	scala/math/BigDecimal.scala	/^  def this(bigDecimal: BigDec) = this(bigDecimal, BigDecimal.defaultMathContext)$/;"	m
this	scala/ref/SoftReference.scala	/^  def this(value : T) = this(value, null);$/;"	m
this	scala/ref/WeakReference.scala	/^  def this(value: T) = this(value, null)$/;"	m
this	scala/specialized.scala	/^  def this() {$/;"	m
this	scala/sys/process/ProcessIO.scala	/^  def this(in: OutputStream => Unit, out: InputStream => Unit, err: InputStream => Unit) = this(in, out, err, false)$/;"	m
this	scala/testing/SUnit.scala	/^    def this(names: Seq[String], constr: String => Test) =$/;"	m
this	scala/testing/SUnit.scala	/^    def this(p: (Test, Throwable)) = this(p._1, p._2)$/;"	m
this	scala/util/Random.scala	/^  def this() = this(new java.util.Random())$/;"	m
this	scala/util/Random.scala	/^  def this(seed: Int) = this(seed.toLong)$/;"	m
this	scala/util/Random.scala	/^  def this(seed: Long) = this(new java.util.Random(seed))$/;"	m
this	scala/util/parsing/combinator/lexical/Scanners.scala	/^    def this(in: String) = this(new CharArrayReader(in.toCharArray()))$/;"	m
this	scala/util/parsing/input/CharArrayReader.scala	/^  def this(chars: Array[Char]) = this(chars, 0)$/;"	m
this	scala/util/parsing/input/CharSequenceReader.scala	/^  def this(source: java.lang.CharSequence) = this(source, 0)$/;"	m
this	scala/util/parsing/input/PagedSeqReader.scala	/^  def this(seq: PagedSeq[Char]) = this(seq, 0)$/;"	m
this	scala/xml/PrefixedAttribute.scala	/^  def this(pre: String, key: String, value: String, next: MetaData) = $/;"	m
this	scala/xml/UnprefixedAttribute.scala	/^  def this(key: String, value: Option[Seq[Node]], next: MetaData) = $/;"	m
this	scala/xml/UnprefixedAttribute.scala	/^  def this(key: String, value: String, next: MetaData) = $/;"	m
this	scala/xml/include/CircularIncludeException.scala	/^    def this() = this(null);$/;"	m
this	scala/xml/include/UnavailableResourceException.scala	/^  def this() = this(null)$/;"	m
this	scala/xml/include/XIncludeException.scala	/^  def this() = this(null)$/;"	m
thisActor	scala/actors/Actor.scala	/^              val thisActor = this$/;"	l
thisActor	scala/actors/Future.scala	/^    val thisActor = Actor.self$/;"	l
thisActor	scala/actors/ReplyReactor.scala	/^            val thisActor = this$/;"	l
thisElem	scala/collection/IterableViewLike.scala	/^    val thisElem = _thisElem$/;"	l
thisElem	scala/collection/SeqViewLike.scala	/^    val thisElem = _thisElem$/;"	l
thisElem	scala/collection/parallel/ParIterableViewLike.scala	/^    val thisElem = _thisElem$/;"	l
thisElem	scala/collection/parallel/ParSeqViewLike.scala	/^    val thisElem = _thisElem$/;"	l
thisLen	scala/collection/IndexedSeqOptimized.scala	/^      val thisLen = length$/;"	l
thisbm	scala/collection/immutable/HashMap.scala	/^        var thisbm = this.bitmap$/;"	l
thiselems	scala/collection/immutable/HashMap.scala	/^        val thiselems = this.elems$/;"	l
thisi	scala/collection/immutable/HashMap.scala	/^        var thisi = 0$/;"	l
thisindex	scala/collection/immutable/HashMap.scala	/^        var thisindex = (this.hash >>> level) & 0x1f$/;"	l
thisit	scala/collection/parallel/RemainsIterator.scala	/^      val thisit = if (selfrem < thatrem) self.appendParIterable[U, SeqSplitter[U]](repetition[U](thiselem, thatrem - selfrem).splitter) else self$/;"	l
thisit	scala/collection/parallel/RemainsIterator.scala	/^      val thisit = if (selfrem < thatrem) self.appendParSeq[U, SeqSplitter[U]](repetition[U](thiselem, thatrem - selfrem).splitter) else self$/;"	l
thislsb	scala/collection/immutable/HashMap.scala	/^          val thislsb = thisbm ^ (thisbm & (thisbm - 1))$/;"	l
thistpe	scala/reflect/generic/UnPickler.scala	/^          val thistpe = readTypeRef()$/;"	l
those	scala/collection/IterableLike.scala	/^    val those = that.iterator$/;"	l
those	scala/collection/LinearSeqOptimized.scala	/^      var those = that1$/;"	l
those	scala/xml/NodeSeq.scala	/^    val those = that.iterator$/;"	l
thr	scala/util/continuations/ControlContext.scala	/^        val thr: Exception => B = { t: Exception =>$/;"	l
thr	scala/util/continuations/ControlContext.scala	/^        val thr: Exception => B1 = { t: Exception =>$/;"	l
thread	scala/actors/threadpool/ThreadPoolExecutor.java	/^        public final Thread thread;$/;"	f	class:ThreadPoolExecutor.Worker
thread	scala/sys/process/ProcessImpl.scala	/^      val thread = Spawn(code set runAndExitValue())$/;"	l
thread	scala/sys/process/ProcessImpl.scala	/^      val thread = new Thread() { override def run() = { f } }$/;"	l
threadFactory	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private volatile ThreadFactory threadFactory;$/;"	f	class:ThreadPoolExecutor	file:
threadNumber	scala/actors/threadpool/Executors.java	/^        final AtomicInteger threadNumber = new AtomicInteger(1);$/;"	f	class:Executors.DefaultThreadFactory
threadPoolRunner	scala/concurrent/TaskRunners.scala	/^  implicit val threadPoolRunner: FutureTaskRunner = {$/;"	l
threadRunner	scala/concurrent/TaskRunners.scala	/^  implicit val threadRunner: FutureTaskRunner =$/;"	l
threshold	scala/collection/mutable/FlatHashTable.scala	/^    val threshold: Int,$/;"	l
threshold	scala/collection/mutable/HashTable.scala	/^    val threshold: Int,$/;"	l
threshold	scala/collection/parallel/ParIterableLike.scala	/^  def threshold(sz: Int, p: Int): Int = thresholdFromSize(sz, p)$/;"	m
thresholdFromSize	scala/collection/parallel/package.scala	/^  def thresholdFromSize(sz: Int, parallelismLevel: Int) = {$/;"	m
throwable2ops	scala/collection/parallel/package.scala	/^  implicit def throwable2ops(self: Throwable) = new ThrowableOps {$/;"	m
throwableSubtypeToCatcher	scala/util/control/Exception.scala	/^  implicit def throwableSubtypeToCatcher[Ex <: Throwable: ClassManifest, T](pf: PartialFunction[Ex, T]) =$/;"	m
throws	scala/package.scala	/^  type throws  = annotation.throws$/;"	T
throws	scala/throws.scala	/^class throws(clazz: Class[_]) extends annotation.StaticAnnotation$/;"	c
tick	scala/actors/IScheduler.scala	/^  def tick(a: Actor) {}$/;"	m
time	scala/collection/immutable/HashMap.scala	/^def time(block: =>Unit) = { val t0 = System.nanoTime; block; println("elapsed: " + (System.nanoTime - t0)\/1000000.0) }$/;"	m
time	scala/collection/immutable/HashSet.scala	/^def time(block: =>Unit) = { val t0 = System.nanoTime; block; println("elapsed: " + (System.nanoTime - t0)\/1000000.0) }$/;"	m
timedJoin	scala/actors/threadpool/TimeUnit.java	/^    public void timedJoin(Thread thread, long timeout)$/;"	m	class:TimeUnit
timedWait	scala/actors/threadpool/TimeUnit.java	/^    public void timedWait(Object obj, long timeout)$/;"	m	class:TimeUnit
timerTask	scala/actors/Future.scala	/^    val timerTask = new java.util.TimerTask {$/;"	l
times	scala/math/Numeric.scala	/^    def times(x: BigDecimal, y: BigDecimal): BigDecimal = x * y$/;"	m
times	scala/math/Numeric.scala	/^    def times(x: BigInt, y: BigInt): BigInt = x * y$/;"	m
times	scala/math/Numeric.scala	/^    def times(x: Byte, y: Byte): Byte = (x * y).toByte$/;"	m
times	scala/math/Numeric.scala	/^    def times(x: Char, y: Char): Char = (x * y).toChar$/;"	m
times	scala/math/Numeric.scala	/^    def times(x: Double, y: Double): Double = x * y$/;"	m
times	scala/math/Numeric.scala	/^    def times(x: Float, y: Float): Float = x * y $/;"	m
times	scala/math/Numeric.scala	/^    def times(x: Int, y: Int): Int = x * y$/;"	m
times	scala/math/Numeric.scala	/^    def times(x: Long, y: Long): Long = x * y$/;"	m
times	scala/math/Numeric.scala	/^    def times(x: Short, y: Short): Short = (x * y).toShort$/;"	m
times	scala/math/Numeric.scala	/^  def times(x: T, y: T): T$/;"	m
times	scala/reflect/generic/PickleBuffer.scala	/^  def times[T](n: Int, op: ()=>T): List[T] =$/;"	m
tl	scala/collection/mutable/MutableList.scala	/^    val tl = new MutableList[A]$/;"	l
tlen	scala/collection/parallel/ParSeqLike.scala	/^      val tlen = that.length$/;"	l
tmp	scala/util/Random.scala	/^      val tmp = buf(i1)$/;"	l
tmp	scala/xml/PrettyPrinter.scala	/^    val tmp = width - cur$/;"	l
tmp	scala/xml/dtd/Decl.scala	/^    var tmp = value;$/;"	l
tmp	scala/xml/parsing/MarkupParser.scala	/^        val tmp = content(scope)$/;"	l
tmpDir	scala/util/Properties.scala	/^  def tmpDir                = propOrEmpty("java.io.tmpdir")$/;"	m
tmpE	scala/collection/SeqLike.scala	/^      var tmpE = elms(i)$/;"	l
tmpI	scala/collection/SeqLike.scala	/^      var tmpI = idxs(i)$/;"	l
tmpMbox	scala/actors/Actor.scala	/^    var tmpMbox = startMbox$/;"	l
tmpMbox	scala/actors/Reactor.scala	/^    var tmpMbox = startMbox$/;"	l
tmpMbox	scala/actors/ReplyReactor.scala	/^    var tmpMbox = startMbox$/;"	l
tmppos	scala/xml/parsing/MarkupParser.scala	/^  var tmppos: Int = _$/;"	l
tmppos	scala/xml/parsing/MarkupParserCommon.scala	/^  var tmppos: PositionType$/;"	l
to	scala/collection/generic/Sorted.scala	/^  def to(to: K): This = {$/;"	m
to	scala/math/BigDecimal.scala	/^  def to(end: BigDecimal): Range.Partial[BigDecimal, NumericRange.Inclusive[BigDecimal]] =$/;"	m
to	scala/math/BigDecimal.scala	/^  def to(end: BigDecimal, step: BigDecimal) = Range.BigDecimal.inclusive(this, end, step)$/;"	m
to	scala/math/BigInt.scala	/^  def to(end: BigInt, step: BigInt = BigInt(1)) = Range.BigInt.inclusive(this, end, step)$/;"	m
to	scala/reflect/generic/UnPickler.scala	/^            val to = readNameRef()$/;"	l
to	scala/runtime/RichInt.scala	/^  def to(end: Int): Range.Inclusive = Range.inclusive(self, end)$/;"	m
to	scala/runtime/RichInt.scala	/^  def to(end: Int, step: Int): Range.Inclusive = Range.inclusive(self, end, step)$/;"	m
to	scala/runtime/ScalaNumberProxy.scala	/^  def to(end: T): NumericRange.Inclusive[T]             = NumericRange.inclusive(self, end, num.one)$/;"	m
to	scala/runtime/ScalaNumberProxy.scala	/^  def to(end: T): ResultWithoutStep                     = new Range.Partial(NumericRange.inclusive(self, end, _))$/;"	m
to	scala/runtime/ScalaNumberProxy.scala	/^  def to(end: T): ResultWithoutStep$/;"	m
to	scala/runtime/ScalaNumberProxy.scala	/^  def to(end: T, step: T): NumericRange.Inclusive[T]    = NumericRange.inclusive(self, end, step)$/;"	m
to	scala/runtime/ScalaNumberProxy.scala	/^  def to(end: T, step: T): immutable.IndexedSeq[T]$/;"	m
toArray	scala/actors/threadpool/AbstractCollection.java	/^    public Object[] toArray() {$/;"	m	class:AbstractCollection
toArray	scala/actors/threadpool/AbstractCollection.java	/^    public Object[] toArray(Object[] a) {$/;"	m	class:AbstractCollection
toArray	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public <T> T[] toArray(T[] a) {$/;"	m	class:LinkedBlockingQueue
toArray	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public Object[] toArray() {$/;"	m	class:LinkedBlockingQueue
toArray	scala/actors/threadpool/SynchronousQueue.java	/^    public Object[] toArray() {$/;"	m	class:SynchronousQueue
toArray	scala/actors/threadpool/SynchronousQueue.java	/^    public Object[] toArray(Object[] a) {$/;"	m	class:SynchronousQueue
toArray	scala/collection/GenTraversableOnce.scala	/^  def toArray[A1 >: A: ClassManifest]: Array[A1]$/;"	m
toArray	scala/collection/TraversableOnce.scala	/^  def toArray[B >: A : ClassManifest]: Array[B] = {$/;"	m
toArray	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def toArray[B >: A : ClassManifest]: Array[B]$/;"	m
toArray	scala/collection/mutable/StringBuilder.scala	/^  def toArray: Array[Char] = {$/;"	m
toArray	scala/runtime/ScalaRunTime.scala	/^  def toArray[T](xs: collection.Seq[T]) = {$/;"	m
toBD	scala/collection/immutable/Range.scala	/^    def toBD(x: Double): BigDecimal = scala.math.BigDecimal valueOf x$/;"	m
toBigInt	scala/math/BigDecimal.scala	/^  def toBigInt(): BigInt = new BigInt(this.bigDecimal.toBigInteger())$/;"	m
toBigIntExact	scala/math/BigDecimal.scala	/^  def toBigIntExact(): Option[BigInt] =$/;"	m
toBinaryString	scala/runtime/RichInt.scala	/^  def toBinaryString: String = java.lang.Integer.toBinaryString(self)$/;"	m
toBinaryString	scala/runtime/RichLong.scala	/^  def toBinaryString: String = java.lang.Long.toBinaryString(self)$/;"	m
toBoolean	scala/collection/immutable/StringLike.scala	/^  def toBoolean: Boolean = parseBoolean(toString)$/;"	m
toBuffer	scala/collection/GenTraversableOnce.scala	/^  def toBuffer[A1 >: A]: collection.mutable.Buffer[A1]$/;"	m
toBuffer	scala/collection/TraversableOnce.scala	/^  def toBuffer[B >: A]: mutable.Buffer[B] = new ArrayBuffer[B] ++= seq$/;"	m
toBuffer	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def toBuffer[B >: A]: mutable.Buffer[B]$/;"	m
toByte	scala/Byte.scala	/^  def toByte: Byte = sys.error("stub")$/;"	m
toByte	scala/Char.scala	/^  def toByte: Byte = sys.error("stub")$/;"	m
toByte	scala/Double.scala	/^  def toByte: Byte = sys.error("stub")$/;"	m
toByte	scala/Float.scala	/^  def toByte: Byte = sys.error("stub")$/;"	m
toByte	scala/Int.scala	/^  def toByte: Byte = sys.error("stub")$/;"	m
toByte	scala/Long.scala	/^  def toByte: Byte = sys.error("stub")$/;"	m
toByte	scala/Short.scala	/^  def toByte: Byte = sys.error("stub")$/;"	m
toByte	scala/collection/immutable/StringLike.scala	/^  def toByte: Byte       = java.lang.Byte.parseByte(toString)$/;"	m
toByte	scala/math/ScalaNumericConversions.scala	/^  def toByte = byteValue$/;"	m
toByte	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Byte toByte(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
toByteArray	scala/math/BigInt.scala	/^  def toByteArray: Array[Byte] = this.bigInteger.toByteArray()$/;"	m
toByteExact	scala/math/BigDecimal.scala	/^  def toByteExact = bigDecimal.byteValueExact$/;"	m
toChar	scala/Byte.scala	/^  def toChar: Char = sys.error("stub")$/;"	m
toChar	scala/Char.scala	/^  def toChar: Char = sys.error("stub")$/;"	m
toChar	scala/Double.scala	/^  def toChar: Char = sys.error("stub")$/;"	m
toChar	scala/Float.scala	/^  def toChar: Char = sys.error("stub")$/;"	m
toChar	scala/Int.scala	/^  def toChar: Char = sys.error("stub")$/;"	m
toChar	scala/Long.scala	/^  def toChar: Char = sys.error("stub")$/;"	m
toChar	scala/Short.scala	/^  def toChar: Char = sys.error("stub")$/;"	m
toChar	scala/math/ScalaNumericConversions.scala	/^  def toChar = intValue.toChar$/;"	m
toCharacter	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Character toCharacter(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
toDays	scala/actors/threadpool/TimeUnit.java	/^    public abstract long toDays(long duration);$/;"	m	class:TimeUnit
toDegrees	scala/MathCommon.scala	/^  def toDegrees(x: Double): Double = java.lang.Math.toDegrees(x)$/;"	m
toDegrees	scala/runtime/RichDouble.scala	/^  def toDegrees: Double = math.toDegrees(self)$/;"	m
toDegrees	scala/runtime/RichFloat.scala	/^  def toDegrees: Float = math.toDegrees(self).toFloat$/;"	m
toDouble	scala/Byte.scala	/^  def toDouble: Double = sys.error("stub")$/;"	m
toDouble	scala/Char.scala	/^  def toDouble: Double = sys.error("stub")$/;"	m
toDouble	scala/Double.scala	/^  def toDouble: Double = sys.error("stub")$/;"	m
toDouble	scala/Float.scala	/^  def toDouble: Double = sys.error("stub")$/;"	m
toDouble	scala/Int.scala	/^  def toDouble: Double = sys.error("stub")$/;"	m
toDouble	scala/Long.scala	/^  def toDouble: Double = sys.error("stub")$/;"	m
toDouble	scala/Short.scala	/^  def toDouble: Double = sys.error("stub")$/;"	m
toDouble	scala/collection/immutable/StringLike.scala	/^  def toDouble: Double   = java.lang.Double.parseDouble(toString)$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(): Double = Numeric.this.toDouble(lhs)    $/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: BigDecimal): Double = x.doubleValue$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: BigInt): Double = x.longValue.toDouble$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: Byte): Double = x.toDouble$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: Char): Double = x.toDouble$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: Double): Double = x$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: Float): Double = x$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: Int): Double = x$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: Long): Double = x$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: Short): Double = x.toDouble$/;"	m
toDouble	scala/math/Numeric.scala	/^  def toDouble(x: T): Double$/;"	m
toDouble	scala/math/ScalaNumericConversions.scala	/^  def toDouble = doubleValue$/;"	m
toDouble	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Double toDouble(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
toDrop	scala/collection/Iterator.scala	/^    var toDrop = lo$/;"	l
toDrop	scala/collection/SeqLike.scala	/^      val toDrop = fromIndex max 0$/;"	l
toEither	scala/util/control/Exception.scala	/^    def toEither: Catch[Either[Throwable, T]] = withApply(Left(_))$/;"	m
toEnum	scala/io/BytePickle.scala	/^    def toEnum(b: Boolean) = if (b) 1 else 0$/;"	m
toFloat	scala/Byte.scala	/^  def toFloat: Float = sys.error("stub")$/;"	m
toFloat	scala/Char.scala	/^  def toFloat: Float = sys.error("stub")$/;"	m
toFloat	scala/Double.scala	/^  def toFloat: Float = sys.error("stub")$/;"	m
toFloat	scala/Float.scala	/^  def toFloat: Float = sys.error("stub")$/;"	m
toFloat	scala/Int.scala	/^  def toFloat: Float = sys.error("stub")$/;"	m
toFloat	scala/Long.scala	/^  def toFloat: Float = sys.error("stub")$/;"	m
toFloat	scala/Short.scala	/^  def toFloat: Float = sys.error("stub")$/;"	m
toFloat	scala/collection/immutable/StringLike.scala	/^  def toFloat: Float     = java.lang.Float.parseFloat(toString)$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(): Float = Numeric.this.toFloat(lhs)$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: BigDecimal): Float = x.floatValue$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: BigInt): Float = x.longValue.toFloat$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: Byte): Float = x.toFloat$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: Char): Float = x.toFloat$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: Double): Float = x.toFloat$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: Float): Float = x$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: Int): Float = x$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: Long): Float = x$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: Short): Float = x.toFloat$/;"	m
toFloat	scala/math/Numeric.scala	/^  def toFloat(x: T): Float$/;"	m
toFloat	scala/math/ScalaNumericConversions.scala	/^  def toFloat = floatValue$/;"	m
toFloat	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Float toFloat(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
toHexString	scala/runtime/RichInt.scala	/^  def toHexString: String = java.lang.Integer.toHexString(self)$/;"	m
toHexString	scala/runtime/RichLong.scala	/^  def toHexString: String = java.lang.Long.toHexString(self)$/;"	m
toHours	scala/actors/threadpool/TimeUnit.java	/^    public abstract long toHours(long duration);$/;"	m	class:TimeUnit
toImmutable	scala/collection/mutable/BitSet.scala	/^  def toImmutable = immutable.BitSet.fromArray(elems)$/;"	m
toIndexedSeq	scala/collection/GenTraversableOnce.scala	/^  def toIndexedSeq[A1 >: A]: immutable.IndexedSeq[A1]$/;"	m
toIndexedSeq	scala/collection/TraversableOnce.scala	/^  def toIndexedSeq[B >: A]: immutable.IndexedSeq[B] = immutable.IndexedSeq() ++ seq$/;"	m
toIndexedSeq	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def toIndexedSeq[B >: A]: immutable.IndexedSeq[B]$/;"	m
toIndexedSeq	scala/reflect/generic/PickleBuffer.scala	/^  def toIndexedSeq: IndexedSeq[(Int, Array[Byte])] = {$/;"	m
toInt	scala/Byte.scala	/^  def toInt: Int = sys.error("stub")$/;"	m
toInt	scala/Char.scala	/^  def toInt: Int = sys.error("stub")$/;"	m
toInt	scala/Double.scala	/^  def toInt: Int = sys.error("stub")$/;"	m
toInt	scala/Float.scala	/^  def toInt: Int = sys.error("stub")$/;"	m
toInt	scala/Int.scala	/^  def toInt: Int = sys.error("stub")$/;"	m
toInt	scala/Long.scala	/^  def toInt: Int = sys.error("stub")$/;"	m
toInt	scala/Short.scala	/^  def toInt: Int = sys.error("stub")$/;"	m
toInt	scala/collection/immutable/StringLike.scala	/^  def toInt: Int         = java.lang.Integer.parseInt(toString)$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(): Int = Numeric.this.toInt(lhs)$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: BigDecimal): Int = x.intValue$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: BigInt): Int = x.intValue$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: Byte): Int = x.toInt$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: Char): Int = x.toInt$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: Double): Int = x.toInt$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: Float): Int = x.toInt$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: Int): Int = x$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: Long): Int = x.toInt$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: Short): Int = x.toInt$/;"	m
toInt	scala/math/Numeric.scala	/^  def toInt(x: T): Int$/;"	m
toInt	scala/math/ScalaNumericConversions.scala	/^  def toInt = intValue$/;"	m
toIntExact	scala/math/BigDecimal.scala	/^  def toIntExact = bigDecimal.intValueExact$/;"	m
toInteger	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Integer toInteger(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
toIterable	scala/collection/GenTraversableOnce.scala	/^  def toIterable: GenIterable[A]$/;"	m
toIterable	scala/collection/TraversableOnce.scala	/^  def toIterable: Iterable[A] = toStream$/;"	m
toIterable	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def toIterable: Iterable[A]$/;"	m
toIterator	scala/collection/GenTraversableOnce.scala	/^  def toIterator: Iterator[A]$/;"	m
toIterator	scala/collection/Iterator.scala	/^  def toIterator: Iterator[A] = self$/;"	m
toIterator	scala/collection/TraversableLike.scala	/^  def toIterator: Iterator[A] = toStream.iterator$/;"	m
toIterator	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def toIterator: Iterator[A]$/;"	m
toLeft	scala/collection/TraversableLike.scala	/^    var toLeft = true$/;"	l
toList	scala/Option.scala	/^  def toList: List[A] = $/;"	m
toList	scala/collection/GenTraversableOnce.scala	/^  def toList: List[A]$/;"	m
toList	scala/collection/TraversableOnce.scala	/^  def toList: List[A] = new ListBuffer[A] ++= seq toList$/;"	m
toList	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def toList: List[A]$/;"	m
toLong	scala/Byte.scala	/^  def toLong: Long = sys.error("stub")$/;"	m
toLong	scala/Char.scala	/^  def toLong: Long = sys.error("stub")$/;"	m
toLong	scala/Double.scala	/^  def toLong: Long = sys.error("stub")$/;"	m
toLong	scala/Float.scala	/^  def toLong: Long = sys.error("stub")$/;"	m
toLong	scala/Int.scala	/^  def toLong: Long = sys.error("stub")$/;"	m
toLong	scala/Long.scala	/^  def toLong: Long = sys.error("stub")$/;"	m
toLong	scala/Short.scala	/^  def toLong: Long = sys.error("stub")$/;"	m
toLong	scala/collection/immutable/StringLike.scala	/^  def toLong: Long       = java.lang.Long.parseLong(toString)$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(): Long = Numeric.this.toLong(lhs)$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: BigDecimal): Long = x.longValue$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: BigInt): Long = x.longValue$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: Byte): Long = x.toLong$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: Char): Long = x.toLong$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: Double): Long = x.toLong$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: Float): Long = x.toLong$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: Int): Long = x$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: Long): Long = x$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: Short): Long = x.toLong$/;"	m
toLong	scala/math/Numeric.scala	/^  def toLong(x: T): Long$/;"	m
toLong	scala/math/ScalaNumericConversions.scala	/^  def toLong = longValue$/;"	m
toLong	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Long toLong(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
toLongExact	scala/math/BigDecimal.scala	/^  def toLongExact = bigDecimal.longValueExact$/;"	m
toLower	scala/runtime/RichChar.scala	/^  def toLower: Char                     = Character.toLowerCase(self)$/;"	m
toLowerCase	scala/runtime/RichChar.scala	/^  def toLowerCase: Char = toLower$/;"	m
toMap	scala/collection/GenTraversableOnce.scala	/^  def toMap[K, V](implicit ev: A <:< (K, V)): GenMap[K, V]$/;"	m
toMap	scala/collection/TraversableOnce.scala	/^  def toMap[T, U](implicit ev: A <:< (T, U)): immutable.Map[T, U] = {$/;"	m
toMap	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def toMap[T, U](implicit ev: A <:< (T, U)): immutable.Map[T, U]$/;"	m
toMicros	scala/actors/threadpool/TimeUnit.java	/^    public abstract long toMicros(long duration);$/;"	m	class:TimeUnit
toMillis	scala/actors/threadpool/TimeUnit.java	/^    public abstract long toMillis(long duration);$/;"	m	class:TimeUnit
toMinutes	scala/actors/threadpool/TimeUnit.java	/^    public abstract long toMinutes(long duration);$/;"	m	class:TimeUnit
toNanos	scala/actors/threadpool/TimeUnit.java	/^    public abstract long toNanos(long duration);$/;"	m	class:TimeUnit
toObjectArray	scala/runtime/ScalaRunTime.scala	/^  def toObjectArray(src: AnyRef): Array[Object] = {$/;"	m
toOctalString	scala/runtime/RichInt.scala	/^  def toOctalString: String = java.lang.Integer.toOctalString(self)$/;"	m
toOctalString	scala/runtime/RichLong.scala	/^  def toOctalString: String = java.lang.Long.toOctalString(self)$/;"	m
toOption	scala/Either.scala	/^    def toOption = e match {$/;"	m
toOption	scala/util/control/Exception.scala	/^    def toOption: Catch[Option[T]] = withApply(_ => None)$/;"	m
toParArray	scala/collection/parallel/package.scala	/^    def toParArray = if (t.isInstanceOf[ParArray[_]]) t.asInstanceOf[ParArray[T]] else {$/;"	m
toParArray	scala/collection/parallel/package.scala	/^    def toParArray: ParArray[T]$/;"	m
toQueue	scala/collection/mutable/MutableList.scala	/^  def toQueue = new Queue(first0, last0, len)$/;"	m
toQueue	scala/collection/mutable/PriorityQueue.scala	/^  def toQueue: Queue[A] = new Queue[A] ++= this.iterator$/;"	m
toRadians	scala/MathCommon.scala	/^  def toRadians(x: Double): Double = java.lang.Math.toRadians(x)$/;"	m
toRadians	scala/runtime/RichDouble.scala	/^  def toRadians: Double = math.toRadians(self)$/;"	m
toRadians	scala/runtime/RichFloat.scala	/^  def toRadians: Float = math.toRadians(self).toFloat$/;"	m
toSeconds	scala/actors/threadpool/TimeUnit.java	/^    public abstract long toSeconds(long duration);$/;"	m	class:TimeUnit
toSeq	scala/Either.scala	/^    def toSeq = e match {$/;"	m
toSeq	scala/collection/GenSeqLike.scala	/^  def toSeq: GenSeq[A]$/;"	m
toSeq	scala/collection/GenTraversableOnce.scala	/^  def toSeq: GenSeq[A]$/;"	m
toSeq	scala/collection/TraversableOnce.scala	/^  def toSeq: Seq[A] = toStream$/;"	m
toSeq	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def toSeq: Seq[A]$/;"	m
toSet	scala/collection/GenTraversableOnce.scala	/^  def toSet[A1 >: A]: GenSet[A1]$/;"	m
toSet	scala/collection/TraversableOnce.scala	/^  def toSet[B >: A]: immutable.Set[B] = immutable.Set() ++ seq$/;"	m
toSet	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def toSet[B >: A]: immutable.Set[B]$/;"	m
toShort	scala/Byte.scala	/^  def toShort: Short = sys.error("stub")$/;"	m
toShort	scala/Char.scala	/^  def toShort: Short = sys.error("stub")$/;"	m
toShort	scala/Double.scala	/^  def toShort: Short = sys.error("stub")$/;"	m
toShort	scala/Float.scala	/^  def toShort: Short = sys.error("stub")$/;"	m
toShort	scala/Int.scala	/^  def toShort: Short = sys.error("stub")$/;"	m
toShort	scala/Long.scala	/^  def toShort: Short = sys.error("stub")$/;"	m
toShort	scala/Short.scala	/^  def toShort: Short = sys.error("stub")$/;"	m
toShort	scala/collection/immutable/StringLike.scala	/^  def toShort: Short     = java.lang.Short.parseShort(toString)$/;"	m
toShort	scala/math/ScalaNumericConversions.scala	/^  def toShort = shortValue$/;"	m
toShort	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Short toShort(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
toShortExact	scala/math/BigDecimal.scala	/^  def toShortExact = bigDecimal.shortValueExact$/;"	m
toStdErr	scala/sys/process/BasicIO.scala	/^  def toStdErr = (in: InputStream) => transferFully(in, stderr)$/;"	m
toStdOut	scala/sys/process/BasicIO.scala	/^  def toStdOut = (in: InputStream) => transferFully(in, stdout)$/;"	m
toStream	scala/collection/GenTraversableOnce.scala	/^  def toStream: Stream[A]$/;"	m
toStream	scala/collection/Iterator.scala	/^  def toStream: Stream[A] =$/;"	m
toStream	scala/collection/TraversableLike.scala	/^  def toStream: Stream[A] = toBuffer.toStream$/;"	m
toStream	scala/collection/immutable/RedBlack.scala	/^    def toStream: Stream[(A,B)] = $/;"	m
toStream	scala/collection/immutable/RedBlack.scala	/^    def toStream: Stream[(A,B)]$/;"	m
toStream	scala/collection/immutable/RedBlack.scala	/^    def toStream: Stream[(A,Nothing)] = Stream.empty$/;"	m
toStream	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def toStream: Stream[A]$/;"	m
toString	scala/actors/threadpool/Arrays.java	/^    public static String toString(Object[] a) {$/;"	m	class:Arrays
toString	scala/actors/threadpool/Arrays.java	/^    public static String toString(boolean[] a) {$/;"	m	class:Arrays
toString	scala/actors/threadpool/Arrays.java	/^    public static String toString(byte[] a) {$/;"	m	class:Arrays
toString	scala/actors/threadpool/Arrays.java	/^    public static String toString(char[] a) {$/;"	m	class:Arrays
toString	scala/actors/threadpool/Arrays.java	/^    public static String toString(double[] a) {$/;"	m	class:Arrays
toString	scala/actors/threadpool/Arrays.java	/^    public static String toString(float[] a) {$/;"	m	class:Arrays
toString	scala/actors/threadpool/Arrays.java	/^    public static String toString(int[] a) {$/;"	m	class:Arrays
toString	scala/actors/threadpool/Arrays.java	/^    public static String toString(long[] a) {$/;"	m	class:Arrays
toString	scala/actors/threadpool/Arrays.java	/^    public static String toString(short[] a) {$/;"	m	class:Arrays
toString	scala/actors/threadpool/AtomicInteger.java	/^    public String toString() {$/;"	m	class:AtomicInteger
toString	scala/actors/threadpool/LinkedBlockingQueue.java	/^    public String toString() {$/;"	m	class:LinkedBlockingQueue
toString	scala/actors/threadpool/TimeUnit.java	/^    public String toString() {$/;"	m	class:TimeUnit
toString	scala/actors/threadpool/locks/ReentrantLock.java	/^    public String toString() {$/;"	m	class:ReentrantLock
toString	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        public String toString() {$/;"	m	class:ReentrantReadWriteLock.ReadLock
toString	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        public String toString() {$/;"	m	class:ReentrantReadWriteLock.WriteLock
toString	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    public String toString() {$/;"	m	class:ReentrantReadWriteLock
toString	scala/collection/MapLike.scala	/^  def toString = super[IterableLike].toString$/;"	m
toString	scala/collection/immutable/List.scala	/^  def toString(xs: List[Char]): String = {$/;"	m
toString	scala/io/Position.scala	/^  def toString(pos: Int): String = line(pos) + ":" + column(pos)$/;"	m
toString	scala/math/BigInt.scala	/^  def toString(radix: Int): String = this.bigInteger.toString(radix)$/;"	m
toString	scala/runtime/BooleanRef.java	/^    public String toString() { return String.valueOf(elem); }$/;"	m	class:BooleanRef
toString	scala/runtime/BoxedUnit.java	/^    public String toString() {$/;"	m	class:BoxedUnit
toString	scala/runtime/ByteRef.java	/^    public String toString() { return java.lang.Byte.toString(elem); }$/;"	m	class:ByteRef
toString	scala/runtime/CharRef.java	/^    public String toString() { return java.lang.Character.toString(elem); }$/;"	m	class:CharRef
toString	scala/runtime/DoubleRef.java	/^    public String toString() { return java.lang.Double.toString(elem); }$/;"	m	class:DoubleRef
toString	scala/runtime/FloatRef.java	/^    public String toString() { return java.lang.Float.toString(elem); }$/;"	m	class:FloatRef
toString	scala/runtime/IntRef.java	/^    public String toString() { return java.lang.Integer.toString(elem); }$/;"	m	class:IntRef
toString	scala/runtime/LongRef.java	/^    public String toString() { return java.lang.Long.toString(elem); }$/;"	m	class:LongRef
toString	scala/runtime/ObjectRef.java	/^    public String toString() { return String.valueOf(elem); }$/;"	m	class:ObjectRef
toString	scala/runtime/ShortRef.java	/^    public String toString() { return java.lang.Short.toString(elem); }$/;"	m	class:ShortRef
toString	scala/runtime/VolatileBooleanRef.java	/^    public String toString() { return String.valueOf(elem); }$/;"	m	class:VolatileBooleanRef
toString	scala/runtime/VolatileByteRef.java	/^    public String toString() { return java.lang.Byte.toString(elem); }$/;"	m	class:VolatileByteRef
toString	scala/runtime/VolatileCharRef.java	/^    public String toString() { return java.lang.Character.toString(elem); }$/;"	m	class:VolatileCharRef
toString	scala/runtime/VolatileDoubleRef.java	/^    public String toString() { return java.lang.Double.toString(elem); }$/;"	m	class:VolatileDoubleRef
toString	scala/runtime/VolatileFloatRef.java	/^    public String toString() { return java.lang.Float.toString(elem); }$/;"	m	class:VolatileFloatRef
toString	scala/runtime/VolatileIntRef.java	/^    public String toString() { return java.lang.Integer.toString(elem); }$/;"	m	class:VolatileIntRef
toString	scala/runtime/VolatileLongRef.java	/^    public String toString() { return java.lang.Long.toString(elem); }$/;"	m	class:VolatileLongRef
toString	scala/runtime/VolatileObjectRef.java	/^    public String toString() { return String.valueOf(elem); }$/;"	m	class:VolatileObjectRef
toString	scala/runtime/VolatileShortRef.java	/^    public String toString() { return java.lang.Short.toString(elem); }$/;"	m	class:VolatileShortRef
toString	scala/util/parsing/json/Parser.scala	/^  def toString (formatter : JSONFormat.ValueFormatter) : String$/;"	m
toString	scala/util/parsing/json/Parser.scala	/^  def toString (formatter : JSONFormat.ValueFormatter) = $/;"	m
toString	scala/util/parsing/json/Parser.scala	/^  def toString (formatter : JSONFormat.ValueFormatter) =$/;"	m
toString1	scala/xml/Attribute.scala	/^  def toString1(sb: StringBuilder) {$/;"	m
toString1	scala/xml/MetaData.scala	/^  def toString1(): String = sbToString(toString1)$/;"	m
toString1	scala/xml/MetaData.scala	/^  def toString1(sb: StringBuilder): Unit$/;"	m
toString1	scala/xml/Null.scala	/^  def toString1(sb: StringBuilder) = ()$/;"	m
toTake	scala/collection/SeqLike.scala	/^      val toTake = (fromIndex + targetCount) min sourceCount$/;"	l
toText	scala/xml/TextBuffer.scala	/^  def toText: Seq[Text] = sb.toString.trim match {$/;"	m
toTitleCase	scala/runtime/RichChar.scala	/^  def toTitleCase: Char                 = Character.toTitleCase(self)$/;"	m
toTraversable	scala/collection/GenTraversableOnce.scala	/^  def toTraversable: GenTraversable[A]$/;"	m
toTraversable	scala/collection/Iterator.scala	/^  def toTraversable: Traversable[A] = toStream  $/;"	m
toTraversable	scala/collection/TraversableLike.scala	/^  def toTraversable: Traversable[A] = thisCollection$/;"	m
toTraversable	scala/collection/TraversableOnce.scala	/^  def toTraversable: Traversable[A]$/;"	m
toTraversable	scala/collection/interfaces/TraversableOnceMethods.scala	/^  def toTraversable: Traversable[A]$/;"	m
toUTF8	scala/io/Codec.scala	/^  def toUTF8(cs: CharSequence): Array[Byte] = {$/;"	m
toUpper	scala/runtime/RichChar.scala	/^  def toUpper: Char                     = Character.toUpperCase(self)$/;"	m
toUpperCase	scala/runtime/RichChar.scala	/^  def toUpperCase: Char = toUpper$/;"	m
toXML	scala/xml/Utility.scala	/^  def toXML($/;"	m
toXhtml	scala/xml/Xhtml.scala	/^  def toXhtml($/;"	m
toXhtml	scala/xml/Xhtml.scala	/^  def toXhtml(node: Node): String = sbToString(sb => toXhtml(x = node, sb = sb))$/;"	m
toXhtml	scala/xml/Xhtml.scala	/^  def toXhtml(nodeSeq: NodeSeq): String = sbToString(sb => sequenceToXML(nodeSeq: Seq[Node], sb = sb))    $/;"	m
todo	scala/actors/Actor.scala	/^        val todo = synchronized {$/;"	l
todo	scala/actors/Actor.scala	/^    val todo = synchronized {$/;"	l
todo	scala/actors/ActorTask.scala	/^    val todo = actor.synchronized {$/;"	l
todo	scala/actors/Reactor.scala	/^    val todo = synchronized {$/;"	l
todo	scala/actors/scheduler/TerminationMonitor.scala	/^    val todo = synchronized {$/;"	l
toggle	scala/sys/BooleanProp.scala	/^    def toggle()  = if (value) disable() else enable()$/;"	m
toggle	scala/sys/BooleanProp.scala	/^  def toggle(): Unit$/;"	m
token	scala/util/parsing/combinator/lexical/Scanners.scala	/^  def token: Parser[Token]$/;"	m
token	scala/util/parsing/combinator/lexical/StdLexical.scala	/^  def token: Parser[Token] = $/;"	m
token	scala/util/parsing/combinator/token/StdTokens.scala	/^package token$/;"	p
token	scala/util/parsing/combinator/token/Tokens.scala	/^package token$/;"	p
token	scala/xml/dtd/Scanner.scala	/^  var token:Int = END$/;"	l
token2string	scala/xml/dtd/Tokens.scala	/^  final def token2string(i: Int): String = i match {$/;"	m
tokenMe	scala/annotation/switch.scala	/^  def tokenMe(ch: Char) = (ch: @switch) match {$/;"	m
top	scala/collection/immutable/HashMap.scala	/^          var top: HashTrieMap[A, B1] = null$/;"	l
top	scala/collection/immutable/Stack.scala	/^  def top: A =$/;"	m
top	scala/collection/mutable/ArrayStack.scala	/^  def top: T = table(index - 1).asInstanceOf[T]$/;"	m
top	scala/collection/mutable/ResizableArray.scala	/^    val top = size$/;"	l
top	scala/collection/mutable/Stack.scala	/^  def top: A =$/;"	m
topmost	scala/collection/immutable/TrieIterator.scala	/^        val topmost = arrayStack(0)$/;"	l
total	scala/App.scala	/^      val total = currentTime - executionStart$/;"	l
total	scala/Application.scala	/^      val total = currentTime - executionStart$/;"	l
total	scala/collection/parallel/RemainsIterator.scala	/^    var total = 0$/;"	l
total	scala/collection/parallel/mutable/ParArray.scala	/^      val total = sizesIncomplete.reduceLeft(_ + _)$/;"	l
totalbuckets	scala/collection/mutable/FlatHashTable.scala	/^    val totalbuckets = totalSizeMapBuckets$/;"	l
totalbuckets	scala/collection/mutable/HashTable.scala	/^    val totalbuckets = totalSizeMapBuckets$/;"	l
totalcombines	scala/collection/parallel/immutable/ParHashMap.scala	/^  var totalcombines = new java.util.concurrent.atomic.AtomicInteger(0)$/;"	l
totalelems	scala/collection/immutable/HashMap.scala	/^        var totalelems = 0$/;"	l
totalinserts	scala/collection/parallel/mutable/ParHashSet.scala	/^      var totalinserts = 0$/;"	l
totalleft	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^      var totalleft = howmany$/;"	l
totalleft	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^      var totalleft = howmany$/;"	l
totallen	scala/collection/parallel/mutable/ParArray.scala	/^      val totallen = (self.length - i) min len min (array.length - from)$/;"	l
tp	scala/reflect/generic/Symbols.scala	/^      val tp = rawInfo$/;"	l
tp	scala/reflect/generic/UnPickler.scala	/^          val tp = at(typeRef, () => readType(forceProperType)) \/\/ NMT_TRANSITION$/;"	l
tpEquals	scala/Predef.scala	/^     implicit def tpEquals[A]: A =:= A = singleton_=:=.asInstanceOf[A =:= A]$/;"	m
tparams	scala/reflect/generic/UnPickler.scala	/^          val tparams = times(readNat(), readTypeDefRef)$/;"	l
tparams	scala/reflect/generic/UnPickler.scala	/^          val tparams = until(end, readSymbolRef)$/;"	l
tparams	scala/reflect/generic/UnPickler.scala	/^          val tparams = until(end, readTypeDefRef)$/;"	l
tpe	scala/reflect/Symbol.scala	/^  val tpe = NamedType("scala.Unit")$/;"	l
tpe	scala/reflect/Symbol.scala	/^  val tpe = NamedType(fullname)$/;"	l
tpe	scala/reflect/Symbol.scala	/^  val tpe = NoPrefix$/;"	l
tpe	scala/reflect/Symbol.scala	/^  val tpe = NoType$/;"	l
tpe	scala/reflect/Symbol.scala	/^  val tpe: Type$/;"	l
tpe	scala/reflect/generic/Constants.scala	/^    def tpe: Type = tag match {$/;"	m
tpe	scala/reflect/generic/Symbols.scala	/^    def tpe: Type = info$/;"	m
tpe	scala/reflect/generic/Trees.scala	/^    def tpe = rawtpe$/;"	m
tpe	scala/reflect/generic/UnPickler.scala	/^      val tpe = if (tag == EMPTYtree) NoType else readTypeRef()$/;"	l
tpe_	scala/reflect/generic/Trees.scala	/^    def tpe_=(t: Type) = rawtpe = t$/;"	m
tpnme	scala/reflect/generic/StdNames.scala	/^  val tpnme: LibraryTypeNames$/;"	l
tpt	scala/reflect/generic/Trees.scala	/^    def tpt: Tree$/;"	m
tpt	scala/reflect/generic/UnPickler.scala	/^          val tpt = readTreeRef()$/;"	l
trace	scala/testing/SUnit.scala	/^    def trace(): String = thrownException.getStackTraceString$/;"	m
traceSourcePath	scala/sys/SystemProperties.scala	/^  lazy val traceSourcePath     = str("scala.control.sourcepath", "sourcepath for looking up stack trace elements")$/;"	l
trailing	scala/collection/Iterator.scala	/^    val trailing = new Iterator[A] {$/;"	l
trans	scala/util/automata/SubsetConstruction.scala	/^      val trans = delta(Q)$/;"	l
trans	scala/xml/parsing/ValidatingMarkupHandler.scala	/^      val trans = dm.dfa.delta(qCurrent)$/;"	l
transDef	scala/util/automata/SubsetConstruction.scala	/^      val transDef = deftrans(Q)$/;"	l
transferFully	scala/sys/process/BasicIO.scala	/^  def transferFully(in: InputStream, out: OutputStream): Unit =$/;"	m
transform	scala/collection/immutable/IntMap.scala	/^  def transform[S](f : (Int, T) => S) : IntMap[S] = this match {$/;"	m
transform	scala/collection/immutable/LongMap.scala	/^  def transform[S](f : (Long, T) => S) : LongMap[S] = this match {$/;"	m
transform	scala/collection/immutable/MapLike.scala	/^  def transform[C, That](f: (A, B) => C)(implicit bf: CanBuildFrom[This, (A, C), That]): That = {$/;"	m
transform	scala/collection/mutable/MapLike.scala	/^  def transform(f: (A, B) => B): this.type = {$/;"	m
transform	scala/collection/mutable/SeqLike.scala	/^  def transform(f: A => A): this.type = {$/;"	m
transform	scala/xml/transform/BasicTransformer.scala	/^  def transform(it: Iterator[Node], nb: NodeBuffer): Seq[Node] =$/;"	m
transform	scala/xml/transform/BasicTransformer.scala	/^  def transform(n: Node): Seq[Node] = {$/;"	m
transform	scala/xml/transform/BasicTransformer.scala	/^  def transform(ns: Seq[Node]): Seq[Node] = {$/;"	m
transform	scala/xml/transform/BasicTransformer.scala	/^package transform$/;"	p
transform	scala/xml/transform/RewriteRule.scala	/^package transform$/;"	p
transform	scala/xml/transform/RuleTransformer.scala	/^package transform$/;"	p
transient	scala/package.scala	/^  type transient = annotation.transient$/;"	T
transient	scala/transient.scala	/^class transient extends annotation.StaticAnnotation$/;"	c
transitionNMT	scala/reflect/generic/UnPickler.scala	/^            def transitionNMT(restpe: Type) = {$/;"	m
transmit	scala/actors/remote/TcpService.scala	/^  def transmit(data: Array[Byte]): Unit = synchronized {$/;"	m
transpose	scala/collection/Traversable.scala	/^  def transpose[B](implicit asTraversable: A => \/*<:<!!!*\/ TraversableOnce[B]): Traversable[Traversable[B]] = super.transpose(asTraversable)$/;"	m
transpose	scala/collection/generic/GenericTraversableTemplate.scala	/^  def transpose[B](implicit asTraversable: A => \/*<:<!!!*\/ TraversableOnce[B]): CC[CC[B] @uncheckedVariance] = {$/;"	m
transpose	scala/collection/immutable/List.scala	/^  def transpose[A](xss: List[List[A]]): List[List[A]] = {$/;"	m
transpose	scala/collection/mutable/ArrayOps.scala	/^  def transpose[U](implicit asArray: T => Array[U]): Array[Array[U]] = {$/;"	m
trapExit	scala/actors/Actor.scala	/^  var trapExit = false$/;"	l
traversable	scala/collection/parallel/RemainsIterator.scala	/^      val traversable = f(next).seq$/;"	l
traversable	scala/collection/parallel/mutable/ParArray.scala	/^        val traversable = f(arr(i).asInstanceOf[T])$/;"	l
traversable2ops	scala/collection/parallel/package.scala	/^  implicit def traversable2ops[T](t: collection.GenTraversableOnce[T]) = new TraversableOps[T] {$/;"	m
traversableOnceCanBuildFrom	scala/collection/TraversableOnce.scala	/^  implicit def traversableOnceCanBuildFrom[T] = new OnceCanBuildFrom[T]  $/;"	m
traverse	scala/reflect/generic/Trees.scala	/^    def traverse(tree: Tree): Unit = tree match {$/;"	m
traverse	scala/xml/dtd/ContentModel.scala	/^    def traverse(r: RegExp): Set[String] = r match { \/\/ !!! check for match translation problem$/;"	m
traverse	scala/xml/factory/Binder.scala	/^  final def traverse(n:Node): Unit = n match {$/;"	m
traverseStats	scala/reflect/generic/Trees.scala	/^    def traverseStats(stats: List[Tree], exprOwner: Symbol) {$/;"	m
traverseTrees	scala/reflect/generic/Trees.scala	/^    def traverseTrees(trees: List[Tree]) {$/;"	m
traverseTreess	scala/reflect/generic/Trees.scala	/^    def traverseTreess(treess: List[List[Tree]]) {$/;"	m
traversed	scala/collection/parallel/mutable/ParArray.scala	/^      var traversed = i$/;"	l
trd	scala/io/BytePickle.scala	/^    def trd(p: (a,b,c)): c = p._3$/;"	m
tree	scala/collection/immutable/TreeSet.scala	/^    val tree = this.tree.range(from, until)$/;"	l
trees	scala/collection/parallel/ParIterableLike.scala	/^      val trees = ArrayBuffer[ScanTree[U]]()$/;"	l
trees	scala/reflect/generic/UnPickler.scala	/^          val trees = until(end, readTreeRef)$/;"	l
trie	scala/collection/parallel/immutable/ParHashMap.scala	/^      val trie = new HashMap.HashTrieMap(bitmap, root, sz)$/;"	l
trie	scala/collection/parallel/immutable/ParHashMap.scala	/^      val trie = new HashMap.HashTrieMap(bitmap, root.asInstanceOf[Array[HashMap[K, Repr]]], sz)$/;"	l
trie	scala/collection/parallel/immutable/ParHashMap.scala	/^      var trie = new HashMap[K, Combiner[V, Repr]]$/;"	l
trie	scala/collection/parallel/immutable/ParHashMap.scala	/^      var trie = new HashMap[K, V]$/;"	l
trie	scala/collection/parallel/immutable/ParHashSet.scala	/^      val trie = new HashSet.HashTrieSet(bitmap, root, sz)$/;"	l
trie	scala/collection/parallel/immutable/ParHashSet.scala	/^      var trie = new HashSet[T]$/;"	l
trim	scala/xml/Utility.scala	/^  def trim(x: Node): Node = x match {$/;"	m
trimEnd	scala/collection/mutable/BufferLike.scala	/^  def trimEnd(n: Int) { remove(length - n max 0, n) }$/;"	m
trimProper	scala/xml/Utility.scala	/^  def trimProper(x:Node): Seq[Node] = x match {$/;"	m
trimStart	scala/collection/mutable/BufferLike.scala	/^  def trimStart(n: Int) { remove(0, n) }$/;"	m
triple	scala/io/BytePickle.scala	/^  def triple[a,b,c](pa: SPU[a], pb: SPU[b], pc: SPU[c]): SPU[(a,b,c)] = {$/;"	m
truncatedError	scala/xml/parsing/MarkupParser.scala	/^  def truncatedError(msg: String): Nothing = throw FatalError(msg)$/;"	m
truncatedError	scala/xml/parsing/MarkupParserCommon.scala	/^  def truncatedError(msg: String): Nothing$/;"	m
tryBreakable	scala/util/control/Breaks.scala	/^  def tryBreakable(op: => Unit) = new TryBlock {$/;"	m
tryCancel	scala/collection/parallel/Tasks.scala	/^    def tryCancel = false$/;"	m
tryCancel	scala/collection/parallel/Tasks.scala	/^    def tryCancel = synchronized {$/;"	m
tryCancel	scala/collection/parallel/Tasks.scala	/^    def tryCancel = tryUnfork$/;"	m
tryCancel	scala/collection/parallel/Tasks.scala	/^    def tryCancel: Boolean$/;"	m
tryCompare	scala/math/Ordering.scala	/^  def tryCompare(x: T, y: T) = Some(compare(x, y))$/;"	m
tryCompare	scala/math/PartialOrdering.scala	/^    def tryCompare(x: T, y: T) = outer.tryCompare(y, x)$/;"	m
tryCompare	scala/math/PartialOrdering.scala	/^  def tryCompare(x: T, y: T): Option[Int]$/;"	m
tryCompareTo	scala/math/PartiallyOrdered.scala	/^  def tryCompareTo [B >: A <% PartiallyOrdered[B]](that: B): Option[Int]$/;"	m
tryInstead	scala/util/control/Exception.scala	/^    def tryInstead[U >: T](other: => U) = new Try(other, catcher)$/;"	m
tryLock	scala/actors/threadpool/locks/Lock.java	/^    boolean tryLock();$/;"	m	interface:Lock
tryLock	scala/actors/threadpool/locks/Lock.java	/^    boolean tryLock(long time, TimeUnit unit) throws InterruptedException;$/;"	m	interface:Lock
tryLock	scala/actors/threadpool/locks/ReentrantLock.java	/^        public abstract boolean tryLock(long nanos) throws InterruptedException;$/;"	m	class:ReentrantLock.Sync
tryLock	scala/actors/threadpool/locks/ReentrantLock.java	/^        public boolean tryLock() {$/;"	m	class:ReentrantLock.Sync
tryLock	scala/actors/threadpool/locks/ReentrantLock.java	/^        public boolean tryLock(long nanos) throws InterruptedException {$/;"	m	class:ReentrantLock.FairSync
tryLock	scala/actors/threadpool/locks/ReentrantLock.java	/^        public boolean tryLock(long nanos) throws InterruptedException {$/;"	m	class:ReentrantLock.NonfairSync
tryLock	scala/actors/threadpool/locks/ReentrantLock.java	/^    public boolean tryLock() {$/;"	m	class:ReentrantLock
tryLock	scala/actors/threadpool/locks/ReentrantLock.java	/^    public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException {$/;"	m	class:ReentrantLock
tryLock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        public boolean tryLock() {$/;"	m	class:ReentrantReadWriteLock.ReadLock
tryLock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        public boolean tryLock() {$/;"	m	class:ReentrantReadWriteLock.WriteLock
tryLock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException {$/;"	m	class:ReentrantReadWriteLock.ReadLock
tryLock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException {$/;"	m	class:ReentrantReadWriteLock.WriteLock
tryTerminate	scala/actors/threadpool/ThreadPoolExecutor.java	/^    final void tryTerminate() {$/;"	m	class:ThreadPoolExecutor
ts	scala/xml/parsing/MarkupParser.scala	/^      val ts = new NodeBuffer();$/;"	l
ts	scala/xml/parsing/MarkupParser.scala	/^    val ts = {$/;"	l
ts	scala/xml/parsing/MarkupParser.scala	/^    var ts = new NodeBuffer$/;"	l
tsk	scala/collection/parallel/ParSeqLike.scala	/^        val tsk = new that.Copy[U, That](() => pbf(repr), that.splitter)$/;"	l
tupled	scala/Function.scala	/^  def tupled[a1, a2, a3, a4, a5, b](f: (a1, a2, a3, a4, a5) => b): Tuple5[a1, a2, a3, a4, a5] => b = {$/;"	m
tupled	scala/Function.scala	/^  def tupled[a1, a2, a3, a4, b](f: (a1, a2, a3, a4) => b): Tuple4[a1, a2, a3, a4] => b = {$/;"	m
tupled	scala/Function.scala	/^  def tupled[a1, a2, a3, b](f: (a1, a2, a3) => b): Tuple3[a1, a2, a3] => b = {$/;"	m
tupled	scala/Function.scala	/^  def tupled[a1, a2, b](f: (a1, a2) => b): Tuple2[a1, a2] => b = {$/;"	m
tupled	scala/Function10.scala	/^  def tupled: Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10] => R = {$/;"	m
tupled	scala/Function11.scala	/^  def tupled: Tuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11] => R = {$/;"	m
tupled	scala/Function12.scala	/^  def tupled: Tuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12] => R = {$/;"	m
tupled	scala/Function13.scala	/^  def tupled: Tuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13] => R = {$/;"	m
tupled	scala/Function14.scala	/^  def tupled: Tuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14] => R = {$/;"	m
tupled	scala/Function15.scala	/^  def tupled: Tuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15] => R = {$/;"	m
tupled	scala/Function16.scala	/^  def tupled: Tuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16] => R = {$/;"	m
tupled	scala/Function17.scala	/^  def tupled: Tuple17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17] => R = {$/;"	m
tupled	scala/Function18.scala	/^  def tupled: Tuple18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18] => R = {$/;"	m
tupled	scala/Function19.scala	/^  def tupled: Tuple19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19] => R = {$/;"	m
tupled	scala/Function2.scala	/^  def tupled: Tuple2[T1, T2] => R = {$/;"	m
tupled	scala/Function20.scala	/^  def tupled: Tuple20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20] => R = {$/;"	m
tupled	scala/Function21.scala	/^  def tupled: Tuple21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21] => R = {$/;"	m
tupled	scala/Function22.scala	/^  def tupled: Tuple22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22] => R = {$/;"	m
tupled	scala/Function3.scala	/^  def tupled: Tuple3[T1, T2, T3] => R = {$/;"	m
tupled	scala/Function4.scala	/^  def tupled: Tuple4[T1, T2, T3, T4] => R = {$/;"	m
tupled	scala/Function5.scala	/^  def tupled: Tuple5[T1, T2, T3, T4, T5] => R = {$/;"	m
tupled	scala/Function6.scala	/^  def tupled: Tuple6[T1, T2, T3, T4, T5, T6] => R = {$/;"	m
tupled	scala/Function7.scala	/^  def tupled: Tuple7[T1, T2, T3, T4, T5, T6, T7] => R = {$/;"	m
tupled	scala/Function8.scala	/^  def tupled: Tuple8[T1, T2, T3, T4, T5, T6, T7, T8] => R = {$/;"	m
tupled	scala/Function9.scala	/^  def tupled: Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9] => R = {$/;"	m
typeArguments	scala/reflect/ClassManifest.scala	/^  def typeArguments: List[OptManifest[_]] = List()$/;"	m
typeCode	scala/runtime/BoxesRunTime.java	/^    private static int typeCode(Object a) {$/;"	m	class:BoxesRunTime	file:
typeOfThis	scala/reflect/generic/Symbols.scala	/^    def typeOfThis: Type$/;"	m
typeOfThis_	scala/reflect/generic/Symbols.scala	/^    def typeOfThis_=(tp: Type)       { throw new UnsupportedOperationException("typeOfThis_= inapplicable for " + this) }$/;"	m
typeParams	scala/reflect/generic/UnPickler.scala	/^          val typeParams = until(end, readSymbolRef)$/;"	l
typeRef	scala/reflect/generic/UnPickler.scala	/^          var typeRef = readNat()$/;"	l
typeSymbol	scala/reflect/generic/Types.scala	/^    def typeSymbol: Symbol$/;"	m
typeValue	scala/reflect/generic/Constants.scala	/^    def typeValue: Type     = value.asInstanceOf[Type]$/;"	m
u	scala/collection/parallel/ParIterableLike.scala	/^        val u = (until min (untilp + p.remaining)) - untilp$/;"	l
u	scala/collection/parallel/RemainsIterator.scala	/^    var u: U = next$/;"	l
uc	scala/xml/include/sax/XIncludeFilter.scala	/^      val uc = source.openConnection()$/;"	l
ufixedList	scala/io/BytePickle.scala	/^  def ufixedList[A](pa: PU[A])(n: Int): PU[List[A]] = {$/;"	m
ui	scala/collection/JavaConversions.scala	/^        val ui = underlying.iterator$/;"	l
ui	scala/collection/JavaConversions.scala	/^      val ui = underlying.entrySet.iterator$/;"	l
ui	scala/collection/JavaConversions.scala	/^      val ui = underlying.iterator$/;"	l
ulift	scala/io/BytePickle.scala	/^  def ulift[t](x: t): PU[t] = new PU[t] {$/;"	m
ulist	scala/io/BytePickle.scala	/^  def ulist[a](pa: PU[a]): PU[List[a]] =$/;"	m
ulp	scala/math/BigDecimal.scala	/^  def ulp: BigDecimal = this.bigDecimal.ulp$/;"	m
ulp	scala/math/package.scala	/^  def ulp(x: Double): Double = java.lang.Math.ulp(x)$/;"	m
ulp	scala/math/package.scala	/^  def ulp(x: Float): Float = java.lang.Math.ulp(x)$/;"	m
ultimately	scala/util/control/Exception.scala	/^  def ultimately[T](body: => Unit): Catch[T] = noCatch andFinally body$/;"	m
unapply	scala/Predef.scala	/^    def unapply[A, B, C](x: Tuple3[A, B, C]): Option[Tuple3[A, B, C]] = Some(x)$/;"	m
unapply	scala/Predef.scala	/^    def unapply[A, B](x: Tuple2[A, B]): Option[Tuple2[A, B]] = Some(x)$/;"	m
unapply	scala/Product1.scala	/^  def unapply[T1](x: Product1[T1]): Option[Product1[T1]] = $/;"	m
unapply	scala/Product10.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10](x: Product10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]): Option[Product10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]] = $/;"	m
unapply	scala/Product11.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11](x: Product11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]): Option[Product11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]] = $/;"	m
unapply	scala/Product12.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12](x: Product12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]): Option[Product12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]] = $/;"	m
unapply	scala/Product13.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13](x: Product13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]): Option[Product13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]] = $/;"	m
unapply	scala/Product14.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14](x: Product14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]): Option[Product14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]] = $/;"	m
unapply	scala/Product15.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15](x: Product15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]): Option[Product15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]] = $/;"	m
unapply	scala/Product16.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16](x: Product16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]): Option[Product16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]] = $/;"	m
unapply	scala/Product17.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17](x: Product17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17]): Option[Product17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17]] = $/;"	m
unapply	scala/Product18.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18](x: Product18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18]): Option[Product18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18]] = $/;"	m
unapply	scala/Product19.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19](x: Product19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19]): Option[Product19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19]] = $/;"	m
unapply	scala/Product2.scala	/^  def unapply[T1, T2](x: Product2[T1, T2]): Option[Product2[T1, T2]] = $/;"	m
unapply	scala/Product20.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20](x: Product20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20]): Option[Product20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20]] = $/;"	m
unapply	scala/Product21.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21](x: Product21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21]): Option[Product21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21]] = $/;"	m
unapply	scala/Product22.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22](x: Product22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22]): Option[Product22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22]] = $/;"	m
unapply	scala/Product3.scala	/^  def unapply[T1, T2, T3](x: Product3[T1, T2, T3]): Option[Product3[T1, T2, T3]] = $/;"	m
unapply	scala/Product4.scala	/^  def unapply[T1, T2, T3, T4](x: Product4[T1, T2, T3, T4]): Option[Product4[T1, T2, T3, T4]] = $/;"	m
unapply	scala/Product5.scala	/^  def unapply[T1, T2, T3, T4, T5](x: Product5[T1, T2, T3, T4, T5]): Option[Product5[T1, T2, T3, T4, T5]] = $/;"	m
unapply	scala/Product6.scala	/^  def unapply[T1, T2, T3, T4, T5, T6](x: Product6[T1, T2, T3, T4, T5, T6]): Option[Product6[T1, T2, T3, T4, T5, T6]] = $/;"	m
unapply	scala/Product7.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7](x: Product7[T1, T2, T3, T4, T5, T6, T7]): Option[Product7[T1, T2, T3, T4, T5, T6, T7]] = $/;"	m
unapply	scala/Product8.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8](x: Product8[T1, T2, T3, T4, T5, T6, T7, T8]): Option[Product8[T1, T2, T3, T4, T5, T6, T7, T8]] = $/;"	m
unapply	scala/Product9.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9](x: Product9[T1, T2, T3, T4, T5, T6, T7, T8, T9]): Option[Product9[T1, T2, T3, T4, T5, T6, T7, T8, T9]] = $/;"	m
unapply	scala/Symbol.scala	/^  def unapply(other: V): Option[K] = keyFromValue(other)$/;"	m
unapply	scala/collection/immutable/Stream.scala	/^    def unapply[A](xs: Stream[A]): Option[(A, Stream[A])] = #::.unapply(xs)$/;"	m
unapply	scala/collection/immutable/Stream.scala	/^    def unapply[A](xs: Stream[A]): Option[(A, Stream[A])] = $/;"	m
unapply	scala/reflect/generic/AnnotationInfos.scala	/^    def unapply(arg: ArrayAnnotArg): Option[Array[ClassfileAnnotArg]]$/;"	m
unapply	scala/reflect/generic/AnnotationInfos.scala	/^    def unapply(arg: LiteralAnnotArg): Option[Constant]$/;"	m
unapply	scala/reflect/generic/AnnotationInfos.scala	/^    def unapply(arg: NestedAnnotArg): Option[AnnotationInfo]$/;"	m
unapply	scala/reflect/generic/AnnotationInfos.scala	/^    def unapply(info: AnnotationInfo): Option[(Type, List[Tree], List[(Name, ClassfileAnnotArg)])]$/;"	m
unapply	scala/reflect/generic/Trees.scala	/^    def unapply(tree: TypeTree): Boolean$/;"	m
unapply	scala/reflect/generic/Types.scala	/^    def unapply(tpe: AnnotatedType): Option[(List[AnnotationInfo], Type, Symbol)]$/;"	m
unapply	scala/reflect/generic/Types.scala	/^    def unapply(tpe: ClassInfoType): Option[(List[Type], Scope, Symbol)]$/;"	m
unapply	scala/reflect/generic/Types.scala	/^    def unapply(tpe: ConstantType): Option[Constant]$/;"	m
unapply	scala/reflect/generic/Types.scala	/^    def unapply(tpe: ExistentialType): Option[(List[Symbol], Type)]$/;"	m
unapply	scala/reflect/generic/Types.scala	/^    def unapply(tpe: MethodType): Option[(List[Symbol], Type)]$/;"	m
unapply	scala/reflect/generic/Types.scala	/^    def unapply(tpe: NullaryMethodType): Option[(Type)]$/;"	m
unapply	scala/reflect/generic/Types.scala	/^    def unapply(tpe: PolyType): Option[(List[Symbol], Type)]$/;"	m
unapply	scala/reflect/generic/Types.scala	/^    def unapply(tpe: RefinedType): Option[(List[Type], Scope)]$/;"	m
unapply	scala/reflect/generic/Types.scala	/^    def unapply(tpe: SingleType): Option[(Type, Symbol)]$/;"	m
unapply	scala/reflect/generic/Types.scala	/^    def unapply(tpe: SuperType): Option[(Type, Type)]$/;"	m
unapply	scala/reflect/generic/Types.scala	/^    def unapply(tpe: ThisType): Option[Symbol]$/;"	m
unapply	scala/reflect/generic/Types.scala	/^    def unapply(tpe: TypeBounds): Option[(Type, Type)]$/;"	m
unapply	scala/reflect/generic/Types.scala	/^    def unapply(tpe: TypeRef): Option[(Type, Symbol, List[Type])]$/;"	m
unapply	scala/util/matching/Regex.scala	/^    def unapply(m: Match): Some[String] = Some(m.matched)$/;"	m
unapply	scala/util/parsing/combinator/Parsers.scala	/^    def unapply[T](x: ParseResult[T]) = x match {$/;"	m
unapply	scala/xml/Attribute.scala	/^  def unapply(x: Attribute) = x match {$/;"	m
unapply	scala/xml/PrefixedAttribute.scala	/^  def unapply(x: PrefixedAttribute) = Some(x.pre, x.key, x.value, x.next)$/;"	m
unapply	scala/xml/Unparsed.scala	/^  def unapply(x: Unparsed) = Some(x.data)$/;"	m
unapply	scala/xml/UnprefixedAttribute.scala	/^  def unapply(x: UnprefixedAttribute) = Some(x.key, x.value, x.next)$/;"	m
unapplySeq	scala/Array.scala	/^  def unapplySeq[T](x: Array[T]): Option[IndexedSeq[T]] =$/;"	m
unapplySeq	scala/collection/generic/GenSeqFactory.scala	/^  def unapplySeq[A](x: CC[A]): Some[CC[A]] = Some(x)$/;"	m
unapplySeq	scala/util/matching/Regex.scala	/^    def unapplySeq(m: Match): Option[Seq[String]] = if (m.groupCount > 0) Some(1 to m.groupCount map m.group) else None$/;"	m
unapplySeq	scala/util/matching/Regex.scala	/^  def unapplySeq(target: Any): Option[List[String]] = target match {$/;"	m
unapplySeq	scala/util/regexp/Base.scala	/^    def unapplySeq(x: Alt) = Some(x.rs)$/;"	m
unapplySeq	scala/util/regexp/Base.scala	/^    def unapplySeq(x: Sequ) = Some(x.rs)  $/;"	m
unapplySeq	scala/xml/Elem.scala	/^  def unapplySeq(n: Node) = n match {$/;"	m
unapplySeq	scala/xml/HasKeyValue.scala	/^  def unapplySeq(x: MetaData): Option[Seq[Node]] = x.get(key)$/;"	m
unapplySeq	scala/xml/Node.scala	/^  def unapplySeq(n: Node) = Some((n.label, n.attributes, n.child))$/;"	m
unapplySeq	scala/xml/QNode.scala	/^  def unapplySeq(n: Node) = Some((n.scope.getURI(n.prefix), n.label, n.attributes, n.child))$/;"	m
unary_	scala/Boolean.scala	/^  def unary_! : Boolean = sys.error("stub")$/;"	m
unary_	scala/Byte.scala	/^  def unary_+ : Int = sys.error("stub")$/;"	m
unary_	scala/Byte.scala	/^  def unary_- : Int = sys.error("stub")$/;"	m
unary_	scala/Byte.scala	/^  def unary_~ : Int = sys.error("stub")$/;"	m
unary_	scala/Char.scala	/^  def unary_+ : Int = sys.error("stub")$/;"	m
unary_	scala/Char.scala	/^  def unary_- : Int = sys.error("stub")$/;"	m
unary_	scala/Char.scala	/^  def unary_~ : Int = sys.error("stub")$/;"	m
unary_	scala/Double.scala	/^  def unary_+ : Double = sys.error("stub")$/;"	m
unary_	scala/Double.scala	/^  def unary_- : Double = sys.error("stub")$/;"	m
unary_	scala/Float.scala	/^  def unary_+ : Float = sys.error("stub")$/;"	m
unary_	scala/Float.scala	/^  def unary_- : Float = sys.error("stub")$/;"	m
unary_	scala/Int.scala	/^  def unary_+ : Int = sys.error("stub")$/;"	m
unary_	scala/Int.scala	/^  def unary_- : Int = sys.error("stub")$/;"	m
unary_	scala/Int.scala	/^  def unary_~ : Int = sys.error("stub")$/;"	m
unary_	scala/Long.scala	/^  def unary_+ : Long = sys.error("stub")$/;"	m
unary_	scala/Long.scala	/^  def unary_- : Long = sys.error("stub")$/;"	m
unary_	scala/Long.scala	/^  def unary_~ : Long = sys.error("stub")$/;"	m
unary_	scala/Short.scala	/^  def unary_+ : Int = sys.error("stub")$/;"	m
unary_	scala/Short.scala	/^  def unary_- : Int = sys.error("stub")$/;"	m
unary_	scala/Short.scala	/^  def unary_~ : Int = sys.error("stub")$/;"	m
unary_	scala/math/BigDecimal.scala	/^  def unary_- : BigDecimal = this.bigDecimal.negate(mc)$/;"	m
unary_	scala/math/BigInt.scala	/^  def unary_- : BigInt   = new BigInt(this.bigInteger.negate())$/;"	m
unary_	scala/math/BigInt.scala	/^  def unary_~ : BigInt = new BigInt(this.bigInteger.not())$/;"	m
unary_	scala/math/Numeric.scala	/^    def unary_-() = negate(lhs)$/;"	m
unat	scala/io/BytePickle.scala	/^  def unat: PU[Int] = new PU[Int] {$/;"	m
unaugmentString	scala/Predef.scala	/^  implicit def unaugmentString(x: StringOps): String = x.repr$/;"	m
unbox	scala/Boolean.scala	/^  def unbox(x: java.lang.Object): Boolean = x.asInstanceOf[java.lang.Boolean].booleanValue()$/;"	m
unbox	scala/Byte.scala	/^  def unbox(x: java.lang.Object): Byte = x.asInstanceOf[java.lang.Byte].byteValue()$/;"	m
unbox	scala/Char.scala	/^  def unbox(x: java.lang.Object): Char = x.asInstanceOf[java.lang.Character].charValue()$/;"	m
unbox	scala/Double.scala	/^  def unbox(x: java.lang.Object): Double = x.asInstanceOf[java.lang.Double].doubleValue()$/;"	m
unbox	scala/Float.scala	/^  def unbox(x: java.lang.Object): Float = x.asInstanceOf[java.lang.Float].floatValue()$/;"	m
unbox	scala/Int.scala	/^  def unbox(x: java.lang.Object): Int = x.asInstanceOf[java.lang.Integer].intValue()$/;"	m
unbox	scala/Long.scala	/^  def unbox(x: java.lang.Object): Long = x.asInstanceOf[java.lang.Long].longValue()$/;"	m
unbox	scala/Short.scala	/^  def unbox(x: java.lang.Object): Short = x.asInstanceOf[java.lang.Short].shortValue()$/;"	m
unbox	scala/Unit.scala	/^  def unbox(x: java.lang.Object): Unit = ()$/;"	m
unboxToBoolean	scala/runtime/BoxesRunTime.java	/^    public static boolean unboxToBoolean(Object b) {$/;"	m	class:BoxesRunTime
unboxToByte	scala/runtime/BoxesRunTime.java	/^    public static byte unboxToByte(Object b) {$/;"	m	class:BoxesRunTime
unboxToChar	scala/runtime/BoxesRunTime.java	/^    public static char unboxToChar(Object c) {$/;"	m	class:BoxesRunTime
unboxToDouble	scala/runtime/BoxesRunTime.java	/^    public static double unboxToDouble(Object d) {$/;"	m	class:BoxesRunTime
unboxToFloat	scala/runtime/BoxesRunTime.java	/^    public static float unboxToFloat(Object f) {$/;"	m	class:BoxesRunTime
unboxToInt	scala/runtime/BoxesRunTime.java	/^    public static int unboxToInt(Object i) {$/;"	m	class:BoxesRunTime
unboxToLong	scala/runtime/BoxesRunTime.java	/^    public static long unboxToLong(Object l) {$/;"	m	class:BoxesRunTime
unboxToShort	scala/runtime/BoxesRunTime.java	/^    public static short unboxToShort(Object s) {$/;"	m	class:BoxesRunTime
uncaught	scala/actors/ActorTask.scala	/^    val uncaught = UncaughtException(actor,$/;"	l
uncaughtException	scala/actors/threadpool/helpers/ThreadHelpers.java	/^        void uncaughtException(Thread thread, Throwable error);$/;"	m	interface:ThreadHelpers.UncaughtExceptionHandler
unchecked	scala/package.scala	/^  type unchecked = annotation.unchecked.unchecked$/;"	T
unchecked	scala/unchecked.scala	/^class unchecked extends annotation.Annotation {}$/;"	c
uncheckedStable	scala/annotation/unchecked/uncheckedStable.scala	/^final class uncheckedStable extends annotation.StaticAnnotation {}$/;"	c
uncheckedVariance	scala/annotation/unchecked/uncheckedVariance.scala	/^final class uncheckedVariance extends annotation.StaticAnnotation {}$/;"	c
unconfigurableExecutorService	scala/actors/threadpool/Executors.java	/^    public static ExecutorService unconfigurableExecutorService(ExecutorService executor) {$/;"	m	class:Executors
uncurried	scala/Function.scala	/^  def uncurried[a1, a2, a3, a4, a5, b](f: a1 => a2 => a3 => a4 => a5 => b): (a1, a2, a3, a4, a5) => b  =  {$/;"	m
uncurried	scala/Function.scala	/^  def uncurried[a1, a2, a3, a4, b](f: a1 => a2 => a3 => a4 => b): (a1, a2, a3, a4) => b = {$/;"	m
uncurried	scala/Function.scala	/^  def uncurried[a1, a2, a3, b](f: a1 => a2 => a3 => b): (a1, a2, a3) => b = {$/;"	m
uncurried	scala/Function.scala	/^  def uncurried[a1, a2, b](f: a1 => a2 => b): (a1, a2) => b = {$/;"	m
underlying	scala/collection/GenTraversableViewLike.scala	/^    lazy val underlying = self.underlying$/;"	l
underlying	scala/collection/JavaConversions.scala	/^    def underlying: ju.Map[A, B]$/;"	m
underlying	scala/collection/JavaConversions.scala	/^    val underlying: Iterable[A]$/;"	l
underlying	scala/math/BigDecimal.scala	/^  def underlying = bigDecimal$/;"	m
underlying	scala/math/BigInt.scala	/^  def underlying = bigInteger$/;"	m
underlying	scala/math/ScalaNumber.java	/^  public abstract Object underlying();$/;"	m	class:ScalaNumber
underlying	scala/ref/PhantomReference.scala	/^  val underlying: java.lang.ref.PhantomReference[_ <: T] = $/;"	l
underlying	scala/ref/ReferenceWrapper.scala	/^  val underlying: java.lang.ref.Reference[_ <: T]$/;"	l
underlying	scala/ref/SoftReference.scala	/^  val underlying: java.lang.ref.SoftReference[_ <: T] =$/;"	l
underlying	scala/ref/WeakReference.scala	/^  val underlying: java.lang.ref.WeakReference[_ <: T] = $/;"	l
underlying	scala/runtime/ScalaNumberProxy.scala	/^  def underlying()  = self.asInstanceOf[AnyRef]$/;"	m
undo	scala/collection/mutable/ObservableBuffer.scala	/^      def undo() { insert(n, oldelement) }$/;"	m
undo	scala/collection/mutable/ObservableBuffer.scala	/^      def undo() { throw new UnsupportedOperationException("cannot undo") }$/;"	m
undo	scala/collection/mutable/ObservableBuffer.scala	/^      def undo() { trimEnd(1) }$/;"	m
undo	scala/collection/mutable/ObservableBuffer.scala	/^      def undo() { trimStart(1) }$/;"	m
undo	scala/collection/mutable/ObservableBuffer.scala	/^      def undo() { update(n, oldelement) }$/;"	m
undo	scala/collection/mutable/ObservableMap.scala	/^          def undo = +=((key, old))$/;"	m
undo	scala/collection/mutable/ObservableMap.scala	/^          def undo = -=(key)$/;"	m
undo	scala/collection/mutable/ObservableMap.scala	/^          def undo = update(key, old)$/;"	m
undo	scala/collection/mutable/ObservableMap.scala	/^      def undo(): Unit = throw new UnsupportedOperationException("cannot undo") $/;"	m
undo	scala/collection/mutable/ObservableSet.scala	/^      def undo(): Unit = throw new UnsupportedOperationException("cannot undo") $/;"	m
undo	scala/collection/mutable/RevertibleHistory.scala	/^  def undo(): Unit = {$/;"	m
undo	scala/collection/mutable/Undoable.scala	/^  def undo(): Unit$/;"	m
unescMap	scala/xml/Utility.scala	/^    val unescMap  = pairs ++ Map("apos"  -> '\\'')$/;"	l
unescape	scala/xml/Utility.scala	/^  final def unescape(ref: String, s: StringBuilder): StringBuilder =$/;"	m
unicode	scala/reflect/NameTransformer.scala	/^      var unicode = false$/;"	l
union	scala/collection/GenSeqLike.scala	/^  def union[B >: A, That](that: GenSeq[B])(implicit bf: CanBuildFrom[Repr, B, That]): That = this ++ that$/;"	m
union	scala/collection/GenSeqLike.scala	/^  def union[B >: A, That](that: Seq[B])(implicit bf: CanBuildFrom[Repr, B, That]): That =$/;"	m
union	scala/collection/GenSetLike.scala	/^  def union(that: GenSet[A]): Repr$/;"	m
union	scala/collection/SetLike.scala	/^  def union(that: GenSet[A]): This = this ++ that$/;"	m
union	scala/collection/SetLike.scala	/^  def union(that: Set[A]): This = union(that: GenSet[A])$/;"	m
union	scala/collection/immutable/HashMap.scala	/^    var union = Set[K]()$/;"	l
union	scala/collection/immutable/RedBlack.scala	/^        val union = if (leftMost) { $/;"	l
union	scala/collection/interfaces/SeqMethods.scala	/^  def union[B >: A, That](that: Seq[B])(implicit bf: CanBuildFrom[This, B, That]): That$/;"	m
union	scala/collection/interfaces/SetMethods.scala	/^  def union(that: Set[A]): This$/;"	m
union	scala/collection/parallel/ParSetLike.scala	/^  def union(that: GenSet[T]): Repr = sequentially {$/;"	m
unionWith	scala/collection/immutable/IntMap.scala	/^  def unionWith[S >: T](that : IntMap[S], f : (Int, S, S) => S) : IntMap[S] = (this, that) match{$/;"	m
unionWith	scala/collection/immutable/LongMap.scala	/^  def unionWith[S >: T](that : LongMap[S], f : (Long, S, S) => S) : LongMap[S] = (this, that) match{$/;"	m
unit	scala/util/parsing/ast/Binders.scala	/^    def unit[bt <: NameElement, elementT <% Mappable[elementT]](x: elementT) = UnderBinder(new Scope[bt](), x)$/;"	m
unitArrayOps	scala/Predef.scala	/^  implicit def unitArrayOps(xs: Array[Unit]): ArrayOps[Unit] = new ArrayOps.ofUnit(xs)$/;"	m
universal	scala/math/Equiv.scala	/^  def universal[T] : Equiv[T] = new Equiv[T] {$/;"	m
universalEquiv	scala/math/Equiv.scala	/^  implicit def universalEquiv[T] : Equiv[T] = universal[T]$/;"	m
unlift	scala/Function.scala	/^  def unlift[T, R](f: T => Option[R]): PartialFunction[T, R] = new PartialFunction[T, R] {$/;"	m
unlink	scala/actors/Actor.scala	/^  def unlink(from: AbstractActor) {$/;"	m
unlink	scala/actors/Actor.scala	/^  def unlink(from: AbstractActor): Unit = self.unlink(from)$/;"	m
unlink	scala/actors/threadpool/LinkedBlockingQueue.java	/^    void unlink(Node<E> p, Node<E> trail) {$/;"	m	class:LinkedBlockingQueue
unlink	scala/actors/threadpool/SynchronousQueue.java	/^        abstract void unlink(Node node);$/;"	m	class:SynchronousQueue.WaitQueue
unlink	scala/actors/threadpool/SynchronousQueue.java	/^        void unlink(Node node) {$/;"	m	class:SynchronousQueue.FifoWaitQueue
unlink	scala/actors/threadpool/SynchronousQueue.java	/^        void unlink(Node node) {$/;"	m	class:SynchronousQueue.LifoWaitQueue
unlinkCancelledConsumer	scala/actors/threadpool/SynchronousQueue.java	/^    private void unlinkCancelledConsumer(Node node) {$/;"	m	class:SynchronousQueue	file:
unlinkCancelledProducer	scala/actors/threadpool/SynchronousQueue.java	/^    private void unlinkCancelledProducer(Node node) {$/;"	m	class:SynchronousQueue	file:
unlinkFrom	scala/actors/remote/Proxy.scala	/^  def unlinkFrom(from: AbstractActor): Unit =$/;"	m
unlock	scala/actors/threadpool/locks/Lock.java	/^    void unlock();$/;"	m	interface:Lock
unlock	scala/actors/threadpool/locks/ReentrantLock.java	/^        public abstract void unlock();$/;"	m	class:ReentrantLock.Sync
unlock	scala/actors/threadpool/locks/ReentrantLock.java	/^        public synchronized void unlock() {$/;"	m	class:ReentrantLock.NonfairSync
unlock	scala/actors/threadpool/locks/ReentrantLock.java	/^        public void unlock() {$/;"	m	class:ReentrantLock.FairSync
unlock	scala/actors/threadpool/locks/ReentrantLock.java	/^    public void unlock() {$/;"	m	class:ReentrantLock
unlock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        public void unlock() {$/;"	m	class:ReentrantReadWriteLock.ReadLock
unlock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        public void unlock() {$/;"	m	class:ReentrantReadWriteLock.WriteLock
unparsedEntities	scala/xml/Document.scala	/^  def unparsedEntities: Seq[scala.xml.dtd.EntityDecl] = $/;"	m
unparsedEntities	scala/xml/dtd/DTD.scala	/^  def unparsedEntities: Seq[EntityDecl] = Nil$/;"	m
unparsedEntityDecl	scala/xml/parsing/MarkupHandler.scala	/^  def unparsedEntityDecl(name: String, extID: ExternalID, notat: String): Unit = ()$/;"	m
unpickle	scala/io/BytePickle.scala	/^  def unpickle[T](p: SPU[T], stream: Array[Byte]): T =$/;"	m
unpickle	scala/reflect/generic/UnPickler.scala	/^  def unpickle(bytes: Array[Byte], offset: Int, classRoot: Symbol, moduleRoot: Symbol, filename: String) {$/;"	m
unrolled	scala/collection/mutable/UnrolledBuffer.scala	/^      var unrolled = this$/;"	l
unrolled	scala/collection/parallel/immutable/ParHashMap.scala	/^      var unrolled = elems$/;"	l
unrolled	scala/collection/parallel/immutable/ParHashSet.scala	/^      var unrolled = elems$/;"	l
unrolled	scala/collection/parallel/mutable/ParHashMap.scala	/^      var unrolled = elems$/;"	l
unrolled	scala/collection/parallel/mutable/ParHashSet.scala	/^      var unrolled = elems.headPtr$/;"	l
unsequence	scala/util/parsing/ast/Binders.scala	/^  def unsequence[bt <: NameElement, st <% Mappable[st]](orig: UnderBinder[bt, List[st]]): List[UnderBinder[bt, st]] = $/;"	m
unset	scala/concurrent/SyncVar.scala	/^  def unset(): Unit = synchronized {$/;"	m
unsetFts	scala/actors/Future.scala	/^    val unsetFts = mappedFts.filter((p: Pair[Int, Future[Any]]) => {$/;"	l
unsignedCompare	scala/collection/generic/BitOperations.scala	/^    def unsignedCompare(i: Int, j: Int)         = (i < j) ^ (i < 0) ^ (j < 0)$/;"	m
unsignedCompare	scala/collection/generic/BitOperations.scala	/^    def unsignedCompare(i: Long, j: Long)          = (i < j) ^ (i < 0L) ^ (j < 0L)$/;"	m
unsupported	scala/collection/package.scala	/^    def unsupported(msg: String)     = throw new UnsupportedOperationException(msg)$/;"	m
until	scala/collection/generic/Sorted.scala	/^  def until(until: K): This = rangeImpl(None, Some(until))$/;"	m
until	scala/collection/parallel/ParIterableLike.scala	/^      val until = from + len$/;"	l
until	scala/collection/parallel/ParIterableLike.scala	/^    val until = unc_until min size max from$/;"	l
until	scala/collection/parallel/ParSeqLike.scala	/^    val until = if (end >= length) length else end + 1$/;"	l
until	scala/collection/parallel/RemainsIterator.scala	/^    val until = from + len$/;"	l
until	scala/collection/parallel/immutable/ParHashMap.scala	/^      val until = offset + howmany$/;"	l
until	scala/collection/parallel/immutable/ParHashSet.scala	/^      val until = offset + howmany$/;"	l
until	scala/collection/parallel/mutable/ParArray.scala	/^      val until = from + len$/;"	l
until	scala/collection/parallel/mutable/ParArray.scala	/^      val until = offset + howmany$/;"	l
until	scala/collection/parallel/mutable/ParHashMap.scala	/^      val until = offset + howmany$/;"	l
until	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^        val until = ind + chunksize$/;"	l
until	scala/math/BigDecimal.scala	/^  def until(end: BigDecimal): Range.Partial[BigDecimal, NumericRange.Exclusive[BigDecimal]] =$/;"	m
until	scala/math/BigDecimal.scala	/^  def until(end: BigDecimal, step: BigDecimal) = Range.BigDecimal(this, end, step)$/;"	m
until	scala/math/BigInt.scala	/^  def until(end: BigInt, step: BigInt = BigInt(1)) = Range.BigInt(this, end, step)$/;"	m
until	scala/reflect/generic/PickleBuffer.scala	/^  def until[T](end: Int, op: () => T): List[T] =$/;"	m
until	scala/runtime/RichInt.scala	/^  def until(end: Int): Range = Range(self, end)$/;"	m
until	scala/runtime/RichInt.scala	/^  def until(end: Int, step: Int): Range = Range(self, end, step)$/;"	m
until	scala/runtime/ScalaNumberProxy.scala	/^  def until(end: T): NumericRange.Exclusive[T]          = NumericRange(self, end, num.one)$/;"	m
until	scala/runtime/ScalaNumberProxy.scala	/^  def until(end: T): ResultWithoutStep                  = new Range.Partial(NumericRange(self, end, _))$/;"	m
until	scala/runtime/ScalaNumberProxy.scala	/^  def until(end: T): ResultWithoutStep$/;"	m
until	scala/runtime/ScalaNumberProxy.scala	/^  def until(end: T, step: T): NumericRange.Exclusive[T] = NumericRange(self, end, step)$/;"	m
until	scala/runtime/ScalaNumberProxy.scala	/^  def until(end: T, step: T): immutable.IndexedSeq[T]$/;"	m
untupled	scala/Function.scala	/^  def untupled[a1, a2, a3, a4, a5, b](f: Tuple5[a1, a2, a3, a4, a5] => b): (a1, a2, a3, a4, a5) => b = {$/;"	m
untupled	scala/Function.scala	/^  def untupled[a1, a2, a3, a4, b](f: Tuple4[a1, a2, a3, a4] => b): (a1, a2, a3, a4) => b = {$/;"	m
untupled	scala/Function.scala	/^  def untupled[a1, a2, a3, b](f: Tuple3[a1, a2, a3] => b): (a1, a2, a3) => b = {$/;"	m
untupled	scala/Function.scala	/^  def untupled[a1, a2, b](f: Tuple2[a1, a2] => b): (a1, a2) => b = {$/;"	m
untyped	scala/concurrent/pilib.scala	/^    val untyped = UGP(n, polarity, v, c)$/;"	l
unusualUCS4	scala/xml/include/sax/EncodingHeuristics.scala	/^    val unusualUCS4   = "UCS-4"$/;"	l
unwrap	scala/util/control/Exception.scala	/^    def unwrap(x: Throwable): Throwable =$/;"	m
unwrapString	scala/LowPriorityImplicits.scala	/^  implicit def unwrapString(ws: WrappedString): String = if (ws ne null) ws.self else null$/;"	m
unwrapping	scala/util/control/Exception.scala	/^  def unwrapping[T](exceptions: Class[_]*): Catch[T] = {$/;"	m
unzip	scala/collection/generic/GenericTraversableTemplate.scala	/^  def unzip[A1, A2](implicit asPair: A => (A1, A2)): (CC[A1], CC[A2]) = {$/;"	m
unzip	scala/collection/immutable/List.scala	/^  def unzip[A,B](xs: Iterable[(A,B)]): (List[A], List[B]) = $/;"	m
unzip	scala/collection/immutable/List.scala	/^  def unzip[A,B](xs: List[(A,B)]): (List[A], List[B]) = {$/;"	m
unzip	scala/collection/immutable/RedBlack.scala	/^      def unzip(zipper: List[NonEmpty[B]], leftMost: Boolean): List[NonEmpty[B]] = {$/;"	m
unzip3	scala/collection/generic/GenericTraversableTemplate.scala	/^  def unzip3[A1, A2, A3](implicit asTriple: A => (A1, A2, A3)): (CC[A1], CC[A2], CC[A3]) = {$/;"	m
unzipBoth	scala/collection/immutable/RedBlack.scala	/^      def unzipBoth(left: Tree[B],$/;"	m
up	scala/collection/immutable/List.scala	/^    val up = step(start) > start$/;"	l
upair	scala/io/BytePickle.scala	/^  def upair[a,b](pa: PU[a], pb: PU[b]): PU[(a,b)] = {$/;"	m
upd	scala/collection/immutable/RedBlack.scala	/^    def upd[B1 >: B](k: A, v: B1): Tree[B1] = {$/;"	m
upd	scala/collection/immutable/RedBlack.scala	/^    def upd[B1 >: B](k: A, v: B1): Tree[B1]$/;"	m
upd	scala/collection/immutable/RedBlack.scala	/^    def upd[B](k: A, v: B): Tree[B] = RedTree(k, v, Empty, Empty)$/;"	m
update	scala/Array.scala	/^  def update(i: Int, x: T) { throw new Error() }$/;"	m
update	scala/collection/JavaConversions.scala	/^    def update(i : Int, elem : A) = underlying.set(i, elem)$/;"	m
update	scala/collection/immutable/RedBlack.scala	/^    def update[B1 >: B](k: A, v: B1): Tree[B1] = blacken(upd(k, v))$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Boolean) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Byte) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Char) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Double) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Float) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Int) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Long) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Short) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: T) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Unit) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArraySeq.scala	/^  def update(idx: Int, elem: A) {$/;"	m
update	scala/collection/mutable/ArrayStack.scala	/^  def update(n: Int, newelem: T) =$/;"	m
update	scala/collection/mutable/BufferLike.scala	/^  def update(n: Int, newelem: A)$/;"	m
update	scala/collection/mutable/BufferProxy.scala	/^  def update(n: Int, newelem: A) { self.update(n, newelem) }$/;"	m
update	scala/collection/mutable/IndexedSeqLike.scala	/^  def update(idx: Int, elem: A)$/;"	m
update	scala/collection/mutable/IndexedSeqView.scala	/^    def update(idx: Int, elem: A) = self.update(index(idx), elem)$/;"	m
update	scala/collection/mutable/IndexedSeqView.scala	/^    def update(idx: Int, elem: A) = self.update(self.length - 1 - idx, elem)$/;"	m
update	scala/collection/mutable/IndexedSeqView.scala	/^    def update(idx: Int, elem: A) =$/;"	m
update	scala/collection/mutable/IndexedSeqView.scala	/^    def update(idx: Int, elem: B): Unit$/;"	m
update	scala/collection/mutable/IndexedSeqView.scala	/^  def update(idx: Int, elem: A): Unit$/;"	m
update	scala/collection/mutable/LinkedListLike.scala	/^  def update(n: Int, x: A): Unit  = atLocation(n)(_.elem = x)$/;"	m
update	scala/collection/mutable/ListBuffer.scala	/^  def update(n: Int, x: A) {$/;"	m
update	scala/collection/mutable/MapLike.scala	/^  def update(key: A, value: B) { this += ((key, value)) }$/;"	m
update	scala/collection/mutable/MutableList.scala	/^  def update(n: Int, x: A): Unit = first0.update(n, x)$/;"	m
update	scala/collection/mutable/ResizableArray.scala	/^  def update(idx: Int, elem: A) { $/;"	m
update	scala/collection/mutable/SeqLike.scala	/^  def update(idx: Int, elem: A)$/;"	m
update	scala/collection/mutable/SetLike.scala	/^  def update(elem: A, included: Boolean) {$/;"	m
update	scala/collection/mutable/Stack.scala	/^  def update(n: Int, newelem: A) = $/;"	m
update	scala/collection/mutable/StringBuilder.scala	/^  def update(i: Int, c: Char): Unit = setCharAt(i, c)$/;"	m
update	scala/collection/mutable/UnrolledBuffer.scala	/^  def update(idx: Int, newelem: T) =$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Boolean) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Byte) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Char) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Double) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Float) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Int) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Long) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Short) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: T) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Unit) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^  def update(index: Int, elem: T): Unit$/;"	m
update	scala/collection/parallel/immutable/package.scala	/^    def update(idx: Int, elem: T) = throw new UnsupportedOperationException$/;"	m
update	scala/collection/parallel/mutable/ParArray.scala	/^  def update(i: Int, elem: T) = array(i) = elem$/;"	m
update	scala/collection/parallel/mutable/ParHashMap.scala	/^  def update(key: K, value: V): Unit = put(key, value)$/;"	m
update	scala/collection/parallel/mutable/ParSeq.scala	/^  def update(i: Int, elem: T): Unit$/;"	m
update	scala/xml/MetaData.scala	/^  def update(attribs: MetaData, scope: NamespaceBinding, updates: MetaData): MetaData =$/;"	m
updateCache	scala/Symbol.scala	/^    def updateCache(): V = {$/;"	m
updateWith	scala/collection/immutable/IntMap.scala	/^  def updateWith[S >: T](key : Int, value : S, f : (T, S) => S) : IntMap[S] = this match {$/;"	m
updateWith	scala/collection/immutable/LongMap.scala	/^  def updateWith[S >: T](key : Long, value : S, f : (T, S) => S) : LongMap[S] = this match {$/;"	m
updated	scala/collection/GenSeqLike.scala	/^  def updated[B >: A, That](index: Int, elem: B)(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
updated	scala/collection/MapLike.scala	/^  def updated [B1 >: B](key: A, value: B1): Map[A, B1] = this + ((key, value))$/;"	m
updated	scala/collection/SeqLike.scala	/^  def updated[B >: A, That](index: Int, elem: B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
updated	scala/collection/interfaces/MapMethods.scala	/^  def updated [B1 >: B](key: A, value: B1): Map[A, B1]$/;"	m
updated	scala/collection/interfaces/SeqMethods.scala	/^  def updated[B >: A, That](index: Int, elem: B)(implicit bf: CanBuildFrom[This, B, That]): That$/;"	m
updated	scala/collection/parallel/ParSeqLike.scala	/^  def updated[U >: T, That](index: Int, elem: U)(implicit bf: CanBuildFrom[Repr, U, That]): That = bf ifParallel { pbf =>$/;"	m
updated0	scala/collection/immutable/HashSet.scala	/^  def updated0(key: A, hash: Int, level: Int): HashSet[A] = $/;"	m
updated2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def updated2combiner[U >: T, That](index: Int, elem: U, cb: Combiner[U, That]): Combiner[U, That] = {$/;"	m
upe	scala/io/BytePickle.scala	/^      val upe = state.dict$/;"	l
upickle	scala/io/BytePickle.scala	/^  def upickle[T](p: PU[T], a: T): Array[Byte] =$/;"	m
upward	scala/collection/immutable/NumericRange.scala	/^    val upward  = num.lt(start, end)$/;"	l
urlToProcess	scala/sys/process/Process.scala	/^  implicit def urlToProcess(url: URL): URLBuilder                         = apply(url)$/;"	m
useOwnToString	scala/runtime/ScalaRunTime.scala	/^    def useOwnToString(x: Any) = x match {$/;"	m
useSizeMap	scala/collection/mutable/HashMap.scala	/^  def useSizeMap(t: Boolean) = if (t) {$/;"	m
useSizeMap	scala/collection/mutable/HashSet.scala	/^  def useSizeMap(t: Boolean) = if (t) {$/;"	m
usequ	scala/io/BytePickle.scala	/^  def usequ[t,u](f: u => t, pa: PU[t], k: t => PU[u]): PU[u] = new PU[u] {$/;"	m
userDir	scala/util/Properties.scala	/^  def userDir               = propOrEmpty("user.dir")$/;"	m
userHome	scala/util/Properties.scala	/^  def userHome              = propOrEmpty("user.home")$/;"	m
userName	scala/util/Properties.scala	/^  def userName              = propOrEmpty("user.name")$/;"	m
utf8	scala/xml/include/sax/EncodingHeuristics.scala	/^    val utf8          = "UTF-8"$/;"	l
uunpickle	scala/io/BytePickle.scala	/^  def uunpickle[T](p: PU[T], stream: Array[Byte]): T =$/;"	m
uwrap	scala/io/BytePickle.scala	/^  def uwrap[a,b](i: a => b, j: b => a, pa: PU[a]): PU[b] =$/;"	m
v	scala/actors/Future.scala	/^        val v = res.get$/;"	l
v	scala/collection/JavaConversions.scala	/^                val v = mm.remove(k.asInstanceOf[a])$/;"	l
v	scala/collection/JavaConversions.scala	/^      val v = underlying.get(k)$/;"	l
v	scala/collection/immutable/Stream.scala	/^    lazy val v = st$/;"	l
v	scala/collection/immutable/Vector.scala	/^    val v = new Vector(blockIndex + lo, _endIndex, blockIndex + lo)$/;"	l
v	scala/collection/mutable/LinkedHashMap.scala	/^      val v = e.value$/;"	l
v	scala/collection/parallel/immutable/ParHashSet.scala	/^          val v = chunkarr(i).asInstanceOf[T]$/;"	l
v	scala/util/Sorting.scala	/^        val v = x(m)$/;"	l
v	scala/xml/parsing/FactoryAdapter.scala	/^    val v = (Iterator continually hStack.pop takeWhile (_ != null)).toList.reverse$/;"	l
v0	scala/util/parsing/combinator/Parsers.scala	/^      lazy val v0 = v \/\/ lazy argument$/;"	l
validate	scala/xml/factory/Binder.scala	/^  final def validate(n: Node): Node = {$/;"	m
value	scala/Enumeration.scala	/^      val value = m.invoke(this).asInstanceOf[Value]$/;"	l
value	scala/actors/LinkedNode.java	/^  public Object value;$/;"	f	class:LinkedNode
value	scala/actors/threadpool/AtomicInteger.java	/^    private volatile int value;$/;"	f	class:AtomicInteger	file:
value	scala/collection/immutable/HashMap.scala	/^        val value = in.readObject().asInstanceOf[B]$/;"	l
value	scala/collection/immutable/RedBlack.scala	/^    def value: B$/;"	m
value	scala/collection/mutable/OpenHashMap.scala	/^                                            var value: Option[Value])$/;"	l
value	scala/sys/BooleanProp.scala	/^  def value: Boolean$/;"	m
value	scala/sys/Prop.scala	/^  def value: T$/;"	m
value	scala/sys/PropImpl.scala	/^  def value: T = if (isSet) valueFn(get) else zero$/;"	m
value	scala/util/DynamicVariable.scala	/^  def value: T = tl.get.asInstanceOf[T]$/;"	m
value	scala/util/parsing/json/Parser.scala	/^  def value: Parser[Any] = (jsonObj | jsonArray | number | "true" ^^^ true | "false" ^^^ false | "null" ^^^ null | stringVal)$/;"	m
value	scala/xml/Attribute.scala	/^  val value: Seq[Node]$/;"	l
value	scala/xml/MetaData.scala	/^  def value: Seq[Node]$/;"	m
value	scala/xml/Null.scala	/^  def value = null$/;"	m
value	scala/xml/PrefixedAttribute.scala	/^  val value: Seq[Node],$/;"	l
value	scala/xml/UnprefixedAttribute.scala	/^  val value: Seq[Node],$/;"	l
value	scala/xml/dtd/Scanner.scala	/^  var value:String = _$/;"	l
value	scala/xml/include/sax/XIncluder.scala	/^        val value = atts.getValue(i);$/;"	l
value	scala/xml/parsing/FactoryAdapter.scala	/^      val value = attributes getValue i$/;"	l
value	scala/xml/parsing/MarkupParser.scala	/^      val value = xAttributeValue()$/;"	l
valueIsTrue	scala/sys/BooleanProp.scala	/^  def valueIsTrue[T](key: String): BooleanProp = new BooleanPropImpl(key, _.toLowerCase == "true")$/;"	m
valueOf	scala/actors/threadpool/TimeUnit.java	/^    public static TimeUnit valueOf(String name) {$/;"	m	class:TimeUnit
valueOf	scala/collection/immutable/IntMap.scala	/^  def valueOf(tip : IntMap.Tip[V]) : T;$/;"	m
valueOf	scala/collection/immutable/IntMap.scala	/^  def valueOf(tip : IntMap.Tip[V]) = (tip.key, tip.value);$/;"	m
valueOf	scala/collection/immutable/IntMap.scala	/^  def valueOf(tip : IntMap.Tip[V]) = tip.key$/;"	m
valueOf	scala/collection/immutable/IntMap.scala	/^  def valueOf(tip : IntMap.Tip[V]) = tip.value$/;"	m
valueOf	scala/collection/immutable/LongMap.scala	/^  def valueOf(tip : LongMap.Tip[V]) : T;$/;"	m
valueOf	scala/collection/immutable/LongMap.scala	/^  def valueOf(tip : LongMap.Tip[V]) = (tip.key, tip.value);$/;"	m
valueOf	scala/collection/immutable/LongMap.scala	/^  def valueOf(tip : LongMap.Tip[V]) = tip.key;$/;"	m
valueOf	scala/collection/immutable/LongMap.scala	/^  def valueOf(tip : LongMap.Tip[V]) = tip.value;$/;"	m
valueOf	scala/math/BigDecimal.scala	/^  def valueOf(d: Double): BigDecimal = apply(BigDec valueOf d)$/;"	m
valueOf	scala/math/BigDecimal.scala	/^  def valueOf(d: Double, mc: MathContext): BigDecimal = apply(BigDec valueOf d, mc)$/;"	m
value_	scala/util/DynamicVariable.scala	/^  def value_=(newval: T) = tl set newval$/;"	m
values	scala/Enumeration.scala	/^  def values: ValueSet = {$/;"	m
values	scala/actors/threadpool/TimeUnit.java	/^    private static final TimeUnit[] values = new TimeUnit[]$/;"	f	class:TimeUnit	file:
values	scala/actors/threadpool/TimeUnit.java	/^    public static TimeUnit[] values() {$/;"	m	class:TimeUnit
values	scala/collection/MapLike.scala	/^  def values: Iterable[B] = new DefaultValuesIterable$/;"	m
values	scala/collection/interfaces/MapMethods.scala	/^  def values: Iterable[B]$/;"	m
valuesIterator	scala/collection/MapLike.scala	/^  def valuesIterator: Iterator[B] = new Iterator[B] {$/;"	m
valuesIterator	scala/collection/interfaces/MapMethods.scala	/^  def valuesIterator: Iterator[B]$/;"	m
varargs	scala/annotation/varargs.scala	/^final class varargs extends annotation.StaticAnnotation$/;"	c
vecswap	scala/util/Sorting.scala	/^    def vecswap(_a: Int, _b: Int, n: Int) {$/;"	m
vectors	scala/collection/parallel/immutable/ParVector.scala	/^  val vectors = new ArrayBuffer[VectorBuilder[T]] += new VectorBuilder[T]$/;"	l
vendor	scala/collection/parallel/package.scala	/^      val vendor = util.Properties.javaVmVendor$/;"	l
version	scala/xml/Document.scala	/^  var version: Option[String] = _$/;"	l
versionMsg	scala/util/Properties.scala	/^  def versionMsg            = "Scala %s %s -- %s".format(propCategory, versionString, copyrightString)$/;"	m
versionString	scala/util/Properties.scala	/^  val versionString         = "version " + scalaPropOrElse("version.number", "(unknown)")$/;"	l
view	scala/collection/TraversableLike.scala	/^  def view = new TraversableView[A, Repr] {$/;"	m
view	scala/collection/TraversableLike.scala	/^  def view(from: Int, until: Int): TraversableView[A, Repr] = view.slice(from, until)$/;"	m
view	scala/collection/interfaces/SeqMethods.scala	/^  def view(from: Int, until: Int): SeqView[A, This]$/;"	m
view	scala/collection/interfaces/SeqMethods.scala	/^  def view: SeqView[A, This]$/;"	m
view	scala/collection/interfaces/TraversableMethods.scala	/^  def view(from: Int, until: Int): TraversableView[A, This]$/;"	m
view	scala/collection/interfaces/TraversableMethods.scala	/^  def view: TraversableView[A, This]$/;"	m
view	scala/collection/parallel/ParIterableLike.scala	/^  def view = new ParIterableView[T, Repr, Sequential] {$/;"	m
viewToString	scala/collection/GenTraversableViewLike.scala	/^  def viewToString = stringPrefix + viewIdString + "(...)"$/;"	m
visit	scala/collection/immutable/RedBlack.scala	/^    def visit[T](input: T)(f: (T, A, B) => (Boolean, T)): (Boolean, T)$/;"	m
visit	scala/collection/immutable/RedBlack.scala	/^    def visit[T](input: T)(f: (T, A, Nothing) => (Boolean, T)) = (true, input)$/;"	m
visit	scala/collection/immutable/RedBlack.scala	/^    def visit[T](input: T)(f: (T,A,B) => (Boolean, T)): (Boolean, T) = {$/;"	m
volatile	scala/package.scala	/^  type volatile = annotation.volatile$/;"	T
volatile	scala/volatile.scala	/^class volatile extends annotation.StaticAnnotation$/;"	c
vparams	scala/reflect/generic/UnPickler.scala	/^          val vparams = until(end, readValDefRef)$/;"	l
vparamss	scala/reflect/generic/UnPickler.scala	/^          val vparamss = times(readNat(), () => times(readNat(), readValDefRef))$/;"	l
w	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^      val w = iter.next().asInstanceOf[ThreadPoolExecutor#Worker]$/;"	l
w	scala/collection/BitSetLike.scala	/^      val w = word(i)$/;"	l
w	scala/xml/XML.scala	/^    val w = Channels.newWriter(fos.getChannel(), enc)$/;"	l
w	scala/xml/persistent/CachedFileStorage.scala	/^    val w = Channels.newWriter(c, "utf-8")$/;"	l
waitFor	scala/actors/threadpool/FutureTask.java	/^    private void waitFor() throws InterruptedException {$/;"	m	class:FutureTask	file:
waitFor	scala/actors/threadpool/FutureTask.java	/^    private void waitFor(long nanos) throws InterruptedException, TimeoutException {$/;"	m	class:FutureTask	file:
waitForPut	scala/actors/threadpool/SynchronousQueue.java	/^        synchronized Object waitForPut() throws InterruptedException {$/;"	m	class:SynchronousQueue.Node
waitForPut	scala/actors/threadpool/SynchronousQueue.java	/^        synchronized Object waitForPut(long nanos) throws InterruptedException {$/;"	m	class:SynchronousQueue.Node
waitForTake	scala/actors/threadpool/SynchronousQueue.java	/^        synchronized boolean waitForTake(long nanos) throws InterruptedException {$/;"	m	class:SynchronousQueue.Node
waitForTake	scala/actors/threadpool/SynchronousQueue.java	/^        synchronized void waitForTake() throws InterruptedException {$/;"	m	class:SynchronousQueue.Node
waiting	scala/actors/threadpool/helpers/WaitQueue.java	/^        boolean waiting = true;$/;"	f	class:WaitQueue.WaitNode
waitingConsumers	scala/actors/threadpool/SynchronousQueue.java	/^    private final WaitQueue waitingConsumers;$/;"	f	class:SynchronousQueue	file:
waitingForNone	scala/actors/Reactor.scala	/^  val waitingForNone = new PartialFunction[Any, Unit] {$/;"	l
waitingForTake_	scala/actors/LinkedQueue.java	/^  protected int waitingForTake_ = 0;  $/;"	f	class:LinkedQueue
waitingProducers	scala/actors/threadpool/SynchronousQueue.java	/^    private final WaitQueue waitingProducers;$/;"	f	class:SynchronousQueue	file:
waitingReaders_	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        transient int waitingReaders_ = 0;$/;"	f	class:ReentrantReadWriteLock.Sync
waitingWriters_	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        transient int waitingWriters_ = 0;$/;"	f	class:ReentrantReadWriteLock.Sync
warning	scala/actors/Debug.scala	/^  def warning(s: String) =$/;"	m
waterline	scala/collection/mutable/UnrolledBuffer.scala	/^  val waterline = 50$/;"	l
waterlineDelim	scala/collection/mutable/UnrolledBuffer.scala	/^  val waterlineDelim = 100$/;"	l
weakCompareAndSet	scala/actors/threadpool/AtomicInteger.java	/^    public final synchronized boolean weakCompareAndSet(int expect, int update) {$/;"	m	class:AtomicInteger
wellformed	scala/xml/Attribute.scala	/^  def wellformed(scope: NamespaceBinding): Boolean = {$/;"	m
wellformed	scala/xml/MetaData.scala	/^  def wellformed(scope: NamespaceBinding): Boolean$/;"	m
whereClauses	scala/reflect/generic/UnPickler.scala	/^          val whereClauses = until(end, readTreeRef)$/;"	l
whitespace	scala/util/parsing/combinator/lexical/Scanners.scala	/^  def whitespace: Parser[Any]$/;"	m
whitespace	scala/util/parsing/combinator/lexical/StdLexical.scala	/^  def whitespace: Parser[Any] = rep($/;"	m
whitespaceChar	scala/util/parsing/combinator/lexical/Lexical.scala	/^  def whitespaceChar = elem("space char", ch => ch <= ' ' && ch != EofCh)$/;"	m
wholeNumber	scala/util/parsing/combinator/JavaTokenParsers.scala	/^  def wholeNumber: Parser[String] = $/;"	m
width	scala/collection/generic/SliceInterval.scala	/^  def width = until - from$/;"	m
wildcardType	scala/reflect/Manifest.scala	/^  def wildcardType[T](lowerBound: Manifest[_], upperBound: Manifest[_]): Manifest[T] =$/;"	m
withAnnotations	scala/reflect/generic/Trees.scala	/^    def withAnnotations(annots: List[Tree]) =$/;"	m
withApply	scala/util/control/Exception.scala	/^    def withApply[U](f: Throwable => U): Catch[U] = {$/;"	m
withClose	scala/io/Source.scala	/^  def withClose(f: () => Unit): this.type = {$/;"	m
withDefault	scala/collection/immutable/Map.scala	/^  def withDefault[B1 >: B](d: A => B1): immutable.Map[A, B1] = new Map.WithDefault[A, B1](this, d) $/;"	m
withDefault	scala/collection/mutable/Map.scala	/^  def withDefault(d: A => B): mutable.Map[A, B] = new Map.WithDefault[A, B](this, d)$/;"	m
withDefaultValue	scala/collection/immutable/Map.scala	/^  def withDefaultValue[B1 >: B](d: B1): immutable.Map[A, B1] = new Map.WithDefault[A, B1](this, x => d)$/;"	m
withDefaultValue	scala/collection/mutable/Map.scala	/^  def withDefaultValue(d: B): mutable.Map[A, B] = new Map.WithDefault[A, B](this, x => d)$/;"	m
withDesc	scala/util/control/Exception.scala	/^    def withDesc(s: String): this.type = {$/;"	m
withDescription	scala/io/Source.scala	/^  def withDescription(text: String): this.type = {$/;"	m
withErr	scala/Console.scala	/^  def withErr[T](err: OutputStream)(thunk: =>T): T =$/;"	m
withErr	scala/Console.scala	/^  def withErr[T](err: PrintStream)(thunk: =>T): T =$/;"	m
withError	scala/sys/process/ProcessIO.scala	/^  def withError(process: InputStream => Unit): ProcessIO  = new ProcessIO(writeInput, processOutput, process, daemonizeThreads)$/;"	m
withFilter	scala/Option.scala	/^    def withFilter(q: A => Boolean): WithFilter = new WithFilter(x => p(x) && q(x))$/;"	m
withFilter	scala/Option.scala	/^  def withFilter(p: A => Boolean): WithFilter = new WithFilter(p)$/;"	m
withFilter	scala/collection/Iterator.scala	/^  def withFilter(p: A => Boolean): Iterator[A] = filter(p)$/;"	m
withFilter	scala/collection/TraversableLike.scala	/^    def withFilter(q: A => Boolean): WithFilter = $/;"	m
withFilter	scala/collection/TraversableLike.scala	/^  def withFilter(p: A => Boolean): FilterMonadic[A, Repr] = new WithFilter(p)$/;"	m
withFilter	scala/collection/TraversableOnce.scala	/^    def withFilter(p: A => Boolean) = trav.toIterator filter p$/;"	m
withFilter	scala/collection/generic/FilterMonadic.scala	/^  def withFilter(p: A => Boolean): FilterMonadic[A, Repr]$/;"	m
withFilter	scala/collection/interfaces/TraversableMethods.scala	/^  def withFilter(p: A => Boolean): FilterMonadic[A, Traversable[A]]$/;"	m
withIn	scala/Console.scala	/^  def withIn[T](in: InputStream)(thunk: =>T): T =$/;"	m
withIn	scala/Console.scala	/^  def withIn[T](reader: Reader)(thunk: =>T): T =$/;"	m
withInput	scala/sys/process/ProcessIO.scala	/^  def withInput(write: OutputStream => Unit): ProcessIO   = new ProcessIO(write, processOutput, processError, daemonizeThreads)$/;"	m
withName	scala/Enumeration.scala	/^  final def withName(s: String): Value = values.find(_.toString == s).get$/;"	m
withOut	scala/Console.scala	/^  def withOut[T](out: OutputStream)(thunk: =>T): T =$/;"	m
withOut	scala/Console.scala	/^  def withOut[T](out: PrintStream)(thunk: =>T): T =$/;"	m
withOutput	scala/sys/process/ProcessIO.scala	/^  def withOutput(process: InputStream => Unit): ProcessIO = new ProcessIO(writeInput, process, processError, daemonizeThreads)$/;"	m
withPadding	scala/collection/Iterator.scala	/^    def withPadding(x: => B): this.type = {$/;"	m
withPartial	scala/collection/Iterator.scala	/^    def withPartial(x: Boolean): this.type = {$/;"	m
withPosition	scala/reflect/generic/Trees.scala	/^    def withPosition(flag: Long, position: Position) =$/;"	m
withPositioning	scala/io/Source.scala	/^  def withPositioning(on: Boolean): this.type = {$/;"	m
withPositioning	scala/io/Source.scala	/^  def withPositioning(pos: Positioner): this.type = {$/;"	m
withReset	scala/io/Source.scala	/^  def withReset(f: () => Source): this.type = {$/;"	m
withSAXParser	scala/xml/XML.scala	/^  def withSAXParser(p: SAXParser): XMLLoader[Elem] =$/;"	m
withValue	scala/collection/immutable/IntMap.scala	/^    def withValue[S](s: S) =$/;"	m
withValue	scala/collection/immutable/LongMap.scala	/^    def withValue[S](s : S) = $/;"	m
withValue	scala/util/DynamicVariable.scala	/^  def withValue[S](newval: T)(thunk: => S): S = {$/;"	m
word	scala/collection/immutable/NumericRange.scala	/^        val word  = if (isInclusive) "to" else "until"$/;"	l
words	scala/collection/BitSetLike.scala	/^    val words = new Array[Long](len)$/;"	l
words	scala/collection/immutable/List.scala	/^    var words: List[String] = Nil$/;"	l
workQueue	scala/actors/Reactor.scala	/^        val workQueue = new LinkedBlockingQueue[Runnable]$/;"	l
workQueue	scala/actors/scheduler/ResizableThreadPoolScheduler.scala	/^    val workQueue = new LinkedBlockingQueue$/;"	l
workQueue	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private final BlockingQueue workQueue;$/;"	f	class:ThreadPoolExecutor	file:
workQueue	scala/concurrent/TaskRunners.scala	/^    val workQueue = new LinkedBlockingQueue[Runnable]$/;"	l
worker	scala/actors/remote/TcpService.scala	/^          val worker = new TcpServiceWorker(this, nextClient)$/;"	l
worker	scala/actors/remote/TcpService.scala	/^    val worker = new TcpServiceWorker(this, socket)$/;"	l
workerCountOf	scala/actors/threadpool/ThreadPoolExecutor.java	/^    private static int workerCountOf(int c)  { return c & CAPACITY; }$/;"	m	class:ThreadPoolExecutor	file:
workers	scala/actors/threadpool/ThreadPoolExecutor.java	/^    public final HashSet workers = new HashSet();$/;"	f	class:ThreadPoolExecutor
wq	scala/actors/threadpool/locks/FIFOCondVar.java	/^    private final WaitQueue wq = new FIFOWaitQueue();$/;"	f	class:FIFOCondVar	file:
wq_	scala/actors/threadpool/locks/ReentrantLock.java	/^        private transient WaitQueue wq_ = new FIFOWaitQueue();$/;"	f	class:ReentrantLock.FairSync	file:
wr	scala/actors/scheduler/ActorGC.scala	/^      val wr = refQ.poll$/;"	l
wr	scala/actors/scheduler/ActorGC.scala	/^    val wr = new WeakReference[TrackedReactor](a, refQ)$/;"	l
wrap	scala/io/BytePickle.scala	/^  def wrap[a,b](i: a => b, j: b => a, pa: SPU[a]): SPU[b] =$/;"	m
wrap	scala/io/Codec.scala	/^  def wrap(body: => Int): Int =$/;"	m
wrapAccess	scala/sys/SystemProperties.scala	/^  def wrapAccess[T](body: => T): Option[T] =$/;"	m
wrapBooleanArray	scala/LowPriorityImplicits.scala	/^  implicit def wrapBooleanArray(xs: Array[Boolean]): WrappedArray[Boolean] = if (xs ne null) new WrappedArray.ofBoolean(xs) else null$/;"	m
wrapByteArray	scala/LowPriorityImplicits.scala	/^  implicit def wrapByteArray(xs: Array[Byte]): WrappedArray[Byte] = if (xs ne null) new WrappedArray.ofByte(xs) else null$/;"	m
wrapCharArray	scala/LowPriorityImplicits.scala	/^  implicit def wrapCharArray(xs: Array[Char]): WrappedArray[Char] = if (xs ne null) new WrappedArray.ofChar(xs) else null$/;"	m
wrapDoubleArray	scala/LowPriorityImplicits.scala	/^  implicit def wrapDoubleArray(xs: Array[Double]): WrappedArray[Double] = if (xs ne null) new WrappedArray.ofDouble(xs) else null$/;"	m
wrapFloatArray	scala/LowPriorityImplicits.scala	/^  implicit def wrapFloatArray(xs: Array[Float]): WrappedArray[Float] = if (xs ne null) new WrappedArray.ofFloat(xs) else null$/;"	m
wrapIntArray	scala/LowPriorityImplicits.scala	/^  implicit def wrapIntArray(xs: Array[Int]): WrappedArray[Int] = if (xs ne null) new WrappedArray.ofInt(xs) else null$/;"	m
wrapLongArray	scala/LowPriorityImplicits.scala	/^  implicit def wrapLongArray(xs: Array[Long]): WrappedArray[Long] = if (xs ne null) new WrappedArray.ofLong(xs) else null$/;"	m
wrapRefArray	scala/LowPriorityImplicits.scala	/^  implicit def wrapRefArray[T <: AnyRef](xs: Array[T]): WrappedArray[T] = {$/;"	m
wrapShortArray	scala/LowPriorityImplicits.scala	/^  implicit def wrapShortArray(xs: Array[Short]): WrappedArray[Short] = if (xs ne null) new WrappedArray.ofShort(xs) else null$/;"	m
wrapString	scala/LowPriorityImplicits.scala	/^  implicit def wrapString(s: String): WrappedString = if (s ne null) new WrappedString(s) else null$/;"	m
wrapTraversableOnce	scala/collection/TraversableOnce.scala	/^  implicit def wrapTraversableOnce[A](trav: TraversableOnce[A]) = new MonadOps(trav)$/;"	m
wrapUnitArray	scala/LowPriorityImplicits.scala	/^  implicit def wrapUnitArray(xs: Array[Unit]): WrappedArray[Unit] = if (xs ne null) new WrappedArray.ofUnit(xs) else null$/;"	m
wrapper	scala/ref/ReferenceWrapper.scala	/^  val wrapper: ReferenceWrapper[T]$/;"	l
write	scala/concurrent/Channel.scala	/^  def write(x: A) = synchronized {$/;"	m
write	scala/concurrent/SyncChannel.scala	/^  def write(data: A) {$/;"	m
write	scala/concurrent/pilib.scala	/^    def write(x: A) =$/;"	m
write	scala/xml/XML.scala	/^  final def write(w: java.io.Writer, node: Node, enc: String, xmlDecl: Boolean, doctype: dtd.DocType) {$/;"	m
writeByte	scala/reflect/generic/PickleBuffer.scala	/^  def writeByte(b: Int) {$/;"	m
writeHolds_	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^        transient int writeHolds_ = 0;$/;"	f	class:ReentrantReadWriteLock.Sync
writeIndex	scala/reflect/generic/PickleBuffer.scala	/^  var writeIndex = to$/;"	l
writeInput	scala/sys/process/ProcessIO.scala	/^  val writeInput: OutputStream => Unit,$/;"	l
writeLock	scala/actors/threadpool/locks/ReadWriteLock.java	/^    Lock writeLock();$/;"	m	interface:ReadWriteLock
writeLock	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    public Lock writeLock() { return writerLock_; }$/;"	m	class:ReentrantReadWriteLock
writeLong	scala/reflect/generic/PickleBuffer.scala	/^  def writeLong(x: Long) {$/;"	m
writeLongNat	scala/reflect/generic/PickleBuffer.scala	/^  def writeLongNat(x: Long) {$/;"	m
writeNat	scala/reflect/generic/PickleBuffer.scala	/^  def writeNat(x: Int) =$/;"	m
writeNatPrefix	scala/io/BytePickle.scala	/^    def writeNatPrefix(x: Int) {$/;"	m
writeNatPrefix	scala/reflect/generic/PickleBuffer.scala	/^    def writeNatPrefix(x: Long) {$/;"	m
writeObject	scala/actors/remote/Serializer.scala	/^  def writeObject(outputStream: DataOutputStream, obj: AnyRef) {$/;"	m
writeObject	scala/actors/threadpool/LinkedBlockingQueue.java	/^    private void writeObject(java.io.ObjectOutputStream s)$/;"	m	class:LinkedBlockingQueue	file:
writeReq	scala/concurrent/SyncChannel.scala	/^    val writeReq = new SyncVar[Boolean]$/;"	l
writer	scala/util/Properties.scala	/^    val writer = new PrintWriter(Console.err, true)$/;"	l
writerLock_	scala/actors/threadpool/locks/ReentrantReadWriteLock.java	/^    final WriteLock writerLock_ = new WriteLock(this);$/;"	f	class:ReentrantReadWriteLock
x	scala/actors/threadpool/TimeUnit.java	/^    static long x(long d, long m, long over) {$/;"	m	class:TimeUnit
x	scala/collection/IndexedSeqLike.scala	/^      val x = self(index)$/;"	l
x	scala/collection/IterableLike.scala	/^      val x = it.next$/;"	l
x	scala/collection/immutable/Vector.scala	/^      val x = array(index)$/;"	l
x	scala/collection/mutable/ArrayStack.scala	/^    val x = table(index).asInstanceOf[T]$/;"	l
x	scala/collection/parallel/ParSeqLike.scala	/^      val x = self(i)$/;"	l
x	scala/concurrent/Channel.scala	/^    val x = written.elem$/;"	l
x	scala/io/BytePickle.scala	/^        var x = 0$/;"	l
x	scala/io/BytePickle.scala	/^        var x = 0;$/;"	l
x	scala/reflect/generic/PickleBuffer.scala	/^    val x = bytes(readIndex); readIndex += 1; x$/;"	l
x	scala/reflect/generic/PickleBuffer.scala	/^    var x = 0L$/;"	l
x	scala/util/logging/Logged.scala	/^  val x = new MyClass() with ConsoleLogger$/;"	l
x	scala/xml/Utility.scala	/^        val x = it.next$/;"	l
x	scala/xml/Utility.scala	/^      val x = Text(sb.toString())$/;"	l
x	scala/xml/factory/LoggedNodeFactory.scala	/^  val x = new scala.xml.parsing.NoBindingFactoryAdapter$/;"	l
xAttributeValue	scala/xml/parsing/MarkupParserCommon.scala	/^  def xAttributeValue(): String = {$/;"	m
xAttributeValue	scala/xml/parsing/MarkupParserCommon.scala	/^  def xAttributeValue(endCh: Char): String = {$/;"	m
xAttributes	scala/xml/parsing/MarkupParser.scala	/^  def xAttributes(pscope:NamespaceBinding): (MetaData,NamespaceBinding) = {$/;"	m
xCharData	scala/xml/parsing/MarkupParser.scala	/^  def xCharData: NodeSeq = {$/;"	m
xCharRef	scala/xml/parsing/MarkupParserCommon.scala	/^  def xCharRef(ch: () => Char, nextch: () => Unit): String =$/;"	m
xCharRef	scala/xml/parsing/MarkupParserCommon.scala	/^  def xCharRef(it: Iterator[Char]): String = {$/;"	m
xCharRef	scala/xml/parsing/MarkupParserCommon.scala	/^  def xCharRef: String = xCharRef(() => ch, () => nextch)$/;"	m
xComment	scala/xml/parsing/MarkupParser.scala	/^  def xComment: NodeSeq = {$/;"	m
xEQ	scala/xml/parsing/MarkupParserCommon.scala	/^  def xEQ() = { xSpaceOpt; xToken('='); xSpaceOpt }$/;"	m
xEndTag	scala/xml/parsing/MarkupParserCommon.scala	/^  def xEndTag(startName: String) {$/;"	m
xEntityValue	scala/xml/parsing/MarkupParser.scala	/^  def xEntityValue(): String = {$/;"	m
xHandleError	scala/xml/parsing/MarkupParser.scala	/^  def xHandleError(that: Char, msg: String) = reportSyntaxError(msg)$/;"	m
xHandleError	scala/xml/parsing/MarkupParserCommon.scala	/^  def xHandleError(that: Char, msg: String): Unit$/;"	m
xName	scala/xml/parsing/MarkupParserCommon.scala	/^  def xName: String = {$/;"	m
xProcInstr	scala/xml/parsing/MarkupParserCommon.scala	/^  def xProcInstr: ElementType = {$/;"	m
xSpace	scala/xml/parsing/MarkupParserCommon.scala	/^  def xSpace() =$/;"	m
xSpaceOpt	scala/xml/parsing/MarkupParserCommon.scala	/^  def xSpaceOpt() = while (isSpace(ch) && !eof) nextch$/;"	m
xText	scala/xml/parsing/MarkupParser.scala	/^  def xText: String = {$/;"	m
xToken	scala/xml/parsing/MarkupParserCommon.scala	/^  def xToken(that: Char) {$/;"	m
xToken	scala/xml/parsing/MarkupParserCommon.scala	/^  def xToken(that: Seq[Char]) { that foreach xToken }$/;"	m
xc	scala/collection/immutable/List.scala	/^            var xc = xs$/;"	l
xc	scala/collection/immutable/List.scala	/^          var xc = unchanged$/;"	l
xc	scala/collection/immutable/List.scala	/^      var xc = xs$/;"	l
xc	scala/collection/immutable/List.scala	/^    var xc = xs$/;"	l
xe	scala/math/Ordering.scala	/^          val xe = x.iterator$/;"	l
xe	scala/math/Ordering.scala	/^        val xe = x.iterator$/;"	l
xml	scala/xml/XML.scala	/^  val xml       = "xml"$/;"	l
xmlProcInstr	scala/xml/parsing/MarkupParser.scala	/^  def xmlProcInstr(): MetaData = {$/;"	m
xmlToProcess	scala/sys/process/Process.scala	/^  implicit def xmlToProcess(command: scala.xml.Elem): ProcessBuilder      = apply(command)$/;"	m
xmlType	scala/xml/Node.scala	/^  def xmlType(): TypeSymbol = null$/;"	m
xml_	scala/xml/Equality.scala	/^  final def xml_!=(other: Any)    = !xml_==(other)$/;"	m
xml_	scala/xml/Equality.scala	/^  final def xml_==(other: Any)    = doComparison(other, true)$/;"	m
xml_sameElements	scala/xml/NodeSeq.scala	/^  def xml_sameElements[A](that: Iterable[A]): Boolean = {$/;"	m
xmlns	scala/xml/XML.scala	/^  val xmlns     = "xmlns"$/;"	l
xor	scala/collection/immutable/Vector.scala	/^    val xor = cutIndex ^ (endIndex - 1)$/;"	l
xor	scala/collection/immutable/Vector.scala	/^    val xor = startIndex ^ (cutIndex - 1)$/;"	l
xs	scala/collection/Iterator.scala	/^      val xs: Seq[B] = {$/;"	l
xs	scala/collection/LinearSeqLike.scala	/^      val xs = these.toList$/;"	l
xs	scala/collection/SeqLike.scala	/^    var xs: List[A] = List()$/;"	l
xs	scala/collection/immutable/HashMap.scala	/^    var xs = Set[K]()$/;"	l
xs	scala/collection/immutable/List.scala	/^    var xs: List[B] = this$/;"	l
xs	scala/collection/mutable/ArrayBuffer.scala	/^    val xs = seq.toList$/;"	l
xs	scala/concurrent/MailBox.scala	/^      var xs = l._1$/;"	l
xs	scala/reflect/ClassManifest.scala	/^          val xs = left ++ supers filterNot seen$/;"	l
xs	scala/xml/Utility.scala	/^      val xs = s drop index$/;"	l
xs1	scala/concurrent/MailBox.scala	/^      var xs1 = xs.next$/;"	l
y	scala/collection/mutable/ArrayStack.scala	/^    val y = new Array[AnyRef](x.length * 2)$/;"	l
y	scala/collection/mutable/ArrayStack.scala	/^    val y = new Array[AnyRef](x.length)$/;"	l
y	scala/concurrent/ops.scala	/^    val y = new SyncVar[Either[Throwable, B]]$/;"	l
y	scala/io/BytePickle.scala	/^      val y = x >>> 7;$/;"	l
y	scala/io/BytePickle.scala	/^    val y = x >>> 7;$/;"	l
y	scala/reflect/generic/PickleBuffer.scala	/^      val y = x >>> 7$/;"	l
y	scala/reflect/generic/PickleBuffer.scala	/^    val y = x >> 8$/;"	l
y	scala/reflect/generic/PickleBuffer.scala	/^    val y = x >>> 7$/;"	l
y	scala/xml/NodeSeq.scala	/^      lazy val y = this(0)$/;"	l
y	scala/xml/parsing/MarkupHandler.scala	/^        val y = f(name, edef)$/;"	l
yc	scala/collection/immutable/List.scala	/^    var yc = ys$/;"	l
ye	scala/math/Ordering.scala	/^          val ye = y.iterator$/;"	l
ye	scala/math/Ordering.scala	/^        val ye = y.iterator$/;"	l
ys	scala/collection/immutable/HashMap.scala	/^    var ys = Set[K]()$/;"	l
ys1	scala/collection/immutable/List.scala	/^          val ys1 = head1 :: mapConserve(ys.tail)(f)$/;"	l
yss	scala/collection/immutable/List.scala	/^    var yss = xss$/;"	l
z	scala/collection/mutable/ListBuffer.scala	/^        val z = cursor.asInstanceOf[::[A]]$/;"	l
z	scala/reflect/Print.scala	/^      val z = (typeParams, typeBounds).zipped map ((tp, tb) => "[" + Print(tb._1) + " :> " + Print(tp) + " :> " + Print(tb._2) + "]")$/;"	l
z	scala/reflect/generic/PickleBuffer.scala	/^    val z = x & 0xff$/;"	l
zc	scala/collection/immutable/List.scala	/^    var zc = zs$/;"	l
zero	scala/collection/generic/BitOperations.scala	/^    def zero(i: Int, mask: Int)                 = (i & mask) == 0    $/;"	m
zero	scala/collection/generic/BitOperations.scala	/^    def zero(i: Long, mask: Long)                  = (i & mask) == 0L$/;"	m
zero	scala/collection/immutable/NumericRange.scala	/^    val zero    = num.zero$/;"	l
zero	scala/math/Numeric.scala	/^  def zero = fromInt(0)$/;"	m
zero	scala/util/parsing/json/Lexer.scala	/^  def zero: Parser[String] = '0' ^^^ "0"$/;"	m
zip	scala/Tuple2.scala	/^  def zip[Repr1, El1, El2, To](implicit w1:   T1 => TLike[El1, Repr1],$/;"	m
zip	scala/Tuple3.scala	/^  def zip[Repr1, El1, El2, El3, To](implicit w1:   T1 => TLike[El1, Repr1],$/;"	m
zip	scala/collection/GenIterableLike.scala	/^  def zip[A1 >: A, B, That](that: GenIterable[B])(implicit bf: CBF[Repr, (A1, B), That]): That$/;"	m
zip	scala/collection/IndexedSeqOptimized.scala	/^  def zip[A1 >: A, B, That](that: GenIterable[B])(implicit bf: CanBuildFrom[Repr, (A1, B), That]): That = that match {$/;"	m
zip	scala/collection/IterableLike.scala	/^  def zip[A1 >: A, B, That](that: GenIterable[B])(implicit bf: CanBuildFrom[Repr, (A1, B), That]): That = {$/;"	m
zip	scala/collection/IterableLike.scala	/^  def zip[A1 >: A, B, That](that: Iterable[B])(implicit bf: CanBuildFrom[Repr, (A1, B), That]): That = $/;"	m
zip	scala/collection/Iterator.scala	/^  def zip[B](that: Iterator[B]) = new Iterator[(A, B)] {$/;"	m
zip	scala/collection/interfaces/IterableMethods.scala	/^  def zip[A1 >: A, B, That](that: GenIterable[B])(implicit bf: CanBuildFrom[This, (A1, B), That]): That$/;"	m
zip	scala/collection/parallel/ParIterableLike.scala	/^  def zip[U >: T, S, That](that: GenIterable[S])(implicit bf: CanBuildFrom[Repr, (U, S), That]): That = if (bf.isParallel && that.isParSeq) {$/;"	m
zip2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def zip2combiner[U >: T, S, That](otherpit: RemainsIterator[S], cb: Combiner[(U, S), That]): Combiner[(U, S), That] = {$/;"	m
zipAll	scala/collection/GenIterableLike.scala	/^  def zipAll[B, A1 >: A, That](that: GenIterable[B], thisElem: A1, thatElem: B)(implicit bf: CBF[Repr, (A1, B), That]): That$/;"	m
zipAll	scala/collection/IterableLike.scala	/^  def zipAll[B, A1 >: A, That](that: GenIterable[B], thisElem: A1, thatElem: B)(implicit bf: CanBuildFrom[Repr, (A1, B), That]): That = {  $/;"	m
zipAll	scala/collection/IterableLike.scala	/^  def zipAll[B, A1 >: A, That](that: Iterable[B], thisElem: A1, thatElem: B)(implicit bf: CanBuildFrom[Repr, (A1, B), That]): That =$/;"	m
zipAll	scala/collection/Iterator.scala	/^  def zipAll[B, A1 >: A, B1 >: B](that: Iterator[B], thisElem: A1, thatElem: B1) = new Iterator[(A1, B1)] {  $/;"	m
zipAll	scala/collection/interfaces/IterableMethods.scala	/^  def zipAll[B, A1 >: A, That](that: GenIterable[B], e1: A1, e2: B)(implicit bf: CanBuildFrom[This, (A1, B), That]): That$/;"	m
zipAll	scala/collection/parallel/ParIterableLike.scala	/^  def zipAll[S, U >: T, That](that: GenIterable[S], thisElem: U, thatElem: S)(implicit bf: CanBuildFrom[Repr, (U, S), That]): That = if (bf.isParallel && that.isParSeq) {$/;"	m
zipAll2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def zipAll2combiner[U >: T, S, That](that: RemainsIterator[S], thiselem: U, thatelem: S, cb: Combiner[(U, S), That]): Combiner[(U, S), That] = {$/;"	m
zipAllParSeq	scala/collection/parallel/RemainsIterator.scala	/^  def zipAllParSeq[S, U >: T, R >: S](that: SeqSplitter[S], thisElem: U, thatElem: R) = new ZippedAll[U, R](that, thisElem, thatElem)$/;"	m
zipFrom	scala/collection/immutable/RedBlack.scala	/^        val zipFrom = findDepth(zipper, smallerDepth)$/;"	l
zipParSeq	scala/collection/parallel/RemainsIterator.scala	/^  def zipParSeq[S](that: SeqSplitter[S]) = new Zipped(that)$/;"	m
zipWithIndex	scala/collection/GenIterableLike.scala	/^  def zipWithIndex[A1 >: A, That](implicit bf: CBF[Repr, (A1, Int), That]): That$/;"	m
zipWithIndex	scala/collection/IndexedSeqOptimized.scala	/^  def zipWithIndex[A1 >: A, That](implicit bf: CanBuildFrom[Repr, (A1, Int), That]): That = {$/;"	m
zipWithIndex	scala/collection/IterableLike.scala	/^  def zipWithIndex[A1 >: A, That](implicit bf: CanBuildFrom[Repr, (A1, Int), That]): That = {$/;"	m
zipWithIndex	scala/collection/Iterator.scala	/^  def zipWithIndex = new Iterator[(A, Int)] {$/;"	m
zipWithIndex	scala/collection/interfaces/IterableMethods.scala	/^  def zipWithIndex[A1 >: A, That](implicit bf: CanBuildFrom[This, (A1, Int), That]): That$/;"	m
zipWithIndex	scala/collection/parallel/ParIterableLike.scala	/^  def zipWithIndex[U >: T, That](implicit bf: CanBuildFrom[Repr, (U, Int), That]): That = this zip immutable.ParRange(0, size, 1, false)$/;"	m
zipped	scala/Tuple2.scala	/^  def zipped[Repr1, El1, Repr2, El2](implicit w1: T1 => TLike[El1, Repr1], w2: T2 => ILike[El2, Repr2]): Zipped[Repr1, El1, Repr2, El2]$/;"	m
zipped	scala/Tuple3.scala	/^  def zipped[Repr1, El1, Repr2, El2, Repr3, El3](implicit w1: T1 => TLike[El1, Repr1],$/;"	m
zipped	scala/collection/parallel/RemainsIterator.scala	/^      val zipped = thisit zipParSeq thatit$/;"	l
zipped2ToTraversable	scala/Predef.scala	/^  implicit def zipped2ToTraversable[El1, El2](zz: Tuple2[_, _]#Zipped[_, El1, _, El2]): Traversable[(El1, El2)] =$/;"	m
zipped3ToTraversable	scala/Predef.scala	/^  implicit def zipped3ToTraversable[El1, El2, El3](zz: Tuple3[_, _, _]#Zipped[_, El1, _, El2, _, El3]): Traversable[(El1, El2, El3)] =$/;"	m
zippedTree	scala/collection/immutable/RedBlack.scala	/^        val zippedTree = zipFrom.tail.foldLeft(union: Tree[B]) { (tree, node) =>$/;"	l
